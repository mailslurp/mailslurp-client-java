/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ConnectorSyncResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class ConnectorSyncResult {
  public static final String SERIALIZED_NAME_EMAIL_SYNC_COUNT = "emailSyncCount";
  @SerializedName(SERIALIZED_NAME_EMAIL_SYNC_COUNT)
  private Long emailSyncCount;

  public static final String SERIALIZED_NAME_LOG_LINES = "logLines";
  @SerializedName(SERIALIZED_NAME_LOG_LINES)
  private List<String> logLines = null;

  public ConnectorSyncResult() {
  }

  public ConnectorSyncResult emailSyncCount(Long emailSyncCount) {
    
    this.emailSyncCount = emailSyncCount;
    return this;
  }

   /**
   * Get emailSyncCount
   * @return emailSyncCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Long getEmailSyncCount() {
    return emailSyncCount;
  }


  public void setEmailSyncCount(Long emailSyncCount) {
    this.emailSyncCount = emailSyncCount;
  }


  public ConnectorSyncResult logLines(List<String> logLines) {
    
    this.logLines = logLines;
    return this;
  }

  public ConnectorSyncResult addLogLinesItem(String logLinesItem) {
    if (this.logLines == null) {
      this.logLines = new ArrayList<>();
    }
    this.logLines.add(logLinesItem);
    return this;
  }

   /**
   * Get logLines
   * @return logLines
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<String> getLogLines() {
    return logLines;
  }


  public void setLogLines(List<String> logLines) {
    this.logLines = logLines;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorSyncResult connectorSyncResult = (ConnectorSyncResult) o;
    return Objects.equals(this.emailSyncCount, connectorSyncResult.emailSyncCount) &&
        Objects.equals(this.logLines, connectorSyncResult.logLines);
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailSyncCount, logLines);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorSyncResult {\n");
    sb.append("    emailSyncCount: ").append(toIndentedString(emailSyncCount)).append("\n");
    sb.append("    logLines: ").append(toIndentedString(logLines)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailSyncCount");
    openapiFields.add("logLines");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emailSyncCount");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectorSyncResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectorSyncResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorSyncResult is not found in the empty JSON string", ConnectorSyncResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConnectorSyncResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorSyncResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorSyncResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("logLines") != null && !jsonObj.get("logLines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `logLines` to be an array in the JSON string but got `%s`", jsonObj.get("logLines").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorSyncResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorSyncResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorSyncResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorSyncResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorSyncResult>() {
           @Override
           public void write(JsonWriter out, ConnectorSyncResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorSyncResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectorSyncResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectorSyncResult
  * @throws IOException if the JSON string is invalid with respect to ConnectorSyncResult
  */
  public static ConnectorSyncResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorSyncResult.class);
  }

 /**
  * Convert an instance of ConnectorSyncResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

