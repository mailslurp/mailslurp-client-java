/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ConnectorSyncSettingsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ConnectorSyncSettingsDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  @javax.annotation.Nonnull
  private UUID connectorId;

  public static final String SERIALIZED_NAME_SYNC_ENABLED = "syncEnabled";
  @SerializedName(SERIALIZED_NAME_SYNC_ENABLED)
  @javax.annotation.Nonnull
  private Boolean syncEnabled;

  /**
   * Gets or Sets syncScheduleType
   */
  @JsonAdapter(SyncScheduleTypeEnum.Adapter.class)
  public enum SyncScheduleTypeEnum {
    INTERVAL("INTERVAL");

    private String value;

    SyncScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncScheduleTypeEnum fromValue(String value) {
      for (SyncScheduleTypeEnum b : SyncScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SyncScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncScheduleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SyncScheduleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_SCHEDULE_TYPE = "syncScheduleType";
  @SerializedName(SERIALIZED_NAME_SYNC_SCHEDULE_TYPE)
  @javax.annotation.Nullable
  private SyncScheduleTypeEnum syncScheduleType;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "syncInterval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  @javax.annotation.Nullable
  private Integer syncInterval;

  public ConnectorSyncSettingsDto() {
  }

  public ConnectorSyncSettingsDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public ConnectorSyncSettingsDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public ConnectorSyncSettingsDto connectorId(@javax.annotation.Nonnull UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nonnull
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(@javax.annotation.Nonnull UUID connectorId) {
    this.connectorId = connectorId;
  }


  public ConnectorSyncSettingsDto syncEnabled(@javax.annotation.Nonnull Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
    return this;
  }

  /**
   * Get syncEnabled
   * @return syncEnabled
   */
  @javax.annotation.Nonnull
  public Boolean getSyncEnabled() {
    return syncEnabled;
  }

  public void setSyncEnabled(@javax.annotation.Nonnull Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
  }


  public ConnectorSyncSettingsDto syncScheduleType(@javax.annotation.Nullable SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
    return this;
  }

  /**
   * Get syncScheduleType
   * @return syncScheduleType
   */
  @javax.annotation.Nullable
  public SyncScheduleTypeEnum getSyncScheduleType() {
    return syncScheduleType;
  }

  public void setSyncScheduleType(@javax.annotation.Nullable SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
  }


  public ConnectorSyncSettingsDto syncInterval(@javax.annotation.Nullable Integer syncInterval) {
    this.syncInterval = syncInterval;
    return this;
  }

  /**
   * Get syncInterval
   * @return syncInterval
   */
  @javax.annotation.Nullable
  public Integer getSyncInterval() {
    return syncInterval;
  }

  public void setSyncInterval(@javax.annotation.Nullable Integer syncInterval) {
    this.syncInterval = syncInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorSyncSettingsDto connectorSyncSettingsDto = (ConnectorSyncSettingsDto) o;
    return Objects.equals(this.id, connectorSyncSettingsDto.id) &&
        Objects.equals(this.userId, connectorSyncSettingsDto.userId) &&
        Objects.equals(this.connectorId, connectorSyncSettingsDto.connectorId) &&
        Objects.equals(this.syncEnabled, connectorSyncSettingsDto.syncEnabled) &&
        Objects.equals(this.syncScheduleType, connectorSyncSettingsDto.syncScheduleType) &&
        Objects.equals(this.syncInterval, connectorSyncSettingsDto.syncInterval);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, connectorId, syncEnabled, syncScheduleType, syncInterval);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorSyncSettingsDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    syncEnabled: ").append(toIndentedString(syncEnabled)).append("\n");
    sb.append("    syncScheduleType: ").append(toIndentedString(syncScheduleType)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("connectorId");
    openapiFields.add("syncEnabled");
    openapiFields.add("syncScheduleType");
    openapiFields.add("syncInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("connectorId");
    openapiRequiredFields.add("syncEnabled");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorSyncSettingsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ConnectorSyncSettingsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorSyncSettingsDto is not found in the empty JSON string", ConnectorSyncSettingsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorSyncSettingsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorSyncSettingsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorSyncSettingsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if ((jsonObj.get("syncScheduleType") != null && !jsonObj.get("syncScheduleType").isJsonNull()) && !jsonObj.get("syncScheduleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncScheduleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncScheduleType").toString()));
      }
      // validate the optional field `syncScheduleType`
      if (jsonObj.get("syncScheduleType") != null && !jsonObj.get("syncScheduleType").isJsonNull()) {
        SyncScheduleTypeEnum.validateJsonElement(jsonObj.get("syncScheduleType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorSyncSettingsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorSyncSettingsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorSyncSettingsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorSyncSettingsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorSyncSettingsDto>() {
           @Override
           public void write(JsonWriter out, ConnectorSyncSettingsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorSyncSettingsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorSyncSettingsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorSyncSettingsDto
   * @throws IOException if the JSON string is invalid with respect to ConnectorSyncSettingsDto
   */
  public static ConnectorSyncSettingsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorSyncSettingsDto.class);
  }

  /**
   * Convert an instance of ConnectorSyncSettingsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

