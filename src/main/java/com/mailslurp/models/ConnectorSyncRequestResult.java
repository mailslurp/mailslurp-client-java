/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.ConnectorSyncRequestResultException;
import com.mailslurp.models.ConnectorSyncResult;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ConnectorSyncRequestResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class ConnectorSyncRequestResult {
  public static final String SERIALIZED_NAME_SYNC_RESULT = "syncResult";
  @SerializedName(SERIALIZED_NAME_SYNC_RESULT)
  private ConnectorSyncResult syncResult;

  public static final String SERIALIZED_NAME_EXCEPTION = "exception";
  @SerializedName(SERIALIZED_NAME_EXCEPTION)
  private ConnectorSyncRequestResultException exception;

  public static final String SERIALIZED_NAME_EVENT_ID = "eventId";
  @SerializedName(SERIALIZED_NAME_EVENT_ID)
  private UUID eventId;

  public ConnectorSyncRequestResult() {
  }

  public ConnectorSyncRequestResult syncResult(ConnectorSyncResult syncResult) {
    
    this.syncResult = syncResult;
    return this;
  }

   /**
   * Get syncResult
   * @return syncResult
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConnectorSyncResult getSyncResult() {
    return syncResult;
  }


  public void setSyncResult(ConnectorSyncResult syncResult) {
    this.syncResult = syncResult;
  }


  public ConnectorSyncRequestResult exception(ConnectorSyncRequestResultException exception) {
    
    this.exception = exception;
    return this;
  }

   /**
   * Get exception
   * @return exception
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConnectorSyncRequestResultException getException() {
    return exception;
  }


  public void setException(ConnectorSyncRequestResultException exception) {
    this.exception = exception;
  }


  public ConnectorSyncRequestResult eventId(UUID eventId) {
    
    this.eventId = eventId;
    return this;
  }

   /**
   * Get eventId
   * @return eventId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getEventId() {
    return eventId;
  }


  public void setEventId(UUID eventId) {
    this.eventId = eventId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorSyncRequestResult connectorSyncRequestResult = (ConnectorSyncRequestResult) o;
    return Objects.equals(this.syncResult, connectorSyncRequestResult.syncResult) &&
        Objects.equals(this.exception, connectorSyncRequestResult.exception) &&
        Objects.equals(this.eventId, connectorSyncRequestResult.eventId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(syncResult, exception, eventId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorSyncRequestResult {\n");
    sb.append("    syncResult: ").append(toIndentedString(syncResult)).append("\n");
    sb.append("    exception: ").append(toIndentedString(exception)).append("\n");
    sb.append("    eventId: ").append(toIndentedString(eventId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("syncResult");
    openapiFields.add("exception");
    openapiFields.add("eventId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectorSyncRequestResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectorSyncRequestResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorSyncRequestResult is not found in the empty JSON string", ConnectorSyncRequestResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConnectorSyncRequestResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorSyncRequestResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `syncResult`
      if (jsonObj.get("syncResult") != null && !jsonObj.get("syncResult").isJsonNull()) {
        ConnectorSyncResult.validateJsonObject(jsonObj.getAsJsonObject("syncResult"));
      }
      // validate the optional field `exception`
      if (jsonObj.get("exception") != null && !jsonObj.get("exception").isJsonNull()) {
        ConnectorSyncRequestResultException.validateJsonObject(jsonObj.getAsJsonObject("exception"));
      }
      if ((jsonObj.get("eventId") != null && !jsonObj.get("eventId").isJsonNull()) && !jsonObj.get("eventId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorSyncRequestResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorSyncRequestResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorSyncRequestResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorSyncRequestResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorSyncRequestResult>() {
           @Override
           public void write(JsonWriter out, ConnectorSyncRequestResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorSyncRequestResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectorSyncRequestResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectorSyncRequestResult
  * @throws IOException if the JSON string is invalid with respect to ConnectorSyncRequestResult
  */
  public static ConnectorSyncRequestResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorSyncRequestResult.class);
  }

 /**
  * Convert an instance of ConnectorSyncRequestResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

