/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.StructuredOutputSchema;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for generating structured content output from an email
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class GenerateStructuredContentEmailOptions {
  public static final String SERIALIZED_NAME_EMAIL_ID = "emailId";
  @SerializedName(SERIALIZED_NAME_EMAIL_ID)
  @javax.annotation.Nonnull
  private UUID emailId;

  /**
   * Content selector to select part of email to operate on
   */
  @JsonAdapter(ContentSelectorEnum.Adapter.class)
  public enum ContentSelectorEnum {
    RAW("RAW"),
    
    BODY("BODY"),
    
    BODY_ATTACHMENTS("BODY_ATTACHMENTS");

    private String value;

    ContentSelectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentSelectorEnum fromValue(String value) {
      for (ContentSelectorEnum b : ContentSelectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ContentSelectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentSelectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentSelectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentSelectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      ContentSelectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_SELECTOR = "contentSelector";
  @SerializedName(SERIALIZED_NAME_CONTENT_SELECTOR)
  @javax.annotation.Nullable
  private ContentSelectorEnum contentSelector;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  @javax.annotation.Nullable
  private String instructions;

  public static final String SERIALIZED_NAME_OUTPUT_SCHEMA = "outputSchema";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCHEMA)
  @javax.annotation.Nullable
  private StructuredOutputSchema outputSchema;

  public static final String SERIALIZED_NAME_TRANSFORM_ID = "transformId";
  @SerializedName(SERIALIZED_NAME_TRANSFORM_ID)
  @javax.annotation.Nullable
  private UUID transformId;

  public GenerateStructuredContentEmailOptions() {
  }

  public GenerateStructuredContentEmailOptions emailId(@javax.annotation.Nonnull UUID emailId) {
    this.emailId = emailId;
    return this;
  }

  /**
   * Email ID to read and pass to AI
   * @return emailId
   */
  @javax.annotation.Nonnull
  public UUID getEmailId() {
    return emailId;
  }

  public void setEmailId(@javax.annotation.Nonnull UUID emailId) {
    this.emailId = emailId;
  }


  public GenerateStructuredContentEmailOptions contentSelector(@javax.annotation.Nullable ContentSelectorEnum contentSelector) {
    this.contentSelector = contentSelector;
    return this;
  }

  /**
   * Content selector to select part of email to operate on
   * @return contentSelector
   */
  @javax.annotation.Nullable
  public ContentSelectorEnum getContentSelector() {
    return contentSelector;
  }

  public void setContentSelector(@javax.annotation.Nullable ContentSelectorEnum contentSelector) {
    this.contentSelector = contentSelector;
  }


  public GenerateStructuredContentEmailOptions instructions(@javax.annotation.Nullable String instructions) {
    this.instructions = instructions;
    return this;
  }

  /**
   * Optional instructions for the AI to follow. Try to be precise and clear. You can include examples and hints.
   * @return instructions
   */
  @javax.annotation.Nullable
  public String getInstructions() {
    return instructions;
  }

  public void setInstructions(@javax.annotation.Nullable String instructions) {
    this.instructions = instructions;
  }


  public GenerateStructuredContentEmailOptions outputSchema(@javax.annotation.Nullable StructuredOutputSchema outputSchema) {
    this.outputSchema = outputSchema;
    return this;
  }

  /**
   * Get outputSchema
   * @return outputSchema
   */
  @javax.annotation.Nullable
  public StructuredOutputSchema getOutputSchema() {
    return outputSchema;
  }

  public void setOutputSchema(@javax.annotation.Nullable StructuredOutputSchema outputSchema) {
    this.outputSchema = outputSchema;
  }


  public GenerateStructuredContentEmailOptions transformId(@javax.annotation.Nullable UUID transformId) {
    this.transformId = transformId;
    return this;
  }

  /**
   * ID of transformer to apply
   * @return transformId
   */
  @javax.annotation.Nullable
  public UUID getTransformId() {
    return transformId;
  }

  public void setTransformId(@javax.annotation.Nullable UUID transformId) {
    this.transformId = transformId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions = (GenerateStructuredContentEmailOptions) o;
    return Objects.equals(this.emailId, generateStructuredContentEmailOptions.emailId) &&
        Objects.equals(this.contentSelector, generateStructuredContentEmailOptions.contentSelector) &&
        Objects.equals(this.instructions, generateStructuredContentEmailOptions.instructions) &&
        Objects.equals(this.outputSchema, generateStructuredContentEmailOptions.outputSchema) &&
        Objects.equals(this.transformId, generateStructuredContentEmailOptions.transformId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(emailId, contentSelector, instructions, outputSchema, transformId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateStructuredContentEmailOptions {\n");
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    contentSelector: ").append(toIndentedString(contentSelector)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    outputSchema: ").append(toIndentedString(outputSchema)).append("\n");
    sb.append("    transformId: ").append(toIndentedString(transformId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("emailId");
    openapiFields.add("contentSelector");
    openapiFields.add("instructions");
    openapiFields.add("outputSchema");
    openapiFields.add("transformId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emailId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateStructuredContentEmailOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!GenerateStructuredContentEmailOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateStructuredContentEmailOptions is not found in the empty JSON string", GenerateStructuredContentEmailOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateStructuredContentEmailOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateStructuredContentEmailOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateStructuredContentEmailOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("emailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailId").toString()));
      }
      if ((jsonObj.get("contentSelector") != null && !jsonObj.get("contentSelector").isJsonNull()) && !jsonObj.get("contentSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentSelector").toString()));
      }
      // validate the optional field `contentSelector`
      if (jsonObj.get("contentSelector") != null && !jsonObj.get("contentSelector").isJsonNull()) {
        ContentSelectorEnum.validateJsonElement(jsonObj.get("contentSelector"));
      }
      if ((jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) && !jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      // validate the optional field `outputSchema`
      if (jsonObj.get("outputSchema") != null && !jsonObj.get("outputSchema").isJsonNull()) {
        StructuredOutputSchema.validateJsonElement(jsonObj.get("outputSchema"));
      }
      if ((jsonObj.get("transformId") != null && !jsonObj.get("transformId").isJsonNull()) && !jsonObj.get("transformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transformId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateStructuredContentEmailOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateStructuredContentEmailOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateStructuredContentEmailOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateStructuredContentEmailOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateStructuredContentEmailOptions>() {
           @Override
           public void write(JsonWriter out, GenerateStructuredContentEmailOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateStructuredContentEmailOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateStructuredContentEmailOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateStructuredContentEmailOptions
   * @throws IOException if the JSON string is invalid with respect to GenerateStructuredContentEmailOptions
   */
  public static GenerateStructuredContentEmailOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateStructuredContentEmailOptions.class);
  }

  /**
   * Convert an instance of GenerateStructuredContentEmailOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

