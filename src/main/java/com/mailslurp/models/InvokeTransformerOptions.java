/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.StructuredOutputSchema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * InvokeTransformerOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class InvokeTransformerOptions {
  public static final String SERIALIZED_NAME_AI_TRANSFORM_ID = "aiTransformId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_ID)
  @javax.annotation.Nullable
  private UUID aiTransformId;

  public static final String SERIALIZED_NAME_AI_TRANSFORM_MAPPING_ID = "aiTransformMappingId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_MAPPING_ID)
  @javax.annotation.Nullable
  private UUID aiTransformMappingId;

  public static final String SERIALIZED_NAME_RAW_INPUT = "rawInput";
  @SerializedName(SERIALIZED_NAME_RAW_INPUT)
  @javax.annotation.Nullable
  private String rawInput;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  @javax.annotation.Nullable
  private String entityId;

  /**
   * Gets or Sets entityType
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    EMAIL("EMAIL"),
    
    SMS("SMS"),
    
    ATTACHMENT("ATTACHMENT");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  @javax.annotation.Nullable
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_RAW_CONDITIONS = "rawConditions";
  @SerializedName(SERIALIZED_NAME_RAW_CONDITIONS)
  @javax.annotation.Nullable
  private List<String> rawConditions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAW_INSTRUCTIONS = "rawInstructions";
  @SerializedName(SERIALIZED_NAME_RAW_INSTRUCTIONS)
  @javax.annotation.Nullable
  private List<String> rawInstructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_RAW_OUTPUT_SCHEMA = "rawOutputSchema";
  @SerializedName(SERIALIZED_NAME_RAW_OUTPUT_SCHEMA)
  @javax.annotation.Nullable
  private StructuredOutputSchema rawOutputSchema;

  /**
   * Gets or Sets contentSelector
   */
  @JsonAdapter(ContentSelectorEnum.Adapter.class)
  public enum ContentSelectorEnum {
    RAW("RAW"),
    
    BODY("BODY"),
    
    BODY_ATTACHMENTS("BODY_ATTACHMENTS");

    private String value;

    ContentSelectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentSelectorEnum fromValue(String value) {
      for (ContentSelectorEnum b : ContentSelectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentSelectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentSelectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentSelectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentSelectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      ContentSelectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_SELECTOR = "contentSelector";
  @SerializedName(SERIALIZED_NAME_CONTENT_SELECTOR)
  @javax.annotation.Nullable
  private ContentSelectorEnum contentSelector;

  public InvokeTransformerOptions() {
  }

  public InvokeTransformerOptions aiTransformId(@javax.annotation.Nullable UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
    return this;
  }

  /**
   * Get aiTransformId
   * @return aiTransformId
   */
  @javax.annotation.Nullable
  public UUID getAiTransformId() {
    return aiTransformId;
  }

  public void setAiTransformId(@javax.annotation.Nullable UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
  }


  public InvokeTransformerOptions aiTransformMappingId(@javax.annotation.Nullable UUID aiTransformMappingId) {
    this.aiTransformMappingId = aiTransformMappingId;
    return this;
  }

  /**
   * Get aiTransformMappingId
   * @return aiTransformMappingId
   */
  @javax.annotation.Nullable
  public UUID getAiTransformMappingId() {
    return aiTransformMappingId;
  }

  public void setAiTransformMappingId(@javax.annotation.Nullable UUID aiTransformMappingId) {
    this.aiTransformMappingId = aiTransformMappingId;
  }


  public InvokeTransformerOptions rawInput(@javax.annotation.Nullable String rawInput) {
    this.rawInput = rawInput;
    return this;
  }

  /**
   * Get rawInput
   * @return rawInput
   */
  @javax.annotation.Nullable
  public String getRawInput() {
    return rawInput;
  }

  public void setRawInput(@javax.annotation.Nullable String rawInput) {
    this.rawInput = rawInput;
  }


  public InvokeTransformerOptions entityId(@javax.annotation.Nullable String entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nullable
  public String getEntityId() {
    return entityId;
  }

  public void setEntityId(@javax.annotation.Nullable String entityId) {
    this.entityId = entityId;
  }


  public InvokeTransformerOptions entityType(@javax.annotation.Nullable EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(@javax.annotation.Nullable EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public InvokeTransformerOptions rawConditions(@javax.annotation.Nullable List<String> rawConditions) {
    this.rawConditions = rawConditions;
    return this;
  }

  public InvokeTransformerOptions addRawConditionsItem(String rawConditionsItem) {
    if (this.rawConditions == null) {
      this.rawConditions = new ArrayList<>();
    }
    this.rawConditions.add(rawConditionsItem);
    return this;
  }

  /**
   * Get rawConditions
   * @return rawConditions
   */
  @javax.annotation.Nullable
  public List<String> getRawConditions() {
    return rawConditions;
  }

  public void setRawConditions(@javax.annotation.Nullable List<String> rawConditions) {
    this.rawConditions = rawConditions;
  }


  public InvokeTransformerOptions rawInstructions(@javax.annotation.Nullable List<String> rawInstructions) {
    this.rawInstructions = rawInstructions;
    return this;
  }

  public InvokeTransformerOptions addRawInstructionsItem(String rawInstructionsItem) {
    if (this.rawInstructions == null) {
      this.rawInstructions = new ArrayList<>();
    }
    this.rawInstructions.add(rawInstructionsItem);
    return this;
  }

  /**
   * Get rawInstructions
   * @return rawInstructions
   */
  @javax.annotation.Nullable
  public List<String> getRawInstructions() {
    return rawInstructions;
  }

  public void setRawInstructions(@javax.annotation.Nullable List<String> rawInstructions) {
    this.rawInstructions = rawInstructions;
  }


  public InvokeTransformerOptions rawOutputSchema(@javax.annotation.Nullable StructuredOutputSchema rawOutputSchema) {
    this.rawOutputSchema = rawOutputSchema;
    return this;
  }

  /**
   * Get rawOutputSchema
   * @return rawOutputSchema
   */
  @javax.annotation.Nullable
  public StructuredOutputSchema getRawOutputSchema() {
    return rawOutputSchema;
  }

  public void setRawOutputSchema(@javax.annotation.Nullable StructuredOutputSchema rawOutputSchema) {
    this.rawOutputSchema = rawOutputSchema;
  }


  public InvokeTransformerOptions contentSelector(@javax.annotation.Nullable ContentSelectorEnum contentSelector) {
    this.contentSelector = contentSelector;
    return this;
  }

  /**
   * Get contentSelector
   * @return contentSelector
   */
  @javax.annotation.Nullable
  public ContentSelectorEnum getContentSelector() {
    return contentSelector;
  }

  public void setContentSelector(@javax.annotation.Nullable ContentSelectorEnum contentSelector) {
    this.contentSelector = contentSelector;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvokeTransformerOptions invokeTransformerOptions = (InvokeTransformerOptions) o;
    return Objects.equals(this.aiTransformId, invokeTransformerOptions.aiTransformId) &&
        Objects.equals(this.aiTransformMappingId, invokeTransformerOptions.aiTransformMappingId) &&
        Objects.equals(this.rawInput, invokeTransformerOptions.rawInput) &&
        Objects.equals(this.entityId, invokeTransformerOptions.entityId) &&
        Objects.equals(this.entityType, invokeTransformerOptions.entityType) &&
        Objects.equals(this.rawConditions, invokeTransformerOptions.rawConditions) &&
        Objects.equals(this.rawInstructions, invokeTransformerOptions.rawInstructions) &&
        Objects.equals(this.rawOutputSchema, invokeTransformerOptions.rawOutputSchema) &&
        Objects.equals(this.contentSelector, invokeTransformerOptions.contentSelector);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(aiTransformId, aiTransformMappingId, rawInput, entityId, entityType, rawConditions, rawInstructions, rawOutputSchema, contentSelector);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvokeTransformerOptions {\n");
    sb.append("    aiTransformId: ").append(toIndentedString(aiTransformId)).append("\n");
    sb.append("    aiTransformMappingId: ").append(toIndentedString(aiTransformMappingId)).append("\n");
    sb.append("    rawInput: ").append(toIndentedString(rawInput)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    rawConditions: ").append(toIndentedString(rawConditions)).append("\n");
    sb.append("    rawInstructions: ").append(toIndentedString(rawInstructions)).append("\n");
    sb.append("    rawOutputSchema: ").append(toIndentedString(rawOutputSchema)).append("\n");
    sb.append("    contentSelector: ").append(toIndentedString(contentSelector)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aiTransformId");
    openapiFields.add("aiTransformMappingId");
    openapiFields.add("rawInput");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("rawConditions");
    openapiFields.add("rawInstructions");
    openapiFields.add("rawOutputSchema");
    openapiFields.add("contentSelector");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvokeTransformerOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!InvokeTransformerOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvokeTransformerOptions is not found in the empty JSON string", InvokeTransformerOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvokeTransformerOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvokeTransformerOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("aiTransformId") != null && !jsonObj.get("aiTransformId").isJsonNull()) && !jsonObj.get("aiTransformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformId").toString()));
      }
      if ((jsonObj.get("aiTransformMappingId") != null && !jsonObj.get("aiTransformMappingId").isJsonNull()) && !jsonObj.get("aiTransformMappingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformMappingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformMappingId").toString()));
      }
      if ((jsonObj.get("rawInput") != null && !jsonObj.get("rawInput").isJsonNull()) && !jsonObj.get("rawInput").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawInput` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawInput").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rawConditions") != null && !jsonObj.get("rawConditions").isJsonNull() && !jsonObj.get("rawConditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawConditions` to be an array in the JSON string but got `%s`", jsonObj.get("rawConditions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("rawInstructions") != null && !jsonObj.get("rawInstructions").isJsonNull() && !jsonObj.get("rawInstructions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("rawInstructions").toString()));
      }
      // validate the optional field `rawOutputSchema`
      if (jsonObj.get("rawOutputSchema") != null && !jsonObj.get("rawOutputSchema").isJsonNull()) {
        StructuredOutputSchema.validateJsonElement(jsonObj.get("rawOutputSchema"));
      }
      if ((jsonObj.get("contentSelector") != null && !jsonObj.get("contentSelector").isJsonNull()) && !jsonObj.get("contentSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentSelector").toString()));
      }
      // validate the optional field `contentSelector`
      if (jsonObj.get("contentSelector") != null && !jsonObj.get("contentSelector").isJsonNull()) {
        ContentSelectorEnum.validateJsonElement(jsonObj.get("contentSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvokeTransformerOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvokeTransformerOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvokeTransformerOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvokeTransformerOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<InvokeTransformerOptions>() {
           @Override
           public void write(JsonWriter out, InvokeTransformerOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvokeTransformerOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvokeTransformerOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvokeTransformerOptions
   * @throws IOException if the JSON string is invalid with respect to InvokeTransformerOptions
   */
  public static InvokeTransformerOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvokeTransformerOptions.class);
  }

  /**
   * Convert an instance of InvokeTransformerOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

