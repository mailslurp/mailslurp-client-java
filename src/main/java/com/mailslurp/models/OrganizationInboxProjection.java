/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Organization team inbox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T10:02:43.973907603Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class OrganizationInboxProjection {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  @javax.annotation.Nullable
  private UUID domainId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private String emailAddress;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  @javax.annotation.Nonnull
  private Boolean favourite;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  @javax.annotation.Nullable
  private List<String> tags;

  public static final String SERIALIZED_NAME_TEAM_ACCESS = "teamAccess";
  @SerializedName(SERIALIZED_NAME_TEAM_ACCESS)
  @javax.annotation.Nonnull
  private Boolean teamAccess;

  /**
   * Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
   */
  @JsonAdapter(InboxTypeEnum.Adapter.class)
  public enum InboxTypeEnum {
    HTTP_INBOX("HTTP_INBOX"),
    
    SMTP_INBOX("SMTP_INBOX");

    private String value;

    InboxTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static InboxTypeEnum fromValue(String value) {
      for (InboxTypeEnum b : InboxTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<InboxTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final InboxTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public InboxTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return InboxTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      InboxTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_INBOX_TYPE = "inboxType";
  @SerializedName(SERIALIZED_NAME_INBOX_TYPE)
  @javax.annotation.Nullable
  private InboxTypeEnum inboxType;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  @javax.annotation.Nonnull
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_VIRTUAL_INBOX = "virtualInbox";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_INBOX)
  @javax.annotation.Nonnull
  private Boolean virtualInbox;

  /**
   * Inbox function if used as a primitive for another system.
   */
  @JsonAdapter(FunctionsAsEnum.Adapter.class)
  public enum FunctionsAsEnum {
    ALIAS("ALIAS"),
    
    THREAD("THREAD"),
    
    CATCH_ALL("CATCH_ALL"),
    
    CONNECTOR("CONNECTOR"),
    
    ACCOUNT("ACCOUNT"),
    
    GUEST("GUEST"),
    
    OAUTH_CONNECTION_GMAIL("OAUTH_CONNECTION_GMAIL");

    private String value;

    FunctionsAsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FunctionsAsEnum fromValue(String value) {
      for (FunctionsAsEnum b : FunctionsAsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<FunctionsAsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FunctionsAsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FunctionsAsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FunctionsAsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      FunctionsAsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FUNCTIONS_AS = "functionsAs";
  @SerializedName(SERIALIZED_NAME_FUNCTIONS_AS)
  @javax.annotation.Nullable
  private FunctionsAsEnum functionsAs;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expiresAt";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  /**
   * Region of the inbox
   */
  @JsonAdapter(AccountRegionEnum.Adapter.class)
  public enum AccountRegionEnum {
    US_WEST_2("US_WEST_2");

    private String value;

    AccountRegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AccountRegionEnum fromValue(String value) {
      for (AccountRegionEnum b : AccountRegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<AccountRegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AccountRegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AccountRegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AccountRegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      AccountRegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ACCOUNT_REGION = "accountRegion";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_REGION)
  @javax.annotation.Nullable
  private AccountRegionEnum accountRegion;

  public OrganizationInboxProjection() {
  }

  public OrganizationInboxProjection id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the inbox. The ID is a UUID-V4 format string. Use the inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress property for the email address or the inbox. To get emails in an inbox use the WaitFor and Inbox Controller methods &#x60;waitForLatestEmail&#x60; and &#x60;getEmails&#x60; methods respectively. Inboxes can be used with aliases to forward emails automatically.
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public OrganizationInboxProjection domainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * ID of custom domain used by the inbox if any
   * @return domainId
   */
  @javax.annotation.Nullable
  public UUID getDomainId() {
    return domainId;
  }

  public void setDomainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
  }


  public OrganizationInboxProjection createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the inbox was created. Time stamps are in ISO DateTime Format &#x60;yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX&#x60; e.g. &#x60;2000-10-31T01:30:00.000-05:00&#x60;.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OrganizationInboxProjection name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the inbox and used as the sender name when sending emails .Displayed in the dashboard for easier search
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public OrganizationInboxProjection emailAddress(@javax.annotation.Nullable String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * The inbox&#39;s email address. Inbox projections and previews may not include the email address. To view the email address fetch the inbox entity directly. Send an email to this address and the inbox will receive and store it for you. Note the email address in MailSlurp match characters exactly and are case sensitive so &#x60;+123&#x60; additions are considered different addresses. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID.
   * @return emailAddress
   */
  @javax.annotation.Nullable
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(@javax.annotation.Nullable String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public OrganizationInboxProjection favourite(@javax.annotation.Nonnull Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Is the inbox a favorite inbox. Make an inbox a favorite is typically done in the dashboard for quick access or filtering
   * @return favourite
   */
  @javax.annotation.Nonnull
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(@javax.annotation.Nonnull Boolean favourite) {
    this.favourite = favourite;
  }


  public OrganizationInboxProjection tags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
    return this;
  }

  public OrganizationInboxProjection addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI.
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(@javax.annotation.Nullable List<String> tags) {
    this.tags = tags;
  }


  public OrganizationInboxProjection teamAccess(@javax.annotation.Nonnull Boolean teamAccess) {
    this.teamAccess = teamAccess;
    return this;
  }

  /**
   * Does inbox permit team access for organization team members. If so team users can use inbox and emails associated with it. See the team access guide at https://www.mailslurp.com/guides/team-email-account-sharing/
   * @return teamAccess
   */
  @javax.annotation.Nonnull
  public Boolean getTeamAccess() {
    return teamAccess;
  }

  public void setTeamAccess(@javax.annotation.Nonnull Boolean teamAccess) {
    this.teamAccess = teamAccess;
  }


  public OrganizationInboxProjection inboxType(@javax.annotation.Nullable InboxTypeEnum inboxType) {
    this.inboxType = inboxType;
    return this;
  }

  /**
   * Type of inbox. HTTP inboxes are faster and better for most cases. SMTP inboxes are more suited for public facing inbound messages (but cannot send).
   * @return inboxType
   */
  @javax.annotation.Nullable
  public InboxTypeEnum getInboxType() {
    return inboxType;
  }

  public void setInboxType(@javax.annotation.Nullable InboxTypeEnum inboxType) {
    this.inboxType = inboxType;
  }


  public OrganizationInboxProjection readOnly(@javax.annotation.Nonnull Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * Is the inbox readOnly for the caller. Read only means can not be deleted or modified. This flag is present when using team accounts and shared inboxes.
   * @return readOnly
   */
  @javax.annotation.Nonnull
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(@javax.annotation.Nonnull Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public OrganizationInboxProjection virtualInbox(@javax.annotation.Nonnull Boolean virtualInbox) {
    this.virtualInbox = virtualInbox;
    return this;
  }

  /**
   * Virtual inbox can receive email but will not send emails to real recipients. Will save sent email record but never send an actual email. Perfect for testing mail server actions.
   * @return virtualInbox
   */
  @javax.annotation.Nonnull
  public Boolean getVirtualInbox() {
    return virtualInbox;
  }

  public void setVirtualInbox(@javax.annotation.Nonnull Boolean virtualInbox) {
    this.virtualInbox = virtualInbox;
  }


  public OrganizationInboxProjection functionsAs(@javax.annotation.Nullable FunctionsAsEnum functionsAs) {
    this.functionsAs = functionsAs;
    return this;
  }

  /**
   * Inbox function if used as a primitive for another system.
   * @return functionsAs
   */
  @javax.annotation.Nullable
  public FunctionsAsEnum getFunctionsAs() {
    return functionsAs;
  }

  public void setFunctionsAs(@javax.annotation.Nullable FunctionsAsEnum functionsAs) {
    this.functionsAs = functionsAs;
  }


  public OrganizationInboxProjection userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of user that inbox belongs to
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public OrganizationInboxProjection description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of an inbox for labelling and searching purposes
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public OrganizationInboxProjection expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * Inbox expiration time. When, if ever, the inbox should expire and be deleted. If null then this inbox is permanent and the emails in it won&#39;t be deleted. This is the default behavior unless expiration date is set. If an expiration date is set and the time is reached MailSlurp will expire the inbox and move it to an expired inbox entity. You can still access the emails belonging to it but it can no longer send or receive email.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }

  public void setExpiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public OrganizationInboxProjection accountRegion(@javax.annotation.Nullable AccountRegionEnum accountRegion) {
    this.accountRegion = accountRegion;
    return this;
  }

  /**
   * Region of the inbox
   * @return accountRegion
   */
  @javax.annotation.Nullable
  public AccountRegionEnum getAccountRegion() {
    return accountRegion;
  }

  public void setAccountRegion(@javax.annotation.Nullable AccountRegionEnum accountRegion) {
    this.accountRegion = accountRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrganizationInboxProjection organizationInboxProjection = (OrganizationInboxProjection) o;
    return Objects.equals(this.id, organizationInboxProjection.id) &&
        Objects.equals(this.domainId, organizationInboxProjection.domainId) &&
        Objects.equals(this.createdAt, organizationInboxProjection.createdAt) &&
        Objects.equals(this.name, organizationInboxProjection.name) &&
        Objects.equals(this.emailAddress, organizationInboxProjection.emailAddress) &&
        Objects.equals(this.favourite, organizationInboxProjection.favourite) &&
        Objects.equals(this.tags, organizationInboxProjection.tags) &&
        Objects.equals(this.teamAccess, organizationInboxProjection.teamAccess) &&
        Objects.equals(this.inboxType, organizationInboxProjection.inboxType) &&
        Objects.equals(this.readOnly, organizationInboxProjection.readOnly) &&
        Objects.equals(this.virtualInbox, organizationInboxProjection.virtualInbox) &&
        Objects.equals(this.functionsAs, organizationInboxProjection.functionsAs) &&
        Objects.equals(this.userId, organizationInboxProjection.userId) &&
        Objects.equals(this.description, organizationInboxProjection.description) &&
        Objects.equals(this.expiresAt, organizationInboxProjection.expiresAt) &&
        Objects.equals(this.accountRegion, organizationInboxProjection.accountRegion);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, domainId, createdAt, name, emailAddress, favourite, tags, teamAccess, inboxType, readOnly, virtualInbox, functionsAs, userId, description, expiresAt, accountRegion);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrganizationInboxProjection {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    teamAccess: ").append(toIndentedString(teamAccess)).append("\n");
    sb.append("    inboxType: ").append(toIndentedString(inboxType)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    virtualInbox: ").append(toIndentedString(virtualInbox)).append("\n");
    sb.append("    functionsAs: ").append(toIndentedString(functionsAs)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    accountRegion: ").append(toIndentedString(accountRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("domainId");
    openapiFields.add("createdAt");
    openapiFields.add("name");
    openapiFields.add("emailAddress");
    openapiFields.add("favourite");
    openapiFields.add("tags");
    openapiFields.add("teamAccess");
    openapiFields.add("inboxType");
    openapiFields.add("readOnly");
    openapiFields.add("virtualInbox");
    openapiFields.add("functionsAs");
    openapiFields.add("userId");
    openapiFields.add("description");
    openapiFields.add("expiresAt");
    openapiFields.add("accountRegion");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("emailAddress");
    openapiRequiredFields.add("favourite");
    openapiRequiredFields.add("teamAccess");
    openapiRequiredFields.add("readOnly");
    openapiRequiredFields.add("virtualInbox");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to OrganizationInboxProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!OrganizationInboxProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrganizationInboxProjection is not found in the empty JSON string", OrganizationInboxProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!OrganizationInboxProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrganizationInboxProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrganizationInboxProjection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("emailAddress") != null && !jsonObj.get("emailAddress").isJsonNull()) && !jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
      if ((jsonObj.get("inboxType") != null && !jsonObj.get("inboxType").isJsonNull()) && !jsonObj.get("inboxType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxType").toString()));
      }
      // validate the optional field `inboxType`
      if (jsonObj.get("inboxType") != null && !jsonObj.get("inboxType").isJsonNull()) {
        InboxTypeEnum.validateJsonElement(jsonObj.get("inboxType"));
      }
      if ((jsonObj.get("functionsAs") != null && !jsonObj.get("functionsAs").isJsonNull()) && !jsonObj.get("functionsAs").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `functionsAs` to be a primitive type in the JSON string but got `%s`", jsonObj.get("functionsAs").toString()));
      }
      // validate the optional field `functionsAs`
      if (jsonObj.get("functionsAs") != null && !jsonObj.get("functionsAs").isJsonNull()) {
        FunctionsAsEnum.validateJsonElement(jsonObj.get("functionsAs"));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("accountRegion") != null && !jsonObj.get("accountRegion").isJsonNull()) && !jsonObj.get("accountRegion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountRegion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountRegion").toString()));
      }
      // validate the optional field `accountRegion`
      if (jsonObj.get("accountRegion") != null && !jsonObj.get("accountRegion").isJsonNull()) {
        AccountRegionEnum.validateJsonElement(jsonObj.get("accountRegion"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrganizationInboxProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrganizationInboxProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrganizationInboxProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrganizationInboxProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<OrganizationInboxProjection>() {
           @Override
           public void write(JsonWriter out, OrganizationInboxProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrganizationInboxProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of OrganizationInboxProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of OrganizationInboxProjection
   * @throws IOException if the JSON string is invalid with respect to OrganizationInboxProjection
   */
  public static OrganizationInboxProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrganizationInboxProjection.class);
  }

  /**
   * Convert an instance of OrganizationInboxProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

