/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Access details for inbox using SMTP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class SmtpAccessDetails {
  public static final String SERIALIZED_NAME_SECURE_SMTP_SERVER_HOST = "secureSmtpServerHost";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_SERVER_HOST)
  @javax.annotation.Nonnull
  private String secureSmtpServerHost;

  public static final String SERIALIZED_NAME_SECURE_SMTP_SERVER_PORT = "secureSmtpServerPort";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_SERVER_PORT)
  @javax.annotation.Nonnull
  private Integer secureSmtpServerPort;

  public static final String SERIALIZED_NAME_SECURE_SMTP_USERNAME = "secureSmtpUsername";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_USERNAME)
  @javax.annotation.Nonnull
  private String secureSmtpUsername;

  public static final String SERIALIZED_NAME_SECURE_SMTP_PASSWORD = "secureSmtpPassword";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_PASSWORD)
  @javax.annotation.Nonnull
  private String secureSmtpPassword;

  public static final String SERIALIZED_NAME_SMTP_SERVER_HOST = "smtpServerHost";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER_HOST)
  @javax.annotation.Nonnull
  private String smtpServerHost;

  public static final String SERIALIZED_NAME_SMTP_SERVER_PORT = "smtpServerPort";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER_PORT)
  @javax.annotation.Nonnull
  private Integer smtpServerPort;

  public static final String SERIALIZED_NAME_SMTP_USERNAME = "smtpUsername";
  @SerializedName(SERIALIZED_NAME_SMTP_USERNAME)
  @javax.annotation.Nonnull
  private String smtpUsername;

  public static final String SERIALIZED_NAME_SMTP_PASSWORD = "smtpPassword";
  @SerializedName(SERIALIZED_NAME_SMTP_PASSWORD)
  @javax.annotation.Nonnull
  private String smtpPassword;

  public static final String SERIALIZED_NAME_MAIL_FROM_DOMAIN = "mailFromDomain";
  @SerializedName(SERIALIZED_NAME_MAIL_FROM_DOMAIN)
  @javax.annotation.Nullable
  private String mailFromDomain;

  public SmtpAccessDetails() {
  }

  public SmtpAccessDetails secureSmtpServerHost(@javax.annotation.Nonnull String secureSmtpServerHost) {
    this.secureSmtpServerHost = secureSmtpServerHost;
    return this;
  }

  /**
   * Secure TLS SMTP server host domain
   * @return secureSmtpServerHost
   */
  @javax.annotation.Nonnull
  public String getSecureSmtpServerHost() {
    return secureSmtpServerHost;
  }

  public void setSecureSmtpServerHost(@javax.annotation.Nonnull String secureSmtpServerHost) {
    this.secureSmtpServerHost = secureSmtpServerHost;
  }


  public SmtpAccessDetails secureSmtpServerPort(@javax.annotation.Nonnull Integer secureSmtpServerPort) {
    this.secureSmtpServerPort = secureSmtpServerPort;
    return this;
  }

  /**
   * Secure TLS SMTP server host port
   * @return secureSmtpServerPort
   */
  @javax.annotation.Nonnull
  public Integer getSecureSmtpServerPort() {
    return secureSmtpServerPort;
  }

  public void setSecureSmtpServerPort(@javax.annotation.Nonnull Integer secureSmtpServerPort) {
    this.secureSmtpServerPort = secureSmtpServerPort;
  }


  public SmtpAccessDetails secureSmtpUsername(@javax.annotation.Nonnull String secureSmtpUsername) {
    this.secureSmtpUsername = secureSmtpUsername;
    return this;
  }

  /**
   * Secure TLS SMTP username for login
   * @return secureSmtpUsername
   */
  @javax.annotation.Nonnull
  public String getSecureSmtpUsername() {
    return secureSmtpUsername;
  }

  public void setSecureSmtpUsername(@javax.annotation.Nonnull String secureSmtpUsername) {
    this.secureSmtpUsername = secureSmtpUsername;
  }


  public SmtpAccessDetails secureSmtpPassword(@javax.annotation.Nonnull String secureSmtpPassword) {
    this.secureSmtpPassword = secureSmtpPassword;
    return this;
  }

  /**
   * Secure TLS SMTP password for login
   * @return secureSmtpPassword
   */
  @javax.annotation.Nonnull
  public String getSecureSmtpPassword() {
    return secureSmtpPassword;
  }

  public void setSecureSmtpPassword(@javax.annotation.Nonnull String secureSmtpPassword) {
    this.secureSmtpPassword = secureSmtpPassword;
  }


  public SmtpAccessDetails smtpServerHost(@javax.annotation.Nonnull String smtpServerHost) {
    this.smtpServerHost = smtpServerHost;
    return this;
  }

  /**
   * SMTP server host domain
   * @return smtpServerHost
   */
  @javax.annotation.Nonnull
  public String getSmtpServerHost() {
    return smtpServerHost;
  }

  public void setSmtpServerHost(@javax.annotation.Nonnull String smtpServerHost) {
    this.smtpServerHost = smtpServerHost;
  }


  public SmtpAccessDetails smtpServerPort(@javax.annotation.Nonnull Integer smtpServerPort) {
    this.smtpServerPort = smtpServerPort;
    return this;
  }

  /**
   * SMTP server host port
   * @return smtpServerPort
   */
  @javax.annotation.Nonnull
  public Integer getSmtpServerPort() {
    return smtpServerPort;
  }

  public void setSmtpServerPort(@javax.annotation.Nonnull Integer smtpServerPort) {
    this.smtpServerPort = smtpServerPort;
  }


  public SmtpAccessDetails smtpUsername(@javax.annotation.Nonnull String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

  /**
   * SMTP username for login
   * @return smtpUsername
   */
  @javax.annotation.Nonnull
  public String getSmtpUsername() {
    return smtpUsername;
  }

  public void setSmtpUsername(@javax.annotation.Nonnull String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public SmtpAccessDetails smtpPassword(@javax.annotation.Nonnull String smtpPassword) {
    this.smtpPassword = smtpPassword;
    return this;
  }

  /**
   * SMTP password for login
   * @return smtpPassword
   */
  @javax.annotation.Nonnull
  public String getSmtpPassword() {
    return smtpPassword;
  }

  public void setSmtpPassword(@javax.annotation.Nonnull String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  public SmtpAccessDetails mailFromDomain(@javax.annotation.Nullable String mailFromDomain) {
    this.mailFromDomain = mailFromDomain;
    return this;
  }

  /**
   * Mail from domain or SMTP HELO value
   * @return mailFromDomain
   */
  @javax.annotation.Nullable
  public String getMailFromDomain() {
    return mailFromDomain;
  }

  public void setMailFromDomain(@javax.annotation.Nullable String mailFromDomain) {
    this.mailFromDomain = mailFromDomain;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SmtpAccessDetails smtpAccessDetails = (SmtpAccessDetails) o;
    return Objects.equals(this.secureSmtpServerHost, smtpAccessDetails.secureSmtpServerHost) &&
        Objects.equals(this.secureSmtpServerPort, smtpAccessDetails.secureSmtpServerPort) &&
        Objects.equals(this.secureSmtpUsername, smtpAccessDetails.secureSmtpUsername) &&
        Objects.equals(this.secureSmtpPassword, smtpAccessDetails.secureSmtpPassword) &&
        Objects.equals(this.smtpServerHost, smtpAccessDetails.smtpServerHost) &&
        Objects.equals(this.smtpServerPort, smtpAccessDetails.smtpServerPort) &&
        Objects.equals(this.smtpUsername, smtpAccessDetails.smtpUsername) &&
        Objects.equals(this.smtpPassword, smtpAccessDetails.smtpPassword) &&
        Objects.equals(this.mailFromDomain, smtpAccessDetails.mailFromDomain);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(secureSmtpServerHost, secureSmtpServerPort, secureSmtpUsername, secureSmtpPassword, smtpServerHost, smtpServerPort, smtpUsername, smtpPassword, mailFromDomain);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SmtpAccessDetails {\n");
    sb.append("    secureSmtpServerHost: ").append(toIndentedString(secureSmtpServerHost)).append("\n");
    sb.append("    secureSmtpServerPort: ").append(toIndentedString(secureSmtpServerPort)).append("\n");
    sb.append("    secureSmtpUsername: ").append(toIndentedString(secureSmtpUsername)).append("\n");
    sb.append("    secureSmtpPassword: ").append(toIndentedString(secureSmtpPassword)).append("\n");
    sb.append("    smtpServerHost: ").append(toIndentedString(smtpServerHost)).append("\n");
    sb.append("    smtpServerPort: ").append(toIndentedString(smtpServerPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    mailFromDomain: ").append(toIndentedString(mailFromDomain)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("secureSmtpServerHost");
    openapiFields.add("secureSmtpServerPort");
    openapiFields.add("secureSmtpUsername");
    openapiFields.add("secureSmtpPassword");
    openapiFields.add("smtpServerHost");
    openapiFields.add("smtpServerPort");
    openapiFields.add("smtpUsername");
    openapiFields.add("smtpPassword");
    openapiFields.add("mailFromDomain");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("secureSmtpServerHost");
    openapiRequiredFields.add("secureSmtpServerPort");
    openapiRequiredFields.add("secureSmtpUsername");
    openapiRequiredFields.add("secureSmtpPassword");
    openapiRequiredFields.add("smtpServerHost");
    openapiRequiredFields.add("smtpServerPort");
    openapiRequiredFields.add("smtpUsername");
    openapiRequiredFields.add("smtpPassword");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SmtpAccessDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!SmtpAccessDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SmtpAccessDetails is not found in the empty JSON string", SmtpAccessDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SmtpAccessDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SmtpAccessDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SmtpAccessDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("secureSmtpServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureSmtpServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureSmtpServerHost").toString()));
      }
      if (!jsonObj.get("secureSmtpUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureSmtpUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureSmtpUsername").toString()));
      }
      if (!jsonObj.get("secureSmtpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureSmtpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureSmtpPassword").toString()));
      }
      if (!jsonObj.get("smtpServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpServerHost").toString()));
      }
      if (!jsonObj.get("smtpUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpUsername").toString()));
      }
      if (!jsonObj.get("smtpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpPassword").toString()));
      }
      if ((jsonObj.get("mailFromDomain") != null && !jsonObj.get("mailFromDomain").isJsonNull()) && !jsonObj.get("mailFromDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailFromDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailFromDomain").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SmtpAccessDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SmtpAccessDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SmtpAccessDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SmtpAccessDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<SmtpAccessDetails>() {
           @Override
           public void write(JsonWriter out, SmtpAccessDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SmtpAccessDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SmtpAccessDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SmtpAccessDetails
   * @throws IOException if the JSON string is invalid with respect to SmtpAccessDetails
   */
  public static SmtpAccessDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SmtpAccessDetails.class);
  }

  /**
   * Convert an instance of SmtpAccessDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

