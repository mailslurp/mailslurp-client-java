/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * SendOptInConsentEmailOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T21:13:29.989373638Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class SendOptInConsentEmailOptions {
  public static final String SERIALIZED_NAME_TEMPLATE_HTML = "templateHtml";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_HTML)
  @javax.annotation.Nonnull
  private String templateHtml;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nonnull
  private String subject;

  public static final String SERIALIZED_NAME_SENDER_INBOX = "senderInbox";
  @SerializedName(SERIALIZED_NAME_SENDER_INBOX)
  @javax.annotation.Nullable
  private UUID senderInbox;

  public SendOptInConsentEmailOptions() {
  }

  public SendOptInConsentEmailOptions templateHtml(@javax.annotation.Nonnull String templateHtml) {
    this.templateHtml = templateHtml;
    return this;
  }

  /**
   * Get templateHtml
   * @return templateHtml
   */
  @javax.annotation.Nonnull
  public String getTemplateHtml() {
    return templateHtml;
  }

  public void setTemplateHtml(@javax.annotation.Nonnull String templateHtml) {
    this.templateHtml = templateHtml;
  }


  public SendOptInConsentEmailOptions subject(@javax.annotation.Nonnull String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nonnull
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nonnull String subject) {
    this.subject = subject;
  }


  public SendOptInConsentEmailOptions senderInbox(@javax.annotation.Nullable UUID senderInbox) {
    this.senderInbox = senderInbox;
    return this;
  }

  /**
   * Get senderInbox
   * @return senderInbox
   */
  @javax.annotation.Nullable
  public UUID getSenderInbox() {
    return senderInbox;
  }

  public void setSenderInbox(@javax.annotation.Nullable UUID senderInbox) {
    this.senderInbox = senderInbox;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendOptInConsentEmailOptions sendOptInConsentEmailOptions = (SendOptInConsentEmailOptions) o;
    return Objects.equals(this.templateHtml, sendOptInConsentEmailOptions.templateHtml) &&
        Objects.equals(this.subject, sendOptInConsentEmailOptions.subject) &&
        Objects.equals(this.senderInbox, sendOptInConsentEmailOptions.senderInbox);
  }

  @Override
  public int hashCode() {
    return Objects.hash(templateHtml, subject, senderInbox);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendOptInConsentEmailOptions {\n");
    sb.append("    templateHtml: ").append(toIndentedString(templateHtml)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    senderInbox: ").append(toIndentedString(senderInbox)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("templateHtml");
    openapiFields.add("subject");
    openapiFields.add("senderInbox");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("templateHtml");
    openapiRequiredFields.add("subject");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendOptInConsentEmailOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!SendOptInConsentEmailOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendOptInConsentEmailOptions is not found in the empty JSON string", SendOptInConsentEmailOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendOptInConsentEmailOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendOptInConsentEmailOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendOptInConsentEmailOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("templateHtml").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateHtml` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateHtml").toString()));
      }
      if (!jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("senderInbox") != null && !jsonObj.get("senderInbox").isJsonNull()) && !jsonObj.get("senderInbox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderInbox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderInbox").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendOptInConsentEmailOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendOptInConsentEmailOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendOptInConsentEmailOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendOptInConsentEmailOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<SendOptInConsentEmailOptions>() {
           @Override
           public void write(JsonWriter out, SendOptInConsentEmailOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendOptInConsentEmailOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendOptInConsentEmailOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendOptInConsentEmailOptions
   * @throws IOException if the JSON string is invalid with respect to SendOptInConsentEmailOptions
   */
  public static SendOptInConsentEmailOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendOptInConsentEmailOptions.class);
  }

  /**
   * Convert an instance of SendOptInConsentEmailOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

