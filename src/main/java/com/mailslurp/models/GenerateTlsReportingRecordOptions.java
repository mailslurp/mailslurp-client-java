/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * GenerateTlsReportingRecordOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class GenerateTlsReportingRecordOptions {
  public static final String SERIALIZED_NAME_REPORTING_ADDRESSES = "reportingAddresses";
  @SerializedName(SERIALIZED_NAME_REPORTING_ADDRESSES)
  @javax.annotation.Nonnull
  private List<String> reportingAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_REPORTING_URL = "reportingUrl";
  @SerializedName(SERIALIZED_NAME_REPORTING_URL)
  @javax.annotation.Nullable
  private String reportingUrl;

  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nonnull
  private String host;

  /**
   * Gets or Sets version
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    TLSRPTV1("TLSRPTv1");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private VersionEnum version;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nonnull
  private Integer ttl;

  public GenerateTlsReportingRecordOptions() {
  }

  public GenerateTlsReportingRecordOptions reportingAddresses(@javax.annotation.Nonnull List<String> reportingAddresses) {
    this.reportingAddresses = reportingAddresses;
    return this;
  }

  public GenerateTlsReportingRecordOptions addReportingAddressesItem(String reportingAddressesItem) {
    if (this.reportingAddresses == null) {
      this.reportingAddresses = new ArrayList<>();
    }
    this.reportingAddresses.add(reportingAddressesItem);
    return this;
  }

  /**
   * Get reportingAddresses
   * @return reportingAddresses
   */
  @javax.annotation.Nonnull
  public List<String> getReportingAddresses() {
    return reportingAddresses;
  }

  public void setReportingAddresses(@javax.annotation.Nonnull List<String> reportingAddresses) {
    this.reportingAddresses = reportingAddresses;
  }


  public GenerateTlsReportingRecordOptions reportingUrl(@javax.annotation.Nullable String reportingUrl) {
    this.reportingUrl = reportingUrl;
    return this;
  }

  /**
   * Get reportingUrl
   * @return reportingUrl
   */
  @javax.annotation.Nullable
  public String getReportingUrl() {
    return reportingUrl;
  }

  public void setReportingUrl(@javax.annotation.Nullable String reportingUrl) {
    this.reportingUrl = reportingUrl;
  }


  public GenerateTlsReportingRecordOptions host(@javax.annotation.Nonnull String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nonnull String host) {
    this.host = host;
  }


  public GenerateTlsReportingRecordOptions version(@javax.annotation.Nonnull VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull VersionEnum version) {
    this.version = version;
  }


  public GenerateTlsReportingRecordOptions ttl(@javax.annotation.Nonnull Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nonnull
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nonnull Integer ttl) {
    this.ttl = ttl;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions = (GenerateTlsReportingRecordOptions) o;
    return Objects.equals(this.reportingAddresses, generateTlsReportingRecordOptions.reportingAddresses) &&
        Objects.equals(this.reportingUrl, generateTlsReportingRecordOptions.reportingUrl) &&
        Objects.equals(this.host, generateTlsReportingRecordOptions.host) &&
        Objects.equals(this.version, generateTlsReportingRecordOptions.version) &&
        Objects.equals(this.ttl, generateTlsReportingRecordOptions.ttl);
  }

  @Override
  public int hashCode() {
    return Objects.hash(reportingAddresses, reportingUrl, host, version, ttl);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateTlsReportingRecordOptions {\n");
    sb.append("    reportingAddresses: ").append(toIndentedString(reportingAddresses)).append("\n");
    sb.append("    reportingUrl: ").append(toIndentedString(reportingUrl)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("reportingAddresses");
    openapiFields.add("reportingUrl");
    openapiFields.add("host");
    openapiFields.add("version");
    openapiFields.add("ttl");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("reportingAddresses");
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("ttl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateTlsReportingRecordOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!GenerateTlsReportingRecordOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateTlsReportingRecordOptions is not found in the empty JSON string", GenerateTlsReportingRecordOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateTlsReportingRecordOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateTlsReportingRecordOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateTlsReportingRecordOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("reportingAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("reportingAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("reportingAddresses").toString()));
      }
      if ((jsonObj.get("reportingUrl") != null && !jsonObj.get("reportingUrl").isJsonNull()) && !jsonObj.get("reportingUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingUrl").toString()));
      }
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the required field `version`
      VersionEnum.validateJsonElement(jsonObj.get("version"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateTlsReportingRecordOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateTlsReportingRecordOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateTlsReportingRecordOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateTlsReportingRecordOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateTlsReportingRecordOptions>() {
           @Override
           public void write(JsonWriter out, GenerateTlsReportingRecordOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateTlsReportingRecordOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateTlsReportingRecordOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateTlsReportingRecordOptions
   * @throws IOException if the JSON string is invalid with respect to GenerateTlsReportingRecordOptions
   */
  public static GenerateTlsReportingRecordOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateTlsReportingRecordOptions.class);
  }

  /**
   * Convert an instance of GenerateTlsReportingRecordOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

