/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for exporting user data
 */
@ApiModel(description = "Options for exporting user data")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class ExportOptions {
  /**
   * Gets or Sets outputFormat
   */
  @JsonAdapter(OutputFormatEnum.Adapter.class)
  public enum OutputFormatEnum {
    DEFAULT("CSV_DEFAULT"),
    
    EXCEL("CSV_EXCEL");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputFormatEnum fromValue(String value) {
      for (OutputFormatEnum b : OutputFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputFormatEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "outputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  private OutputFormatEnum outputFormat;

  public static final String SERIALIZED_NAME_EXCLUDE_PREVIOUSLY_EXPORTED = "excludePreviouslyExported";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PREVIOUSLY_EXPORTED)
  private Boolean excludePreviouslyExported;

  public static final String SERIALIZED_NAME_CREATED_EARLIEST_TIME = "createdEarliestTime";
  @SerializedName(SERIALIZED_NAME_CREATED_EARLIEST_TIME)
  private OffsetDateTime createdEarliestTime;

  public static final String SERIALIZED_NAME_CREATED_OLDEST_TIME = "createdOldestTime";
  @SerializedName(SERIALIZED_NAME_CREATED_OLDEST_TIME)
  private OffsetDateTime createdOldestTime;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_LIST_SEPARATOR_TOKEN = "listSeparatorToken";
  @SerializedName(SERIALIZED_NAME_LIST_SEPARATOR_TOKEN)
  private String listSeparatorToken;

  public ExportOptions() {
  }

  public ExportOptions outputFormat(OutputFormatEnum outputFormat) {
    
    this.outputFormat = outputFormat;
    return this;
  }

   /**
   * Get outputFormat
   * @return outputFormat
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }


  public void setOutputFormat(OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }


  public ExportOptions excludePreviouslyExported(Boolean excludePreviouslyExported) {
    
    this.excludePreviouslyExported = excludePreviouslyExported;
    return this;
  }

   /**
   * Get excludePreviouslyExported
   * @return excludePreviouslyExported
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getExcludePreviouslyExported() {
    return excludePreviouslyExported;
  }


  public void setExcludePreviouslyExported(Boolean excludePreviouslyExported) {
    this.excludePreviouslyExported = excludePreviouslyExported;
  }


  public ExportOptions createdEarliestTime(OffsetDateTime createdEarliestTime) {
    
    this.createdEarliestTime = createdEarliestTime;
    return this;
  }

   /**
   * Get createdEarliestTime
   * @return createdEarliestTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedEarliestTime() {
    return createdEarliestTime;
  }


  public void setCreatedEarliestTime(OffsetDateTime createdEarliestTime) {
    this.createdEarliestTime = createdEarliestTime;
  }


  public ExportOptions createdOldestTime(OffsetDateTime createdOldestTime) {
    
    this.createdOldestTime = createdOldestTime;
    return this;
  }

   /**
   * Get createdOldestTime
   * @return createdOldestTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getCreatedOldestTime() {
    return createdOldestTime;
  }


  public void setCreatedOldestTime(OffsetDateTime createdOldestTime) {
    this.createdOldestTime = createdOldestTime;
  }


  public ExportOptions filter(String filter) {
    
    this.filter = filter;
    return this;
  }

   /**
   * Get filter
   * @return filter
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFilter() {
    return filter;
  }


  public void setFilter(String filter) {
    this.filter = filter;
  }


  public ExportOptions listSeparatorToken(String listSeparatorToken) {
    
    this.listSeparatorToken = listSeparatorToken;
    return this;
  }

   /**
   * Get listSeparatorToken
   * @return listSeparatorToken
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getListSeparatorToken() {
    return listSeparatorToken;
  }


  public void setListSeparatorToken(String listSeparatorToken) {
    this.listSeparatorToken = listSeparatorToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportOptions exportOptions = (ExportOptions) o;
    return Objects.equals(this.outputFormat, exportOptions.outputFormat) &&
        Objects.equals(this.excludePreviouslyExported, exportOptions.excludePreviouslyExported) &&
        Objects.equals(this.createdEarliestTime, exportOptions.createdEarliestTime) &&
        Objects.equals(this.createdOldestTime, exportOptions.createdOldestTime) &&
        Objects.equals(this.filter, exportOptions.filter) &&
        Objects.equals(this.listSeparatorToken, exportOptions.listSeparatorToken);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputFormat, excludePreviouslyExported, createdEarliestTime, createdOldestTime, filter, listSeparatorToken);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportOptions {\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    excludePreviouslyExported: ").append(toIndentedString(excludePreviouslyExported)).append("\n");
    sb.append("    createdEarliestTime: ").append(toIndentedString(createdEarliestTime)).append("\n");
    sb.append("    createdOldestTime: ").append(toIndentedString(createdOldestTime)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    listSeparatorToken: ").append(toIndentedString(listSeparatorToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outputFormat");
    openapiFields.add("excludePreviouslyExported");
    openapiFields.add("createdEarliestTime");
    openapiFields.add("createdOldestTime");
    openapiFields.add("filter");
    openapiFields.add("listSeparatorToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("outputFormat");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ExportOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportOptions is not found in the empty JSON string", ExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("outputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFormat").toString()));
      }
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("listSeparatorToken") != null && !jsonObj.get("listSeparatorToken").isJsonNull()) && !jsonObj.get("listSeparatorToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listSeparatorToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listSeparatorToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportOptions>() {
           @Override
           public void write(JsonWriter out, ExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ExportOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ExportOptions
  * @throws IOException if the JSON string is invalid with respect to ExportOptions
  */
  public static ExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportOptions.class);
  }

 /**
  * Convert an instance of ExportOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

