/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for exporting user data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T21:25:04.210100741Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ExportOptions {
  /**
   * Gets or Sets outputFormat
   */
  @JsonAdapter(OutputFormatEnum.Adapter.class)
  public enum OutputFormatEnum {
    CSV_DEFAULT("CSV_DEFAULT"),
    
    CSV_EXCEL("CSV_EXCEL");

    private String value;

    OutputFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static OutputFormatEnum fromValue(String value) {
      for (OutputFormatEnum b : OutputFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<OutputFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final OutputFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public OutputFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return OutputFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      OutputFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_OUTPUT_FORMAT = "outputFormat";
  @SerializedName(SERIALIZED_NAME_OUTPUT_FORMAT)
  @javax.annotation.Nonnull
  private OutputFormatEnum outputFormat;

  public static final String SERIALIZED_NAME_EXCLUDE_PREVIOUSLY_EXPORTED = "excludePreviouslyExported";
  @SerializedName(SERIALIZED_NAME_EXCLUDE_PREVIOUSLY_EXPORTED)
  @javax.annotation.Nullable
  private Boolean excludePreviouslyExported;

  public static final String SERIALIZED_NAME_CREATED_EARLIEST_TIME = "createdEarliestTime";
  @SerializedName(SERIALIZED_NAME_CREATED_EARLIEST_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime createdEarliestTime;

  public static final String SERIALIZED_NAME_CREATED_OLDEST_TIME = "createdOldestTime";
  @SerializedName(SERIALIZED_NAME_CREATED_OLDEST_TIME)
  @javax.annotation.Nullable
  private OffsetDateTime createdOldestTime;

  public static final String SERIALIZED_NAME_FILTER = "filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  @javax.annotation.Nullable
  private String filter;

  public static final String SERIALIZED_NAME_LIST_SEPARATOR_TOKEN = "listSeparatorToken";
  @SerializedName(SERIALIZED_NAME_LIST_SEPARATOR_TOKEN)
  @javax.annotation.Nullable
  private String listSeparatorToken;

  public ExportOptions() {
  }

  public ExportOptions outputFormat(@javax.annotation.Nonnull OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
    return this;
  }

  /**
   * Get outputFormat
   * @return outputFormat
   */
  @javax.annotation.Nonnull
  public OutputFormatEnum getOutputFormat() {
    return outputFormat;
  }

  public void setOutputFormat(@javax.annotation.Nonnull OutputFormatEnum outputFormat) {
    this.outputFormat = outputFormat;
  }


  public ExportOptions excludePreviouslyExported(@javax.annotation.Nullable Boolean excludePreviouslyExported) {
    this.excludePreviouslyExported = excludePreviouslyExported;
    return this;
  }

  /**
   * Get excludePreviouslyExported
   * @return excludePreviouslyExported
   */
  @javax.annotation.Nullable
  public Boolean getExcludePreviouslyExported() {
    return excludePreviouslyExported;
  }

  public void setExcludePreviouslyExported(@javax.annotation.Nullable Boolean excludePreviouslyExported) {
    this.excludePreviouslyExported = excludePreviouslyExported;
  }


  public ExportOptions createdEarliestTime(@javax.annotation.Nullable OffsetDateTime createdEarliestTime) {
    this.createdEarliestTime = createdEarliestTime;
    return this;
  }

  /**
   * Get createdEarliestTime
   * @return createdEarliestTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedEarliestTime() {
    return createdEarliestTime;
  }

  public void setCreatedEarliestTime(@javax.annotation.Nullable OffsetDateTime createdEarliestTime) {
    this.createdEarliestTime = createdEarliestTime;
  }


  public ExportOptions createdOldestTime(@javax.annotation.Nullable OffsetDateTime createdOldestTime) {
    this.createdOldestTime = createdOldestTime;
    return this;
  }

  /**
   * Get createdOldestTime
   * @return createdOldestTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedOldestTime() {
    return createdOldestTime;
  }

  public void setCreatedOldestTime(@javax.annotation.Nullable OffsetDateTime createdOldestTime) {
    this.createdOldestTime = createdOldestTime;
  }


  public ExportOptions filter(@javax.annotation.Nullable String filter) {
    this.filter = filter;
    return this;
  }

  /**
   * Get filter
   * @return filter
   */
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(@javax.annotation.Nullable String filter) {
    this.filter = filter;
  }


  public ExportOptions listSeparatorToken(@javax.annotation.Nullable String listSeparatorToken) {
    this.listSeparatorToken = listSeparatorToken;
    return this;
  }

  /**
   * Get listSeparatorToken
   * @return listSeparatorToken
   */
  @javax.annotation.Nullable
  public String getListSeparatorToken() {
    return listSeparatorToken;
  }

  public void setListSeparatorToken(@javax.annotation.Nullable String listSeparatorToken) {
    this.listSeparatorToken = listSeparatorToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ExportOptions exportOptions = (ExportOptions) o;
    return Objects.equals(this.outputFormat, exportOptions.outputFormat) &&
        Objects.equals(this.excludePreviouslyExported, exportOptions.excludePreviouslyExported) &&
        Objects.equals(this.createdEarliestTime, exportOptions.createdEarliestTime) &&
        Objects.equals(this.createdOldestTime, exportOptions.createdOldestTime) &&
        Objects.equals(this.filter, exportOptions.filter) &&
        Objects.equals(this.listSeparatorToken, exportOptions.listSeparatorToken);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(outputFormat, excludePreviouslyExported, createdEarliestTime, createdOldestTime, filter, listSeparatorToken);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ExportOptions {\n");
    sb.append("    outputFormat: ").append(toIndentedString(outputFormat)).append("\n");
    sb.append("    excludePreviouslyExported: ").append(toIndentedString(excludePreviouslyExported)).append("\n");
    sb.append("    createdEarliestTime: ").append(toIndentedString(createdEarliestTime)).append("\n");
    sb.append("    createdOldestTime: ").append(toIndentedString(createdOldestTime)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    listSeparatorToken: ").append(toIndentedString(listSeparatorToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("outputFormat");
    openapiFields.add("excludePreviouslyExported");
    openapiFields.add("createdEarliestTime");
    openapiFields.add("createdOldestTime");
    openapiFields.add("filter");
    openapiFields.add("listSeparatorToken");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("outputFormat");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ExportOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ExportOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ExportOptions is not found in the empty JSON string", ExportOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ExportOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ExportOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ExportOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("outputFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputFormat").toString()));
      }
      // validate the required field `outputFormat`
      OutputFormatEnum.validateJsonElement(jsonObj.get("outputFormat"));
      if ((jsonObj.get("filter") != null && !jsonObj.get("filter").isJsonNull()) && !jsonObj.get("filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter").toString()));
      }
      if ((jsonObj.get("listSeparatorToken") != null && !jsonObj.get("listSeparatorToken").isJsonNull()) && !jsonObj.get("listSeparatorToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `listSeparatorToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("listSeparatorToken").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ExportOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ExportOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ExportOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ExportOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ExportOptions>() {
           @Override
           public void write(JsonWriter out, ExportOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ExportOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ExportOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ExportOptions
   * @throws IOException if the JSON string is invalid with respect to ExportOptions
   */
  public static ExportOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ExportOptions.class);
  }

  /**
   * Convert an instance of ExportOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

