/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.RecipientProjection;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Recipients of original email in thread
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T01:24:11.050965128Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EmailRecipientsProjection {
  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nullable
  private List<RecipientProjection> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  @javax.annotation.Nullable
  private List<RecipientProjection> cc = new ArrayList<>();

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  @javax.annotation.Nullable
  private List<RecipientProjection> bcc = new ArrayList<>();

  public EmailRecipientsProjection() {
  }

  public EmailRecipientsProjection to(@javax.annotation.Nullable List<RecipientProjection> to) {
    this.to = to;
    return this;
  }

  public EmailRecipientsProjection addToItem(RecipientProjection toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nullable
  public List<RecipientProjection> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nullable List<RecipientProjection> to) {
    this.to = to;
  }


  public EmailRecipientsProjection cc(@javax.annotation.Nullable List<RecipientProjection> cc) {
    this.cc = cc;
    return this;
  }

  public EmailRecipientsProjection addCcItem(RecipientProjection ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<RecipientProjection> getCc() {
    return cc;
  }

  public void setCc(@javax.annotation.Nullable List<RecipientProjection> cc) {
    this.cc = cc;
  }


  public EmailRecipientsProjection bcc(@javax.annotation.Nullable List<RecipientProjection> bcc) {
    this.bcc = bcc;
    return this;
  }

  public EmailRecipientsProjection addBccItem(RecipientProjection bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * Get bcc
   * @return bcc
   */
  @javax.annotation.Nullable
  public List<RecipientProjection> getBcc() {
    return bcc;
  }

  public void setBcc(@javax.annotation.Nullable List<RecipientProjection> bcc) {
    this.bcc = bcc;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailRecipientsProjection emailRecipientsProjection = (EmailRecipientsProjection) o;
    return Objects.equals(this.to, emailRecipientsProjection.to) &&
        Objects.equals(this.cc, emailRecipientsProjection.cc) &&
        Objects.equals(this.bcc, emailRecipientsProjection.bcc);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, cc, bcc);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailRecipientsProjection {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("to");
    openapiFields.add("cc");
    openapiFields.add("bcc");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailRecipientsProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!EmailRecipientsProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailRecipientsProjection is not found in the empty JSON string", EmailRecipientsProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailRecipientsProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailRecipientsProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        JsonArray jsonArrayto = jsonObj.getAsJsonArray("to");
        if (jsonArrayto != null) {
          // ensure the json data is an array
          if (!jsonObj.get("to").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
          }

          // validate the optional field `to` (array)
          for (int i = 0; i < jsonArrayto.size(); i++) {
            RecipientProjection.validateJsonElement(jsonArrayto.get(i));
          };
        }
      }
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull()) {
        JsonArray jsonArraycc = jsonObj.getAsJsonArray("cc");
        if (jsonArraycc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("cc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
          }

          // validate the optional field `cc` (array)
          for (int i = 0; i < jsonArraycc.size(); i++) {
            RecipientProjection.validateJsonElement(jsonArraycc.get(i));
          };
        }
      }
      if (jsonObj.get("bcc") != null && !jsonObj.get("bcc").isJsonNull()) {
        JsonArray jsonArraybcc = jsonObj.getAsJsonArray("bcc");
        if (jsonArraybcc != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bcc").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
          }

          // validate the optional field `bcc` (array)
          for (int i = 0; i < jsonArraybcc.size(); i++) {
            RecipientProjection.validateJsonElement(jsonArraybcc.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailRecipientsProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailRecipientsProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailRecipientsProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailRecipientsProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailRecipientsProjection>() {
           @Override
           public void write(JsonWriter out, EmailRecipientsProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailRecipientsProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailRecipientsProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailRecipientsProjection
   * @throws IOException if the JSON string is invalid with respect to EmailRecipientsProjection
   */
  public static EmailRecipientsProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailRecipientsProjection.class);
  }

  /**
   * Convert an instance of EmailRecipientsProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

