/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Missed email
 */
@ApiModel(description = "Missed email")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T23:33:57.654989Z[Etc/UTC]")
public class MissedEmailDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_BODY_EXCERPT = "bodyExcerpt";
  @SerializedName(SERIALIZED_NAME_BODY_EXCERPT)
  private String bodyExcerpt;

  public static final String SERIALIZED_NAME_ATTACHMENT_COUNT = "attachmentCount";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_COUNT)
  private Integer attachmentCount;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_RAW_URL = "rawUrl";
  @SerializedName(SERIALIZED_NAME_RAW_URL)
  private String rawUrl;

  public static final String SERIALIZED_NAME_RAW_KEY = "rawKey";
  @SerializedName(SERIALIZED_NAME_RAW_KEY)
  private String rawKey;

  public static final String SERIALIZED_NAME_RAW_BUCKET = "rawBucket";
  @SerializedName(SERIALIZED_NAME_RAW_BUCKET)
  private String rawBucket;

  public static final String SERIALIZED_NAME_CAN_RESTORE = "canRestore";
  @SerializedName(SERIALIZED_NAME_CAN_RESTORE)
  private Boolean canRestore;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  private List<String> cc = new ArrayList<>();

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  private List<String> bcc = new ArrayList<>();

  public static final String SERIALIZED_NAME_INBOX_IDS = "inboxIds";
  @SerializedName(SERIALIZED_NAME_INBOX_IDS)
  private List<UUID> inboxIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public MissedEmailDto() {
  }

  public MissedEmailDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public MissedEmailDto userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public MissedEmailDto subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Get subject
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public MissedEmailDto bodyExcerpt(String bodyExcerpt) {
    
    this.bodyExcerpt = bodyExcerpt;
    return this;
  }

   /**
   * Get bodyExcerpt
   * @return bodyExcerpt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBodyExcerpt() {
    return bodyExcerpt;
  }


  public void setBodyExcerpt(String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
  }


  public MissedEmailDto attachmentCount(Integer attachmentCount) {
    
    this.attachmentCount = attachmentCount;
    return this;
  }

   /**
   * Get attachmentCount
   * @return attachmentCount
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Integer getAttachmentCount() {
    return attachmentCount;
  }


  public void setAttachmentCount(Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
  }


  public MissedEmailDto from(String from) {
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFrom() {
    return from;
  }


  public void setFrom(String from) {
    this.from = from;
  }


  public MissedEmailDto rawUrl(String rawUrl) {
    
    this.rawUrl = rawUrl;
    return this;
  }

   /**
   * Get rawUrl
   * @return rawUrl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRawUrl() {
    return rawUrl;
  }


  public void setRawUrl(String rawUrl) {
    this.rawUrl = rawUrl;
  }


  public MissedEmailDto rawKey(String rawKey) {
    
    this.rawKey = rawKey;
    return this;
  }

   /**
   * Get rawKey
   * @return rawKey
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRawKey() {
    return rawKey;
  }


  public void setRawKey(String rawKey) {
    this.rawKey = rawKey;
  }


  public MissedEmailDto rawBucket(String rawBucket) {
    
    this.rawBucket = rawBucket;
    return this;
  }

   /**
   * Get rawBucket
   * @return rawBucket
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRawBucket() {
    return rawBucket;
  }


  public void setRawBucket(String rawBucket) {
    this.rawBucket = rawBucket;
  }


  public MissedEmailDto canRestore(Boolean canRestore) {
    
    this.canRestore = canRestore;
    return this;
  }

   /**
   * Get canRestore
   * @return canRestore
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getCanRestore() {
    return canRestore;
  }


  public void setCanRestore(Boolean canRestore) {
    this.canRestore = canRestore;
  }


  public MissedEmailDto to(List<String> to) {
    
    this.to = to;
    return this;
  }

  public MissedEmailDto addToItem(String toItem) {
    this.to.add(toItem);
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getTo() {
    return to;
  }


  public void setTo(List<String> to) {
    this.to = to;
  }


  public MissedEmailDto cc(List<String> cc) {
    
    this.cc = cc;
    return this;
  }

  public MissedEmailDto addCcItem(String ccItem) {
    this.cc.add(ccItem);
    return this;
  }

   /**
   * Get cc
   * @return cc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getCc() {
    return cc;
  }


  public void setCc(List<String> cc) {
    this.cc = cc;
  }


  public MissedEmailDto bcc(List<String> bcc) {
    
    this.bcc = bcc;
    return this;
  }

  public MissedEmailDto addBccItem(String bccItem) {
    this.bcc.add(bccItem);
    return this;
  }

   /**
   * Get bcc
   * @return bcc
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getBcc() {
    return bcc;
  }


  public void setBcc(List<String> bcc) {
    this.bcc = bcc;
  }


  public MissedEmailDto inboxIds(List<UUID> inboxIds) {
    
    this.inboxIds = inboxIds;
    return this;
  }

  public MissedEmailDto addInboxIdsItem(UUID inboxIdsItem) {
    this.inboxIds.add(inboxIdsItem);
    return this;
  }

   /**
   * Get inboxIds
   * @return inboxIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UUID> getInboxIds() {
    return inboxIds;
  }


  public void setInboxIds(List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
  }


  public MissedEmailDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public MissedEmailDto updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MissedEmailDto missedEmailDto = (MissedEmailDto) o;
    return Objects.equals(this.id, missedEmailDto.id) &&
        Objects.equals(this.userId, missedEmailDto.userId) &&
        Objects.equals(this.subject, missedEmailDto.subject) &&
        Objects.equals(this.bodyExcerpt, missedEmailDto.bodyExcerpt) &&
        Objects.equals(this.attachmentCount, missedEmailDto.attachmentCount) &&
        Objects.equals(this.from, missedEmailDto.from) &&
        Objects.equals(this.rawUrl, missedEmailDto.rawUrl) &&
        Objects.equals(this.rawKey, missedEmailDto.rawKey) &&
        Objects.equals(this.rawBucket, missedEmailDto.rawBucket) &&
        Objects.equals(this.canRestore, missedEmailDto.canRestore) &&
        Objects.equals(this.to, missedEmailDto.to) &&
        Objects.equals(this.cc, missedEmailDto.cc) &&
        Objects.equals(this.bcc, missedEmailDto.bcc) &&
        Objects.equals(this.inboxIds, missedEmailDto.inboxIds) &&
        Objects.equals(this.createdAt, missedEmailDto.createdAt) &&
        Objects.equals(this.updatedAt, missedEmailDto.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, subject, bodyExcerpt, attachmentCount, from, rawUrl, rawKey, rawBucket, canRestore, to, cc, bcc, inboxIds, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MissedEmailDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    bodyExcerpt: ").append(toIndentedString(bodyExcerpt)).append("\n");
    sb.append("    attachmentCount: ").append(toIndentedString(attachmentCount)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    rawUrl: ").append(toIndentedString(rawUrl)).append("\n");
    sb.append("    rawKey: ").append(toIndentedString(rawKey)).append("\n");
    sb.append("    rawBucket: ").append(toIndentedString(rawBucket)).append("\n");
    sb.append("    canRestore: ").append(toIndentedString(canRestore)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    inboxIds: ").append(toIndentedString(inboxIds)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("subject");
    openapiFields.add("bodyExcerpt");
    openapiFields.add("attachmentCount");
    openapiFields.add("from");
    openapiFields.add("rawUrl");
    openapiFields.add("rawKey");
    openapiFields.add("rawBucket");
    openapiFields.add("canRestore");
    openapiFields.add("to");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("inboxIds");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("attachmentCount");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("cc");
    openapiRequiredFields.add("bcc");
    openapiRequiredFields.add("inboxIds");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MissedEmailDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!MissedEmailDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MissedEmailDto is not found in the empty JSON string", MissedEmailDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MissedEmailDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MissedEmailDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MissedEmailDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("bodyExcerpt") != null && !jsonObj.get("bodyExcerpt").isJsonNull()) && !jsonObj.get("bodyExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyExcerpt").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("rawUrl") != null && !jsonObj.get("rawUrl").isJsonNull()) && !jsonObj.get("rawUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawUrl").toString()));
      }
      if ((jsonObj.get("rawKey") != null && !jsonObj.get("rawKey").isJsonNull()) && !jsonObj.get("rawKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawKey").toString()));
      }
      if ((jsonObj.get("rawBucket") != null && !jsonObj.get("rawBucket").isJsonNull()) && !jsonObj.get("rawBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawBucket").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("to") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("cc") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("bcc") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("inboxIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("inboxIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxIds` to be an array in the JSON string but got `%s`", jsonObj.get("inboxIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MissedEmailDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MissedEmailDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MissedEmailDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MissedEmailDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MissedEmailDto>() {
           @Override
           public void write(JsonWriter out, MissedEmailDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MissedEmailDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MissedEmailDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MissedEmailDto
  * @throws IOException if the JSON string is invalid with respect to MissedEmailDto
  */
  public static MissedEmailDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MissedEmailDto.class);
  }

 /**
  * Convert an instance of MissedEmailDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

