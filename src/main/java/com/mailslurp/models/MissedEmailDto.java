/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Missed email
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class MissedEmailDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private UUID userId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_BODY_EXCERPT = "bodyExcerpt";
  @SerializedName(SERIALIZED_NAME_BODY_EXCERPT)
  @javax.annotation.Nullable
  private String bodyExcerpt;

  public static final String SERIALIZED_NAME_ATTACHMENT_COUNT = "attachmentCount";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_COUNT)
  @javax.annotation.Nonnull
  private Integer attachmentCount;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public static final String SERIALIZED_NAME_RAW_URL = "rawUrl";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_RAW_URL)
  @javax.annotation.Nullable
  private String rawUrl;

  public static final String SERIALIZED_NAME_RAW_KEY = "rawKey";
  @SerializedName(SERIALIZED_NAME_RAW_KEY)
  @javax.annotation.Nullable
  private String rawKey;

  public static final String SERIALIZED_NAME_RAW_BUCKET = "rawBucket";
  @SerializedName(SERIALIZED_NAME_RAW_BUCKET)
  @javax.annotation.Nullable
  private String rawBucket;

  public static final String SERIALIZED_NAME_CAN_RESTORE = "canRestore";
  @SerializedName(SERIALIZED_NAME_CAN_RESTORE)
  @javax.annotation.Nullable
  private Boolean canRestore;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  @javax.annotation.Nonnull
  private List<String> cc = new ArrayList<>();

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  @javax.annotation.Nonnull
  private List<String> bcc = new ArrayList<>();

  public static final String SERIALIZED_NAME_INBOX_IDS = "inboxIds";
  @SerializedName(SERIALIZED_NAME_INBOX_IDS)
  @javax.annotation.Nonnull
  private List<UUID> inboxIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public MissedEmailDto() {
  }

  public MissedEmailDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public MissedEmailDto userId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
  }


  public MissedEmailDto subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public MissedEmailDto bodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
    return this;
  }

  /**
   * Get bodyExcerpt
   * @return bodyExcerpt
   */
  @javax.annotation.Nullable
  public String getBodyExcerpt() {
    return bodyExcerpt;
  }

  public void setBodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
  }


  public MissedEmailDto attachmentCount(@javax.annotation.Nonnull Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
    return this;
  }

  /**
   * Get attachmentCount
   * @return attachmentCount
   */
  @javax.annotation.Nonnull
  public Integer getAttachmentCount() {
    return attachmentCount;
  }

  public void setAttachmentCount(@javax.annotation.Nonnull Integer attachmentCount) {
    this.attachmentCount = attachmentCount;
  }


  public MissedEmailDto from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }


  @Deprecated
  public MissedEmailDto rawUrl(@javax.annotation.Nullable String rawUrl) {
    this.rawUrl = rawUrl;
    return this;
  }

  /**
   * use raw key and raw bucket
   * @return rawUrl
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getRawUrl() {
    return rawUrl;
  }

  @Deprecated
  public void setRawUrl(@javax.annotation.Nullable String rawUrl) {
    this.rawUrl = rawUrl;
  }


  public MissedEmailDto rawKey(@javax.annotation.Nullable String rawKey) {
    this.rawKey = rawKey;
    return this;
  }

  /**
   * Get rawKey
   * @return rawKey
   */
  @javax.annotation.Nullable
  public String getRawKey() {
    return rawKey;
  }

  public void setRawKey(@javax.annotation.Nullable String rawKey) {
    this.rawKey = rawKey;
  }


  public MissedEmailDto rawBucket(@javax.annotation.Nullable String rawBucket) {
    this.rawBucket = rawBucket;
    return this;
  }

  /**
   * Get rawBucket
   * @return rawBucket
   */
  @javax.annotation.Nullable
  public String getRawBucket() {
    return rawBucket;
  }

  public void setRawBucket(@javax.annotation.Nullable String rawBucket) {
    this.rawBucket = rawBucket;
  }


  public MissedEmailDto canRestore(@javax.annotation.Nullable Boolean canRestore) {
    this.canRestore = canRestore;
    return this;
  }

  /**
   * Get canRestore
   * @return canRestore
   */
  @javax.annotation.Nullable
  public Boolean getCanRestore() {
    return canRestore;
  }

  public void setCanRestore(@javax.annotation.Nullable Boolean canRestore) {
    this.canRestore = canRestore;
  }


  public MissedEmailDto to(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
    return this;
  }

  public MissedEmailDto addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
  }


  public MissedEmailDto cc(@javax.annotation.Nonnull List<String> cc) {
    this.cc = cc;
    return this;
  }

  public MissedEmailDto addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nonnull
  public List<String> getCc() {
    return cc;
  }

  public void setCc(@javax.annotation.Nonnull List<String> cc) {
    this.cc = cc;
  }


  public MissedEmailDto bcc(@javax.annotation.Nonnull List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public MissedEmailDto addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * Get bcc
   * @return bcc
   */
  @javax.annotation.Nonnull
  public List<String> getBcc() {
    return bcc;
  }

  public void setBcc(@javax.annotation.Nonnull List<String> bcc) {
    this.bcc = bcc;
  }


  public MissedEmailDto inboxIds(@javax.annotation.Nonnull List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
    return this;
  }

  public MissedEmailDto addInboxIdsItem(UUID inboxIdsItem) {
    if (this.inboxIds == null) {
      this.inboxIds = new ArrayList<>();
    }
    this.inboxIds.add(inboxIdsItem);
    return this;
  }

  /**
   * Get inboxIds
   * @return inboxIds
   */
  @javax.annotation.Nonnull
  public List<UUID> getInboxIds() {
    return inboxIds;
  }

  public void setInboxIds(@javax.annotation.Nonnull List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
  }


  public MissedEmailDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public MissedEmailDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MissedEmailDto missedEmailDto = (MissedEmailDto) o;
    return Objects.equals(this.id, missedEmailDto.id) &&
        Objects.equals(this.userId, missedEmailDto.userId) &&
        Objects.equals(this.subject, missedEmailDto.subject) &&
        Objects.equals(this.bodyExcerpt, missedEmailDto.bodyExcerpt) &&
        Objects.equals(this.attachmentCount, missedEmailDto.attachmentCount) &&
        Objects.equals(this.from, missedEmailDto.from) &&
        Objects.equals(this.rawUrl, missedEmailDto.rawUrl) &&
        Objects.equals(this.rawKey, missedEmailDto.rawKey) &&
        Objects.equals(this.rawBucket, missedEmailDto.rawBucket) &&
        Objects.equals(this.canRestore, missedEmailDto.canRestore) &&
        Objects.equals(this.to, missedEmailDto.to) &&
        Objects.equals(this.cc, missedEmailDto.cc) &&
        Objects.equals(this.bcc, missedEmailDto.bcc) &&
        Objects.equals(this.inboxIds, missedEmailDto.inboxIds) &&
        Objects.equals(this.createdAt, missedEmailDto.createdAt) &&
        Objects.equals(this.updatedAt, missedEmailDto.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, subject, bodyExcerpt, attachmentCount, from, rawUrl, rawKey, rawBucket, canRestore, to, cc, bcc, inboxIds, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MissedEmailDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    bodyExcerpt: ").append(toIndentedString(bodyExcerpt)).append("\n");
    sb.append("    attachmentCount: ").append(toIndentedString(attachmentCount)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    rawUrl: ").append(toIndentedString(rawUrl)).append("\n");
    sb.append("    rawKey: ").append(toIndentedString(rawKey)).append("\n");
    sb.append("    rawBucket: ").append(toIndentedString(rawBucket)).append("\n");
    sb.append("    canRestore: ").append(toIndentedString(canRestore)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    inboxIds: ").append(toIndentedString(inboxIds)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("subject");
    openapiFields.add("bodyExcerpt");
    openapiFields.add("attachmentCount");
    openapiFields.add("from");
    openapiFields.add("rawUrl");
    openapiFields.add("rawKey");
    openapiFields.add("rawBucket");
    openapiFields.add("canRestore");
    openapiFields.add("to");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("inboxIds");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("attachmentCount");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("cc");
    openapiRequiredFields.add("bcc");
    openapiRequiredFields.add("inboxIds");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to MissedEmailDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!MissedEmailDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in MissedEmailDto is not found in the empty JSON string", MissedEmailDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!MissedEmailDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MissedEmailDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MissedEmailDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("bodyExcerpt") != null && !jsonObj.get("bodyExcerpt").isJsonNull()) && !jsonObj.get("bodyExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyExcerpt").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("rawUrl") != null && !jsonObj.get("rawUrl").isJsonNull()) && !jsonObj.get("rawUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawUrl").toString()));
      }
      if ((jsonObj.get("rawKey") != null && !jsonObj.get("rawKey").isJsonNull()) && !jsonObj.get("rawKey").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawKey` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawKey").toString()));
      }
      if ((jsonObj.get("rawBucket") != null && !jsonObj.get("rawBucket").isJsonNull()) && !jsonObj.get("rawBucket").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rawBucket` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rawBucket").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("to") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("cc") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("bcc") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("inboxIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("inboxIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxIds` to be an array in the JSON string but got `%s`", jsonObj.get("inboxIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MissedEmailDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MissedEmailDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MissedEmailDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MissedEmailDto.class));

       return (TypeAdapter<T>) new TypeAdapter<MissedEmailDto>() {
           @Override
           public void write(JsonWriter out, MissedEmailDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MissedEmailDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of MissedEmailDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of MissedEmailDto
   * @throws IOException if the JSON string is invalid with respect to MissedEmailDto
   */
  public static MissedEmailDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MissedEmailDto.class);
  }

  /**
   * Convert an instance of MissedEmailDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

