/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * PhoneNumberValidationDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class PhoneNumberValidationDto {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  @javax.annotation.Nullable
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY_PREFIX = "countryPrefix";
  @SerializedName(SERIALIZED_NAME_COUNTRY_PREFIX)
  @javax.annotation.Nullable
  private String countryPrefix;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nonnull
  private String phoneNumber;

  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  @javax.annotation.Nonnull
  private Boolean isValid;

  public static final String SERIALIZED_NAME_VALIDATION_ERRORS = "validationErrors";
  @SerializedName(SERIALIZED_NAME_VALIDATION_ERRORS)
  @javax.annotation.Nullable
  private List<String> validationErrors = new ArrayList<>();

  public PhoneNumberValidationDto() {
  }

  public PhoneNumberValidationDto countryCode(@javax.annotation.Nullable String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * Get countryCode
   * @return countryCode
   */
  @javax.annotation.Nullable
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(@javax.annotation.Nullable String countryCode) {
    this.countryCode = countryCode;
  }


  public PhoneNumberValidationDto countryPrefix(@javax.annotation.Nullable String countryPrefix) {
    this.countryPrefix = countryPrefix;
    return this;
  }

  /**
   * Get countryPrefix
   * @return countryPrefix
   */
  @javax.annotation.Nullable
  public String getCountryPrefix() {
    return countryPrefix;
  }

  public void setCountryPrefix(@javax.annotation.Nullable String countryPrefix) {
    this.countryPrefix = countryPrefix;
  }


  public PhoneNumberValidationDto phoneNumber(@javax.annotation.Nonnull String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nonnull String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PhoneNumberValidationDto isValid(@javax.annotation.Nonnull Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

  /**
   * Get isValid
   * @return isValid
   */
  @javax.annotation.Nonnull
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(@javax.annotation.Nonnull Boolean isValid) {
    this.isValid = isValid;
  }


  public PhoneNumberValidationDto validationErrors(@javax.annotation.Nullable List<String> validationErrors) {
    this.validationErrors = validationErrors;
    return this;
  }

  public PhoneNumberValidationDto addValidationErrorsItem(String validationErrorsItem) {
    if (this.validationErrors == null) {
      this.validationErrors = new ArrayList<>();
    }
    this.validationErrors.add(validationErrorsItem);
    return this;
  }

  /**
   * Get validationErrors
   * @return validationErrors
   */
  @javax.annotation.Nullable
  public List<String> getValidationErrors() {
    return validationErrors;
  }

  public void setValidationErrors(@javax.annotation.Nullable List<String> validationErrors) {
    this.validationErrors = validationErrors;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneNumberValidationDto phoneNumberValidationDto = (PhoneNumberValidationDto) o;
    return Objects.equals(this.countryCode, phoneNumberValidationDto.countryCode) &&
        Objects.equals(this.countryPrefix, phoneNumberValidationDto.countryPrefix) &&
        Objects.equals(this.phoneNumber, phoneNumberValidationDto.phoneNumber) &&
        Objects.equals(this.isValid, phoneNumberValidationDto.isValid) &&
        Objects.equals(this.validationErrors, phoneNumberValidationDto.validationErrors);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, countryPrefix, phoneNumber, isValid, validationErrors);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneNumberValidationDto {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    countryPrefix: ").append(toIndentedString(countryPrefix)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    validationErrors: ").append(toIndentedString(validationErrors)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("countryCode");
    openapiFields.add("countryPrefix");
    openapiFields.add("phoneNumber");
    openapiFields.add("isValid");
    openapiFields.add("validationErrors");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("isValid");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneNumberValidationDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!PhoneNumberValidationDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneNumberValidationDto is not found in the empty JSON string", PhoneNumberValidationDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneNumberValidationDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneNumberValidationDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneNumberValidationDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("countryPrefix") != null && !jsonObj.get("countryPrefix").isJsonNull()) && !jsonObj.get("countryPrefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryPrefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryPrefix").toString()));
      }
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("validationErrors") != null && !jsonObj.get("validationErrors").isJsonNull() && !jsonObj.get("validationErrors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validationErrors` to be an array in the JSON string but got `%s`", jsonObj.get("validationErrors").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneNumberValidationDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneNumberValidationDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneNumberValidationDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneNumberValidationDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneNumberValidationDto>() {
           @Override
           public void write(JsonWriter out, PhoneNumberValidationDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneNumberValidationDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneNumberValidationDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneNumberValidationDto
   * @throws IOException if the JSON string is invalid with respect to PhoneNumberValidationDto
   */
  public static PhoneNumberValidationDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneNumberValidationDto.class);
  }

  /**
   * Convert an instance of PhoneNumberValidationDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

