/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ConnectorSyncRequestResultExceptionCauseStackTraceInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class ConnectorSyncRequestResultExceptionCauseStackTraceInner {
  public static final String SERIALIZED_NAME_CLASS_LOADER_NAME = "classLoaderName";
  @SerializedName(SERIALIZED_NAME_CLASS_LOADER_NAME)
  private String classLoaderName;

  public static final String SERIALIZED_NAME_MODULE_NAME = "moduleName";
  @SerializedName(SERIALIZED_NAME_MODULE_NAME)
  private String moduleName;

  public static final String SERIALIZED_NAME_MODULE_VERSION = "moduleVersion";
  @SerializedName(SERIALIZED_NAME_MODULE_VERSION)
  private String moduleVersion;

  public static final String SERIALIZED_NAME_METHOD_NAME = "methodName";
  @SerializedName(SERIALIZED_NAME_METHOD_NAME)
  private String methodName;

  public static final String SERIALIZED_NAME_FILE_NAME = "fileName";
  @SerializedName(SERIALIZED_NAME_FILE_NAME)
  private String fileName;

  public static final String SERIALIZED_NAME_LINE_NUMBER = "lineNumber";
  @SerializedName(SERIALIZED_NAME_LINE_NUMBER)
  private Integer lineNumber;

  public static final String SERIALIZED_NAME_NATIVE_METHOD = "nativeMethod";
  @SerializedName(SERIALIZED_NAME_NATIVE_METHOD)
  private Boolean nativeMethod;

  public static final String SERIALIZED_NAME_CLASS_NAME = "className";
  @SerializedName(SERIALIZED_NAME_CLASS_NAME)
  private String className;

  public ConnectorSyncRequestResultExceptionCauseStackTraceInner() {
  }

  public ConnectorSyncRequestResultExceptionCauseStackTraceInner classLoaderName(String classLoaderName) {
    
    this.classLoaderName = classLoaderName;
    return this;
  }

   /**
   * Get classLoaderName
   * @return classLoaderName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClassLoaderName() {
    return classLoaderName;
  }


  public void setClassLoaderName(String classLoaderName) {
    this.classLoaderName = classLoaderName;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner moduleName(String moduleName) {
    
    this.moduleName = moduleName;
    return this;
  }

   /**
   * Get moduleName
   * @return moduleName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getModuleName() {
    return moduleName;
  }


  public void setModuleName(String moduleName) {
    this.moduleName = moduleName;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner moduleVersion(String moduleVersion) {
    
    this.moduleVersion = moduleVersion;
    return this;
  }

   /**
   * Get moduleVersion
   * @return moduleVersion
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getModuleVersion() {
    return moduleVersion;
  }


  public void setModuleVersion(String moduleVersion) {
    this.moduleVersion = moduleVersion;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner methodName(String methodName) {
    
    this.methodName = methodName;
    return this;
  }

   /**
   * Get methodName
   * @return methodName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMethodName() {
    return methodName;
  }


  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner fileName(String fileName) {
    
    this.fileName = fileName;
    return this;
  }

   /**
   * Get fileName
   * @return fileName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFileName() {
    return fileName;
  }


  public void setFileName(String fileName) {
    this.fileName = fileName;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner lineNumber(Integer lineNumber) {
    
    this.lineNumber = lineNumber;
    return this;
  }

   /**
   * Get lineNumber
   * @return lineNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getLineNumber() {
    return lineNumber;
  }


  public void setLineNumber(Integer lineNumber) {
    this.lineNumber = lineNumber;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner nativeMethod(Boolean nativeMethod) {
    
    this.nativeMethod = nativeMethod;
    return this;
  }

   /**
   * Get nativeMethod
   * @return nativeMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getNativeMethod() {
    return nativeMethod;
  }


  public void setNativeMethod(Boolean nativeMethod) {
    this.nativeMethod = nativeMethod;
  }


  public ConnectorSyncRequestResultExceptionCauseStackTraceInner className(String className) {
    
    this.className = className;
    return this;
  }

   /**
   * Get className
   * @return className
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getClassName() {
    return className;
  }


  public void setClassName(String className) {
    this.className = className;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorSyncRequestResultExceptionCauseStackTraceInner connectorSyncRequestResultExceptionCauseStackTraceInner = (ConnectorSyncRequestResultExceptionCauseStackTraceInner) o;
    return Objects.equals(this.classLoaderName, connectorSyncRequestResultExceptionCauseStackTraceInner.classLoaderName) &&
        Objects.equals(this.moduleName, connectorSyncRequestResultExceptionCauseStackTraceInner.moduleName) &&
        Objects.equals(this.moduleVersion, connectorSyncRequestResultExceptionCauseStackTraceInner.moduleVersion) &&
        Objects.equals(this.methodName, connectorSyncRequestResultExceptionCauseStackTraceInner.methodName) &&
        Objects.equals(this.fileName, connectorSyncRequestResultExceptionCauseStackTraceInner.fileName) &&
        Objects.equals(this.lineNumber, connectorSyncRequestResultExceptionCauseStackTraceInner.lineNumber) &&
        Objects.equals(this.nativeMethod, connectorSyncRequestResultExceptionCauseStackTraceInner.nativeMethod) &&
        Objects.equals(this.className, connectorSyncRequestResultExceptionCauseStackTraceInner.className);
  }

  @Override
  public int hashCode() {
    return Objects.hash(classLoaderName, moduleName, moduleVersion, methodName, fileName, lineNumber, nativeMethod, className);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorSyncRequestResultExceptionCauseStackTraceInner {\n");
    sb.append("    classLoaderName: ").append(toIndentedString(classLoaderName)).append("\n");
    sb.append("    moduleName: ").append(toIndentedString(moduleName)).append("\n");
    sb.append("    moduleVersion: ").append(toIndentedString(moduleVersion)).append("\n");
    sb.append("    methodName: ").append(toIndentedString(methodName)).append("\n");
    sb.append("    fileName: ").append(toIndentedString(fileName)).append("\n");
    sb.append("    lineNumber: ").append(toIndentedString(lineNumber)).append("\n");
    sb.append("    nativeMethod: ").append(toIndentedString(nativeMethod)).append("\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("classLoaderName");
    openapiFields.add("moduleName");
    openapiFields.add("moduleVersion");
    openapiFields.add("methodName");
    openapiFields.add("fileName");
    openapiFields.add("lineNumber");
    openapiFields.add("nativeMethod");
    openapiFields.add("className");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectorSyncRequestResultExceptionCauseStackTraceInner
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectorSyncRequestResultExceptionCauseStackTraceInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorSyncRequestResultExceptionCauseStackTraceInner is not found in the empty JSON string", ConnectorSyncRequestResultExceptionCauseStackTraceInner.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConnectorSyncRequestResultExceptionCauseStackTraceInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorSyncRequestResultExceptionCauseStackTraceInner` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      if ((jsonObj.get("classLoaderName") != null && !jsonObj.get("classLoaderName").isJsonNull()) && !jsonObj.get("classLoaderName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `classLoaderName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("classLoaderName").toString()));
      }
      if ((jsonObj.get("moduleName") != null && !jsonObj.get("moduleName").isJsonNull()) && !jsonObj.get("moduleName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleName").toString()));
      }
      if ((jsonObj.get("moduleVersion") != null && !jsonObj.get("moduleVersion").isJsonNull()) && !jsonObj.get("moduleVersion").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moduleVersion` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moduleVersion").toString()));
      }
      if ((jsonObj.get("methodName") != null && !jsonObj.get("methodName").isJsonNull()) && !jsonObj.get("methodName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `methodName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("methodName").toString()));
      }
      if ((jsonObj.get("fileName") != null && !jsonObj.get("fileName").isJsonNull()) && !jsonObj.get("fileName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fileName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fileName").toString()));
      }
      if ((jsonObj.get("className") != null && !jsonObj.get("className").isJsonNull()) && !jsonObj.get("className").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `className` to be a primitive type in the JSON string but got `%s`", jsonObj.get("className").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorSyncRequestResultExceptionCauseStackTraceInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorSyncRequestResultExceptionCauseStackTraceInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorSyncRequestResultExceptionCauseStackTraceInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorSyncRequestResultExceptionCauseStackTraceInner.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorSyncRequestResultExceptionCauseStackTraceInner>() {
           @Override
           public void write(JsonWriter out, ConnectorSyncRequestResultExceptionCauseStackTraceInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorSyncRequestResultExceptionCauseStackTraceInner read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectorSyncRequestResultExceptionCauseStackTraceInner given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectorSyncRequestResultExceptionCauseStackTraceInner
  * @throws IOException if the JSON string is invalid with respect to ConnectorSyncRequestResultExceptionCauseStackTraceInner
  */
  public static ConnectorSyncRequestResultExceptionCauseStackTraceInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorSyncRequestResultExceptionCauseStackTraceInner.class);
  }

 /**
  * Convert an instance of ConnectorSyncRequestResultExceptionCauseStackTraceInner to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

