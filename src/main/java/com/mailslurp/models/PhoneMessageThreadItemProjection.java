/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * PhoneMessageThreadItemProjection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class PhoneMessageThreadItemProjection {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nonnull
  private String body;

  public static final String SERIALIZED_NAME_PHONE_NUMBER_ID = "phoneNumberId";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_ID)
  @javax.annotation.Nonnull
  private UUID phoneNumberId;

  public static final String SERIALIZED_NAME_CREATED = "created";
  @SerializedName(SERIALIZED_NAME_CREATED)
  @javax.annotation.Nonnull
  private OffsetDateTime created;

  public static final String SERIALIZED_NAME_FROM_PHONE_NUMBER = "fromPhoneNumber";
  @SerializedName(SERIALIZED_NAME_FROM_PHONE_NUMBER)
  @javax.annotation.Nonnull
  private String fromPhoneNumber;

  public static final String SERIALIZED_NAME_TO_PHONE_NUMBER = "toPhoneNumber";
  @SerializedName(SERIALIZED_NAME_TO_PHONE_NUMBER)
  @javax.annotation.Nonnull
  private String toPhoneNumber;

  /**
   * Gets or Sets messageDirection
   */
  @JsonAdapter(MessageDirectionEnum.Adapter.class)
  public enum MessageDirectionEnum {
    OUTBOUND("OUTBOUND"),
    
    INBOUND("INBOUND");

    private String value;

    MessageDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MessageDirectionEnum fromValue(String value) {
      for (MessageDirectionEnum b : MessageDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MessageDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MessageDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MessageDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MessageDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      MessageDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MESSAGE_DIRECTION = "messageDirection";
  @SerializedName(SERIALIZED_NAME_MESSAGE_DIRECTION)
  @javax.annotation.Nonnull
  private MessageDirectionEnum messageDirection;

  public PhoneMessageThreadItemProjection() {
  }

  public PhoneMessageThreadItemProjection body(@javax.annotation.Nonnull String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nonnull String body) {
    this.body = body;
  }


  public PhoneMessageThreadItemProjection phoneNumberId(@javax.annotation.Nonnull UUID phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
    return this;
  }

  /**
   * Get phoneNumberId
   * @return phoneNumberId
   */
  @javax.annotation.Nonnull
  public UUID getPhoneNumberId() {
    return phoneNumberId;
  }

  public void setPhoneNumberId(@javax.annotation.Nonnull UUID phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
  }


  public PhoneMessageThreadItemProjection created(@javax.annotation.Nonnull OffsetDateTime created) {
    this.created = created;
    return this;
  }

  /**
   * Get created
   * @return created
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreated() {
    return created;
  }

  public void setCreated(@javax.annotation.Nonnull OffsetDateTime created) {
    this.created = created;
  }


  public PhoneMessageThreadItemProjection fromPhoneNumber(@javax.annotation.Nonnull String fromPhoneNumber) {
    this.fromPhoneNumber = fromPhoneNumber;
    return this;
  }

  /**
   * Get fromPhoneNumber
   * @return fromPhoneNumber
   */
  @javax.annotation.Nonnull
  public String getFromPhoneNumber() {
    return fromPhoneNumber;
  }

  public void setFromPhoneNumber(@javax.annotation.Nonnull String fromPhoneNumber) {
    this.fromPhoneNumber = fromPhoneNumber;
  }


  public PhoneMessageThreadItemProjection toPhoneNumber(@javax.annotation.Nonnull String toPhoneNumber) {
    this.toPhoneNumber = toPhoneNumber;
    return this;
  }

  /**
   * Get toPhoneNumber
   * @return toPhoneNumber
   */
  @javax.annotation.Nonnull
  public String getToPhoneNumber() {
    return toPhoneNumber;
  }

  public void setToPhoneNumber(@javax.annotation.Nonnull String toPhoneNumber) {
    this.toPhoneNumber = toPhoneNumber;
  }


  public PhoneMessageThreadItemProjection messageDirection(@javax.annotation.Nonnull MessageDirectionEnum messageDirection) {
    this.messageDirection = messageDirection;
    return this;
  }

  /**
   * Get messageDirection
   * @return messageDirection
   */
  @javax.annotation.Nonnull
  public MessageDirectionEnum getMessageDirection() {
    return messageDirection;
  }

  public void setMessageDirection(@javax.annotation.Nonnull MessageDirectionEnum messageDirection) {
    this.messageDirection = messageDirection;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneMessageThreadItemProjection phoneMessageThreadItemProjection = (PhoneMessageThreadItemProjection) o;
    return Objects.equals(this.body, phoneMessageThreadItemProjection.body) &&
        Objects.equals(this.phoneNumberId, phoneMessageThreadItemProjection.phoneNumberId) &&
        Objects.equals(this.created, phoneMessageThreadItemProjection.created) &&
        Objects.equals(this.fromPhoneNumber, phoneMessageThreadItemProjection.fromPhoneNumber) &&
        Objects.equals(this.toPhoneNumber, phoneMessageThreadItemProjection.toPhoneNumber) &&
        Objects.equals(this.messageDirection, phoneMessageThreadItemProjection.messageDirection);
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, phoneNumberId, created, fromPhoneNumber, toPhoneNumber, messageDirection);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneMessageThreadItemProjection {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    phoneNumberId: ").append(toIndentedString(phoneNumberId)).append("\n");
    sb.append("    created: ").append(toIndentedString(created)).append("\n");
    sb.append("    fromPhoneNumber: ").append(toIndentedString(fromPhoneNumber)).append("\n");
    sb.append("    toPhoneNumber: ").append(toIndentedString(toPhoneNumber)).append("\n");
    sb.append("    messageDirection: ").append(toIndentedString(messageDirection)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("phoneNumberId");
    openapiFields.add("created");
    openapiFields.add("fromPhoneNumber");
    openapiFields.add("toPhoneNumber");
    openapiFields.add("messageDirection");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("phoneNumberId");
    openapiRequiredFields.add("created");
    openapiRequiredFields.add("fromPhoneNumber");
    openapiRequiredFields.add("toPhoneNumber");
    openapiRequiredFields.add("messageDirection");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneMessageThreadItemProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!PhoneMessageThreadItemProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneMessageThreadItemProjection is not found in the empty JSON string", PhoneMessageThreadItemProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneMessageThreadItemProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneMessageThreadItemProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneMessageThreadItemProjection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("phoneNumberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberId").toString()));
      }
      if (!jsonObj.get("fromPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromPhoneNumber").toString()));
      }
      if (!jsonObj.get("toPhoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toPhoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toPhoneNumber").toString()));
      }
      if (!jsonObj.get("messageDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageDirection").toString()));
      }
      // validate the required field `messageDirection`
      MessageDirectionEnum.validateJsonElement(jsonObj.get("messageDirection"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneMessageThreadItemProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneMessageThreadItemProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneMessageThreadItemProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneMessageThreadItemProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneMessageThreadItemProjection>() {
           @Override
           public void write(JsonWriter out, PhoneMessageThreadItemProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneMessageThreadItemProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneMessageThreadItemProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneMessageThreadItemProjection
   * @throws IOException if the JSON string is invalid with respect to PhoneMessageThreadItemProjection
   */
  public static PhoneMessageThreadItemProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneMessageThreadItemProjection.class);
  }

  /**
   * Convert an instance of PhoneMessageThreadItemProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

