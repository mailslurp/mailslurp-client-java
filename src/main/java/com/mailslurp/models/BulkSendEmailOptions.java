/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.SendEmailOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for bulk sending an email from multiple addresses. See regular &#x60;sendEmail&#x60; methods for more information.
 */
@ApiModel(description = "Options for bulk sending an email from multiple addresses. See regular `sendEmail` methods for more information.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:42:28.001523Z[Etc/UTC]")
public class BulkSendEmailOptions {
  public static final String SERIALIZED_NAME_INBOX_IDS = "inboxIds";
  @SerializedName(SERIALIZED_NAME_INBOX_IDS)
  private List<UUID> inboxIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_SEND_EMAIL_OPTIONS = "sendEmailOptions";
  @SerializedName(SERIALIZED_NAME_SEND_EMAIL_OPTIONS)
  private SendEmailOptions sendEmailOptions;

  public BulkSendEmailOptions() {
  }

  public BulkSendEmailOptions inboxIds(List<UUID> inboxIds) {
    
    this.inboxIds = inboxIds;
    return this;
  }

  public BulkSendEmailOptions addInboxIdsItem(UUID inboxIdsItem) {
    this.inboxIds.add(inboxIdsItem);
    return this;
  }

   /**
   * Inboxes to send the email from
   * @return inboxIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Inboxes to send the email from")

  public List<UUID> getInboxIds() {
    return inboxIds;
  }


  public void setInboxIds(List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
  }


  public BulkSendEmailOptions sendEmailOptions(SendEmailOptions sendEmailOptions) {
    
    this.sendEmailOptions = sendEmailOptions;
    return this;
  }

   /**
   * Get sendEmailOptions
   * @return sendEmailOptions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SendEmailOptions getSendEmailOptions() {
    return sendEmailOptions;
  }


  public void setSendEmailOptions(SendEmailOptions sendEmailOptions) {
    this.sendEmailOptions = sendEmailOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BulkSendEmailOptions bulkSendEmailOptions = (BulkSendEmailOptions) o;
    return Objects.equals(this.inboxIds, bulkSendEmailOptions.inboxIds) &&
        Objects.equals(this.sendEmailOptions, bulkSendEmailOptions.sendEmailOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxIds, sendEmailOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BulkSendEmailOptions {\n");
    sb.append("    inboxIds: ").append(toIndentedString(inboxIds)).append("\n");
    sb.append("    sendEmailOptions: ").append(toIndentedString(sendEmailOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboxIds");
    openapiFields.add("sendEmailOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inboxIds");
    openapiRequiredFields.add("sendEmailOptions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to BulkSendEmailOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!BulkSendEmailOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BulkSendEmailOptions is not found in the empty JSON string", BulkSendEmailOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!BulkSendEmailOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BulkSendEmailOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BulkSendEmailOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("inboxIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("inboxIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxIds` to be an array in the JSON string but got `%s`", jsonObj.get("inboxIds").toString()));
      }
      // validate the required field `sendEmailOptions`
      SendEmailOptions.validateJsonObject(jsonObj.getAsJsonObject("sendEmailOptions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BulkSendEmailOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BulkSendEmailOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BulkSendEmailOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BulkSendEmailOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<BulkSendEmailOptions>() {
           @Override
           public void write(JsonWriter out, BulkSendEmailOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BulkSendEmailOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of BulkSendEmailOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of BulkSendEmailOptions
  * @throws IOException if the JSON string is invalid with respect to BulkSendEmailOptions
  */
  public static BulkSendEmailOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BulkSendEmailOptions.class);
  }

 /**
  * Convert an instance of BulkSendEmailOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

