/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * PhoneNumberDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class PhoneNumberDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  @javax.annotation.Nullable
  private String description;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_COMPLIANCE_ADDRESS = "complianceAddress";
  @SerializedName(SERIALIZED_NAME_COMPLIANCE_ADDRESS)
  @javax.annotation.Nullable
  private UUID complianceAddress;

  public static final String SERIALIZED_NAME_EMERGENCY_ADDRESS = "emergencyAddress";
  @SerializedName(SERIALIZED_NAME_EMERGENCY_ADDRESS)
  @javax.annotation.Nullable
  private UUID emergencyAddress;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nonnull
  private String phoneNumber;

  /**
   * Gets or Sets phoneCountry
   */
  @JsonAdapter(PhoneCountryEnum.Adapter.class)
  public enum PhoneCountryEnum {
    US("US"),
    
    GB("GB"),
    
    AU("AU"),
    
    CA("CA"),
    
    EE("EE"),
    
    HK("HK"),
    
    PL("PL"),
    
    CH("CH"),
    
    PT("PT"),
    
    NL("NL"),
    
    IL("IL"),
    
    SE("SE");

    private String value;

    PhoneCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneCountryEnum fromValue(String value) {
      for (PhoneCountryEnum b : PhoneCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneCountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      PhoneCountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_COUNTRY = "phoneCountry";
  @SerializedName(SERIALIZED_NAME_PHONE_COUNTRY)
  @javax.annotation.Nonnull
  private PhoneCountryEnum phoneCountry;

  public static final String SERIALIZED_NAME_PHONE_PLAN = "phonePlan";
  @SerializedName(SERIALIZED_NAME_PHONE_PLAN)
  @javax.annotation.Nonnull
  private UUID phonePlan;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  @javax.annotation.Nonnull
  private Boolean favourite;

  public PhoneNumberDto() {
  }

  public PhoneNumberDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public PhoneNumberDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public PhoneNumberDto description(@javax.annotation.Nullable String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(@javax.annotation.Nullable String description) {
    this.description = description;
  }


  public PhoneNumberDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public PhoneNumberDto complianceAddress(@javax.annotation.Nullable UUID complianceAddress) {
    this.complianceAddress = complianceAddress;
    return this;
  }

  /**
   * Get complianceAddress
   * @return complianceAddress
   */
  @javax.annotation.Nullable
  public UUID getComplianceAddress() {
    return complianceAddress;
  }

  public void setComplianceAddress(@javax.annotation.Nullable UUID complianceAddress) {
    this.complianceAddress = complianceAddress;
  }


  public PhoneNumberDto emergencyAddress(@javax.annotation.Nullable UUID emergencyAddress) {
    this.emergencyAddress = emergencyAddress;
    return this;
  }

  /**
   * Get emergencyAddress
   * @return emergencyAddress
   */
  @javax.annotation.Nullable
  public UUID getEmergencyAddress() {
    return emergencyAddress;
  }

  public void setEmergencyAddress(@javax.annotation.Nullable UUID emergencyAddress) {
    this.emergencyAddress = emergencyAddress;
  }


  public PhoneNumberDto phoneNumber(@javax.annotation.Nonnull String phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public String getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nonnull String phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public PhoneNumberDto phoneCountry(@javax.annotation.Nonnull PhoneCountryEnum phoneCountry) {
    this.phoneCountry = phoneCountry;
    return this;
  }

  /**
   * Get phoneCountry
   * @return phoneCountry
   */
  @javax.annotation.Nonnull
  public PhoneCountryEnum getPhoneCountry() {
    return phoneCountry;
  }

  public void setPhoneCountry(@javax.annotation.Nonnull PhoneCountryEnum phoneCountry) {
    this.phoneCountry = phoneCountry;
  }


  public PhoneNumberDto phonePlan(@javax.annotation.Nonnull UUID phonePlan) {
    this.phonePlan = phonePlan;
    return this;
  }

  /**
   * Get phonePlan
   * @return phonePlan
   */
  @javax.annotation.Nonnull
  public UUID getPhonePlan() {
    return phonePlan;
  }

  public void setPhonePlan(@javax.annotation.Nonnull UUID phonePlan) {
    this.phonePlan = phonePlan;
  }


  public PhoneNumberDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public PhoneNumberDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public PhoneNumberDto favourite(@javax.annotation.Nonnull Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Get favourite
   * @return favourite
   */
  @javax.annotation.Nonnull
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(@javax.annotation.Nonnull Boolean favourite) {
    this.favourite = favourite;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhoneNumberDto phoneNumberDto = (PhoneNumberDto) o;
    return Objects.equals(this.id, phoneNumberDto.id) &&
        Objects.equals(this.name, phoneNumberDto.name) &&
        Objects.equals(this.description, phoneNumberDto.description) &&
        Objects.equals(this.userId, phoneNumberDto.userId) &&
        Objects.equals(this.complianceAddress, phoneNumberDto.complianceAddress) &&
        Objects.equals(this.emergencyAddress, phoneNumberDto.emergencyAddress) &&
        Objects.equals(this.phoneNumber, phoneNumberDto.phoneNumber) &&
        Objects.equals(this.phoneCountry, phoneNumberDto.phoneCountry) &&
        Objects.equals(this.phonePlan, phoneNumberDto.phonePlan) &&
        Objects.equals(this.createdAt, phoneNumberDto.createdAt) &&
        Objects.equals(this.updatedAt, phoneNumberDto.updatedAt) &&
        Objects.equals(this.favourite, phoneNumberDto.favourite);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, description, userId, complianceAddress, emergencyAddress, phoneNumber, phoneCountry, phonePlan, createdAt, updatedAt, favourite);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhoneNumberDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    complianceAddress: ").append(toIndentedString(complianceAddress)).append("\n");
    sb.append("    emergencyAddress: ").append(toIndentedString(emergencyAddress)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    phoneCountry: ").append(toIndentedString(phoneCountry)).append("\n");
    sb.append("    phonePlan: ").append(toIndentedString(phonePlan)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("description");
    openapiFields.add("userId");
    openapiFields.add("complianceAddress");
    openapiFields.add("emergencyAddress");
    openapiFields.add("phoneNumber");
    openapiFields.add("phoneCountry");
    openapiFields.add("phonePlan");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("favourite");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("phoneCountry");
    openapiRequiredFields.add("phonePlan");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("favourite");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhoneNumberDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!PhoneNumberDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhoneNumberDto is not found in the empty JSON string", PhoneNumberDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhoneNumberDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhoneNumberDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhoneNumberDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("complianceAddress") != null && !jsonObj.get("complianceAddress").isJsonNull()) && !jsonObj.get("complianceAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complianceAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complianceAddress").toString()));
      }
      if ((jsonObj.get("emergencyAddress") != null && !jsonObj.get("emergencyAddress").isJsonNull()) && !jsonObj.get("emergencyAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emergencyAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emergencyAddress").toString()));
      }
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if (!jsonObj.get("phoneCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneCountry").toString()));
      }
      // validate the required field `phoneCountry`
      PhoneCountryEnum.validateJsonElement(jsonObj.get("phoneCountry"));
      if (!jsonObj.get("phonePlan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phonePlan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phonePlan").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhoneNumberDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhoneNumberDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhoneNumberDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhoneNumberDto.class));

       return (TypeAdapter<T>) new TypeAdapter<PhoneNumberDto>() {
           @Override
           public void write(JsonWriter out, PhoneNumberDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhoneNumberDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhoneNumberDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhoneNumberDto
   * @throws IOException if the JSON string is invalid with respect to PhoneNumberDto
   */
  public static PhoneNumberDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhoneNumberDto.class);
  }

  /**
   * Convert an instance of PhoneNumberDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

