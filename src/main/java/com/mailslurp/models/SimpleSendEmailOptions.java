/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

/**
 * SimpleSendEmailOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-15T09:03:49.642Z[GMT]")
public class SimpleSendEmailOptions {
  public static final String SERIALIZED_NAME_SENDER_ID = "senderId";
  @SerializedName(SERIALIZED_NAME_SENDER_ID)
  private UUID senderId;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  private String body;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;


  public SimpleSendEmailOptions senderId(UUID senderId) {
    
    this.senderId = senderId;
    return this;
  }

   /**
   * ID of inbox to send from. If null an inbox will be created for sending
   * @return senderId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of inbox to send from. If null an inbox will be created for sending")

  public UUID getSenderId() {
    return senderId;
  }


  public void setSenderId(UUID senderId) {
    this.senderId = senderId;
  }


  public SimpleSendEmailOptions to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Email address to send to
   * @return to
  **/
  @ApiModelProperty(required = true, value = "Email address to send to")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public SimpleSendEmailOptions body(String body) {
    
    this.body = body;
    return this;
  }

   /**
   * Body of the email message. Supports HTML
   * @return body
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Body of the email message. Supports HTML")

  public String getBody() {
    return body;
  }


  public void setBody(String body) {
    this.body = body;
  }


  public SimpleSendEmailOptions subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Subject line of the email
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Subject line of the email")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimpleSendEmailOptions simpleSendEmailOptions = (SimpleSendEmailOptions) o;
    return Objects.equals(this.senderId, simpleSendEmailOptions.senderId) &&
        Objects.equals(this.to, simpleSendEmailOptions.to) &&
        Objects.equals(this.body, simpleSendEmailOptions.body) &&
        Objects.equals(this.subject, simpleSendEmailOptions.subject);
  }

  @Override
  public int hashCode() {
    return Objects.hash(senderId, to, body, subject);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimpleSendEmailOptions {\n");
    sb.append("    senderId: ").append(toIndentedString(senderId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

