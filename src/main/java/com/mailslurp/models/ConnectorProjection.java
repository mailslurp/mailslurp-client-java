/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Connector
 */
@ApiModel(description = "Connector")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T23:33:57.654989Z[Etc/UTC]")
public class ConnectorProjection {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private UUID inboxId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  /**
   * Gets or Sets connectorType
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    IMAP("IMAP");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private ConnectorTypeEnum connectorType;

  /**
   * Gets or Sets syncScheduleType
   */
  @JsonAdapter(SyncScheduleTypeEnum.Adapter.class)
  public enum SyncScheduleTypeEnum {
    INTERVAL("INTERVAL");

    private String value;

    SyncScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncScheduleTypeEnum fromValue(String value) {
      for (SyncScheduleTypeEnum b : SyncScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncScheduleTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SYNC_SCHEDULE_TYPE = "syncScheduleType";
  @SerializedName(SERIALIZED_NAME_SYNC_SCHEDULE_TYPE)
  private SyncScheduleTypeEnum syncScheduleType;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "syncInterval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  private Integer syncInterval;

  public static final String SERIALIZED_NAME_SYNC_ENABLED = "syncEnabled";
  @SerializedName(SERIALIZED_NAME_SYNC_ENABLED)
  private Boolean syncEnabled;

  public ConnectorProjection() {
  }

  public ConnectorProjection id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ConnectorProjection inboxId(UUID inboxId) {
    
    this.inboxId = inboxId;
    return this;
  }

   /**
   * Get inboxId
   * @return inboxId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getInboxId() {
    return inboxId;
  }


  public void setInboxId(UUID inboxId) {
    this.inboxId = inboxId;
  }


  public ConnectorProjection userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public ConnectorProjection createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ConnectorProjection connectorType(ConnectorTypeEnum connectorType) {
    
    this.connectorType = connectorType;
    return this;
  }

   /**
   * Get connectorType
   * @return connectorType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }


  public void setConnectorType(ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
  }


  public ConnectorProjection syncScheduleType(SyncScheduleTypeEnum syncScheduleType) {
    
    this.syncScheduleType = syncScheduleType;
    return this;
  }

   /**
   * Get syncScheduleType
   * @return syncScheduleType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SyncScheduleTypeEnum getSyncScheduleType() {
    return syncScheduleType;
  }


  public void setSyncScheduleType(SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
  }


  public ConnectorProjection syncInterval(Integer syncInterval) {
    
    this.syncInterval = syncInterval;
    return this;
  }

   /**
   * Get syncInterval
   * @return syncInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSyncInterval() {
    return syncInterval;
  }


  public void setSyncInterval(Integer syncInterval) {
    this.syncInterval = syncInterval;
  }


  public ConnectorProjection syncEnabled(Boolean syncEnabled) {
    
    this.syncEnabled = syncEnabled;
    return this;
  }

   /**
   * Get syncEnabled
   * @return syncEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSyncEnabled() {
    return syncEnabled;
  }


  public void setSyncEnabled(Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorProjection connectorProjection = (ConnectorProjection) o;
    return Objects.equals(this.id, connectorProjection.id) &&
        Objects.equals(this.inboxId, connectorProjection.inboxId) &&
        Objects.equals(this.userId, connectorProjection.userId) &&
        Objects.equals(this.createdAt, connectorProjection.createdAt) &&
        Objects.equals(this.connectorType, connectorProjection.connectorType) &&
        Objects.equals(this.syncScheduleType, connectorProjection.syncScheduleType) &&
        Objects.equals(this.syncInterval, connectorProjection.syncInterval) &&
        Objects.equals(this.syncEnabled, connectorProjection.syncEnabled);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, inboxId, userId, createdAt, connectorType, syncScheduleType, syncInterval, syncEnabled);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorProjection {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    syncScheduleType: ").append(toIndentedString(syncScheduleType)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("    syncEnabled: ").append(toIndentedString(syncEnabled)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("inboxId");
    openapiFields.add("userId");
    openapiFields.add("createdAt");
    openapiFields.add("connectorType");
    openapiFields.add("syncScheduleType");
    openapiFields.add("syncInterval");
    openapiFields.add("syncEnabled");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("connectorType");
    openapiRequiredFields.add("syncScheduleType");
    openapiRequiredFields.add("syncEnabled");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectorProjection
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectorProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorProjection is not found in the empty JSON string", ConnectorProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConnectorProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorProjection` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorProjection.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      if (!jsonObj.get("syncScheduleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncScheduleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncScheduleType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorProjection>() {
           @Override
           public void write(JsonWriter out, ConnectorProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorProjection read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectorProjection given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectorProjection
  * @throws IOException if the JSON string is invalid with respect to ConnectorProjection
  */
  public static ConnectorProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorProjection.class);
  }

 /**
  * Convert an instance of ConnectorProjection to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

