/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * EmergencyAddressDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EmergencyAddressDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  @javax.annotation.Nonnull
  private String address1;

  /**
   * Gets or Sets phoneCountry
   */
  @JsonAdapter(PhoneCountryEnum.Adapter.class)
  public enum PhoneCountryEnum {
    US("US"),
    
    GB("GB"),
    
    AU("AU"),
    
    CA("CA"),
    
    EE("EE"),
    
    HK("HK"),
    
    PL("PL"),
    
    CH("CH"),
    
    PT("PT"),
    
    NL("NL"),
    
    IL("IL"),
    
    SE("SE");

    private String value;

    PhoneCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneCountryEnum fromValue(String value) {
      for (PhoneCountryEnum b : PhoneCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneCountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      PhoneCountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_COUNTRY = "phoneCountry";
  @SerializedName(SERIALIZED_NAME_PHONE_COUNTRY)
  @javax.annotation.Nonnull
  private PhoneCountryEnum phoneCountry;

  public EmergencyAddressDto() {
  }

  public EmergencyAddressDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public EmergencyAddressDto address1(@javax.annotation.Nonnull String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Get address1
   * @return address1
   */
  @javax.annotation.Nonnull
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(@javax.annotation.Nonnull String address1) {
    this.address1 = address1;
  }


  public EmergencyAddressDto phoneCountry(@javax.annotation.Nonnull PhoneCountryEnum phoneCountry) {
    this.phoneCountry = phoneCountry;
    return this;
  }

  /**
   * Get phoneCountry
   * @return phoneCountry
   */
  @javax.annotation.Nonnull
  public PhoneCountryEnum getPhoneCountry() {
    return phoneCountry;
  }

  public void setPhoneCountry(@javax.annotation.Nonnull PhoneCountryEnum phoneCountry) {
    this.phoneCountry = phoneCountry;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmergencyAddressDto emergencyAddressDto = (EmergencyAddressDto) o;
    return Objects.equals(this.id, emergencyAddressDto.id) &&
        Objects.equals(this.address1, emergencyAddressDto.address1) &&
        Objects.equals(this.phoneCountry, emergencyAddressDto.phoneCountry);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, address1, phoneCountry);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmergencyAddressDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    phoneCountry: ").append(toIndentedString(phoneCountry)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("address1");
    openapiFields.add("phoneCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("address1");
    openapiRequiredFields.add("phoneCountry");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmergencyAddressDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!EmergencyAddressDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmergencyAddressDto is not found in the empty JSON string", EmergencyAddressDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmergencyAddressDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmergencyAddressDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmergencyAddressDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if (!jsonObj.get("phoneCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneCountry").toString()));
      }
      // validate the required field `phoneCountry`
      PhoneCountryEnum.validateJsonElement(jsonObj.get("phoneCountry"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmergencyAddressDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmergencyAddressDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmergencyAddressDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmergencyAddressDto.class));

       return (TypeAdapter<T>) new TypeAdapter<EmergencyAddressDto>() {
           @Override
           public void write(JsonWriter out, EmergencyAddressDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmergencyAddressDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmergencyAddressDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmergencyAddressDto
   * @throws IOException if the JSON string is invalid with respect to EmergencyAddressDto
   */
  public static EmergencyAddressDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmergencyAddressDto.class);
  }

  /**
   * Convert an instance of EmergencyAddressDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

