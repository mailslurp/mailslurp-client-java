/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.CreateConnectorImapConnectionOptions;
import com.mailslurp.models.CreateConnectorOptions;
import com.mailslurp.models.CreateConnectorSmtpConnectionOptions;
import com.mailslurp.models.CreateConnectorSyncSettingsOptions;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for creating an inbox connection with an external mail provider including extra settings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-13T10:16:48.017348019Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateConnectorWithOptions {
  public static final String SERIALIZED_NAME_CREATE_CONNECTOR_OPTIONS = "createConnectorOptions";
  @SerializedName(SERIALIZED_NAME_CREATE_CONNECTOR_OPTIONS)
  @javax.annotation.Nonnull
  private CreateConnectorOptions createConnectorOptions;

  public static final String SERIALIZED_NAME_CREATE_CONNECTOR_IMAP_CONNECTION_OPTIONS = "createConnectorImapConnectionOptions";
  @SerializedName(SERIALIZED_NAME_CREATE_CONNECTOR_IMAP_CONNECTION_OPTIONS)
  @javax.annotation.Nullable
  private CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions;

  public static final String SERIALIZED_NAME_CREATE_CONNECTOR_SMTP_CONNECTION_OPTIONS = "createConnectorSmtpConnectionOptions";
  @SerializedName(SERIALIZED_NAME_CREATE_CONNECTOR_SMTP_CONNECTION_OPTIONS)
  @javax.annotation.Nullable
  private CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions;

  public static final String SERIALIZED_NAME_CREATE_CONNECTOR_SYNC_SETTINGS_OPTIONS = "createConnectorSyncSettingsOptions";
  @SerializedName(SERIALIZED_NAME_CREATE_CONNECTOR_SYNC_SETTINGS_OPTIONS)
  @javax.annotation.Nullable
  private CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions;

  public CreateConnectorWithOptions() {
  }

  public CreateConnectorWithOptions createConnectorOptions(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) {
    this.createConnectorOptions = createConnectorOptions;
    return this;
  }

  /**
   * Get createConnectorOptions
   * @return createConnectorOptions
   */
  @javax.annotation.Nonnull
  public CreateConnectorOptions getCreateConnectorOptions() {
    return createConnectorOptions;
  }

  public void setCreateConnectorOptions(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) {
    this.createConnectorOptions = createConnectorOptions;
  }


  public CreateConnectorWithOptions createConnectorImapConnectionOptions(@javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
    this.createConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
    return this;
  }

  /**
   * Get createConnectorImapConnectionOptions
   * @return createConnectorImapConnectionOptions
   */
  @javax.annotation.Nullable
  public CreateConnectorImapConnectionOptions getCreateConnectorImapConnectionOptions() {
    return createConnectorImapConnectionOptions;
  }

  public void setCreateConnectorImapConnectionOptions(@javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
    this.createConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
  }


  public CreateConnectorWithOptions createConnectorSmtpConnectionOptions(@javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
    this.createConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
    return this;
  }

  /**
   * Get createConnectorSmtpConnectionOptions
   * @return createConnectorSmtpConnectionOptions
   */
  @javax.annotation.Nullable
  public CreateConnectorSmtpConnectionOptions getCreateConnectorSmtpConnectionOptions() {
    return createConnectorSmtpConnectionOptions;
  }

  public void setCreateConnectorSmtpConnectionOptions(@javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
    this.createConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
  }


  public CreateConnectorWithOptions createConnectorSyncSettingsOptions(@javax.annotation.Nullable CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions) {
    this.createConnectorSyncSettingsOptions = createConnectorSyncSettingsOptions;
    return this;
  }

  /**
   * Get createConnectorSyncSettingsOptions
   * @return createConnectorSyncSettingsOptions
   */
  @javax.annotation.Nullable
  public CreateConnectorSyncSettingsOptions getCreateConnectorSyncSettingsOptions() {
    return createConnectorSyncSettingsOptions;
  }

  public void setCreateConnectorSyncSettingsOptions(@javax.annotation.Nullable CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions) {
    this.createConnectorSyncSettingsOptions = createConnectorSyncSettingsOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConnectorWithOptions createConnectorWithOptions = (CreateConnectorWithOptions) o;
    return Objects.equals(this.createConnectorOptions, createConnectorWithOptions.createConnectorOptions) &&
        Objects.equals(this.createConnectorImapConnectionOptions, createConnectorWithOptions.createConnectorImapConnectionOptions) &&
        Objects.equals(this.createConnectorSmtpConnectionOptions, createConnectorWithOptions.createConnectorSmtpConnectionOptions) &&
        Objects.equals(this.createConnectorSyncSettingsOptions, createConnectorWithOptions.createConnectorSyncSettingsOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(createConnectorOptions, createConnectorImapConnectionOptions, createConnectorSmtpConnectionOptions, createConnectorSyncSettingsOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConnectorWithOptions {\n");
    sb.append("    createConnectorOptions: ").append(toIndentedString(createConnectorOptions)).append("\n");
    sb.append("    createConnectorImapConnectionOptions: ").append(toIndentedString(createConnectorImapConnectionOptions)).append("\n");
    sb.append("    createConnectorSmtpConnectionOptions: ").append(toIndentedString(createConnectorSmtpConnectionOptions)).append("\n");
    sb.append("    createConnectorSyncSettingsOptions: ").append(toIndentedString(createConnectorSyncSettingsOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("createConnectorOptions");
    openapiFields.add("createConnectorImapConnectionOptions");
    openapiFields.add("createConnectorSmtpConnectionOptions");
    openapiFields.add("createConnectorSyncSettingsOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("createConnectorOptions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConnectorWithOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreateConnectorWithOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConnectorWithOptions is not found in the empty JSON string", CreateConnectorWithOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConnectorWithOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConnectorWithOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConnectorWithOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `createConnectorOptions`
      CreateConnectorOptions.validateJsonElement(jsonObj.get("createConnectorOptions"));
      // validate the optional field `createConnectorImapConnectionOptions`
      if (jsonObj.get("createConnectorImapConnectionOptions") != null && !jsonObj.get("createConnectorImapConnectionOptions").isJsonNull()) {
        CreateConnectorImapConnectionOptions.validateJsonElement(jsonObj.get("createConnectorImapConnectionOptions"));
      }
      // validate the optional field `createConnectorSmtpConnectionOptions`
      if (jsonObj.get("createConnectorSmtpConnectionOptions") != null && !jsonObj.get("createConnectorSmtpConnectionOptions").isJsonNull()) {
        CreateConnectorSmtpConnectionOptions.validateJsonElement(jsonObj.get("createConnectorSmtpConnectionOptions"));
      }
      // validate the optional field `createConnectorSyncSettingsOptions`
      if (jsonObj.get("createConnectorSyncSettingsOptions") != null && !jsonObj.get("createConnectorSyncSettingsOptions").isJsonNull()) {
        CreateConnectorSyncSettingsOptions.validateJsonElement(jsonObj.get("createConnectorSyncSettingsOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConnectorWithOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConnectorWithOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConnectorWithOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConnectorWithOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConnectorWithOptions>() {
           @Override
           public void write(JsonWriter out, CreateConnectorWithOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConnectorWithOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConnectorWithOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConnectorWithOptions
   * @throws IOException if the JSON string is invalid with respect to CreateConnectorWithOptions
   */
  public static CreateConnectorWithOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConnectorWithOptions.class);
  }

  /**
   * Convert an instance of CreateConnectorWithOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

