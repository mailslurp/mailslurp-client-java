/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * CreateAITransformerMappingOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateAITransformerMappingOptions {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_AI_TRANSFORM_ID = "aiTransformId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_ID)
  @javax.annotation.Nonnull
  private UUID aiTransformId;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  @javax.annotation.Nonnull
  private UUID entityId;

  /**
   * Gets or Sets entityType
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    INBOX("INBOX"),
    
    PHONE("PHONE");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  @javax.annotation.Nonnull
  private EntityTypeEnum entityType;

  /**
   * Gets or Sets contentSelector
   */
  @JsonAdapter(ContentSelectorEnum.Adapter.class)
  public enum ContentSelectorEnum {
    RAW("RAW"),
    
    BODY("BODY"),
    
    BODY_ATTACHMENTS("BODY_ATTACHMENTS");

    private String value;

    ContentSelectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ContentSelectorEnum fromValue(String value) {
      for (ContentSelectorEnum b : ContentSelectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ContentSelectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ContentSelectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ContentSelectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ContentSelectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      ContentSelectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_CONTENT_SELECTOR = "contentSelector";
  @SerializedName(SERIALIZED_NAME_CONTENT_SELECTOR)
  @javax.annotation.Nullable
  private ContentSelectorEnum contentSelector;

  /**
   * Gets or Sets triggerSelector
   */
  @JsonAdapter(TriggerSelectorEnum.Adapter.class)
  public enum TriggerSelectorEnum {
    PER_MESSAGE("PER_MESSAGE"),
    
    PER_ATTACHMENT("PER_ATTACHMENT");

    private String value;

    TriggerSelectorEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TriggerSelectorEnum fromValue(String value) {
      for (TriggerSelectorEnum b : TriggerSelectorEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TriggerSelectorEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TriggerSelectorEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TriggerSelectorEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TriggerSelectorEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      TriggerSelectorEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TRIGGER_SELECTOR = "triggerSelector";
  @SerializedName(SERIALIZED_NAME_TRIGGER_SELECTOR)
  @javax.annotation.Nullable
  private TriggerSelectorEnum triggerSelector;

  public static final String SERIALIZED_NAME_SPREAD_ROOT_ARRAY = "spreadRootArray";
  @SerializedName(SERIALIZED_NAME_SPREAD_ROOT_ARRAY)
  @javax.annotation.Nullable
  private Boolean spreadRootArray;

  public CreateAITransformerMappingOptions() {
  }

  public CreateAITransformerMappingOptions name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public CreateAITransformerMappingOptions aiTransformId(@javax.annotation.Nonnull UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
    return this;
  }

  /**
   * Get aiTransformId
   * @return aiTransformId
   */
  @javax.annotation.Nonnull
  public UUID getAiTransformId() {
    return aiTransformId;
  }

  public void setAiTransformId(@javax.annotation.Nonnull UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
  }


  public CreateAITransformerMappingOptions entityId(@javax.annotation.Nonnull UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * Get entityId
   * @return entityId
   */
  @javax.annotation.Nonnull
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(@javax.annotation.Nonnull UUID entityId) {
    this.entityId = entityId;
  }


  public CreateAITransformerMappingOptions entityType(@javax.annotation.Nonnull EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Get entityType
   * @return entityType
   */
  @javax.annotation.Nonnull
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(@javax.annotation.Nonnull EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public CreateAITransformerMappingOptions contentSelector(@javax.annotation.Nullable ContentSelectorEnum contentSelector) {
    this.contentSelector = contentSelector;
    return this;
  }

  /**
   * Get contentSelector
   * @return contentSelector
   */
  @javax.annotation.Nullable
  public ContentSelectorEnum getContentSelector() {
    return contentSelector;
  }

  public void setContentSelector(@javax.annotation.Nullable ContentSelectorEnum contentSelector) {
    this.contentSelector = contentSelector;
  }


  public CreateAITransformerMappingOptions triggerSelector(@javax.annotation.Nullable TriggerSelectorEnum triggerSelector) {
    this.triggerSelector = triggerSelector;
    return this;
  }

  /**
   * Get triggerSelector
   * @return triggerSelector
   */
  @javax.annotation.Nullable
  public TriggerSelectorEnum getTriggerSelector() {
    return triggerSelector;
  }

  public void setTriggerSelector(@javax.annotation.Nullable TriggerSelectorEnum triggerSelector) {
    this.triggerSelector = triggerSelector;
  }


  public CreateAITransformerMappingOptions spreadRootArray(@javax.annotation.Nullable Boolean spreadRootArray) {
    this.spreadRootArray = spreadRootArray;
    return this;
  }

  /**
   * Get spreadRootArray
   * @return spreadRootArray
   */
  @javax.annotation.Nullable
  public Boolean getSpreadRootArray() {
    return spreadRootArray;
  }

  public void setSpreadRootArray(@javax.annotation.Nullable Boolean spreadRootArray) {
    this.spreadRootArray = spreadRootArray;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateAITransformerMappingOptions createAITransformerMappingOptions = (CreateAITransformerMappingOptions) o;
    return Objects.equals(this.name, createAITransformerMappingOptions.name) &&
        Objects.equals(this.aiTransformId, createAITransformerMappingOptions.aiTransformId) &&
        Objects.equals(this.entityId, createAITransformerMappingOptions.entityId) &&
        Objects.equals(this.entityType, createAITransformerMappingOptions.entityType) &&
        Objects.equals(this.contentSelector, createAITransformerMappingOptions.contentSelector) &&
        Objects.equals(this.triggerSelector, createAITransformerMappingOptions.triggerSelector) &&
        Objects.equals(this.spreadRootArray, createAITransformerMappingOptions.spreadRootArray);
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, aiTransformId, entityId, entityType, contentSelector, triggerSelector, spreadRootArray);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateAITransformerMappingOptions {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    aiTransformId: ").append(toIndentedString(aiTransformId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    contentSelector: ").append(toIndentedString(contentSelector)).append("\n");
    sb.append("    triggerSelector: ").append(toIndentedString(triggerSelector)).append("\n");
    sb.append("    spreadRootArray: ").append(toIndentedString(spreadRootArray)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("aiTransformId");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("contentSelector");
    openapiFields.add("triggerSelector");
    openapiFields.add("spreadRootArray");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("aiTransformId");
    openapiRequiredFields.add("entityId");
    openapiRequiredFields.add("entityType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateAITransformerMappingOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreateAITransformerMappingOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateAITransformerMappingOptions is not found in the empty JSON string", CreateAITransformerMappingOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateAITransformerMappingOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateAITransformerMappingOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateAITransformerMappingOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("aiTransformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformId").toString()));
      }
      if (!jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if (!jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the required field `entityType`
      EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      if ((jsonObj.get("contentSelector") != null && !jsonObj.get("contentSelector").isJsonNull()) && !jsonObj.get("contentSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentSelector").toString()));
      }
      // validate the optional field `contentSelector`
      if (jsonObj.get("contentSelector") != null && !jsonObj.get("contentSelector").isJsonNull()) {
        ContentSelectorEnum.validateJsonElement(jsonObj.get("contentSelector"));
      }
      if ((jsonObj.get("triggerSelector") != null && !jsonObj.get("triggerSelector").isJsonNull()) && !jsonObj.get("triggerSelector").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `triggerSelector` to be a primitive type in the JSON string but got `%s`", jsonObj.get("triggerSelector").toString()));
      }
      // validate the optional field `triggerSelector`
      if (jsonObj.get("triggerSelector") != null && !jsonObj.get("triggerSelector").isJsonNull()) {
        TriggerSelectorEnum.validateJsonElement(jsonObj.get("triggerSelector"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateAITransformerMappingOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateAITransformerMappingOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateAITransformerMappingOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateAITransformerMappingOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateAITransformerMappingOptions>() {
           @Override
           public void write(JsonWriter out, CreateAITransformerMappingOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateAITransformerMappingOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateAITransformerMappingOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateAITransformerMappingOptions
   * @throws IOException if the JSON string is invalid with respect to CreateAITransformerMappingOptions
   */
  public static CreateAITransformerMappingOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateAITransformerMappingOptions.class);
  }

  /**
   * Convert an instance of CreateAITransformerMappingOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

