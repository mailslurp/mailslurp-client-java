/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for the email envelope
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class SendSMTPEnvelopeOptions {
  public static final String SERIALIZED_NAME_RCPT_TO = "rcptTo";
  @SerializedName(SERIALIZED_NAME_RCPT_TO)
  @javax.annotation.Nonnull
  private List<String> rcptTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAIL_FROM = "mailFrom";
  @SerializedName(SERIALIZED_NAME_MAIL_FROM)
  @javax.annotation.Nonnull
  private String mailFrom;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  @javax.annotation.Nonnull
  private String data;

  public SendSMTPEnvelopeOptions() {
  }

  public SendSMTPEnvelopeOptions rcptTo(@javax.annotation.Nonnull List<String> rcptTo) {
    this.rcptTo = rcptTo;
    return this;
  }

  public SendSMTPEnvelopeOptions addRcptToItem(String rcptToItem) {
    if (this.rcptTo == null) {
      this.rcptTo = new ArrayList<>();
    }
    this.rcptTo.add(rcptToItem);
    return this;
  }

  /**
   * Get rcptTo
   * @return rcptTo
   */
  @javax.annotation.Nonnull
  public List<String> getRcptTo() {
    return rcptTo;
  }

  public void setRcptTo(@javax.annotation.Nonnull List<String> rcptTo) {
    this.rcptTo = rcptTo;
  }


  public SendSMTPEnvelopeOptions mailFrom(@javax.annotation.Nonnull String mailFrom) {
    this.mailFrom = mailFrom;
    return this;
  }

  /**
   * Get mailFrom
   * @return mailFrom
   */
  @javax.annotation.Nonnull
  public String getMailFrom() {
    return mailFrom;
  }

  public void setMailFrom(@javax.annotation.Nonnull String mailFrom) {
    this.mailFrom = mailFrom;
  }


  public SendSMTPEnvelopeOptions data(@javax.annotation.Nonnull String data) {
    this.data = data;
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nonnull
  public String getData() {
    return data;
  }

  public void setData(@javax.annotation.Nonnull String data) {
    this.data = data;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions = (SendSMTPEnvelopeOptions) o;
    return Objects.equals(this.rcptTo, sendSMTPEnvelopeOptions.rcptTo) &&
        Objects.equals(this.mailFrom, sendSMTPEnvelopeOptions.mailFrom) &&
        Objects.equals(this.data, sendSMTPEnvelopeOptions.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rcptTo, mailFrom, data);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendSMTPEnvelopeOptions {\n");
    sb.append("    rcptTo: ").append(toIndentedString(rcptTo)).append("\n");
    sb.append("    mailFrom: ").append(toIndentedString(mailFrom)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("rcptTo");
    openapiFields.add("mailFrom");
    openapiFields.add("data");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("rcptTo");
    openapiRequiredFields.add("mailFrom");
    openapiRequiredFields.add("data");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SendSMTPEnvelopeOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!SendSMTPEnvelopeOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SendSMTPEnvelopeOptions is not found in the empty JSON string", SendSMTPEnvelopeOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SendSMTPEnvelopeOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SendSMTPEnvelopeOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SendSMTPEnvelopeOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("rcptTo") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("rcptTo").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `rcptTo` to be an array in the JSON string but got `%s`", jsonObj.get("rcptTo").toString()));
      }
      if (!jsonObj.get("mailFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailFrom").toString()));
      }
      if (!jsonObj.get("data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SendSMTPEnvelopeOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SendSMTPEnvelopeOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SendSMTPEnvelopeOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SendSMTPEnvelopeOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<SendSMTPEnvelopeOptions>() {
           @Override
           public void write(JsonWriter out, SendSMTPEnvelopeOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SendSMTPEnvelopeOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SendSMTPEnvelopeOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SendSMTPEnvelopeOptions
   * @throws IOException if the JSON string is invalid with respect to SendSMTPEnvelopeOptions
   */
  public static SendSMTPEnvelopeOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SendSMTPEnvelopeOptions.class);
  }

  /**
   * Convert an instance of SendSMTPEnvelopeOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

