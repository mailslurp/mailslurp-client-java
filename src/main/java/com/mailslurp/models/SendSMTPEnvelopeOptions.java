/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * Options for the email envelope
 */
@ApiModel(description = "Options for the email envelope")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-02-17T03:23:53.168Z[GMT]")
public class SendSMTPEnvelopeOptions {
  public static final String SERIALIZED_NAME_RCPT_TO = "rcptTo";
  @SerializedName(SERIALIZED_NAME_RCPT_TO)
  private List<String> rcptTo = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAIL_FROM = "mailFrom";
  @SerializedName(SERIALIZED_NAME_MAIL_FROM)
  private String mailFrom;

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private String data;


  public SendSMTPEnvelopeOptions rcptTo(List<String> rcptTo) {
    
    this.rcptTo = rcptTo;
    return this;
  }

  public SendSMTPEnvelopeOptions addRcptToItem(String rcptToItem) {
    this.rcptTo.add(rcptToItem);
    return this;
  }

   /**
   * Get rcptTo
   * @return rcptTo
  **/
  @ApiModelProperty(required = true, value = "")

  public List<String> getRcptTo() {
    return rcptTo;
  }


  public void setRcptTo(List<String> rcptTo) {
    this.rcptTo = rcptTo;
  }


  public SendSMTPEnvelopeOptions mailFrom(String mailFrom) {
    
    this.mailFrom = mailFrom;
    return this;
  }

   /**
   * Get mailFrom
   * @return mailFrom
  **/
  @ApiModelProperty(required = true, value = "")

  public String getMailFrom() {
    return mailFrom;
  }


  public void setMailFrom(String mailFrom) {
    this.mailFrom = mailFrom;
  }


  public SendSMTPEnvelopeOptions data(String data) {
    
    this.data = data;
    return this;
  }

   /**
   * Get data
   * @return data
  **/
  @ApiModelProperty(required = true, value = "")

  public String getData() {
    return data;
  }


  public void setData(String data) {
    this.data = data;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions = (SendSMTPEnvelopeOptions) o;
    return Objects.equals(this.rcptTo, sendSMTPEnvelopeOptions.rcptTo) &&
        Objects.equals(this.mailFrom, sendSMTPEnvelopeOptions.mailFrom) &&
        Objects.equals(this.data, sendSMTPEnvelopeOptions.data);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rcptTo, mailFrom, data);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SendSMTPEnvelopeOptions {\n");
    sb.append("    rcptTo: ").append(toIndentedString(rcptTo)).append("\n");
    sb.append("    mailFrom: ").append(toIndentedString(mailFrom)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

