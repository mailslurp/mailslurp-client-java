/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ConnectorSmtpConnectionDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ConnectorSmtpConnectionDto {
  public static final String SERIALIZED_NAME_CONNECTOR_ID = "connectorId";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_ID)
  @javax.annotation.Nonnull
  private UUID connectorId;

  public static final String SERIALIZED_NAME_SMTP_HOST = "smtpHost";
  @SerializedName(SERIALIZED_NAME_SMTP_HOST)
  @javax.annotation.Nonnull
  private String smtpHost;

  public static final String SERIALIZED_NAME_SMTP_PORT = "smtpPort";
  @SerializedName(SERIALIZED_NAME_SMTP_PORT)
  @javax.annotation.Nullable
  private Integer smtpPort;

  public static final String SERIALIZED_NAME_SMTP_USERNAME = "smtpUsername";
  @SerializedName(SERIALIZED_NAME_SMTP_USERNAME)
  @javax.annotation.Nullable
  private String smtpUsername;

  public static final String SERIALIZED_NAME_SMTP_PASSWORD = "smtpPassword";
  @SerializedName(SERIALIZED_NAME_SMTP_PASSWORD)
  @javax.annotation.Nullable
  private String smtpPassword;

  public static final String SERIALIZED_NAME_SMTP_SSL = "smtpSsl";
  @SerializedName(SERIALIZED_NAME_SMTP_SSL)
  @javax.annotation.Nullable
  private Boolean smtpSsl;

  public static final String SERIALIZED_NAME_START_TLS = "startTls";
  @SerializedName(SERIALIZED_NAME_START_TLS)
  @javax.annotation.Nullable
  private Boolean startTls;

  public static final String SERIALIZED_NAME_SMTP_MECHANISMS = "smtpMechanisms";
  @SerializedName(SERIALIZED_NAME_SMTP_MECHANISMS)
  @javax.annotation.Nullable
  private List<String> smtpMechanisms;

  public static final String SERIALIZED_NAME_LOCAL_HOST_NAME = "localHostName";
  @SerializedName(SERIALIZED_NAME_LOCAL_HOST_NAME)
  @javax.annotation.Nullable
  private String localHostName;

  public static final String SERIALIZED_NAME_PROXY_HOST = "proxyHost";
  @SerializedName(SERIALIZED_NAME_PROXY_HOST)
  @javax.annotation.Nullable
  private String proxyHost;

  public static final String SERIALIZED_NAME_PROXY_PORT = "proxyPort";
  @SerializedName(SERIALIZED_NAME_PROXY_PORT)
  @javax.annotation.Nullable
  private Integer proxyPort;

  public static final String SERIALIZED_NAME_PROXY_ENABLED = "proxyEnabled";
  @SerializedName(SERIALIZED_NAME_PROXY_ENABLED)
  @javax.annotation.Nullable
  private Boolean proxyEnabled;

  public static final String SERIALIZED_NAME_ENABLED = "enabled";
  @SerializedName(SERIALIZED_NAME_ENABLED)
  @javax.annotation.Nullable
  private Boolean enabled;

  public static final String SERIALIZED_NAME_SSL_TRUST = "sslTrust";
  @SerializedName(SERIALIZED_NAME_SSL_TRUST)
  @javax.annotation.Nullable
  private String sslTrust;

  public static final String SERIALIZED_NAME_SSL_PROTOCOLS = "sslProtocols";
  @SerializedName(SERIALIZED_NAME_SSL_PROTOCOLS)
  @javax.annotation.Nullable
  private List<String> sslProtocols;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public ConnectorSmtpConnectionDto() {
  }

  public ConnectorSmtpConnectionDto connectorId(@javax.annotation.Nonnull UUID connectorId) {
    this.connectorId = connectorId;
    return this;
  }

  /**
   * Get connectorId
   * @return connectorId
   */
  @javax.annotation.Nonnull
  public UUID getConnectorId() {
    return connectorId;
  }

  public void setConnectorId(@javax.annotation.Nonnull UUID connectorId) {
    this.connectorId = connectorId;
  }


  public ConnectorSmtpConnectionDto smtpHost(@javax.annotation.Nonnull String smtpHost) {
    this.smtpHost = smtpHost;
    return this;
  }

  /**
   * Get smtpHost
   * @return smtpHost
   */
  @javax.annotation.Nonnull
  public String getSmtpHost() {
    return smtpHost;
  }

  public void setSmtpHost(@javax.annotation.Nonnull String smtpHost) {
    this.smtpHost = smtpHost;
  }


  public ConnectorSmtpConnectionDto smtpPort(@javax.annotation.Nullable Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

  /**
   * Get smtpPort
   * @return smtpPort
   */
  @javax.annotation.Nullable
  public Integer getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(@javax.annotation.Nullable Integer smtpPort) {
    this.smtpPort = smtpPort;
  }


  public ConnectorSmtpConnectionDto smtpUsername(@javax.annotation.Nullable String smtpUsername) {
    this.smtpUsername = smtpUsername;
    return this;
  }

  /**
   * Get smtpUsername
   * @return smtpUsername
   */
  @javax.annotation.Nullable
  public String getSmtpUsername() {
    return smtpUsername;
  }

  public void setSmtpUsername(@javax.annotation.Nullable String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public ConnectorSmtpConnectionDto smtpPassword(@javax.annotation.Nullable String smtpPassword) {
    this.smtpPassword = smtpPassword;
    return this;
  }

  /**
   * Get smtpPassword
   * @return smtpPassword
   */
  @javax.annotation.Nullable
  public String getSmtpPassword() {
    return smtpPassword;
  }

  public void setSmtpPassword(@javax.annotation.Nullable String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  public ConnectorSmtpConnectionDto smtpSsl(@javax.annotation.Nullable Boolean smtpSsl) {
    this.smtpSsl = smtpSsl;
    return this;
  }

  /**
   * Get smtpSsl
   * @return smtpSsl
   */
  @javax.annotation.Nullable
  public Boolean getSmtpSsl() {
    return smtpSsl;
  }

  public void setSmtpSsl(@javax.annotation.Nullable Boolean smtpSsl) {
    this.smtpSsl = smtpSsl;
  }


  public ConnectorSmtpConnectionDto startTls(@javax.annotation.Nullable Boolean startTls) {
    this.startTls = startTls;
    return this;
  }

  /**
   * Get startTls
   * @return startTls
   */
  @javax.annotation.Nullable
  public Boolean getStartTls() {
    return startTls;
  }

  public void setStartTls(@javax.annotation.Nullable Boolean startTls) {
    this.startTls = startTls;
  }


  public ConnectorSmtpConnectionDto smtpMechanisms(@javax.annotation.Nullable List<String> smtpMechanisms) {
    this.smtpMechanisms = smtpMechanisms;
    return this;
  }

  public ConnectorSmtpConnectionDto addSmtpMechanismsItem(String smtpMechanismsItem) {
    if (this.smtpMechanisms == null) {
      this.smtpMechanisms = new ArrayList<>();
    }
    this.smtpMechanisms.add(smtpMechanismsItem);
    return this;
  }

  /**
   * Get smtpMechanisms
   * @return smtpMechanisms
   */
  @javax.annotation.Nullable
  public List<String> getSmtpMechanisms() {
    return smtpMechanisms;
  }

  public void setSmtpMechanisms(@javax.annotation.Nullable List<String> smtpMechanisms) {
    this.smtpMechanisms = smtpMechanisms;
  }


  public ConnectorSmtpConnectionDto localHostName(@javax.annotation.Nullable String localHostName) {
    this.localHostName = localHostName;
    return this;
  }

  /**
   * Get localHostName
   * @return localHostName
   */
  @javax.annotation.Nullable
  public String getLocalHostName() {
    return localHostName;
  }

  public void setLocalHostName(@javax.annotation.Nullable String localHostName) {
    this.localHostName = localHostName;
  }


  public ConnectorSmtpConnectionDto proxyHost(@javax.annotation.Nullable String proxyHost) {
    this.proxyHost = proxyHost;
    return this;
  }

  /**
   * Get proxyHost
   * @return proxyHost
   */
  @javax.annotation.Nullable
  public String getProxyHost() {
    return proxyHost;
  }

  public void setProxyHost(@javax.annotation.Nullable String proxyHost) {
    this.proxyHost = proxyHost;
  }


  public ConnectorSmtpConnectionDto proxyPort(@javax.annotation.Nullable Integer proxyPort) {
    this.proxyPort = proxyPort;
    return this;
  }

  /**
   * Get proxyPort
   * @return proxyPort
   */
  @javax.annotation.Nullable
  public Integer getProxyPort() {
    return proxyPort;
  }

  public void setProxyPort(@javax.annotation.Nullable Integer proxyPort) {
    this.proxyPort = proxyPort;
  }


  public ConnectorSmtpConnectionDto proxyEnabled(@javax.annotation.Nullable Boolean proxyEnabled) {
    this.proxyEnabled = proxyEnabled;
    return this;
  }

  /**
   * Get proxyEnabled
   * @return proxyEnabled
   */
  @javax.annotation.Nullable
  public Boolean getProxyEnabled() {
    return proxyEnabled;
  }

  public void setProxyEnabled(@javax.annotation.Nullable Boolean proxyEnabled) {
    this.proxyEnabled = proxyEnabled;
  }


  public ConnectorSmtpConnectionDto enabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
    return this;
  }

  /**
   * Get enabled
   * @return enabled
   */
  @javax.annotation.Nullable
  public Boolean getEnabled() {
    return enabled;
  }

  public void setEnabled(@javax.annotation.Nullable Boolean enabled) {
    this.enabled = enabled;
  }


  public ConnectorSmtpConnectionDto sslTrust(@javax.annotation.Nullable String sslTrust) {
    this.sslTrust = sslTrust;
    return this;
  }

  /**
   * Get sslTrust
   * @return sslTrust
   */
  @javax.annotation.Nullable
  public String getSslTrust() {
    return sslTrust;
  }

  public void setSslTrust(@javax.annotation.Nullable String sslTrust) {
    this.sslTrust = sslTrust;
  }


  public ConnectorSmtpConnectionDto sslProtocols(@javax.annotation.Nullable List<String> sslProtocols) {
    this.sslProtocols = sslProtocols;
    return this;
  }

  public ConnectorSmtpConnectionDto addSslProtocolsItem(String sslProtocolsItem) {
    if (this.sslProtocols == null) {
      this.sslProtocols = new ArrayList<>();
    }
    this.sslProtocols.add(sslProtocolsItem);
    return this;
  }

  /**
   * Get sslProtocols
   * @return sslProtocols
   */
  @javax.annotation.Nullable
  public List<String> getSslProtocols() {
    return sslProtocols;
  }

  public void setSslProtocols(@javax.annotation.Nullable List<String> sslProtocols) {
    this.sslProtocols = sslProtocols;
  }


  public ConnectorSmtpConnectionDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public ConnectorSmtpConnectionDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorSmtpConnectionDto connectorSmtpConnectionDto = (ConnectorSmtpConnectionDto) o;
    return Objects.equals(this.connectorId, connectorSmtpConnectionDto.connectorId) &&
        Objects.equals(this.smtpHost, connectorSmtpConnectionDto.smtpHost) &&
        Objects.equals(this.smtpPort, connectorSmtpConnectionDto.smtpPort) &&
        Objects.equals(this.smtpUsername, connectorSmtpConnectionDto.smtpUsername) &&
        Objects.equals(this.smtpPassword, connectorSmtpConnectionDto.smtpPassword) &&
        Objects.equals(this.smtpSsl, connectorSmtpConnectionDto.smtpSsl) &&
        Objects.equals(this.startTls, connectorSmtpConnectionDto.startTls) &&
        Objects.equals(this.smtpMechanisms, connectorSmtpConnectionDto.smtpMechanisms) &&
        Objects.equals(this.localHostName, connectorSmtpConnectionDto.localHostName) &&
        Objects.equals(this.proxyHost, connectorSmtpConnectionDto.proxyHost) &&
        Objects.equals(this.proxyPort, connectorSmtpConnectionDto.proxyPort) &&
        Objects.equals(this.proxyEnabled, connectorSmtpConnectionDto.proxyEnabled) &&
        Objects.equals(this.enabled, connectorSmtpConnectionDto.enabled) &&
        Objects.equals(this.sslTrust, connectorSmtpConnectionDto.sslTrust) &&
        Objects.equals(this.sslProtocols, connectorSmtpConnectionDto.sslProtocols) &&
        Objects.equals(this.createdAt, connectorSmtpConnectionDto.createdAt) &&
        Objects.equals(this.id, connectorSmtpConnectionDto.id);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorId, smtpHost, smtpPort, smtpUsername, smtpPassword, smtpSsl, startTls, smtpMechanisms, localHostName, proxyHost, proxyPort, proxyEnabled, enabled, sslTrust, sslProtocols, createdAt, id);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorSmtpConnectionDto {\n");
    sb.append("    connectorId: ").append(toIndentedString(connectorId)).append("\n");
    sb.append("    smtpHost: ").append(toIndentedString(smtpHost)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    smtpSsl: ").append(toIndentedString(smtpSsl)).append("\n");
    sb.append("    startTls: ").append(toIndentedString(startTls)).append("\n");
    sb.append("    smtpMechanisms: ").append(toIndentedString(smtpMechanisms)).append("\n");
    sb.append("    localHostName: ").append(toIndentedString(localHostName)).append("\n");
    sb.append("    proxyHost: ").append(toIndentedString(proxyHost)).append("\n");
    sb.append("    proxyPort: ").append(toIndentedString(proxyPort)).append("\n");
    sb.append("    proxyEnabled: ").append(toIndentedString(proxyEnabled)).append("\n");
    sb.append("    enabled: ").append(toIndentedString(enabled)).append("\n");
    sb.append("    sslTrust: ").append(toIndentedString(sslTrust)).append("\n");
    sb.append("    sslProtocols: ").append(toIndentedString(sslProtocols)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorId");
    openapiFields.add("smtpHost");
    openapiFields.add("smtpPort");
    openapiFields.add("smtpUsername");
    openapiFields.add("smtpPassword");
    openapiFields.add("smtpSsl");
    openapiFields.add("startTls");
    openapiFields.add("smtpMechanisms");
    openapiFields.add("localHostName");
    openapiFields.add("proxyHost");
    openapiFields.add("proxyPort");
    openapiFields.add("proxyEnabled");
    openapiFields.add("enabled");
    openapiFields.add("sslTrust");
    openapiFields.add("sslProtocols");
    openapiFields.add("createdAt");
    openapiFields.add("id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectorId");
    openapiRequiredFields.add("smtpHost");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConnectorSmtpConnectionDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ConnectorSmtpConnectionDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorSmtpConnectionDto is not found in the empty JSON string", ConnectorSmtpConnectionDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConnectorSmtpConnectionDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorSmtpConnectionDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ConnectorSmtpConnectionDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("connectorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorId").toString()));
      }
      if (!jsonObj.get("smtpHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpHost").toString()));
      }
      if ((jsonObj.get("smtpUsername") != null && !jsonObj.get("smtpUsername").isJsonNull()) && !jsonObj.get("smtpUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpUsername").toString()));
      }
      if ((jsonObj.get("smtpPassword") != null && !jsonObj.get("smtpPassword").isJsonNull()) && !jsonObj.get("smtpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpPassword").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("smtpMechanisms") != null && !jsonObj.get("smtpMechanisms").isJsonNull() && !jsonObj.get("smtpMechanisms").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpMechanisms` to be an array in the JSON string but got `%s`", jsonObj.get("smtpMechanisms").toString()));
      }
      if ((jsonObj.get("localHostName") != null && !jsonObj.get("localHostName").isJsonNull()) && !jsonObj.get("localHostName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localHostName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localHostName").toString()));
      }
      if ((jsonObj.get("proxyHost") != null && !jsonObj.get("proxyHost").isJsonNull()) && !jsonObj.get("proxyHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `proxyHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("proxyHost").toString()));
      }
      if ((jsonObj.get("sslTrust") != null && !jsonObj.get("sslTrust").isJsonNull()) && !jsonObj.get("sslTrust").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslTrust` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sslTrust").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sslProtocols") != null && !jsonObj.get("sslProtocols").isJsonNull() && !jsonObj.get("sslProtocols").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sslProtocols` to be an array in the JSON string but got `%s`", jsonObj.get("sslProtocols").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorSmtpConnectionDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorSmtpConnectionDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorSmtpConnectionDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorSmtpConnectionDto.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorSmtpConnectionDto>() {
           @Override
           public void write(JsonWriter out, ConnectorSmtpConnectionDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorSmtpConnectionDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConnectorSmtpConnectionDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConnectorSmtpConnectionDto
   * @throws IOException if the JSON string is invalid with respect to ConnectorSmtpConnectionDto
   */
  public static ConnectorSmtpConnectionDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorSmtpConnectionDto.class);
  }

  /**
   * Convert an instance of ConnectorSmtpConnectionDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

