/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * DELIVERY_STATUS webhook payload. Sent to your webhook url endpoint via HTTP POST when an email delivery status is created. This could be a successful delivery or a delivery failure.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookDeliveryStatusPayload {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nonnull
  private String messageId;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  @javax.annotation.Nonnull
  private UUID webhookId;

  /**
   * Name of the event type webhook is being triggered for.
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EventNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nonnull
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_WEBHOOK_NAME = "webhookName";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_NAME)
  @javax.annotation.Nullable
  private String webhookName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_SENT_ID = "sentId";
  @SerializedName(SERIALIZED_NAME_SENT_ID)
  @javax.annotation.Nullable
  private UUID sentId;

  public static final String SERIALIZED_NAME_REMOTE_MTA_IP = "remoteMtaIp";
  @SerializedName(SERIALIZED_NAME_REMOTE_MTA_IP)
  @javax.annotation.Nullable
  private String remoteMtaIp;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_REPORTING_MTA = "reportingMta";
  @SerializedName(SERIALIZED_NAME_REPORTING_MTA)
  @javax.annotation.Nullable
  private String reportingMta;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> recipients;

  public static final String SERIALIZED_NAME_SMTP_RESPONSE = "smtpResponse";
  @SerializedName(SERIALIZED_NAME_SMTP_RESPONSE)
  @javax.annotation.Nullable
  private String smtpResponse;

  public static final String SERIALIZED_NAME_SMTP_STATUS_CODE = "smtpStatusCode";
  @SerializedName(SERIALIZED_NAME_SMTP_STATUS_CODE)
  @javax.annotation.Nullable
  private Integer smtpStatusCode;

  public static final String SERIALIZED_NAME_PROCESSING_TIME_MILLIS = "processingTimeMillis";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIME_MILLIS)
  @javax.annotation.Nullable
  private Long processingTimeMillis;

  public static final String SERIALIZED_NAME_RECEIVED = "received";
  @SerializedName(SERIALIZED_NAME_RECEIVED)
  @javax.annotation.Nullable
  private OffsetDateTime received;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public WebhookDeliveryStatusPayload() {
  }

  public WebhookDeliveryStatusPayload messageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
  }


  public WebhookDeliveryStatusPayload webhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * ID of webhook entity being triggered
   * @return webhookId
   */
  @javax.annotation.Nonnull
  public UUID getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookDeliveryStatusPayload eventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Name of the event type webhook is being triggered for.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public EventNameEnum getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookDeliveryStatusPayload webhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
    return this;
  }

  /**
   * Name of the webhook being triggered
   * @return webhookName
   */
  @javax.annotation.Nullable
  public String getWebhookName() {
    return webhookName;
  }

  public void setWebhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
  }


  public WebhookDeliveryStatusPayload id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of delivery status
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public WebhookDeliveryStatusPayload userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID of event
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public WebhookDeliveryStatusPayload sentId(@javax.annotation.Nullable UUID sentId) {
    this.sentId = sentId;
    return this;
  }

  /**
   * ID of sent email
   * @return sentId
   */
  @javax.annotation.Nullable
  public UUID getSentId() {
    return sentId;
  }

  public void setSentId(@javax.annotation.Nullable UUID sentId) {
    this.sentId = sentId;
  }


  public WebhookDeliveryStatusPayload remoteMtaIp(@javax.annotation.Nullable String remoteMtaIp) {
    this.remoteMtaIp = remoteMtaIp;
    return this;
  }

  /**
   * IP address of the remote Mail Transfer Agent
   * @return remoteMtaIp
   */
  @javax.annotation.Nullable
  public String getRemoteMtaIp() {
    return remoteMtaIp;
  }

  public void setRemoteMtaIp(@javax.annotation.Nullable String remoteMtaIp) {
    this.remoteMtaIp = remoteMtaIp;
  }


  public WebhookDeliveryStatusPayload inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Id of the inbox
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public WebhookDeliveryStatusPayload reportingMta(@javax.annotation.Nullable String reportingMta) {
    this.reportingMta = reportingMta;
    return this;
  }

  /**
   * Mail Transfer Agent reporting delivery status
   * @return reportingMta
   */
  @javax.annotation.Nullable
  public String getReportingMta() {
    return reportingMta;
  }

  public void setReportingMta(@javax.annotation.Nullable String reportingMta) {
    this.reportingMta = reportingMta;
  }


  public WebhookDeliveryStatusPayload recipients(@javax.annotation.Nullable List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public WebhookDeliveryStatusPayload addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Recipients for delivery
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable List<String> recipients) {
    this.recipients = recipients;
  }


  public WebhookDeliveryStatusPayload smtpResponse(@javax.annotation.Nullable String smtpResponse) {
    this.smtpResponse = smtpResponse;
    return this;
  }

  /**
   * SMTP server response message
   * @return smtpResponse
   */
  @javax.annotation.Nullable
  public String getSmtpResponse() {
    return smtpResponse;
  }

  public void setSmtpResponse(@javax.annotation.Nullable String smtpResponse) {
    this.smtpResponse = smtpResponse;
  }


  public WebhookDeliveryStatusPayload smtpStatusCode(@javax.annotation.Nullable Integer smtpStatusCode) {
    this.smtpStatusCode = smtpStatusCode;
    return this;
  }

  /**
   * SMTP server status
   * @return smtpStatusCode
   */
  @javax.annotation.Nullable
  public Integer getSmtpStatusCode() {
    return smtpStatusCode;
  }

  public void setSmtpStatusCode(@javax.annotation.Nullable Integer smtpStatusCode) {
    this.smtpStatusCode = smtpStatusCode;
  }


  public WebhookDeliveryStatusPayload processingTimeMillis(@javax.annotation.Nullable Long processingTimeMillis) {
    this.processingTimeMillis = processingTimeMillis;
    return this;
  }

  /**
   * Time in milliseconds for delivery processing
   * @return processingTimeMillis
   */
  @javax.annotation.Nullable
  public Long getProcessingTimeMillis() {
    return processingTimeMillis;
  }

  public void setProcessingTimeMillis(@javax.annotation.Nullable Long processingTimeMillis) {
    this.processingTimeMillis = processingTimeMillis;
  }


  public WebhookDeliveryStatusPayload received(@javax.annotation.Nullable OffsetDateTime received) {
    this.received = received;
    return this;
  }

  /**
   * Time event was received
   * @return received
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceived() {
    return received;
  }

  public void setReceived(@javax.annotation.Nullable OffsetDateTime received) {
    this.received = received;
  }


  public WebhookDeliveryStatusPayload subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Email subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookDeliveryStatusPayload webhookDeliveryStatusPayload = (WebhookDeliveryStatusPayload) o;
    return Objects.equals(this.messageId, webhookDeliveryStatusPayload.messageId) &&
        Objects.equals(this.webhookId, webhookDeliveryStatusPayload.webhookId) &&
        Objects.equals(this.eventName, webhookDeliveryStatusPayload.eventName) &&
        Objects.equals(this.webhookName, webhookDeliveryStatusPayload.webhookName) &&
        Objects.equals(this.id, webhookDeliveryStatusPayload.id) &&
        Objects.equals(this.userId, webhookDeliveryStatusPayload.userId) &&
        Objects.equals(this.sentId, webhookDeliveryStatusPayload.sentId) &&
        Objects.equals(this.remoteMtaIp, webhookDeliveryStatusPayload.remoteMtaIp) &&
        Objects.equals(this.inboxId, webhookDeliveryStatusPayload.inboxId) &&
        Objects.equals(this.reportingMta, webhookDeliveryStatusPayload.reportingMta) &&
        Objects.equals(this.recipients, webhookDeliveryStatusPayload.recipients) &&
        Objects.equals(this.smtpResponse, webhookDeliveryStatusPayload.smtpResponse) &&
        Objects.equals(this.smtpStatusCode, webhookDeliveryStatusPayload.smtpStatusCode) &&
        Objects.equals(this.processingTimeMillis, webhookDeliveryStatusPayload.processingTimeMillis) &&
        Objects.equals(this.received, webhookDeliveryStatusPayload.received) &&
        Objects.equals(this.subject, webhookDeliveryStatusPayload.subject);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, webhookId, eventName, webhookName, id, userId, sentId, remoteMtaIp, inboxId, reportingMta, recipients, smtpResponse, smtpStatusCode, processingTimeMillis, received, subject);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookDeliveryStatusPayload {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    webhookName: ").append(toIndentedString(webhookName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    sentId: ").append(toIndentedString(sentId)).append("\n");
    sb.append("    remoteMtaIp: ").append(toIndentedString(remoteMtaIp)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    reportingMta: ").append(toIndentedString(reportingMta)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    smtpResponse: ").append(toIndentedString(smtpResponse)).append("\n");
    sb.append("    smtpStatusCode: ").append(toIndentedString(smtpStatusCode)).append("\n");
    sb.append("    processingTimeMillis: ").append(toIndentedString(processingTimeMillis)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageId");
    openapiFields.add("webhookId");
    openapiFields.add("eventName");
    openapiFields.add("webhookName");
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("sentId");
    openapiFields.add("remoteMtaIp");
    openapiFields.add("inboxId");
    openapiFields.add("reportingMta");
    openapiFields.add("recipients");
    openapiFields.add("smtpResponse");
    openapiFields.add("smtpStatusCode");
    openapiFields.add("processingTimeMillis");
    openapiFields.add("received");
    openapiFields.add("subject");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("webhookId");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookDeliveryStatusPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookDeliveryStatusPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookDeliveryStatusPayload is not found in the empty JSON string", WebhookDeliveryStatusPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookDeliveryStatusPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookDeliveryStatusPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookDeliveryStatusPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("webhookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookId").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the required field `eventName`
      EventNameEnum.validateJsonElement(jsonObj.get("eventName"));
      if ((jsonObj.get("webhookName") != null && !jsonObj.get("webhookName").isJsonNull()) && !jsonObj.get("webhookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookName").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("sentId") != null && !jsonObj.get("sentId").isJsonNull()) && !jsonObj.get("sentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentId").toString()));
      }
      if ((jsonObj.get("remoteMtaIp") != null && !jsonObj.get("remoteMtaIp").isJsonNull()) && !jsonObj.get("remoteMtaIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteMtaIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteMtaIp").toString()));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("reportingMta") != null && !jsonObj.get("reportingMta").isJsonNull()) && !jsonObj.get("reportingMta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingMta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingMta").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull() && !jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if ((jsonObj.get("smtpResponse") != null && !jsonObj.get("smtpResponse").isJsonNull()) && !jsonObj.get("smtpResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpResponse").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookDeliveryStatusPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookDeliveryStatusPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookDeliveryStatusPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookDeliveryStatusPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookDeliveryStatusPayload>() {
           @Override
           public void write(JsonWriter out, WebhookDeliveryStatusPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookDeliveryStatusPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookDeliveryStatusPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookDeliveryStatusPayload
   * @throws IOException if the JSON string is invalid with respect to WebhookDeliveryStatusPayload
   */
  public static WebhookDeliveryStatusPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookDeliveryStatusPayload.class);
  }

  /**
   * Convert an instance of WebhookDeliveryStatusPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

