/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ServerEndpoints
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T21:25:04.210100741Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ServerEndpoints {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nonnull
  private String host;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  @javax.annotation.Nonnull
  private Integer port;

  public static final String SERIALIZED_NAME_TLS = "tls";
  @SerializedName(SERIALIZED_NAME_TLS)
  @javax.annotation.Nonnull
  private Boolean tls;

  public static final String SERIALIZED_NAME_ALT_PORTS = "altPorts";
  @SerializedName(SERIALIZED_NAME_ALT_PORTS)
  @javax.annotation.Nonnull
  private List<Integer> altPorts = new ArrayList<>();

  public ServerEndpoints() {
  }

  public ServerEndpoints host(@javax.annotation.Nonnull String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nonnull String host) {
    this.host = host;
  }


  public ServerEndpoints port(@javax.annotation.Nonnull Integer port) {
    this.port = port;
    return this;
  }

  /**
   * Get port
   * @return port
   */
  @javax.annotation.Nonnull
  public Integer getPort() {
    return port;
  }

  public void setPort(@javax.annotation.Nonnull Integer port) {
    this.port = port;
  }


  public ServerEndpoints tls(@javax.annotation.Nonnull Boolean tls) {
    this.tls = tls;
    return this;
  }

  /**
   * Get tls
   * @return tls
   */
  @javax.annotation.Nonnull
  public Boolean getTls() {
    return tls;
  }

  public void setTls(@javax.annotation.Nonnull Boolean tls) {
    this.tls = tls;
  }


  public ServerEndpoints altPorts(@javax.annotation.Nonnull List<Integer> altPorts) {
    this.altPorts = altPorts;
    return this;
  }

  public ServerEndpoints addAltPortsItem(Integer altPortsItem) {
    if (this.altPorts == null) {
      this.altPorts = new ArrayList<>();
    }
    this.altPorts.add(altPortsItem);
    return this;
  }

  /**
   * Get altPorts
   * @return altPorts
   */
  @javax.annotation.Nonnull
  public List<Integer> getAltPorts() {
    return altPorts;
  }

  public void setAltPorts(@javax.annotation.Nonnull List<Integer> altPorts) {
    this.altPorts = altPorts;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServerEndpoints serverEndpoints = (ServerEndpoints) o;
    return Objects.equals(this.host, serverEndpoints.host) &&
        Objects.equals(this.port, serverEndpoints.port) &&
        Objects.equals(this.tls, serverEndpoints.tls) &&
        Objects.equals(this.altPorts, serverEndpoints.altPorts);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, port, tls, altPorts);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServerEndpoints {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("    tls: ").append(toIndentedString(tls)).append("\n");
    sb.append("    altPorts: ").append(toIndentedString(altPorts)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("port");
    openapiFields.add("tls");
    openapiFields.add("altPorts");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("port");
    openapiRequiredFields.add("tls");
    openapiRequiredFields.add("altPorts");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServerEndpoints
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ServerEndpoints.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServerEndpoints is not found in the empty JSON string", ServerEndpoints.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServerEndpoints.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServerEndpoints` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ServerEndpoints.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("altPorts") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("altPorts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `altPorts` to be an array in the JSON string but got `%s`", jsonObj.get("altPorts").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServerEndpoints.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServerEndpoints' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServerEndpoints> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServerEndpoints.class));

       return (TypeAdapter<T>) new TypeAdapter<ServerEndpoints>() {
           @Override
           public void write(JsonWriter out, ServerEndpoints value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServerEndpoints read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServerEndpoints given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServerEndpoints
   * @throws IOException if the JSON string is invalid with respect to ServerEndpoints
   */
  public static ServerEndpoints fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServerEndpoints.class);
  }

  /**
   * Convert an instance of ServerEndpoints to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

