/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.EmailRecipients;
import com.mailslurp.models.Sender;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Sent email details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class SentEmailDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nonnull
  private UUID inboxId;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  @javax.annotation.Nullable
  private UUID domainId;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nullable
  private List<String> to;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private Sender sender;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private EmailRecipients recipients;

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  @javax.annotation.Nullable
  private String replyTo;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  @javax.annotation.Nullable
  private List<String> cc;

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  @javax.annotation.Nullable
  private List<String> bcc;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<String> attachments;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_BODY_M_D5_HASH = "bodyMD5Hash";
  @SerializedName(SERIALIZED_NAME_BODY_M_D5_HASH)
  @javax.annotation.Nullable
  private String bodyMD5Hash;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_TO_CONTACTS = "toContacts";
  @SerializedName(SERIALIZED_NAME_TO_CONTACTS)
  @javax.annotation.Nullable
  private List<UUID> toContacts;

  public static final String SERIALIZED_NAME_TO_GROUP = "toGroup";
  @SerializedName(SERIALIZED_NAME_TO_GROUP)
  @javax.annotation.Nullable
  private UUID toGroup;

  public static final String SERIALIZED_NAME_CHARSET = "charset";
  @SerializedName(SERIALIZED_NAME_CHARSET)
  @javax.annotation.Nullable
  private String charset;

  public static final String SERIALIZED_NAME_IS_H_T_M_L = "isHTML";
  @SerializedName(SERIALIZED_NAME_IS_H_T_M_L)
  @javax.annotation.Nullable
  private Boolean isHTML;

  public static final String SERIALIZED_NAME_SENT_AT = "sentAt";
  @SerializedName(SERIALIZED_NAME_SENT_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime sentAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_PIXEL_IDS = "pixelIds";
  @SerializedName(SERIALIZED_NAME_PIXEL_IDS)
  @javax.annotation.Nullable
  private List<UUID> pixelIds;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nullable
  private String messageId;

  public static final String SERIALIZED_NAME_MESSAGE_IDS = "messageIds";
  @SerializedName(SERIALIZED_NAME_MESSAGE_IDS)
  @javax.annotation.Nullable
  private List<String> messageIds;

  public static final String SERIALIZED_NAME_VIRTUAL_SEND = "virtualSend";
  @SerializedName(SERIALIZED_NAME_VIRTUAL_SEND)
  @javax.annotation.Nullable
  private Boolean virtualSend;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  @javax.annotation.Nullable
  private UUID templateId;

  public static final String SERIALIZED_NAME_TEMPLATE_VARIABLES = "templateVariables";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VARIABLES)
  @javax.annotation.Nullable
  private Map<String, Object> templateVariables;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> headers;

  public static final String SERIALIZED_NAME_THREAD_ID = "threadId";
  @SerializedName(SERIALIZED_NAME_THREAD_ID)
  @javax.annotation.Nullable
  private UUID threadId;

  public static final String SERIALIZED_NAME_BODY_EXCERPT = "bodyExcerpt";
  @SerializedName(SERIALIZED_NAME_BODY_EXCERPT)
  @javax.annotation.Nullable
  private String bodyExcerpt;

  public static final String SERIALIZED_NAME_TEXT_EXCERPT = "textExcerpt";
  @SerializedName(SERIALIZED_NAME_TEXT_EXCERPT)
  @javax.annotation.Nullable
  private String textExcerpt;

  public static final String SERIALIZED_NAME_IN_REPLY_TO = "inReplyTo";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO)
  @javax.annotation.Nullable
  private String inReplyTo;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  @javax.annotation.Nullable
  private Boolean favourite;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  @javax.annotation.Nullable
  private Long sizeBytes;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  @javax.annotation.Nullable
  private Boolean html;

  public SentEmailDto() {
  }

  public SentEmailDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of sent email
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public SentEmailDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public SentEmailDto inboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Inbox ID email was sent from
   * @return inboxId
   */
  @javax.annotation.Nonnull
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
  }


  public SentEmailDto domainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Domain ID
   * @return domainId
   */
  @javax.annotation.Nullable
  public UUID getDomainId() {
    return domainId;
  }

  public void setDomainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
  }


  public SentEmailDto to(@javax.annotation.Nullable List<String> to) {
    this.to = to;
    return this;
  }

  public SentEmailDto addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Recipients email was sent to
   * @return to
   */
  @javax.annotation.Nullable
  public List<String> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nullable List<String> to) {
    this.to = to;
  }


  public SentEmailDto from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * Sent from address
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }


  public SentEmailDto sender(@javax.annotation.Nullable Sender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable Sender sender) {
    this.sender = sender;
  }


  public SentEmailDto recipients(@javax.annotation.Nullable EmailRecipients recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public EmailRecipients getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable EmailRecipients recipients) {
    this.recipients = recipients;
  }


  public SentEmailDto replyTo(@javax.annotation.Nullable String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Get replyTo
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(@javax.annotation.Nullable String replyTo) {
    this.replyTo = replyTo;
  }


  public SentEmailDto cc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
    return this;
  }

  public SentEmailDto addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<String> getCc() {
    return cc;
  }

  public void setCc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
  }


  public SentEmailDto bcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public SentEmailDto addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * Get bcc
   * @return bcc
   */
  @javax.annotation.Nullable
  public List<String> getBcc() {
    return bcc;
  }

  public void setBcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
  }


  public SentEmailDto attachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public SentEmailDto addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Array of IDs of attachments that were sent with this email
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
  }


  public SentEmailDto subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public SentEmailDto bodyMD5Hash(@javax.annotation.Nullable String bodyMD5Hash) {
    this.bodyMD5Hash = bodyMD5Hash;
    return this;
  }

  /**
   * MD5 Hash
   * @return bodyMD5Hash
   */
  @javax.annotation.Nullable
  public String getBodyMD5Hash() {
    return bodyMD5Hash;
  }

  public void setBodyMD5Hash(@javax.annotation.Nullable String bodyMD5Hash) {
    this.bodyMD5Hash = bodyMD5Hash;
  }


  public SentEmailDto body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * Sent email body
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public SentEmailDto toContacts(@javax.annotation.Nullable List<UUID> toContacts) {
    this.toContacts = toContacts;
    return this;
  }

  public SentEmailDto addToContactsItem(UUID toContactsItem) {
    if (this.toContacts == null) {
      this.toContacts = new ArrayList<>();
    }
    this.toContacts.add(toContactsItem);
    return this;
  }

  /**
   * Get toContacts
   * @return toContacts
   */
  @javax.annotation.Nullable
  public List<UUID> getToContacts() {
    return toContacts;
  }

  public void setToContacts(@javax.annotation.Nullable List<UUID> toContacts) {
    this.toContacts = toContacts;
  }


  public SentEmailDto toGroup(@javax.annotation.Nullable UUID toGroup) {
    this.toGroup = toGroup;
    return this;
  }

  /**
   * Get toGroup
   * @return toGroup
   */
  @javax.annotation.Nullable
  public UUID getToGroup() {
    return toGroup;
  }

  public void setToGroup(@javax.annotation.Nullable UUID toGroup) {
    this.toGroup = toGroup;
  }


  public SentEmailDto charset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
    return this;
  }

  /**
   * Get charset
   * @return charset
   */
  @javax.annotation.Nullable
  public String getCharset() {
    return charset;
  }

  public void setCharset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
  }


  public SentEmailDto isHTML(@javax.annotation.Nullable Boolean isHTML) {
    this.isHTML = isHTML;
    return this;
  }

  /**
   * Get isHTML
   * @return isHTML
   */
  @javax.annotation.Nullable
  public Boolean getIsHTML() {
    return isHTML;
  }

  public void setIsHTML(@javax.annotation.Nullable Boolean isHTML) {
    this.isHTML = isHTML;
  }


  public SentEmailDto sentAt(@javax.annotation.Nonnull OffsetDateTime sentAt) {
    this.sentAt = sentAt;
    return this;
  }

  /**
   * Get sentAt
   * @return sentAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getSentAt() {
    return sentAt;
  }

  public void setSentAt(@javax.annotation.Nonnull OffsetDateTime sentAt) {
    this.sentAt = sentAt;
  }


  public SentEmailDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SentEmailDto pixelIds(@javax.annotation.Nullable List<UUID> pixelIds) {
    this.pixelIds = pixelIds;
    return this;
  }

  public SentEmailDto addPixelIdsItem(UUID pixelIdsItem) {
    if (this.pixelIds == null) {
      this.pixelIds = new ArrayList<>();
    }
    this.pixelIds.add(pixelIdsItem);
    return this;
  }

  /**
   * Get pixelIds
   * @return pixelIds
   */
  @javax.annotation.Nullable
  public List<UUID> getPixelIds() {
    return pixelIds;
  }

  public void setPixelIds(@javax.annotation.Nullable List<UUID> pixelIds) {
    this.pixelIds = pixelIds;
  }


  public SentEmailDto messageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * RFC 5322 Message-ID header value without angle brackets.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
  }


  public SentEmailDto messageIds(@javax.annotation.Nullable List<String> messageIds) {
    this.messageIds = messageIds;
    return this;
  }

  public SentEmailDto addMessageIdsItem(String messageIdsItem) {
    if (this.messageIds == null) {
      this.messageIds = new ArrayList<>();
    }
    this.messageIds.add(messageIdsItem);
    return this;
  }

  /**
   * Get messageIds
   * @return messageIds
   */
  @javax.annotation.Nullable
  public List<String> getMessageIds() {
    return messageIds;
  }

  public void setMessageIds(@javax.annotation.Nullable List<String> messageIds) {
    this.messageIds = messageIds;
  }


  public SentEmailDto virtualSend(@javax.annotation.Nullable Boolean virtualSend) {
    this.virtualSend = virtualSend;
    return this;
  }

  /**
   * Get virtualSend
   * @return virtualSend
   */
  @javax.annotation.Nullable
  public Boolean getVirtualSend() {
    return virtualSend;
  }

  public void setVirtualSend(@javax.annotation.Nullable Boolean virtualSend) {
    this.virtualSend = virtualSend;
  }


  public SentEmailDto templateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * Get templateId
   * @return templateId
   */
  @javax.annotation.Nullable
  public UUID getTemplateId() {
    return templateId;
  }

  public void setTemplateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
  }


  public SentEmailDto templateVariables(@javax.annotation.Nullable Map<String, Object> templateVariables) {
    this.templateVariables = templateVariables;
    return this;
  }

  public SentEmailDto putTemplateVariablesItem(String key, Object templateVariablesItem) {
    if (this.templateVariables == null) {
      this.templateVariables = new HashMap<>();
    }
    this.templateVariables.put(key, templateVariablesItem);
    return this;
  }

  /**
   * Get templateVariables
   * @return templateVariables
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTemplateVariables() {
    return templateVariables;
  }

  public void setTemplateVariables(@javax.annotation.Nullable Map<String, Object> templateVariables) {
    this.templateVariables = templateVariables;
  }


  public SentEmailDto headers(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public SentEmailDto putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Get headers
   * @return headers
   */
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  public void setHeaders(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
  }


  public SentEmailDto threadId(@javax.annotation.Nullable UUID threadId) {
    this.threadId = threadId;
    return this;
  }

  /**
   * MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.
   * @return threadId
   */
  @javax.annotation.Nullable
  public UUID getThreadId() {
    return threadId;
  }

  public void setThreadId(@javax.annotation.Nullable UUID threadId) {
    this.threadId = threadId;
  }


  public SentEmailDto bodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
    return this;
  }

  /**
   * An excerpt of the body of the email message for quick preview. Takes HTML content part if exists falls back to TEXT content part if not
   * @return bodyExcerpt
   */
  @javax.annotation.Nullable
  public String getBodyExcerpt() {
    return bodyExcerpt;
  }

  public void setBodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
  }


  public SentEmailDto textExcerpt(@javax.annotation.Nullable String textExcerpt) {
    this.textExcerpt = textExcerpt;
    return this;
  }

  /**
   * An excerpt of the body of the email message for quick preview. Takes TEXT content part if exists
   * @return textExcerpt
   */
  @javax.annotation.Nullable
  public String getTextExcerpt() {
    return textExcerpt;
  }

  public void setTextExcerpt(@javax.annotation.Nullable String textExcerpt) {
    this.textExcerpt = textExcerpt;
  }


  public SentEmailDto inReplyTo(@javax.annotation.Nullable String inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

  /**
   * Parsed value of In-Reply-To header. A Message-ID in a thread.
   * @return inReplyTo
   */
  @javax.annotation.Nullable
  public String getInReplyTo() {
    return inReplyTo;
  }

  public void setInReplyTo(@javax.annotation.Nullable String inReplyTo) {
    this.inReplyTo = inReplyTo;
  }


  public SentEmailDto favourite(@javax.annotation.Nullable Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Is email favourited
   * @return favourite
   */
  @javax.annotation.Nullable
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(@javax.annotation.Nullable Boolean favourite) {
    this.favourite = favourite;
  }


  public SentEmailDto sizeBytes(@javax.annotation.Nullable Long sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Size of raw email message in bytes
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public Long getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(@javax.annotation.Nullable Long sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public SentEmailDto html(@javax.annotation.Nullable Boolean html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public Boolean getHtml() {
    return html;
  }

  public void setHtml(@javax.annotation.Nullable Boolean html) {
    this.html = html;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentEmailDto sentEmailDto = (SentEmailDto) o;
    return Objects.equals(this.id, sentEmailDto.id) &&
        Objects.equals(this.userId, sentEmailDto.userId) &&
        Objects.equals(this.inboxId, sentEmailDto.inboxId) &&
        Objects.equals(this.domainId, sentEmailDto.domainId) &&
        Objects.equals(this.to, sentEmailDto.to) &&
        Objects.equals(this.from, sentEmailDto.from) &&
        Objects.equals(this.sender, sentEmailDto.sender) &&
        Objects.equals(this.recipients, sentEmailDto.recipients) &&
        Objects.equals(this.replyTo, sentEmailDto.replyTo) &&
        Objects.equals(this.cc, sentEmailDto.cc) &&
        Objects.equals(this.bcc, sentEmailDto.bcc) &&
        Objects.equals(this.attachments, sentEmailDto.attachments) &&
        Objects.equals(this.subject, sentEmailDto.subject) &&
        Objects.equals(this.bodyMD5Hash, sentEmailDto.bodyMD5Hash) &&
        Objects.equals(this.body, sentEmailDto.body) &&
        Objects.equals(this.toContacts, sentEmailDto.toContacts) &&
        Objects.equals(this.toGroup, sentEmailDto.toGroup) &&
        Objects.equals(this.charset, sentEmailDto.charset) &&
        Objects.equals(this.isHTML, sentEmailDto.isHTML) &&
        Objects.equals(this.sentAt, sentEmailDto.sentAt) &&
        Objects.equals(this.createdAt, sentEmailDto.createdAt) &&
        Objects.equals(this.pixelIds, sentEmailDto.pixelIds) &&
        Objects.equals(this.messageId, sentEmailDto.messageId) &&
        Objects.equals(this.messageIds, sentEmailDto.messageIds) &&
        Objects.equals(this.virtualSend, sentEmailDto.virtualSend) &&
        Objects.equals(this.templateId, sentEmailDto.templateId) &&
        Objects.equals(this.templateVariables, sentEmailDto.templateVariables) &&
        Objects.equals(this.headers, sentEmailDto.headers) &&
        Objects.equals(this.threadId, sentEmailDto.threadId) &&
        Objects.equals(this.bodyExcerpt, sentEmailDto.bodyExcerpt) &&
        Objects.equals(this.textExcerpt, sentEmailDto.textExcerpt) &&
        Objects.equals(this.inReplyTo, sentEmailDto.inReplyTo) &&
        Objects.equals(this.favourite, sentEmailDto.favourite) &&
        Objects.equals(this.sizeBytes, sentEmailDto.sizeBytes) &&
        Objects.equals(this.html, sentEmailDto.html);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, inboxId, domainId, to, from, sender, recipients, replyTo, cc, bcc, attachments, subject, bodyMD5Hash, body, toContacts, toGroup, charset, isHTML, sentAt, createdAt, pixelIds, messageId, messageIds, virtualSend, templateId, templateVariables, headers, threadId, bodyExcerpt, textExcerpt, inReplyTo, favourite, sizeBytes, html);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentEmailDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    bodyMD5Hash: ").append(toIndentedString(bodyMD5Hash)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    toContacts: ").append(toIndentedString(toContacts)).append("\n");
    sb.append("    toGroup: ").append(toIndentedString(toGroup)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    isHTML: ").append(toIndentedString(isHTML)).append("\n");
    sb.append("    sentAt: ").append(toIndentedString(sentAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    pixelIds: ").append(toIndentedString(pixelIds)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    messageIds: ").append(toIndentedString(messageIds)).append("\n");
    sb.append("    virtualSend: ").append(toIndentedString(virtualSend)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateVariables: ").append(toIndentedString(templateVariables)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("    bodyExcerpt: ").append(toIndentedString(bodyExcerpt)).append("\n");
    sb.append("    textExcerpt: ").append(toIndentedString(textExcerpt)).append("\n");
    sb.append("    inReplyTo: ").append(toIndentedString(inReplyTo)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("inboxId");
    openapiFields.add("domainId");
    openapiFields.add("to");
    openapiFields.add("from");
    openapiFields.add("sender");
    openapiFields.add("recipients");
    openapiFields.add("replyTo");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("attachments");
    openapiFields.add("subject");
    openapiFields.add("bodyMD5Hash");
    openapiFields.add("body");
    openapiFields.add("toContacts");
    openapiFields.add("toGroup");
    openapiFields.add("charset");
    openapiFields.add("isHTML");
    openapiFields.add("sentAt");
    openapiFields.add("createdAt");
    openapiFields.add("pixelIds");
    openapiFields.add("messageId");
    openapiFields.add("messageIds");
    openapiFields.add("virtualSend");
    openapiFields.add("templateId");
    openapiFields.add("templateVariables");
    openapiFields.add("headers");
    openapiFields.add("threadId");
    openapiFields.add("bodyExcerpt");
    openapiFields.add("textExcerpt");
    openapiFields.add("inReplyTo");
    openapiFields.add("favourite");
    openapiFields.add("sizeBytes");
    openapiFields.add("html");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("sentAt");
    openapiRequiredFields.add("createdAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentEmailDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!SentEmailDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentEmailDto is not found in the empty JSON string", SentEmailDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentEmailDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentEmailDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SentEmailDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull() && !jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender.validateJsonElement(jsonObj.get("sender"));
      }
      // validate the optional field `recipients`
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        EmailRecipients.validateJsonElement(jsonObj.get("recipients"));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull() && !jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bcc") != null && !jsonObj.get("bcc").isJsonNull() && !jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull() && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("bodyMD5Hash") != null && !jsonObj.get("bodyMD5Hash").isJsonNull()) && !jsonObj.get("bodyMD5Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyMD5Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyMD5Hash").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("toContacts") != null && !jsonObj.get("toContacts").isJsonNull() && !jsonObj.get("toContacts").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `toContacts` to be an array in the JSON string but got `%s`", jsonObj.get("toContacts").toString()));
      }
      if ((jsonObj.get("toGroup") != null && !jsonObj.get("toGroup").isJsonNull()) && !jsonObj.get("toGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toGroup").toString()));
      }
      if ((jsonObj.get("charset") != null && !jsonObj.get("charset").isJsonNull()) && !jsonObj.get("charset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charset").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("pixelIds") != null && !jsonObj.get("pixelIds").isJsonNull() && !jsonObj.get("pixelIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `pixelIds` to be an array in the JSON string but got `%s`", jsonObj.get("pixelIds").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("messageIds") != null && !jsonObj.get("messageIds").isJsonNull() && !jsonObj.get("messageIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageIds` to be an array in the JSON string but got `%s`", jsonObj.get("messageIds").toString()));
      }
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
      if ((jsonObj.get("threadId") != null && !jsonObj.get("threadId").isJsonNull()) && !jsonObj.get("threadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadId").toString()));
      }
      if ((jsonObj.get("bodyExcerpt") != null && !jsonObj.get("bodyExcerpt").isJsonNull()) && !jsonObj.get("bodyExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyExcerpt").toString()));
      }
      if ((jsonObj.get("textExcerpt") != null && !jsonObj.get("textExcerpt").isJsonNull()) && !jsonObj.get("textExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textExcerpt").toString()));
      }
      if ((jsonObj.get("inReplyTo") != null && !jsonObj.get("inReplyTo").isJsonNull()) && !jsonObj.get("inReplyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inReplyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inReplyTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentEmailDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentEmailDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentEmailDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentEmailDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SentEmailDto>() {
           @Override
           public void write(JsonWriter out, SentEmailDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentEmailDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentEmailDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentEmailDto
   * @throws IOException if the JSON string is invalid with respect to SentEmailDto
   */
  public static SentEmailDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentEmailDto.class);
  }

  /**
   * Convert an instance of SentEmailDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

