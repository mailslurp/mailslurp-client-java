/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * NEW_AI_TRANSFORM_RESULT webhook payload. Sent to your webhook url endpoint via HTTP POST when a structured data result is generated by the AI Transformer that your webhook is attached to. Use the AI Transform Result ID to fetch the full details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookNewAITransformResultPayload {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nonnull
  private String messageId;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  @javax.annotation.Nonnull
  private UUID webhookId;

  /**
   * Name of the event type webhook is being triggered for.
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_AI_TRANSFORM_RESULT("NEW_AI_TRANSFORM_RESULT"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EventNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nonnull
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_WEBHOOK_NAME = "webhookName";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_NAME)
  @javax.annotation.Nullable
  private String webhookName;

  public static final String SERIALIZED_NAME_AI_TRANSFORM_RESULT_ID = "aiTransformResultId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_RESULT_ID)
  @javax.annotation.Nonnull
  private UUID aiTransformResultId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_AI_TRANSFORM_ID = "aiTransformId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_ID)
  @javax.annotation.Nonnull
  private UUID aiTransformId;

  public static final String SERIALIZED_NAME_AI_TRANSFORM_MAPPING_ID = "aiTransformMappingId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_MAPPING_ID)
  @javax.annotation.Nullable
  private UUID aiTransformMappingId;

  public static final String SERIALIZED_NAME_ENTITY_ID = "entityId";
  @SerializedName(SERIALIZED_NAME_ENTITY_ID)
  @javax.annotation.Nullable
  private UUID entityId;

  /**
   * Entity type that triggered the transformation
   */
  @JsonAdapter(EntityTypeEnum.Adapter.class)
  public enum EntityTypeEnum {
    INBOX("INBOX"),
    
    PHONE("PHONE");

    private String value;

    EntityTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EntityTypeEnum fromValue(String value) {
      for (EntityTypeEnum b : EntityTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EntityTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EntityTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EntityTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EntityTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EntityTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ENTITY_TYPE = "entityType";
  @SerializedName(SERIALIZED_NAME_ENTITY_TYPE)
  @javax.annotation.Nullable
  private EntityTypeEnum entityType;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  @javax.annotation.Nullable
  private String result;

  public WebhookNewAITransformResultPayload() {
  }

  public WebhookNewAITransformResultPayload messageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
  }


  public WebhookNewAITransformResultPayload webhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * ID of webhook entity being triggered
   * @return webhookId
   */
  @javax.annotation.Nonnull
  public UUID getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookNewAITransformResultPayload eventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Name of the event type webhook is being triggered for.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public EventNameEnum getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookNewAITransformResultPayload webhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
    return this;
  }

  /**
   * Name of the webhook being triggered
   * @return webhookName
   */
  @javax.annotation.Nullable
  public String getWebhookName() {
    return webhookName;
  }

  public void setWebhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
  }


  public WebhookNewAITransformResultPayload aiTransformResultId(@javax.annotation.Nonnull UUID aiTransformResultId) {
    this.aiTransformResultId = aiTransformResultId;
    return this;
  }

  /**
   * AI Transform ID of event
   * @return aiTransformResultId
   */
  @javax.annotation.Nonnull
  public UUID getAiTransformResultId() {
    return aiTransformResultId;
  }

  public void setAiTransformResultId(@javax.annotation.Nonnull UUID aiTransformResultId) {
    this.aiTransformResultId = aiTransformResultId;
  }


  public WebhookNewAITransformResultPayload userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID of event
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public WebhookNewAITransformResultPayload aiTransformId(@javax.annotation.Nonnull UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
    return this;
  }

  /**
   * ID of AI Transform
   * @return aiTransformId
   */
  @javax.annotation.Nonnull
  public UUID getAiTransformId() {
    return aiTransformId;
  }

  public void setAiTransformId(@javax.annotation.Nonnull UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
  }


  public WebhookNewAITransformResultPayload aiTransformMappingId(@javax.annotation.Nullable UUID aiTransformMappingId) {
    this.aiTransformMappingId = aiTransformMappingId;
    return this;
  }

  /**
   * ID of AI Transform mapping
   * @return aiTransformMappingId
   */
  @javax.annotation.Nullable
  public UUID getAiTransformMappingId() {
    return aiTransformMappingId;
  }

  public void setAiTransformMappingId(@javax.annotation.Nullable UUID aiTransformMappingId) {
    this.aiTransformMappingId = aiTransformMappingId;
  }


  public WebhookNewAITransformResultPayload entityId(@javax.annotation.Nullable UUID entityId) {
    this.entityId = entityId;
    return this;
  }

  /**
   * ID of entity that triggered the transformation
   * @return entityId
   */
  @javax.annotation.Nullable
  public UUID getEntityId() {
    return entityId;
  }

  public void setEntityId(@javax.annotation.Nullable UUID entityId) {
    this.entityId = entityId;
  }


  public WebhookNewAITransformResultPayload entityType(@javax.annotation.Nullable EntityTypeEnum entityType) {
    this.entityType = entityType;
    return this;
  }

  /**
   * Entity type that triggered the transformation
   * @return entityType
   */
  @javax.annotation.Nullable
  public EntityTypeEnum getEntityType() {
    return entityType;
  }

  public void setEntityType(@javax.annotation.Nullable EntityTypeEnum entityType) {
    this.entityType = entityType;
  }


  public WebhookNewAITransformResultPayload result(@javax.annotation.Nullable String result) {
    this.result = result;
    return this;
  }

  /**
   * JSON string result of the AI transformation
   * @return result
   */
  @javax.annotation.Nullable
  public String getResult() {
    return result;
  }

  public void setResult(@javax.annotation.Nullable String result) {
    this.result = result;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookNewAITransformResultPayload webhookNewAITransformResultPayload = (WebhookNewAITransformResultPayload) o;
    return Objects.equals(this.messageId, webhookNewAITransformResultPayload.messageId) &&
        Objects.equals(this.webhookId, webhookNewAITransformResultPayload.webhookId) &&
        Objects.equals(this.eventName, webhookNewAITransformResultPayload.eventName) &&
        Objects.equals(this.webhookName, webhookNewAITransformResultPayload.webhookName) &&
        Objects.equals(this.aiTransformResultId, webhookNewAITransformResultPayload.aiTransformResultId) &&
        Objects.equals(this.userId, webhookNewAITransformResultPayload.userId) &&
        Objects.equals(this.aiTransformId, webhookNewAITransformResultPayload.aiTransformId) &&
        Objects.equals(this.aiTransformMappingId, webhookNewAITransformResultPayload.aiTransformMappingId) &&
        Objects.equals(this.entityId, webhookNewAITransformResultPayload.entityId) &&
        Objects.equals(this.entityType, webhookNewAITransformResultPayload.entityType) &&
        Objects.equals(this.result, webhookNewAITransformResultPayload.result);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, webhookId, eventName, webhookName, aiTransformResultId, userId, aiTransformId, aiTransformMappingId, entityId, entityType, result);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookNewAITransformResultPayload {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    webhookName: ").append(toIndentedString(webhookName)).append("\n");
    sb.append("    aiTransformResultId: ").append(toIndentedString(aiTransformResultId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    aiTransformId: ").append(toIndentedString(aiTransformId)).append("\n");
    sb.append("    aiTransformMappingId: ").append(toIndentedString(aiTransformMappingId)).append("\n");
    sb.append("    entityId: ").append(toIndentedString(entityId)).append("\n");
    sb.append("    entityType: ").append(toIndentedString(entityType)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageId");
    openapiFields.add("webhookId");
    openapiFields.add("eventName");
    openapiFields.add("webhookName");
    openapiFields.add("aiTransformResultId");
    openapiFields.add("userId");
    openapiFields.add("aiTransformId");
    openapiFields.add("aiTransformMappingId");
    openapiFields.add("entityId");
    openapiFields.add("entityType");
    openapiFields.add("result");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("webhookId");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("aiTransformResultId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("aiTransformId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookNewAITransformResultPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookNewAITransformResultPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookNewAITransformResultPayload is not found in the empty JSON string", WebhookNewAITransformResultPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookNewAITransformResultPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookNewAITransformResultPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookNewAITransformResultPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("webhookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookId").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the required field `eventName`
      EventNameEnum.validateJsonElement(jsonObj.get("eventName"));
      if ((jsonObj.get("webhookName") != null && !jsonObj.get("webhookName").isJsonNull()) && !jsonObj.get("webhookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookName").toString()));
      }
      if (!jsonObj.get("aiTransformResultId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformResultId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformResultId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("aiTransformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformId").toString()));
      }
      if ((jsonObj.get("aiTransformMappingId") != null && !jsonObj.get("aiTransformMappingId").isJsonNull()) && !jsonObj.get("aiTransformMappingId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformMappingId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformMappingId").toString()));
      }
      if ((jsonObj.get("entityId") != null && !jsonObj.get("entityId").isJsonNull()) && !jsonObj.get("entityId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityId").toString()));
      }
      if ((jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) && !jsonObj.get("entityType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entityType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entityType").toString()));
      }
      // validate the optional field `entityType`
      if (jsonObj.get("entityType") != null && !jsonObj.get("entityType").isJsonNull()) {
        EntityTypeEnum.validateJsonElement(jsonObj.get("entityType"));
      }
      if ((jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) && !jsonObj.get("result").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `result` to be a primitive type in the JSON string but got `%s`", jsonObj.get("result").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookNewAITransformResultPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookNewAITransformResultPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookNewAITransformResultPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookNewAITransformResultPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookNewAITransformResultPayload>() {
           @Override
           public void write(JsonWriter out, WebhookNewAITransformResultPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookNewAITransformResultPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookNewAITransformResultPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookNewAITransformResultPayload
   * @throws IOException if the JSON string is invalid with respect to WebhookNewAITransformResultPayload
   */
  public static WebhookNewAITransformResultPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookNewAITransformResultPayload.class);
  }

  /**
   * Convert an instance of WebhookNewAITransformResultPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

