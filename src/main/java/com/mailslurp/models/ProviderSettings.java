/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ProviderSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-13T10:16:48.017348019Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ProviderSettings {
  /**
   * Gets or Sets mailProvider
   */
  @JsonAdapter(MailProviderEnum.Adapter.class)
  public enum MailProviderEnum {
    GOOGLE("GOOGLE"),
    
    MICROSOFT("MICROSOFT");

    private String value;

    MailProviderEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MailProviderEnum fromValue(String value) {
      for (MailProviderEnum b : MailProviderEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MailProviderEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MailProviderEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MailProviderEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MailProviderEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      MailProviderEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MAIL_PROVIDER = "mailProvider";
  @SerializedName(SERIALIZED_NAME_MAIL_PROVIDER)
  @javax.annotation.Nonnull
  private MailProviderEnum mailProvider;

  public static final String SERIALIZED_NAME_IMAP_HOST = "imapHost";
  @SerializedName(SERIALIZED_NAME_IMAP_HOST)
  @javax.annotation.Nonnull
  private String imapHost;

  public static final String SERIALIZED_NAME_IMAP_PORT = "imapPort";
  @SerializedName(SERIALIZED_NAME_IMAP_PORT)
  @javax.annotation.Nonnull
  private Integer imapPort;

  public static final String SERIALIZED_NAME_IMAP_SSL = "imapSsl";
  @SerializedName(SERIALIZED_NAME_IMAP_SSL)
  @javax.annotation.Nonnull
  private Boolean imapSsl;

  public static final String SERIALIZED_NAME_IMAP_START_TLS = "imapStartTls";
  @SerializedName(SERIALIZED_NAME_IMAP_START_TLS)
  @javax.annotation.Nullable
  private Boolean imapStartTls;

  public static final String SERIALIZED_NAME_SMTP_HOST = "smtpHost";
  @SerializedName(SERIALIZED_NAME_SMTP_HOST)
  @javax.annotation.Nonnull
  private String smtpHost;

  public static final String SERIALIZED_NAME_SMTP_PORT = "smtpPort";
  @SerializedName(SERIALIZED_NAME_SMTP_PORT)
  @javax.annotation.Nonnull
  private Integer smtpPort;

  public static final String SERIALIZED_NAME_SMTP_SSL = "smtpSsl";
  @SerializedName(SERIALIZED_NAME_SMTP_SSL)
  @javax.annotation.Nonnull
  private Boolean smtpSsl;

  public static final String SERIALIZED_NAME_SMTP_START_TLS = "smtpStartTls";
  @SerializedName(SERIALIZED_NAME_SMTP_START_TLS)
  @javax.annotation.Nullable
  private Boolean smtpStartTls;

  public ProviderSettings() {
  }

  public ProviderSettings mailProvider(@javax.annotation.Nonnull MailProviderEnum mailProvider) {
    this.mailProvider = mailProvider;
    return this;
  }

  /**
   * Get mailProvider
   * @return mailProvider
   */
  @javax.annotation.Nonnull
  public MailProviderEnum getMailProvider() {
    return mailProvider;
  }

  public void setMailProvider(@javax.annotation.Nonnull MailProviderEnum mailProvider) {
    this.mailProvider = mailProvider;
  }


  public ProviderSettings imapHost(@javax.annotation.Nonnull String imapHost) {
    this.imapHost = imapHost;
    return this;
  }

  /**
   * Get imapHost
   * @return imapHost
   */
  @javax.annotation.Nonnull
  public String getImapHost() {
    return imapHost;
  }

  public void setImapHost(@javax.annotation.Nonnull String imapHost) {
    this.imapHost = imapHost;
  }


  public ProviderSettings imapPort(@javax.annotation.Nonnull Integer imapPort) {
    this.imapPort = imapPort;
    return this;
  }

  /**
   * Get imapPort
   * @return imapPort
   */
  @javax.annotation.Nonnull
  public Integer getImapPort() {
    return imapPort;
  }

  public void setImapPort(@javax.annotation.Nonnull Integer imapPort) {
    this.imapPort = imapPort;
  }


  public ProviderSettings imapSsl(@javax.annotation.Nonnull Boolean imapSsl) {
    this.imapSsl = imapSsl;
    return this;
  }

  /**
   * Get imapSsl
   * @return imapSsl
   */
  @javax.annotation.Nonnull
  public Boolean getImapSsl() {
    return imapSsl;
  }

  public void setImapSsl(@javax.annotation.Nonnull Boolean imapSsl) {
    this.imapSsl = imapSsl;
  }


  public ProviderSettings imapStartTls(@javax.annotation.Nullable Boolean imapStartTls) {
    this.imapStartTls = imapStartTls;
    return this;
  }

  /**
   * Get imapStartTls
   * @return imapStartTls
   */
  @javax.annotation.Nullable
  public Boolean getImapStartTls() {
    return imapStartTls;
  }

  public void setImapStartTls(@javax.annotation.Nullable Boolean imapStartTls) {
    this.imapStartTls = imapStartTls;
  }


  public ProviderSettings smtpHost(@javax.annotation.Nonnull String smtpHost) {
    this.smtpHost = smtpHost;
    return this;
  }

  /**
   * Get smtpHost
   * @return smtpHost
   */
  @javax.annotation.Nonnull
  public String getSmtpHost() {
    return smtpHost;
  }

  public void setSmtpHost(@javax.annotation.Nonnull String smtpHost) {
    this.smtpHost = smtpHost;
  }


  public ProviderSettings smtpPort(@javax.annotation.Nonnull Integer smtpPort) {
    this.smtpPort = smtpPort;
    return this;
  }

  /**
   * Get smtpPort
   * @return smtpPort
   */
  @javax.annotation.Nonnull
  public Integer getSmtpPort() {
    return smtpPort;
  }

  public void setSmtpPort(@javax.annotation.Nonnull Integer smtpPort) {
    this.smtpPort = smtpPort;
  }


  public ProviderSettings smtpSsl(@javax.annotation.Nonnull Boolean smtpSsl) {
    this.smtpSsl = smtpSsl;
    return this;
  }

  /**
   * Get smtpSsl
   * @return smtpSsl
   */
  @javax.annotation.Nonnull
  public Boolean getSmtpSsl() {
    return smtpSsl;
  }

  public void setSmtpSsl(@javax.annotation.Nonnull Boolean smtpSsl) {
    this.smtpSsl = smtpSsl;
  }


  public ProviderSettings smtpStartTls(@javax.annotation.Nullable Boolean smtpStartTls) {
    this.smtpStartTls = smtpStartTls;
    return this;
  }

  /**
   * Get smtpStartTls
   * @return smtpStartTls
   */
  @javax.annotation.Nullable
  public Boolean getSmtpStartTls() {
    return smtpStartTls;
  }

  public void setSmtpStartTls(@javax.annotation.Nullable Boolean smtpStartTls) {
    this.smtpStartTls = smtpStartTls;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProviderSettings providerSettings = (ProviderSettings) o;
    return Objects.equals(this.mailProvider, providerSettings.mailProvider) &&
        Objects.equals(this.imapHost, providerSettings.imapHost) &&
        Objects.equals(this.imapPort, providerSettings.imapPort) &&
        Objects.equals(this.imapSsl, providerSettings.imapSsl) &&
        Objects.equals(this.imapStartTls, providerSettings.imapStartTls) &&
        Objects.equals(this.smtpHost, providerSettings.smtpHost) &&
        Objects.equals(this.smtpPort, providerSettings.smtpPort) &&
        Objects.equals(this.smtpSsl, providerSettings.smtpSsl) &&
        Objects.equals(this.smtpStartTls, providerSettings.smtpStartTls);
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailProvider, imapHost, imapPort, imapSsl, imapStartTls, smtpHost, smtpPort, smtpSsl, smtpStartTls);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProviderSettings {\n");
    sb.append("    mailProvider: ").append(toIndentedString(mailProvider)).append("\n");
    sb.append("    imapHost: ").append(toIndentedString(imapHost)).append("\n");
    sb.append("    imapPort: ").append(toIndentedString(imapPort)).append("\n");
    sb.append("    imapSsl: ").append(toIndentedString(imapSsl)).append("\n");
    sb.append("    imapStartTls: ").append(toIndentedString(imapStartTls)).append("\n");
    sb.append("    smtpHost: ").append(toIndentedString(smtpHost)).append("\n");
    sb.append("    smtpPort: ").append(toIndentedString(smtpPort)).append("\n");
    sb.append("    smtpSsl: ").append(toIndentedString(smtpSsl)).append("\n");
    sb.append("    smtpStartTls: ").append(toIndentedString(smtpStartTls)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mailProvider");
    openapiFields.add("imapHost");
    openapiFields.add("imapPort");
    openapiFields.add("imapSsl");
    openapiFields.add("imapStartTls");
    openapiFields.add("smtpHost");
    openapiFields.add("smtpPort");
    openapiFields.add("smtpSsl");
    openapiFields.add("smtpStartTls");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("mailProvider");
    openapiRequiredFields.add("imapHost");
    openapiRequiredFields.add("imapPort");
    openapiRequiredFields.add("imapSsl");
    openapiRequiredFields.add("smtpHost");
    openapiRequiredFields.add("smtpPort");
    openapiRequiredFields.add("smtpSsl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProviderSettings
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ProviderSettings.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProviderSettings is not found in the empty JSON string", ProviderSettings.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProviderSettings.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProviderSettings` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProviderSettings.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("mailProvider").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailProvider` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailProvider").toString()));
      }
      // validate the required field `mailProvider`
      MailProviderEnum.validateJsonElement(jsonObj.get("mailProvider"));
      if (!jsonObj.get("imapHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapHost").toString()));
      }
      if (!jsonObj.get("smtpHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpHost").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProviderSettings.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProviderSettings' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProviderSettings> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProviderSettings.class));

       return (TypeAdapter<T>) new TypeAdapter<ProviderSettings>() {
           @Override
           public void write(JsonWriter out, ProviderSettings value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProviderSettings read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProviderSettings given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProviderSettings
   * @throws IOException if the JSON string is invalid with respect to ProviderSettings
   */
  public static ProviderSettings fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProviderSettings.class);
  }

  /**
   * Convert an instance of ProviderSettings to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

