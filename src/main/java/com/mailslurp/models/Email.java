/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.EmailAnalysis;
import com.mailslurp.models.EmailRecipients;
import com.mailslurp.models.Sender;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Email entity (also known as EmailDto). When an SMTP email message is received by MailSlurp it is parsed. The body and attachments are written to disk and the fields such as to, from, subject etc are stored in a database. The &#x60;body&#x60; contains the email content. If you want the original SMTP message see the &#x60;getRawEmail&#x60; endpoints. The attachments can be fetched using the AttachmentController
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class Email {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nonnull
  private UUID inboxId;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  @javax.annotation.Nullable
  private UUID domainId;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private Sender sender;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private EmailRecipients recipients;

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  @javax.annotation.Nullable
  private String replyTo;

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  @javax.annotation.Nullable
  private List<String> cc;

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  @javax.annotation.Nullable
  private List<String> bcc;

  public static final String SERIALIZED_NAME_HEADERS = "headers";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> headers;

  public static final String SERIALIZED_NAME_HEADERS_MAP = "headersMap";
  @SerializedName(SERIALIZED_NAME_HEADERS_MAP)
  @javax.annotation.Nullable
  private Map<String, List<String>> headersMap;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<String> attachments;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_BODY_EXCERPT = "bodyExcerpt";
  @SerializedName(SERIALIZED_NAME_BODY_EXCERPT)
  @javax.annotation.Nullable
  private String bodyExcerpt;

  public static final String SERIALIZED_NAME_TEXT_EXCERPT = "textExcerpt";
  @SerializedName(SERIALIZED_NAME_TEXT_EXCERPT)
  @javax.annotation.Nullable
  private String textExcerpt;

  public static final String SERIALIZED_NAME_BODY_M_D5_HASH = "bodyMD5Hash";
  @SerializedName(SERIALIZED_NAME_BODY_M_D5_HASH)
  @javax.annotation.Nullable
  private String bodyMD5Hash;

  public static final String SERIALIZED_NAME_IS_H_T_M_L = "isHTML";
  @SerializedName(SERIALIZED_NAME_IS_H_T_M_L)
  @javax.annotation.Nullable
  private Boolean isHTML;

  public static final String SERIALIZED_NAME_CHARSET = "charset";
  @SerializedName(SERIALIZED_NAME_CHARSET)
  @javax.annotation.Nullable
  private String charset;

  public static final String SERIALIZED_NAME_ANALYSIS = "analysis";
  @SerializedName(SERIALIZED_NAME_ANALYSIS)
  @javax.annotation.Nullable
  private EmailAnalysis analysis;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  @javax.annotation.Nonnull
  private Boolean read;

  public static final String SERIALIZED_NAME_TEAM_ACCESS = "teamAccess";
  @SerializedName(SERIALIZED_NAME_TEAM_ACCESS)
  @javax.annotation.Nonnull
  private Boolean teamAccess;

  public static final String SERIALIZED_NAME_IS_X_AMP_HTML = "isXAmpHtml";
  @SerializedName(SERIALIZED_NAME_IS_X_AMP_HTML)
  @javax.annotation.Nullable
  private Boolean isXAmpHtml;

  public static final String SERIALIZED_NAME_BODY_PART_CONTENT_TYPES = "bodyPartContentTypes";
  @SerializedName(SERIALIZED_NAME_BODY_PART_CONTENT_TYPES)
  @javax.annotation.Nullable
  private List<String> bodyPartContentTypes;

  public static final String SERIALIZED_NAME_EXTERNAL_ID = "externalId";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_ID)
  @javax.annotation.Nullable
  private String externalId;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nullable
  private String messageId;

  public static final String SERIALIZED_NAME_THREAD_ID = "threadId";
  @SerializedName(SERIALIZED_NAME_THREAD_ID)
  @javax.annotation.Nullable
  private UUID threadId;

  public static final String SERIALIZED_NAME_IN_REPLY_TO = "inReplyTo";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO)
  @javax.annotation.Nullable
  private String inReplyTo;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  @javax.annotation.Nullable
  private Boolean favourite;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  @javax.annotation.Nullable
  private Long sizeBytes;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  @javax.annotation.Nullable
  private Boolean html;

  public static final String SERIALIZED_NAME_XAMP_HTML = "xampHtml";
  @SerializedName(SERIALIZED_NAME_XAMP_HTML)
  @javax.annotation.Nullable
  private Boolean xampHtml;

  public Email() {
  }

  public Email id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the email entity
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public Email userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * ID of user that email belongs to
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public Email inboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * ID of the inbox that received the email
   * @return inboxId
   */
  @javax.annotation.Nonnull
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
  }


  public Email domainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * ID of the domain that received the email
   * @return domainId
   */
  @javax.annotation.Nullable
  public UUID getDomainId() {
    return domainId;
  }

  public void setDomainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
  }


  public Email to(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
    return this;
  }

  public Email addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * List of &#x60;To&#x60; recipient email addresses that the email was addressed to. See recipients object for names.
   * @return to
   */
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
  }


  public Email from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * Who the email was sent from. An email address - see fromName for the sender name.
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }


  public Email sender(@javax.annotation.Nullable Sender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable Sender sender) {
    this.sender = sender;
  }


  public Email recipients(@javax.annotation.Nullable EmailRecipients recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public EmailRecipients getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable EmailRecipients recipients) {
    this.recipients = recipients;
  }


  public Email replyTo(@javax.annotation.Nullable String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * The &#x60;replyTo&#x60; field on the received email message
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(@javax.annotation.Nullable String replyTo) {
    this.replyTo = replyTo;
  }


  public Email cc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
    return this;
  }

  public Email addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * List of &#x60;CC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.
   * @return cc
   */
  @javax.annotation.Nullable
  public List<String> getCc() {
    return cc;
  }

  public void setCc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
  }


  public Email bcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public Email addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * List of &#x60;BCC&#x60; recipients email addresses that the email was addressed to. See recipients object for names.
   * @return bcc
   */
  @javax.annotation.Nullable
  public List<String> getBcc() {
    return bcc;
  }

  public void setBcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
  }


  @Deprecated
  public Email headers(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
    return this;
  }

  public Email putHeadersItem(String key, String headersItem) {
    if (this.headers == null) {
      this.headers = new HashMap<>();
    }
    this.headers.put(key, headersItem);
    return this;
  }

  /**
   * Collection of SMTP headers attached to email
   * @return headers
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Map<String, String> getHeaders() {
    return headers;
  }

  @Deprecated
  public void setHeaders(@javax.annotation.Nullable Map<String, String> headers) {
    this.headers = headers;
  }


  public Email headersMap(@javax.annotation.Nullable Map<String, List<String>> headersMap) {
    this.headersMap = headersMap;
    return this;
  }

  public Email putHeadersMapItem(String key, List<String> headersMapItem) {
    if (this.headersMap == null) {
      this.headersMap = new HashMap<>();
    }
    this.headersMap.put(key, headersMapItem);
    return this;
  }

  /**
   * Multi-value map of SMTP headers attached to email
   * @return headersMap
   */
  @javax.annotation.Nullable
  public Map<String, List<String>> getHeadersMap() {
    return headersMap;
  }

  public void setHeadersMap(@javax.annotation.Nullable Map<String, List<String>> headersMap) {
    this.headersMap = headersMap;
  }


  public Email attachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public Email addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * List of IDs of attachments found in the email. Use these IDs with the Inbox and Email Controllers to download attachments and attachment meta data such as filesize, name, extension.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
  }


  public Email subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * The subject line of the email message as specified by SMTP subject header
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public Email body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * The body of the email message as text parsed from the SMTP message body (does not include attachments). Fetch the raw content to access the SMTP message and use the attachments property to access attachments. The body is stored separately to the email entity so the body is not returned in paginated results only in full single email or wait requests.
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public Email bodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
    return this;
  }

  /**
   * An excerpt of the body of the email message for quick preview. Takes HTML content part if exists falls back to TEXT content part if not
   * @return bodyExcerpt
   */
  @javax.annotation.Nullable
  public String getBodyExcerpt() {
    return bodyExcerpt;
  }

  public void setBodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
  }


  public Email textExcerpt(@javax.annotation.Nullable String textExcerpt) {
    this.textExcerpt = textExcerpt;
    return this;
  }

  /**
   * An excerpt of the body of the email message for quick preview. Takes TEXT content part if exists
   * @return textExcerpt
   */
  @javax.annotation.Nullable
  public String getTextExcerpt() {
    return textExcerpt;
  }

  public void setTextExcerpt(@javax.annotation.Nullable String textExcerpt) {
    this.textExcerpt = textExcerpt;
  }


  public Email bodyMD5Hash(@javax.annotation.Nullable String bodyMD5Hash) {
    this.bodyMD5Hash = bodyMD5Hash;
    return this;
  }

  /**
   * A hash signature of the email message using MD5. Useful for comparing emails without fetching full body.
   * @return bodyMD5Hash
   */
  @javax.annotation.Nullable
  public String getBodyMD5Hash() {
    return bodyMD5Hash;
  }

  public void setBodyMD5Hash(@javax.annotation.Nullable String bodyMD5Hash) {
    this.bodyMD5Hash = bodyMD5Hash;
  }


  public Email isHTML(@javax.annotation.Nullable Boolean isHTML) {
    this.isHTML = isHTML;
    return this;
  }

  /**
   * Is the email body content type HTML?
   * @return isHTML
   */
  @javax.annotation.Nullable
  public Boolean getIsHTML() {
    return isHTML;
  }

  public void setIsHTML(@javax.annotation.Nullable Boolean isHTML) {
    this.isHTML = isHTML;
  }


  public Email charset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
    return this;
  }

  /**
   * Detected character set of the email body such as UTF-8
   * @return charset
   */
  @javax.annotation.Nullable
  public String getCharset() {
    return charset;
  }

  public void setCharset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
  }


  public Email analysis(@javax.annotation.Nullable EmailAnalysis analysis) {
    this.analysis = analysis;
    return this;
  }

  /**
   * Get analysis
   * @return analysis
   */
  @javax.annotation.Nullable
  public EmailAnalysis getAnalysis() {
    return analysis;
  }

  public void setAnalysis(@javax.annotation.Nullable EmailAnalysis analysis) {
    this.analysis = analysis;
  }


  public Email createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When was the email received by MailSlurp
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Email updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * When was the email last updated
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public Email read(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Read flag. Has the email ever been viewed in the dashboard or fetched via the API with a hydrated body? If so the email is marked as read. Paginated results do not affect read status. Read status is different to email opened event as it depends on your own account accessing the email. Email opened is determined by tracking pixels sent to other uses if enable during sending. You can listened for both email read and email opened events using webhooks.
   * @return read
   */
  @javax.annotation.Nonnull
  public Boolean getRead() {
    return read;
  }

  public void setRead(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
  }


  public Email teamAccess(@javax.annotation.Nonnull Boolean teamAccess) {
    this.teamAccess = teamAccess;
    return this;
  }

  /**
   * Can the email be accessed by organization team members
   * @return teamAccess
   */
  @javax.annotation.Nonnull
  public Boolean getTeamAccess() {
    return teamAccess;
  }

  public void setTeamAccess(@javax.annotation.Nonnull Boolean teamAccess) {
    this.teamAccess = teamAccess;
  }


  public Email isXAmpHtml(@javax.annotation.Nullable Boolean isXAmpHtml) {
    this.isXAmpHtml = isXAmpHtml;
    return this;
  }

  /**
   * Is the email body content type x-amp-html Amp4Email?
   * @return isXAmpHtml
   */
  @javax.annotation.Nullable
  public Boolean getIsXAmpHtml() {
    return isXAmpHtml;
  }

  public void setIsXAmpHtml(@javax.annotation.Nullable Boolean isXAmpHtml) {
    this.isXAmpHtml = isXAmpHtml;
  }


  public Email bodyPartContentTypes(@javax.annotation.Nullable List<String> bodyPartContentTypes) {
    this.bodyPartContentTypes = bodyPartContentTypes;
    return this;
  }

  public Email addBodyPartContentTypesItem(String bodyPartContentTypesItem) {
    if (this.bodyPartContentTypes == null) {
      this.bodyPartContentTypes = new ArrayList<>();
    }
    this.bodyPartContentTypes.add(bodyPartContentTypesItem);
    return this;
  }

  /**
   * A list of detected multipart mime message body part content types such as text/plain and text/html. Can be used with email bodyPart endpoints to fetch individual body parts.
   * @return bodyPartContentTypes
   */
  @javax.annotation.Nullable
  public List<String> getBodyPartContentTypes() {
    return bodyPartContentTypes;
  }

  public void setBodyPartContentTypes(@javax.annotation.Nullable List<String> bodyPartContentTypes) {
    this.bodyPartContentTypes = bodyPartContentTypes;
  }


  public Email externalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
    return this;
  }

  /**
   * UID used by external IMAP server to identify email
   * @return externalId
   */
  @javax.annotation.Nullable
  public String getExternalId() {
    return externalId;
  }

  public void setExternalId(@javax.annotation.Nullable String externalId) {
    this.externalId = externalId;
  }


  public Email messageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * RFC 5322 Message-ID header value without angle brackets.
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
  }


  public Email threadId(@javax.annotation.Nullable UUID threadId) {
    this.threadId = threadId;
    return this;
  }

  /**
   * MailSlurp thread ID for email chain that enables lookup for In-Reply-To and References fields.
   * @return threadId
   */
  @javax.annotation.Nullable
  public UUID getThreadId() {
    return threadId;
  }

  public void setThreadId(@javax.annotation.Nullable UUID threadId) {
    this.threadId = threadId;
  }


  public Email inReplyTo(@javax.annotation.Nullable String inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

  /**
   * Parsed value of In-Reply-To header. A Message-ID in a thread.
   * @return inReplyTo
   */
  @javax.annotation.Nullable
  public String getInReplyTo() {
    return inReplyTo;
  }

  public void setInReplyTo(@javax.annotation.Nullable String inReplyTo) {
    this.inReplyTo = inReplyTo;
  }


  public Email favourite(@javax.annotation.Nullable Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Is email favourited
   * @return favourite
   */
  @javax.annotation.Nullable
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(@javax.annotation.Nullable Boolean favourite) {
    this.favourite = favourite;
  }


  public Email sizeBytes(@javax.annotation.Nullable Long sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Size of raw email message in bytes
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public Long getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(@javax.annotation.Nullable Long sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public Email html(@javax.annotation.Nullable Boolean html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public Boolean getHtml() {
    return html;
  }

  public void setHtml(@javax.annotation.Nullable Boolean html) {
    this.html = html;
  }


  public Email xampHtml(@javax.annotation.Nullable Boolean xampHtml) {
    this.xampHtml = xampHtml;
    return this;
  }

  /**
   * Get xampHtml
   * @return xampHtml
   */
  @javax.annotation.Nullable
  public Boolean getXampHtml() {
    return xampHtml;
  }

  public void setXampHtml(@javax.annotation.Nullable Boolean xampHtml) {
    this.xampHtml = xampHtml;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Email email = (Email) o;
    return Objects.equals(this.id, email.id) &&
        Objects.equals(this.userId, email.userId) &&
        Objects.equals(this.inboxId, email.inboxId) &&
        Objects.equals(this.domainId, email.domainId) &&
        Objects.equals(this.to, email.to) &&
        Objects.equals(this.from, email.from) &&
        Objects.equals(this.sender, email.sender) &&
        Objects.equals(this.recipients, email.recipients) &&
        Objects.equals(this.replyTo, email.replyTo) &&
        Objects.equals(this.cc, email.cc) &&
        Objects.equals(this.bcc, email.bcc) &&
        Objects.equals(this.headers, email.headers) &&
        Objects.equals(this.headersMap, email.headersMap) &&
        Objects.equals(this.attachments, email.attachments) &&
        Objects.equals(this.subject, email.subject) &&
        Objects.equals(this.body, email.body) &&
        Objects.equals(this.bodyExcerpt, email.bodyExcerpt) &&
        Objects.equals(this.textExcerpt, email.textExcerpt) &&
        Objects.equals(this.bodyMD5Hash, email.bodyMD5Hash) &&
        Objects.equals(this.isHTML, email.isHTML) &&
        Objects.equals(this.charset, email.charset) &&
        Objects.equals(this.analysis, email.analysis) &&
        Objects.equals(this.createdAt, email.createdAt) &&
        Objects.equals(this.updatedAt, email.updatedAt) &&
        Objects.equals(this.read, email.read) &&
        Objects.equals(this.teamAccess, email.teamAccess) &&
        Objects.equals(this.isXAmpHtml, email.isXAmpHtml) &&
        Objects.equals(this.bodyPartContentTypes, email.bodyPartContentTypes) &&
        Objects.equals(this.externalId, email.externalId) &&
        Objects.equals(this.messageId, email.messageId) &&
        Objects.equals(this.threadId, email.threadId) &&
        Objects.equals(this.inReplyTo, email.inReplyTo) &&
        Objects.equals(this.favourite, email.favourite) &&
        Objects.equals(this.sizeBytes, email.sizeBytes) &&
        Objects.equals(this.html, email.html) &&
        Objects.equals(this.xampHtml, email.xampHtml);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, inboxId, domainId, to, from, sender, recipients, replyTo, cc, bcc, headers, headersMap, attachments, subject, body, bodyExcerpt, textExcerpt, bodyMD5Hash, isHTML, charset, analysis, createdAt, updatedAt, read, teamAccess, isXAmpHtml, bodyPartContentTypes, externalId, messageId, threadId, inReplyTo, favourite, sizeBytes, html, xampHtml);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Email {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    headers: ").append(toIndentedString(headers)).append("\n");
    sb.append("    headersMap: ").append(toIndentedString(headersMap)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    bodyExcerpt: ").append(toIndentedString(bodyExcerpt)).append("\n");
    sb.append("    textExcerpt: ").append(toIndentedString(textExcerpt)).append("\n");
    sb.append("    bodyMD5Hash: ").append(toIndentedString(bodyMD5Hash)).append("\n");
    sb.append("    isHTML: ").append(toIndentedString(isHTML)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    analysis: ").append(toIndentedString(analysis)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    teamAccess: ").append(toIndentedString(teamAccess)).append("\n");
    sb.append("    isXAmpHtml: ").append(toIndentedString(isXAmpHtml)).append("\n");
    sb.append("    bodyPartContentTypes: ").append(toIndentedString(bodyPartContentTypes)).append("\n");
    sb.append("    externalId: ").append(toIndentedString(externalId)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("    inReplyTo: ").append(toIndentedString(inReplyTo)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("    xampHtml: ").append(toIndentedString(xampHtml)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("inboxId");
    openapiFields.add("domainId");
    openapiFields.add("to");
    openapiFields.add("from");
    openapiFields.add("sender");
    openapiFields.add("recipients");
    openapiFields.add("replyTo");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("headers");
    openapiFields.add("headersMap");
    openapiFields.add("attachments");
    openapiFields.add("subject");
    openapiFields.add("body");
    openapiFields.add("bodyExcerpt");
    openapiFields.add("textExcerpt");
    openapiFields.add("bodyMD5Hash");
    openapiFields.add("isHTML");
    openapiFields.add("charset");
    openapiFields.add("analysis");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("read");
    openapiFields.add("teamAccess");
    openapiFields.add("isXAmpHtml");
    openapiFields.add("bodyPartContentTypes");
    openapiFields.add("externalId");
    openapiFields.add("messageId");
    openapiFields.add("threadId");
    openapiFields.add("inReplyTo");
    openapiFields.add("favourite");
    openapiFields.add("sizeBytes");
    openapiFields.add("html");
    openapiFields.add("xampHtml");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("read");
    openapiRequiredFields.add("teamAccess");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Email
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!Email.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Email is not found in the empty JSON string", Email.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Email.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Email` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Email.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("to") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender.validateJsonElement(jsonObj.get("sender"));
      }
      // validate the optional field `recipients`
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        EmailRecipients.validateJsonElement(jsonObj.get("recipients"));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull() && !jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bcc") != null && !jsonObj.get("bcc").isJsonNull() && !jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull() && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("bodyExcerpt") != null && !jsonObj.get("bodyExcerpt").isJsonNull()) && !jsonObj.get("bodyExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyExcerpt").toString()));
      }
      if ((jsonObj.get("textExcerpt") != null && !jsonObj.get("textExcerpt").isJsonNull()) && !jsonObj.get("textExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textExcerpt").toString()));
      }
      if ((jsonObj.get("bodyMD5Hash") != null && !jsonObj.get("bodyMD5Hash").isJsonNull()) && !jsonObj.get("bodyMD5Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyMD5Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyMD5Hash").toString()));
      }
      if ((jsonObj.get("charset") != null && !jsonObj.get("charset").isJsonNull()) && !jsonObj.get("charset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charset").toString()));
      }
      // validate the optional field `analysis`
      if (jsonObj.get("analysis") != null && !jsonObj.get("analysis").isJsonNull()) {
        EmailAnalysis.validateJsonElement(jsonObj.get("analysis"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bodyPartContentTypes") != null && !jsonObj.get("bodyPartContentTypes").isJsonNull() && !jsonObj.get("bodyPartContentTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyPartContentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("bodyPartContentTypes").toString()));
      }
      if ((jsonObj.get("externalId") != null && !jsonObj.get("externalId").isJsonNull()) && !jsonObj.get("externalId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `externalId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("externalId").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("threadId") != null && !jsonObj.get("threadId").isJsonNull()) && !jsonObj.get("threadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadId").toString()));
      }
      if ((jsonObj.get("inReplyTo") != null && !jsonObj.get("inReplyTo").isJsonNull()) && !jsonObj.get("inReplyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inReplyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inReplyTo").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Email.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Email' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Email> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Email.class));

       return (TypeAdapter<T>) new TypeAdapter<Email>() {
           @Override
           public void write(JsonWriter out, Email value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Email read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Email given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Email
   * @throws IOException if the JSON string is invalid with respect to Email
   */
  public static Email fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Email.class);
  }

  /**
   * Convert an instance of Email to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

