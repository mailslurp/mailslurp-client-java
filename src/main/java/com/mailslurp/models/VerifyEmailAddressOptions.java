/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for verifying that an email address exists at a remote mail server.
 */
@ApiModel(description = "Options for verifying that an email address exists at a remote mail server.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:42:28.001523Z[Etc/UTC]")
public class VerifyEmailAddressOptions {
  public static final String SERIALIZED_NAME_MAIL_SERVER_DOMAIN = "mailServerDomain";
  @SerializedName(SERIALIZED_NAME_MAIL_SERVER_DOMAIN)
  private String mailServerDomain;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  private String emailAddress;

  public static final String SERIALIZED_NAME_SENDER_EMAIL_ADDRESS = "senderEmailAddress";
  @SerializedName(SERIALIZED_NAME_SENDER_EMAIL_ADDRESS)
  private String senderEmailAddress;

  public static final String SERIALIZED_NAME_PORT = "port";
  @SerializedName(SERIALIZED_NAME_PORT)
  private Integer port;

  public VerifyEmailAddressOptions() {
  }

  public VerifyEmailAddressOptions mailServerDomain(String mailServerDomain) {
    
    this.mailServerDomain = mailServerDomain;
    return this;
  }

   /**
   * Get mailServerDomain
   * @return mailServerDomain
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMailServerDomain() {
    return mailServerDomain;
  }


  public void setMailServerDomain(String mailServerDomain) {
    this.mailServerDomain = mailServerDomain;
  }


  public VerifyEmailAddressOptions emailAddress(String emailAddress) {
    
    this.emailAddress = emailAddress;
    return this;
  }

   /**
   * Get emailAddress
   * @return emailAddress
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getEmailAddress() {
    return emailAddress;
  }


  public void setEmailAddress(String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public VerifyEmailAddressOptions senderEmailAddress(String senderEmailAddress) {
    
    this.senderEmailAddress = senderEmailAddress;
    return this;
  }

   /**
   * Get senderEmailAddress
   * @return senderEmailAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSenderEmailAddress() {
    return senderEmailAddress;
  }


  public void setSenderEmailAddress(String senderEmailAddress) {
    this.senderEmailAddress = senderEmailAddress;
  }


  public VerifyEmailAddressOptions port(Integer port) {
    
    this.port = port;
    return this;
  }

   /**
   * Get port
   * @return port
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPort() {
    return port;
  }


  public void setPort(Integer port) {
    this.port = port;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VerifyEmailAddressOptions verifyEmailAddressOptions = (VerifyEmailAddressOptions) o;
    return Objects.equals(this.mailServerDomain, verifyEmailAddressOptions.mailServerDomain) &&
        Objects.equals(this.emailAddress, verifyEmailAddressOptions.emailAddress) &&
        Objects.equals(this.senderEmailAddress, verifyEmailAddressOptions.senderEmailAddress) &&
        Objects.equals(this.port, verifyEmailAddressOptions.port);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(mailServerDomain, emailAddress, senderEmailAddress, port);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VerifyEmailAddressOptions {\n");
    sb.append("    mailServerDomain: ").append(toIndentedString(mailServerDomain)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    senderEmailAddress: ").append(toIndentedString(senderEmailAddress)).append("\n");
    sb.append("    port: ").append(toIndentedString(port)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("mailServerDomain");
    openapiFields.add("emailAddress");
    openapiFields.add("senderEmailAddress");
    openapiFields.add("port");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("emailAddress");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to VerifyEmailAddressOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!VerifyEmailAddressOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VerifyEmailAddressOptions is not found in the empty JSON string", VerifyEmailAddressOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!VerifyEmailAddressOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VerifyEmailAddressOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : VerifyEmailAddressOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("mailServerDomain") != null && !jsonObj.get("mailServerDomain").isJsonNull()) && !jsonObj.get("mailServerDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailServerDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailServerDomain").toString()));
      }
      if (!jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("senderEmailAddress") != null && !jsonObj.get("senderEmailAddress").isJsonNull()) && !jsonObj.get("senderEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `senderEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("senderEmailAddress").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VerifyEmailAddressOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VerifyEmailAddressOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VerifyEmailAddressOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VerifyEmailAddressOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<VerifyEmailAddressOptions>() {
           @Override
           public void write(JsonWriter out, VerifyEmailAddressOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VerifyEmailAddressOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of VerifyEmailAddressOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of VerifyEmailAddressOptions
  * @throws IOException if the JSON string is invalid with respect to VerifyEmailAddressOptions
  */
  public static VerifyEmailAddressOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VerifyEmailAddressOptions.class);
  }

 /**
  * Convert an instance of VerifyEmailAddressOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

