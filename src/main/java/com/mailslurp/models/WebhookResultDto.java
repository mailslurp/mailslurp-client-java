/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Result of a webhook notification
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T21:25:04.210100741Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookResultDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nullable
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  @javax.annotation.Nonnull
  private UUID webhookId;

  public static final String SERIALIZED_NAME_WEBHOOK_URL = "webhookUrl";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_URL)
  @javax.annotation.Nonnull
  private String webhookUrl;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nonnull
  private String messageId;

  public static final String SERIALIZED_NAME_REDRIVE_ID = "redriveId";
  @SerializedName(SERIALIZED_NAME_REDRIVE_ID)
  @javax.annotation.Nullable
  private UUID redriveId;

  /**
   * Gets or Sets httpMethod
   */
  @JsonAdapter(HttpMethodEnum.Adapter.class)
  public enum HttpMethodEnum {
    POST("POST"),
    
    DELETE("DELETE"),
    
    GET("GET"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    HEAD("HEAD"),
    
    OPTIONS("OPTIONS"),
    
    TRACE("TRACE");

    private String value;

    HttpMethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HttpMethodEnum fromValue(String value) {
      for (HttpMethodEnum b : HttpMethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<HttpMethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HttpMethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HttpMethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HttpMethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      HttpMethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HTTP_METHOD = "httpMethod";
  @SerializedName(SERIALIZED_NAME_HTTP_METHOD)
  @javax.annotation.Nonnull
  private HttpMethodEnum httpMethod;

  /**
   * Gets or Sets webhookEvent
   */
  @JsonAdapter(WebhookEventEnum.Adapter.class)
  public enum WebhookEventEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_AI_TRANSFORM_RESULT("NEW_AI_TRANSFORM_RESULT"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    WebhookEventEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static WebhookEventEnum fromValue(String value) {
      for (WebhookEventEnum b : WebhookEventEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<WebhookEventEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final WebhookEventEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public WebhookEventEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return WebhookEventEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      WebhookEventEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_WEBHOOK_EVENT = "webhookEvent";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_EVENT)
  @javax.annotation.Nonnull
  private WebhookEventEnum webhookEvent;

  public static final String SERIALIZED_NAME_RESPONSE_STATUS = "responseStatus";
  @SerializedName(SERIALIZED_NAME_RESPONSE_STATUS)
  @javax.annotation.Nullable
  private Integer responseStatus;

  public static final String SERIALIZED_NAME_RESPONSE_TIME_MILLIS = "responseTimeMillis";
  @SerializedName(SERIALIZED_NAME_RESPONSE_TIME_MILLIS)
  @javax.annotation.Nonnull
  private Long responseTimeMillis;

  public static final String SERIALIZED_NAME_RESPONSE_BODY_EXTRACT = "responseBodyExtract";
  @SerializedName(SERIALIZED_NAME_RESPONSE_BODY_EXTRACT)
  @javax.annotation.Nullable
  private String responseBodyExtract;

  /**
   * Gets or Sets resultType
   */
  @JsonAdapter(ResultTypeEnum.Adapter.class)
  public enum ResultTypeEnum {
    BAD_RESPONSE("BAD_RESPONSE"),
    
    EXCEPTION("EXCEPTION"),
    
    SUCCESS("SUCCESS"),
    
    REDRIVEN("REDRIVEN");

    private String value;

    ResultTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ResultTypeEnum fromValue(String value) {
      for (ResultTypeEnum b : ResultTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<ResultTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ResultTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ResultTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ResultTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      ResultTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_RESULT_TYPE = "resultType";
  @SerializedName(SERIALIZED_NAME_RESULT_TYPE)
  @javax.annotation.Nullable
  private ResultTypeEnum resultType;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_SEEN = "seen";
  @SerializedName(SERIALIZED_NAME_SEEN)
  @javax.annotation.Nonnull
  private Boolean seen;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_EMAIL_ID = "emailId";
  @SerializedName(SERIALIZED_NAME_EMAIL_ID)
  @javax.annotation.Nullable
  private UUID emailId;

  public static final String SERIALIZED_NAME_ATTACHMENT_ID = "attachmentId";
  @SerializedName(SERIALIZED_NAME_ATTACHMENT_ID)
  @javax.annotation.Nullable
  private UUID attachmentId;

  public static final String SERIALIZED_NAME_PHONE_ID = "phoneId";
  @SerializedName(SERIALIZED_NAME_PHONE_ID)
  @javax.annotation.Nullable
  private UUID phoneId;

  public static final String SERIALIZED_NAME_SMS_ID = "smsId";
  @SerializedName(SERIALIZED_NAME_SMS_ID)
  @javax.annotation.Nullable
  private UUID smsId;

  public WebhookResultDto() {
  }

  public WebhookResultDto id(@javax.annotation.Nullable UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nullable UUID id) {
    this.id = id;
  }


  public WebhookResultDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public WebhookResultDto webhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * Get webhookId
   * @return webhookId
   */
  @javax.annotation.Nonnull
  public UUID getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookResultDto webhookUrl(@javax.annotation.Nonnull String webhookUrl) {
    this.webhookUrl = webhookUrl;
    return this;
  }

  /**
   * Get webhookUrl
   * @return webhookUrl
   */
  @javax.annotation.Nonnull
  public String getWebhookUrl() {
    return webhookUrl;
  }

  public void setWebhookUrl(@javax.annotation.Nonnull String webhookUrl) {
    this.webhookUrl = webhookUrl;
  }


  public WebhookResultDto messageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
  }


  public WebhookResultDto redriveId(@javax.annotation.Nullable UUID redriveId) {
    this.redriveId = redriveId;
    return this;
  }

  /**
   * Get redriveId
   * @return redriveId
   */
  @javax.annotation.Nullable
  public UUID getRedriveId() {
    return redriveId;
  }

  public void setRedriveId(@javax.annotation.Nullable UUID redriveId) {
    this.redriveId = redriveId;
  }


  public WebhookResultDto httpMethod(@javax.annotation.Nonnull HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
    return this;
  }

  /**
   * Get httpMethod
   * @return httpMethod
   */
  @javax.annotation.Nonnull
  public HttpMethodEnum getHttpMethod() {
    return httpMethod;
  }

  public void setHttpMethod(@javax.annotation.Nonnull HttpMethodEnum httpMethod) {
    this.httpMethod = httpMethod;
  }


  public WebhookResultDto webhookEvent(@javax.annotation.Nonnull WebhookEventEnum webhookEvent) {
    this.webhookEvent = webhookEvent;
    return this;
  }

  /**
   * Get webhookEvent
   * @return webhookEvent
   */
  @javax.annotation.Nonnull
  public WebhookEventEnum getWebhookEvent() {
    return webhookEvent;
  }

  public void setWebhookEvent(@javax.annotation.Nonnull WebhookEventEnum webhookEvent) {
    this.webhookEvent = webhookEvent;
  }


  public WebhookResultDto responseStatus(@javax.annotation.Nullable Integer responseStatus) {
    this.responseStatus = responseStatus;
    return this;
  }

  /**
   * Get responseStatus
   * @return responseStatus
   */
  @javax.annotation.Nullable
  public Integer getResponseStatus() {
    return responseStatus;
  }

  public void setResponseStatus(@javax.annotation.Nullable Integer responseStatus) {
    this.responseStatus = responseStatus;
  }


  public WebhookResultDto responseTimeMillis(@javax.annotation.Nonnull Long responseTimeMillis) {
    this.responseTimeMillis = responseTimeMillis;
    return this;
  }

  /**
   * Get responseTimeMillis
   * @return responseTimeMillis
   */
  @javax.annotation.Nonnull
  public Long getResponseTimeMillis() {
    return responseTimeMillis;
  }

  public void setResponseTimeMillis(@javax.annotation.Nonnull Long responseTimeMillis) {
    this.responseTimeMillis = responseTimeMillis;
  }


  public WebhookResultDto responseBodyExtract(@javax.annotation.Nullable String responseBodyExtract) {
    this.responseBodyExtract = responseBodyExtract;
    return this;
  }

  /**
   * Get responseBodyExtract
   * @return responseBodyExtract
   */
  @javax.annotation.Nullable
  public String getResponseBodyExtract() {
    return responseBodyExtract;
  }

  public void setResponseBodyExtract(@javax.annotation.Nullable String responseBodyExtract) {
    this.responseBodyExtract = responseBodyExtract;
  }


  public WebhookResultDto resultType(@javax.annotation.Nullable ResultTypeEnum resultType) {
    this.resultType = resultType;
    return this;
  }

  /**
   * Get resultType
   * @return resultType
   */
  @javax.annotation.Nullable
  public ResultTypeEnum getResultType() {
    return resultType;
  }

  public void setResultType(@javax.annotation.Nullable ResultTypeEnum resultType) {
    this.resultType = resultType;
  }


  public WebhookResultDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookResultDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookResultDto seen(@javax.annotation.Nonnull Boolean seen) {
    this.seen = seen;
    return this;
  }

  /**
   * Get seen
   * @return seen
   */
  @javax.annotation.Nonnull
  public Boolean getSeen() {
    return seen;
  }

  public void setSeen(@javax.annotation.Nonnull Boolean seen) {
    this.seen = seen;
  }


  public WebhookResultDto inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Get inboxId
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public WebhookResultDto emailId(@javax.annotation.Nullable UUID emailId) {
    this.emailId = emailId;
    return this;
  }

  /**
   * Get emailId
   * @return emailId
   */
  @javax.annotation.Nullable
  public UUID getEmailId() {
    return emailId;
  }

  public void setEmailId(@javax.annotation.Nullable UUID emailId) {
    this.emailId = emailId;
  }


  public WebhookResultDto attachmentId(@javax.annotation.Nullable UUID attachmentId) {
    this.attachmentId = attachmentId;
    return this;
  }

  /**
   * Get attachmentId
   * @return attachmentId
   */
  @javax.annotation.Nullable
  public UUID getAttachmentId() {
    return attachmentId;
  }

  public void setAttachmentId(@javax.annotation.Nullable UUID attachmentId) {
    this.attachmentId = attachmentId;
  }


  public WebhookResultDto phoneId(@javax.annotation.Nullable UUID phoneId) {
    this.phoneId = phoneId;
    return this;
  }

  /**
   * Get phoneId
   * @return phoneId
   */
  @javax.annotation.Nullable
  public UUID getPhoneId() {
    return phoneId;
  }

  public void setPhoneId(@javax.annotation.Nullable UUID phoneId) {
    this.phoneId = phoneId;
  }


  public WebhookResultDto smsId(@javax.annotation.Nullable UUID smsId) {
    this.smsId = smsId;
    return this;
  }

  /**
   * Get smsId
   * @return smsId
   */
  @javax.annotation.Nullable
  public UUID getSmsId() {
    return smsId;
  }

  public void setSmsId(@javax.annotation.Nullable UUID smsId) {
    this.smsId = smsId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookResultDto webhookResultDto = (WebhookResultDto) o;
    return Objects.equals(this.id, webhookResultDto.id) &&
        Objects.equals(this.userId, webhookResultDto.userId) &&
        Objects.equals(this.webhookId, webhookResultDto.webhookId) &&
        Objects.equals(this.webhookUrl, webhookResultDto.webhookUrl) &&
        Objects.equals(this.messageId, webhookResultDto.messageId) &&
        Objects.equals(this.redriveId, webhookResultDto.redriveId) &&
        Objects.equals(this.httpMethod, webhookResultDto.httpMethod) &&
        Objects.equals(this.webhookEvent, webhookResultDto.webhookEvent) &&
        Objects.equals(this.responseStatus, webhookResultDto.responseStatus) &&
        Objects.equals(this.responseTimeMillis, webhookResultDto.responseTimeMillis) &&
        Objects.equals(this.responseBodyExtract, webhookResultDto.responseBodyExtract) &&
        Objects.equals(this.resultType, webhookResultDto.resultType) &&
        Objects.equals(this.createdAt, webhookResultDto.createdAt) &&
        Objects.equals(this.updatedAt, webhookResultDto.updatedAt) &&
        Objects.equals(this.seen, webhookResultDto.seen) &&
        Objects.equals(this.inboxId, webhookResultDto.inboxId) &&
        Objects.equals(this.emailId, webhookResultDto.emailId) &&
        Objects.equals(this.attachmentId, webhookResultDto.attachmentId) &&
        Objects.equals(this.phoneId, webhookResultDto.phoneId) &&
        Objects.equals(this.smsId, webhookResultDto.smsId);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, webhookId, webhookUrl, messageId, redriveId, httpMethod, webhookEvent, responseStatus, responseTimeMillis, responseBodyExtract, resultType, createdAt, updatedAt, seen, inboxId, emailId, attachmentId, phoneId, smsId);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookResultDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    webhookUrl: ").append(toIndentedString(webhookUrl)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    redriveId: ").append(toIndentedString(redriveId)).append("\n");
    sb.append("    httpMethod: ").append(toIndentedString(httpMethod)).append("\n");
    sb.append("    webhookEvent: ").append(toIndentedString(webhookEvent)).append("\n");
    sb.append("    responseStatus: ").append(toIndentedString(responseStatus)).append("\n");
    sb.append("    responseTimeMillis: ").append(toIndentedString(responseTimeMillis)).append("\n");
    sb.append("    responseBodyExtract: ").append(toIndentedString(responseBodyExtract)).append("\n");
    sb.append("    resultType: ").append(toIndentedString(resultType)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    seen: ").append(toIndentedString(seen)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    emailId: ").append(toIndentedString(emailId)).append("\n");
    sb.append("    attachmentId: ").append(toIndentedString(attachmentId)).append("\n");
    sb.append("    phoneId: ").append(toIndentedString(phoneId)).append("\n");
    sb.append("    smsId: ").append(toIndentedString(smsId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("webhookId");
    openapiFields.add("webhookUrl");
    openapiFields.add("messageId");
    openapiFields.add("redriveId");
    openapiFields.add("httpMethod");
    openapiFields.add("webhookEvent");
    openapiFields.add("responseStatus");
    openapiFields.add("responseTimeMillis");
    openapiFields.add("responseBodyExtract");
    openapiFields.add("resultType");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("seen");
    openapiFields.add("inboxId");
    openapiFields.add("emailId");
    openapiFields.add("attachmentId");
    openapiFields.add("phoneId");
    openapiFields.add("smsId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("webhookId");
    openapiRequiredFields.add("webhookUrl");
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("httpMethod");
    openapiRequiredFields.add("webhookEvent");
    openapiRequiredFields.add("responseTimeMillis");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("seen");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookResultDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookResultDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookResultDto is not found in the empty JSON string", WebhookResultDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookResultDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookResultDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookResultDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("webhookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookId").toString()));
      }
      if (!jsonObj.get("webhookUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookUrl").toString()));
      }
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("redriveId") != null && !jsonObj.get("redriveId").isJsonNull()) && !jsonObj.get("redriveId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `redriveId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("redriveId").toString()));
      }
      if (!jsonObj.get("httpMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `httpMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("httpMethod").toString()));
      }
      // validate the required field `httpMethod`
      HttpMethodEnum.validateJsonElement(jsonObj.get("httpMethod"));
      if (!jsonObj.get("webhookEvent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookEvent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookEvent").toString()));
      }
      // validate the required field `webhookEvent`
      WebhookEventEnum.validateJsonElement(jsonObj.get("webhookEvent"));
      if ((jsonObj.get("responseBodyExtract") != null && !jsonObj.get("responseBodyExtract").isJsonNull()) && !jsonObj.get("responseBodyExtract").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `responseBodyExtract` to be a primitive type in the JSON string but got `%s`", jsonObj.get("responseBodyExtract").toString()));
      }
      if ((jsonObj.get("resultType") != null && !jsonObj.get("resultType").isJsonNull()) && !jsonObj.get("resultType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `resultType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("resultType").toString()));
      }
      // validate the optional field `resultType`
      if (jsonObj.get("resultType") != null && !jsonObj.get("resultType").isJsonNull()) {
        ResultTypeEnum.validateJsonElement(jsonObj.get("resultType"));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("emailId") != null && !jsonObj.get("emailId").isJsonNull()) && !jsonObj.get("emailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailId").toString()));
      }
      if ((jsonObj.get("attachmentId") != null && !jsonObj.get("attachmentId").isJsonNull()) && !jsonObj.get("attachmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attachmentId").toString()));
      }
      if ((jsonObj.get("phoneId") != null && !jsonObj.get("phoneId").isJsonNull()) && !jsonObj.get("phoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneId").toString()));
      }
      if ((jsonObj.get("smsId") != null && !jsonObj.get("smsId").isJsonNull()) && !jsonObj.get("smsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smsId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookResultDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookResultDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookResultDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookResultDto.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookResultDto>() {
           @Override
           public void write(JsonWriter out, WebhookResultDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookResultDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookResultDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookResultDto
   * @throws IOException if the JSON string is invalid with respect to WebhookResultDto
   */
  public static WebhookResultDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookResultDto.class);
  }

  /**
   * Convert an instance of WebhookResultDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

