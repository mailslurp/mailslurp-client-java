/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * CreateEmergencyAddressOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T21:13:29.989373638Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateEmergencyAddressOptions {
  public static final String SERIALIZED_NAME_CUSTOMER_NAME = "customerName";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_NAME)
  @javax.annotation.Nonnull
  private String customerName;

  public static final String SERIALIZED_NAME_ADDRESS1 = "address1";
  @SerializedName(SERIALIZED_NAME_ADDRESS1)
  @javax.annotation.Nonnull
  private String address1;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  @javax.annotation.Nonnull
  private String city;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  @javax.annotation.Nonnull
  private String region;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  @javax.annotation.Nonnull
  private String postalCode;

  /**
   * Gets or Sets isoCountryCode
   */
  @JsonAdapter(IsoCountryCodeEnum.Adapter.class)
  public enum IsoCountryCodeEnum {
    US("US"),
    
    GB("GB"),
    
    AU("AU"),
    
    CA("CA"),
    
    EE("EE"),
    
    HK("HK"),
    
    PL("PL"),
    
    CH("CH"),
    
    PT("PT"),
    
    NL("NL"),
    
    IL("IL"),
    
    SE("SE");

    private String value;

    IsoCountryCodeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static IsoCountryCodeEnum fromValue(String value) {
      for (IsoCountryCodeEnum b : IsoCountryCodeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<IsoCountryCodeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final IsoCountryCodeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public IsoCountryCodeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return IsoCountryCodeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      IsoCountryCodeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ISO_COUNTRY_CODE = "isoCountryCode";
  @SerializedName(SERIALIZED_NAME_ISO_COUNTRY_CODE)
  @javax.annotation.Nonnull
  private IsoCountryCodeEnum isoCountryCode;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  @javax.annotation.Nullable
  private String displayName;

  public CreateEmergencyAddressOptions() {
  }

  public CreateEmergencyAddressOptions customerName(@javax.annotation.Nonnull String customerName) {
    this.customerName = customerName;
    return this;
  }

  /**
   * Get customerName
   * @return customerName
   */
  @javax.annotation.Nonnull
  public String getCustomerName() {
    return customerName;
  }

  public void setCustomerName(@javax.annotation.Nonnull String customerName) {
    this.customerName = customerName;
  }


  public CreateEmergencyAddressOptions address1(@javax.annotation.Nonnull String address1) {
    this.address1 = address1;
    return this;
  }

  /**
   * Get address1
   * @return address1
   */
  @javax.annotation.Nonnull
  public String getAddress1() {
    return address1;
  }

  public void setAddress1(@javax.annotation.Nonnull String address1) {
    this.address1 = address1;
  }


  public CreateEmergencyAddressOptions city(@javax.annotation.Nonnull String city) {
    this.city = city;
    return this;
  }

  /**
   * Get city
   * @return city
   */
  @javax.annotation.Nonnull
  public String getCity() {
    return city;
  }

  public void setCity(@javax.annotation.Nonnull String city) {
    this.city = city;
  }


  public CreateEmergencyAddressOptions region(@javax.annotation.Nonnull String region) {
    this.region = region;
    return this;
  }

  /**
   * Get region
   * @return region
   */
  @javax.annotation.Nonnull
  public String getRegion() {
    return region;
  }

  public void setRegion(@javax.annotation.Nonnull String region) {
    this.region = region;
  }


  public CreateEmergencyAddressOptions postalCode(@javax.annotation.Nonnull String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Get postalCode
   * @return postalCode
   */
  @javax.annotation.Nonnull
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(@javax.annotation.Nonnull String postalCode) {
    this.postalCode = postalCode;
  }


  public CreateEmergencyAddressOptions isoCountryCode(@javax.annotation.Nonnull IsoCountryCodeEnum isoCountryCode) {
    this.isoCountryCode = isoCountryCode;
    return this;
  }

  /**
   * Get isoCountryCode
   * @return isoCountryCode
   */
  @javax.annotation.Nonnull
  public IsoCountryCodeEnum getIsoCountryCode() {
    return isoCountryCode;
  }

  public void setIsoCountryCode(@javax.annotation.Nonnull IsoCountryCodeEnum isoCountryCode) {
    this.isoCountryCode = isoCountryCode;
  }


  public CreateEmergencyAddressOptions displayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(@javax.annotation.Nullable String displayName) {
    this.displayName = displayName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateEmergencyAddressOptions createEmergencyAddressOptions = (CreateEmergencyAddressOptions) o;
    return Objects.equals(this.customerName, createEmergencyAddressOptions.customerName) &&
        Objects.equals(this.address1, createEmergencyAddressOptions.address1) &&
        Objects.equals(this.city, createEmergencyAddressOptions.city) &&
        Objects.equals(this.region, createEmergencyAddressOptions.region) &&
        Objects.equals(this.postalCode, createEmergencyAddressOptions.postalCode) &&
        Objects.equals(this.isoCountryCode, createEmergencyAddressOptions.isoCountryCode) &&
        Objects.equals(this.displayName, createEmergencyAddressOptions.displayName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customerName, address1, city, region, postalCode, isoCountryCode, displayName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateEmergencyAddressOptions {\n");
    sb.append("    customerName: ").append(toIndentedString(customerName)).append("\n");
    sb.append("    address1: ").append(toIndentedString(address1)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    isoCountryCode: ").append(toIndentedString(isoCountryCode)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customerName");
    openapiFields.add("address1");
    openapiFields.add("city");
    openapiFields.add("region");
    openapiFields.add("postalCode");
    openapiFields.add("isoCountryCode");
    openapiFields.add("displayName");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("customerName");
    openapiRequiredFields.add("address1");
    openapiRequiredFields.add("city");
    openapiRequiredFields.add("region");
    openapiRequiredFields.add("postalCode");
    openapiRequiredFields.add("isoCountryCode");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateEmergencyAddressOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreateEmergencyAddressOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateEmergencyAddressOptions is not found in the empty JSON string", CreateEmergencyAddressOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateEmergencyAddressOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateEmergencyAddressOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateEmergencyAddressOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("customerName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customerName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customerName").toString()));
      }
      if (!jsonObj.get("address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address1").toString()));
      }
      if (!jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if (!jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if (!jsonObj.get("isoCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isoCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isoCountryCode").toString()));
      }
      // validate the required field `isoCountryCode`
      IsoCountryCodeEnum.validateJsonElement(jsonObj.get("isoCountryCode"));
      if ((jsonObj.get("displayName") != null && !jsonObj.get("displayName").isJsonNull()) && !jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateEmergencyAddressOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateEmergencyAddressOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateEmergencyAddressOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateEmergencyAddressOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateEmergencyAddressOptions>() {
           @Override
           public void write(JsonWriter out, CreateEmergencyAddressOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateEmergencyAddressOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateEmergencyAddressOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateEmergencyAddressOptions
   * @throws IOException if the JSON string is invalid with respect to CreateEmergencyAddressOptions
   */
  public static CreateEmergencyAddressOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateEmergencyAddressOptions.class);
  }

  /**
   * Convert an instance of CreateEmergencyAddressOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

