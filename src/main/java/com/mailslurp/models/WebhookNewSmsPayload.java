/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * NEW_SMS webhook payload. Sent to your webhook url endpoint via HTTP POST when an sms is received by the phone number that your webhook is attached to. Use the SMS ID to fetch the full SMS details.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookNewSmsPayload {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nonnull
  private String messageId;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  @javax.annotation.Nonnull
  private UUID webhookId;

  /**
   * Name of the event type webhook is being triggered for.
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EventNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nonnull
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_WEBHOOK_NAME = "webhookName";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_NAME)
  @javax.annotation.Nullable
  private String webhookName;

  public static final String SERIALIZED_NAME_SMS_ID = "smsId";
  @SerializedName(SERIALIZED_NAME_SMS_ID)
  @javax.annotation.Nonnull
  private UUID smsId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nonnull
  private UUID phoneNumber;

  public static final String SERIALIZED_NAME_TO_NUMBER = "toNumber";
  @SerializedName(SERIALIZED_NAME_TO_NUMBER)
  @javax.annotation.Nonnull
  private String toNumber;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  @javax.annotation.Nonnull
  private String fromNumber;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nonnull
  private String body;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  @javax.annotation.Nonnull
  private Boolean read;

  public WebhookNewSmsPayload() {
  }

  public WebhookNewSmsPayload messageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
  }


  public WebhookNewSmsPayload webhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * ID of webhook entity being triggered
   * @return webhookId
   */
  @javax.annotation.Nonnull
  public UUID getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookNewSmsPayload eventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Name of the event type webhook is being triggered for.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public EventNameEnum getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookNewSmsPayload webhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
    return this;
  }

  /**
   * Name of the webhook being triggered
   * @return webhookName
   */
  @javax.annotation.Nullable
  public String getWebhookName() {
    return webhookName;
  }

  public void setWebhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
  }


  public WebhookNewSmsPayload smsId(@javax.annotation.Nonnull UUID smsId) {
    this.smsId = smsId;
    return this;
  }

  /**
   * ID of SMS message
   * @return smsId
   */
  @javax.annotation.Nonnull
  public UUID getSmsId() {
    return smsId;
  }

  public void setSmsId(@javax.annotation.Nonnull UUID smsId) {
    this.smsId = smsId;
  }


  public WebhookNewSmsPayload userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID of event
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public WebhookNewSmsPayload phoneNumber(@javax.annotation.Nonnull UUID phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * ID of phone number receiving SMS
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public UUID getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nonnull UUID phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public WebhookNewSmsPayload toNumber(@javax.annotation.Nonnull String toNumber) {
    this.toNumber = toNumber;
    return this;
  }

  /**
   * Recipient phone number
   * @return toNumber
   */
  @javax.annotation.Nonnull
  public String getToNumber() {
    return toNumber;
  }

  public void setToNumber(@javax.annotation.Nonnull String toNumber) {
    this.toNumber = toNumber;
  }


  public WebhookNewSmsPayload fromNumber(@javax.annotation.Nonnull String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * Sender phone number
   * @return fromNumber
   */
  @javax.annotation.Nonnull
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(@javax.annotation.Nonnull String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public WebhookNewSmsPayload body(@javax.annotation.Nonnull String body) {
    this.body = body;
    return this;
  }

  /**
   * SMS message body
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nonnull String body) {
    this.body = body;
  }


  public WebhookNewSmsPayload read(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * SMS has been read
   * @return read
   */
  @javax.annotation.Nonnull
  public Boolean getRead() {
    return read;
  }

  public void setRead(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookNewSmsPayload webhookNewSmsPayload = (WebhookNewSmsPayload) o;
    return Objects.equals(this.messageId, webhookNewSmsPayload.messageId) &&
        Objects.equals(this.webhookId, webhookNewSmsPayload.webhookId) &&
        Objects.equals(this.eventName, webhookNewSmsPayload.eventName) &&
        Objects.equals(this.webhookName, webhookNewSmsPayload.webhookName) &&
        Objects.equals(this.smsId, webhookNewSmsPayload.smsId) &&
        Objects.equals(this.userId, webhookNewSmsPayload.userId) &&
        Objects.equals(this.phoneNumber, webhookNewSmsPayload.phoneNumber) &&
        Objects.equals(this.toNumber, webhookNewSmsPayload.toNumber) &&
        Objects.equals(this.fromNumber, webhookNewSmsPayload.fromNumber) &&
        Objects.equals(this.body, webhookNewSmsPayload.body) &&
        Objects.equals(this.read, webhookNewSmsPayload.read);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, webhookId, eventName, webhookName, smsId, userId, phoneNumber, toNumber, fromNumber, body, read);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookNewSmsPayload {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    webhookName: ").append(toIndentedString(webhookName)).append("\n");
    sb.append("    smsId: ").append(toIndentedString(smsId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    toNumber: ").append(toIndentedString(toNumber)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageId");
    openapiFields.add("webhookId");
    openapiFields.add("eventName");
    openapiFields.add("webhookName");
    openapiFields.add("smsId");
    openapiFields.add("userId");
    openapiFields.add("phoneNumber");
    openapiFields.add("toNumber");
    openapiFields.add("fromNumber");
    openapiFields.add("body");
    openapiFields.add("read");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("webhookId");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("smsId");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("toNumber");
    openapiRequiredFields.add("fromNumber");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("read");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookNewSmsPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookNewSmsPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookNewSmsPayload is not found in the empty JSON string", WebhookNewSmsPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookNewSmsPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookNewSmsPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookNewSmsPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("webhookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookId").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the required field `eventName`
      EventNameEnum.validateJsonElement(jsonObj.get("eventName"));
      if ((jsonObj.get("webhookName") != null && !jsonObj.get("webhookName").isJsonNull()) && !jsonObj.get("webhookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookName").toString()));
      }
      if (!jsonObj.get("smsId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smsId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smsId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if (!jsonObj.get("toNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toNumber").toString()));
      }
      if (!jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookNewSmsPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookNewSmsPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookNewSmsPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookNewSmsPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookNewSmsPayload>() {
           @Override
           public void write(JsonWriter out, WebhookNewSmsPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookNewSmsPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookNewSmsPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookNewSmsPayload
   * @throws IOException if the JSON string is invalid with respect to WebhookNewSmsPayload
   */
  public static WebhookNewSmsPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookNewSmsPayload.class);
  }

  /**
   * Convert an instance of WebhookNewSmsPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

