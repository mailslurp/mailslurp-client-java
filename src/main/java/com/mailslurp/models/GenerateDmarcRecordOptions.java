/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * GenerateDmarcRecordOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class GenerateDmarcRecordOptions {
  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  @javax.annotation.Nonnull
  private String domain;

  /**
   * Gets or Sets version
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    DMARC1("DMARC1");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private VersionEnum version;

  /**
   * Gets or Sets policy
   */
  @JsonAdapter(PolicyEnum.Adapter.class)
  public enum PolicyEnum {
    NONE("NONE"),
    
    QUARANTINE("QUARANTINE"),
    
    REJECT("REJECT");

    private String value;

    PolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PolicyEnum fromValue(String value) {
      for (PolicyEnum b : PolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      PolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_POLICY = "policy";
  @SerializedName(SERIALIZED_NAME_POLICY)
  @javax.annotation.Nonnull
  private PolicyEnum policy;

  /**
   * Gets or Sets subdomainPolicy
   */
  @JsonAdapter(SubdomainPolicyEnum.Adapter.class)
  public enum SubdomainPolicyEnum {
    NONE("NONE"),
    
    QUARANTINE("QUARANTINE"),
    
    REJECT("REJECT");

    private String value;

    SubdomainPolicyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SubdomainPolicyEnum fromValue(String value) {
      for (SubdomainPolicyEnum b : SubdomainPolicyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SubdomainPolicyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SubdomainPolicyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SubdomainPolicyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SubdomainPolicyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SubdomainPolicyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SUBDOMAIN_POLICY = "subdomainPolicy";
  @SerializedName(SERIALIZED_NAME_SUBDOMAIN_POLICY)
  @javax.annotation.Nullable
  private SubdomainPolicyEnum subdomainPolicy;

  public static final String SERIALIZED_NAME_REPORT_EMAIL_ADDRESS = "reportEmailAddress";
  @SerializedName(SERIALIZED_NAME_REPORT_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private List<String> reportEmailAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_FORENSIC_EMAIL_ADDRESS = "forensicEmailAddress";
  @SerializedName(SERIALIZED_NAME_FORENSIC_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private List<String> forensicEmailAddress = new ArrayList<>();

  public static final String SERIALIZED_NAME_PERCENTAGE = "percentage";
  @SerializedName(SERIALIZED_NAME_PERCENTAGE)
  @javax.annotation.Nullable
  private Integer percentage;

  /**
   * Gets or Sets reportFormat
   */
  @JsonAdapter(ReportFormatEnum.Adapter.class)
  public enum ReportFormatEnum {
    AFRF("AFRF");

    private String value;

    ReportFormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ReportFormatEnum fromValue(String value) {
      for (ReportFormatEnum b : ReportFormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ReportFormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ReportFormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ReportFormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ReportFormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      ReportFormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REPORT_FORMAT = "reportFormat";
  @SerializedName(SERIALIZED_NAME_REPORT_FORMAT)
  @javax.annotation.Nullable
  private ReportFormatEnum reportFormat;

  public static final String SERIALIZED_NAME_SECONDS_BETWEEN_REPORTS = "secondsBetweenReports";
  @SerializedName(SERIALIZED_NAME_SECONDS_BETWEEN_REPORTS)
  @javax.annotation.Nullable
  private Integer secondsBetweenReports;

  /**
   * Gets or Sets adkim
   */
  @JsonAdapter(AdkimEnum.Adapter.class)
  public enum AdkimEnum {
    STRICT("STRICT"),
    
    RELAXED("RELAXED");

    private String value;

    AdkimEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AdkimEnum fromValue(String value) {
      for (AdkimEnum b : AdkimEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AdkimEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AdkimEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AdkimEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AdkimEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      AdkimEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ADKIM = "adkim";
  @SerializedName(SERIALIZED_NAME_ADKIM)
  @javax.annotation.Nullable
  private AdkimEnum adkim;

  /**
   * Gets or Sets aspf
   */
  @JsonAdapter(AspfEnum.Adapter.class)
  public enum AspfEnum {
    STRICT("STRICT"),
    
    RELAXED("RELAXED");

    private String value;

    AspfEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AspfEnum fromValue(String value) {
      for (AspfEnum b : AspfEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AspfEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AspfEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AspfEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AspfEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      AspfEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_ASPF = "aspf";
  @SerializedName(SERIALIZED_NAME_ASPF)
  @javax.annotation.Nullable
  private AspfEnum aspf;

  /**
   * Gets or Sets fo
   */
  @JsonAdapter(FoEnum.Adapter.class)
  public enum FoEnum {
    FO_0("FO_0"),
    
    FO_1("FO_1"),
    
    FO_D("FO_D"),
    
    FO_S("FO_S");

    private String value;

    FoEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FoEnum fromValue(String value) {
      for (FoEnum b : FoEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FoEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FoEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FoEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FoEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      FoEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FO = "fo";
  @SerializedName(SERIALIZED_NAME_FO)
  @javax.annotation.Nullable
  private FoEnum fo;

  public GenerateDmarcRecordOptions() {
  }

  public GenerateDmarcRecordOptions domain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Get domain
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
  }


  public GenerateDmarcRecordOptions version(@javax.annotation.Nonnull VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull VersionEnum version) {
    this.version = version;
  }


  public GenerateDmarcRecordOptions policy(@javax.annotation.Nonnull PolicyEnum policy) {
    this.policy = policy;
    return this;
  }

  /**
   * Get policy
   * @return policy
   */
  @javax.annotation.Nonnull
  public PolicyEnum getPolicy() {
    return policy;
  }

  public void setPolicy(@javax.annotation.Nonnull PolicyEnum policy) {
    this.policy = policy;
  }


  public GenerateDmarcRecordOptions subdomainPolicy(@javax.annotation.Nullable SubdomainPolicyEnum subdomainPolicy) {
    this.subdomainPolicy = subdomainPolicy;
    return this;
  }

  /**
   * Get subdomainPolicy
   * @return subdomainPolicy
   */
  @javax.annotation.Nullable
  public SubdomainPolicyEnum getSubdomainPolicy() {
    return subdomainPolicy;
  }

  public void setSubdomainPolicy(@javax.annotation.Nullable SubdomainPolicyEnum subdomainPolicy) {
    this.subdomainPolicy = subdomainPolicy;
  }


  public GenerateDmarcRecordOptions reportEmailAddress(@javax.annotation.Nullable List<String> reportEmailAddress) {
    this.reportEmailAddress = reportEmailAddress;
    return this;
  }

  public GenerateDmarcRecordOptions addReportEmailAddressItem(String reportEmailAddressItem) {
    if (this.reportEmailAddress == null) {
      this.reportEmailAddress = new ArrayList<>();
    }
    this.reportEmailAddress.add(reportEmailAddressItem);
    return this;
  }

  /**
   * Get reportEmailAddress
   * @return reportEmailAddress
   */
  @javax.annotation.Nullable
  public List<String> getReportEmailAddress() {
    return reportEmailAddress;
  }

  public void setReportEmailAddress(@javax.annotation.Nullable List<String> reportEmailAddress) {
    this.reportEmailAddress = reportEmailAddress;
  }


  public GenerateDmarcRecordOptions forensicEmailAddress(@javax.annotation.Nullable List<String> forensicEmailAddress) {
    this.forensicEmailAddress = forensicEmailAddress;
    return this;
  }

  public GenerateDmarcRecordOptions addForensicEmailAddressItem(String forensicEmailAddressItem) {
    if (this.forensicEmailAddress == null) {
      this.forensicEmailAddress = new ArrayList<>();
    }
    this.forensicEmailAddress.add(forensicEmailAddressItem);
    return this;
  }

  /**
   * Get forensicEmailAddress
   * @return forensicEmailAddress
   */
  @javax.annotation.Nullable
  public List<String> getForensicEmailAddress() {
    return forensicEmailAddress;
  }

  public void setForensicEmailAddress(@javax.annotation.Nullable List<String> forensicEmailAddress) {
    this.forensicEmailAddress = forensicEmailAddress;
  }


  public GenerateDmarcRecordOptions percentage(@javax.annotation.Nullable Integer percentage) {
    this.percentage = percentage;
    return this;
  }

  /**
   * Get percentage
   * minimum: 1
   * maximum: 100
   * @return percentage
   */
  @javax.annotation.Nullable
  public Integer getPercentage() {
    return percentage;
  }

  public void setPercentage(@javax.annotation.Nullable Integer percentage) {
    this.percentage = percentage;
  }


  public GenerateDmarcRecordOptions reportFormat(@javax.annotation.Nullable ReportFormatEnum reportFormat) {
    this.reportFormat = reportFormat;
    return this;
  }

  /**
   * Get reportFormat
   * @return reportFormat
   */
  @javax.annotation.Nullable
  public ReportFormatEnum getReportFormat() {
    return reportFormat;
  }

  public void setReportFormat(@javax.annotation.Nullable ReportFormatEnum reportFormat) {
    this.reportFormat = reportFormat;
  }


  public GenerateDmarcRecordOptions secondsBetweenReports(@javax.annotation.Nullable Integer secondsBetweenReports) {
    this.secondsBetweenReports = secondsBetweenReports;
    return this;
  }

  /**
   * Get secondsBetweenReports
   * @return secondsBetweenReports
   */
  @javax.annotation.Nullable
  public Integer getSecondsBetweenReports() {
    return secondsBetweenReports;
  }

  public void setSecondsBetweenReports(@javax.annotation.Nullable Integer secondsBetweenReports) {
    this.secondsBetweenReports = secondsBetweenReports;
  }


  public GenerateDmarcRecordOptions adkim(@javax.annotation.Nullable AdkimEnum adkim) {
    this.adkim = adkim;
    return this;
  }

  /**
   * Get adkim
   * @return adkim
   */
  @javax.annotation.Nullable
  public AdkimEnum getAdkim() {
    return adkim;
  }

  public void setAdkim(@javax.annotation.Nullable AdkimEnum adkim) {
    this.adkim = adkim;
  }


  public GenerateDmarcRecordOptions aspf(@javax.annotation.Nullable AspfEnum aspf) {
    this.aspf = aspf;
    return this;
  }

  /**
   * Get aspf
   * @return aspf
   */
  @javax.annotation.Nullable
  public AspfEnum getAspf() {
    return aspf;
  }

  public void setAspf(@javax.annotation.Nullable AspfEnum aspf) {
    this.aspf = aspf;
  }


  public GenerateDmarcRecordOptions fo(@javax.annotation.Nullable FoEnum fo) {
    this.fo = fo;
    return this;
  }

  /**
   * Get fo
   * @return fo
   */
  @javax.annotation.Nullable
  public FoEnum getFo() {
    return fo;
  }

  public void setFo(@javax.annotation.Nullable FoEnum fo) {
    this.fo = fo;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateDmarcRecordOptions generateDmarcRecordOptions = (GenerateDmarcRecordOptions) o;
    return Objects.equals(this.domain, generateDmarcRecordOptions.domain) &&
        Objects.equals(this.version, generateDmarcRecordOptions.version) &&
        Objects.equals(this.policy, generateDmarcRecordOptions.policy) &&
        Objects.equals(this.subdomainPolicy, generateDmarcRecordOptions.subdomainPolicy) &&
        Objects.equals(this.reportEmailAddress, generateDmarcRecordOptions.reportEmailAddress) &&
        Objects.equals(this.forensicEmailAddress, generateDmarcRecordOptions.forensicEmailAddress) &&
        Objects.equals(this.percentage, generateDmarcRecordOptions.percentage) &&
        Objects.equals(this.reportFormat, generateDmarcRecordOptions.reportFormat) &&
        Objects.equals(this.secondsBetweenReports, generateDmarcRecordOptions.secondsBetweenReports) &&
        Objects.equals(this.adkim, generateDmarcRecordOptions.adkim) &&
        Objects.equals(this.aspf, generateDmarcRecordOptions.aspf) &&
        Objects.equals(this.fo, generateDmarcRecordOptions.fo);
  }

  @Override
  public int hashCode() {
    return Objects.hash(domain, version, policy, subdomainPolicy, reportEmailAddress, forensicEmailAddress, percentage, reportFormat, secondsBetweenReports, adkim, aspf, fo);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateDmarcRecordOptions {\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    policy: ").append(toIndentedString(policy)).append("\n");
    sb.append("    subdomainPolicy: ").append(toIndentedString(subdomainPolicy)).append("\n");
    sb.append("    reportEmailAddress: ").append(toIndentedString(reportEmailAddress)).append("\n");
    sb.append("    forensicEmailAddress: ").append(toIndentedString(forensicEmailAddress)).append("\n");
    sb.append("    percentage: ").append(toIndentedString(percentage)).append("\n");
    sb.append("    reportFormat: ").append(toIndentedString(reportFormat)).append("\n");
    sb.append("    secondsBetweenReports: ").append(toIndentedString(secondsBetweenReports)).append("\n");
    sb.append("    adkim: ").append(toIndentedString(adkim)).append("\n");
    sb.append("    aspf: ").append(toIndentedString(aspf)).append("\n");
    sb.append("    fo: ").append(toIndentedString(fo)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("domain");
    openapiFields.add("version");
    openapiFields.add("policy");
    openapiFields.add("subdomainPolicy");
    openapiFields.add("reportEmailAddress");
    openapiFields.add("forensicEmailAddress");
    openapiFields.add("percentage");
    openapiFields.add("reportFormat");
    openapiFields.add("secondsBetweenReports");
    openapiFields.add("adkim");
    openapiFields.add("aspf");
    openapiFields.add("fo");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("policy");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateDmarcRecordOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!GenerateDmarcRecordOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateDmarcRecordOptions is not found in the empty JSON string", GenerateDmarcRecordOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateDmarcRecordOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateDmarcRecordOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateDmarcRecordOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the required field `version`
      VersionEnum.validateJsonElement(jsonObj.get("version"));
      if (!jsonObj.get("policy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `policy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("policy").toString()));
      }
      // validate the required field `policy`
      PolicyEnum.validateJsonElement(jsonObj.get("policy"));
      if ((jsonObj.get("subdomainPolicy") != null && !jsonObj.get("subdomainPolicy").isJsonNull()) && !jsonObj.get("subdomainPolicy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subdomainPolicy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subdomainPolicy").toString()));
      }
      // validate the optional field `subdomainPolicy`
      if (jsonObj.get("subdomainPolicy") != null && !jsonObj.get("subdomainPolicy").isJsonNull()) {
        SubdomainPolicyEnum.validateJsonElement(jsonObj.get("subdomainPolicy"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("reportEmailAddress") != null && !jsonObj.get("reportEmailAddress").isJsonNull() && !jsonObj.get("reportEmailAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportEmailAddress` to be an array in the JSON string but got `%s`", jsonObj.get("reportEmailAddress").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("forensicEmailAddress") != null && !jsonObj.get("forensicEmailAddress").isJsonNull() && !jsonObj.get("forensicEmailAddress").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `forensicEmailAddress` to be an array in the JSON string but got `%s`", jsonObj.get("forensicEmailAddress").toString()));
      }
      if ((jsonObj.get("reportFormat") != null && !jsonObj.get("reportFormat").isJsonNull()) && !jsonObj.get("reportFormat").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportFormat` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportFormat").toString()));
      }
      // validate the optional field `reportFormat`
      if (jsonObj.get("reportFormat") != null && !jsonObj.get("reportFormat").isJsonNull()) {
        ReportFormatEnum.validateJsonElement(jsonObj.get("reportFormat"));
      }
      if ((jsonObj.get("adkim") != null && !jsonObj.get("adkim").isJsonNull()) && !jsonObj.get("adkim").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `adkim` to be a primitive type in the JSON string but got `%s`", jsonObj.get("adkim").toString()));
      }
      // validate the optional field `adkim`
      if (jsonObj.get("adkim") != null && !jsonObj.get("adkim").isJsonNull()) {
        AdkimEnum.validateJsonElement(jsonObj.get("adkim"));
      }
      if ((jsonObj.get("aspf") != null && !jsonObj.get("aspf").isJsonNull()) && !jsonObj.get("aspf").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aspf` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aspf").toString()));
      }
      // validate the optional field `aspf`
      if (jsonObj.get("aspf") != null && !jsonObj.get("aspf").isJsonNull()) {
        AspfEnum.validateJsonElement(jsonObj.get("aspf"));
      }
      if ((jsonObj.get("fo") != null && !jsonObj.get("fo").isJsonNull()) && !jsonObj.get("fo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fo").toString()));
      }
      // validate the optional field `fo`
      if (jsonObj.get("fo") != null && !jsonObj.get("fo").isJsonNull()) {
        FoEnum.validateJsonElement(jsonObj.get("fo"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateDmarcRecordOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateDmarcRecordOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateDmarcRecordOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateDmarcRecordOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateDmarcRecordOptions>() {
           @Override
           public void write(JsonWriter out, GenerateDmarcRecordOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateDmarcRecordOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateDmarcRecordOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateDmarcRecordOptions
   * @throws IOException if the JSON string is invalid with respect to GenerateDmarcRecordOptions
   */
  public static GenerateDmarcRecordOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateDmarcRecordOptions.class);
  }

  /**
   * Convert an instance of GenerateDmarcRecordOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

