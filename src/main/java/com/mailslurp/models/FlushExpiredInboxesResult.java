/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Result from calling expire on any inboxes that have applicable expiration dates given current time.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class FlushExpiredInboxesResult {
  public static final String SERIALIZED_NAME_INBOX_IDS = "inboxIds";
  @SerializedName(SERIALIZED_NAME_INBOX_IDS)
  @javax.annotation.Nonnull
  private List<UUID> inboxIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXPIRE_BEFORE = "expireBefore";
  @SerializedName(SERIALIZED_NAME_EXPIRE_BEFORE)
  @javax.annotation.Nonnull
  private OffsetDateTime expireBefore;

  public FlushExpiredInboxesResult() {
  }

  public FlushExpiredInboxesResult inboxIds(@javax.annotation.Nonnull List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
    return this;
  }

  public FlushExpiredInboxesResult addInboxIdsItem(UUID inboxIdsItem) {
    if (this.inboxIds == null) {
      this.inboxIds = new ArrayList<>();
    }
    this.inboxIds.add(inboxIdsItem);
    return this;
  }

  /**
   * Inbox IDs affected by expiration
   * @return inboxIds
   */
  @javax.annotation.Nonnull
  public List<UUID> getInboxIds() {
    return inboxIds;
  }

  public void setInboxIds(@javax.annotation.Nonnull List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
  }


  public FlushExpiredInboxesResult expireBefore(@javax.annotation.Nonnull OffsetDateTime expireBefore) {
    this.expireBefore = expireBefore;
    return this;
  }

  /**
   * DateTime to filter inboxes so that those expiring before this time are expired
   * @return expireBefore
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getExpireBefore() {
    return expireBefore;
  }

  public void setExpireBefore(@javax.annotation.Nonnull OffsetDateTime expireBefore) {
    this.expireBefore = expireBefore;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FlushExpiredInboxesResult flushExpiredInboxesResult = (FlushExpiredInboxesResult) o;
    return Objects.equals(this.inboxIds, flushExpiredInboxesResult.inboxIds) &&
        Objects.equals(this.expireBefore, flushExpiredInboxesResult.expireBefore);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxIds, expireBefore);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FlushExpiredInboxesResult {\n");
    sb.append("    inboxIds: ").append(toIndentedString(inboxIds)).append("\n");
    sb.append("    expireBefore: ").append(toIndentedString(expireBefore)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboxIds");
    openapiFields.add("expireBefore");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inboxIds");
    openapiRequiredFields.add("expireBefore");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FlushExpiredInboxesResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!FlushExpiredInboxesResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FlushExpiredInboxesResult is not found in the empty JSON string", FlushExpiredInboxesResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FlushExpiredInboxesResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FlushExpiredInboxesResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FlushExpiredInboxesResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("inboxIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("inboxIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxIds` to be an array in the JSON string but got `%s`", jsonObj.get("inboxIds").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FlushExpiredInboxesResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FlushExpiredInboxesResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FlushExpiredInboxesResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FlushExpiredInboxesResult.class));

       return (TypeAdapter<T>) new TypeAdapter<FlushExpiredInboxesResult>() {
           @Override
           public void write(JsonWriter out, FlushExpiredInboxesResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FlushExpiredInboxesResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FlushExpiredInboxesResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FlushExpiredInboxesResult
   * @throws IOException if the JSON string is invalid with respect to FlushExpiredInboxesResult
   */
  public static FlushExpiredInboxesResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FlushExpiredInboxesResult.class);
  }

  /**
   * Convert an instance of FlushExpiredInboxesResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

