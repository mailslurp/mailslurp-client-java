/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ImapUpdateFlagsOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ImapUpdateFlagsOptions {
  public static final String SERIALIZED_NAME_OPERATION = "operation";
  @SerializedName(SERIALIZED_NAME_OPERATION)
  @javax.annotation.Nonnull
  private String operation;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  @javax.annotation.Nullable
  private List<String> flags;

  public static final String SERIALIZED_NAME_UID_SET = "uidSet";
  @SerializedName(SERIALIZED_NAME_UID_SET)
  @javax.annotation.Nullable
  private String uidSet;

  public static final String SERIALIZED_NAME_SEQ_SET = "seqSet";
  @SerializedName(SERIALIZED_NAME_SEQ_SET)
  @javax.annotation.Nullable
  private String seqSet;

  public ImapUpdateFlagsOptions() {
  }

  public ImapUpdateFlagsOptions operation(@javax.annotation.Nonnull String operation) {
    this.operation = operation;
    return this;
  }

  /**
   * Get operation
   * @return operation
   */
  @javax.annotation.Nonnull
  public String getOperation() {
    return operation;
  }

  public void setOperation(@javax.annotation.Nonnull String operation) {
    this.operation = operation;
  }


  public ImapUpdateFlagsOptions flags(@javax.annotation.Nullable List<String> flags) {
    this.flags = flags;
    return this;
  }

  public ImapUpdateFlagsOptions addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * Get flags
   * @return flags
   */
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }

  public void setFlags(@javax.annotation.Nullable List<String> flags) {
    this.flags = flags;
  }


  public ImapUpdateFlagsOptions uidSet(@javax.annotation.Nullable String uidSet) {
    this.uidSet = uidSet;
    return this;
  }

  /**
   * Get uidSet
   * @return uidSet
   */
  @javax.annotation.Nullable
  public String getUidSet() {
    return uidSet;
  }

  public void setUidSet(@javax.annotation.Nullable String uidSet) {
    this.uidSet = uidSet;
  }


  public ImapUpdateFlagsOptions seqSet(@javax.annotation.Nullable String seqSet) {
    this.seqSet = seqSet;
    return this;
  }

  /**
   * Get seqSet
   * @return seqSet
   */
  @javax.annotation.Nullable
  public String getSeqSet() {
    return seqSet;
  }

  public void setSeqSet(@javax.annotation.Nullable String seqSet) {
    this.seqSet = seqSet;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapUpdateFlagsOptions imapUpdateFlagsOptions = (ImapUpdateFlagsOptions) o;
    return Objects.equals(this.operation, imapUpdateFlagsOptions.operation) &&
        Objects.equals(this.flags, imapUpdateFlagsOptions.flags) &&
        Objects.equals(this.uidSet, imapUpdateFlagsOptions.uidSet) &&
        Objects.equals(this.seqSet, imapUpdateFlagsOptions.seqSet);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(operation, flags, uidSet, seqSet);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapUpdateFlagsOptions {\n");
    sb.append("    operation: ").append(toIndentedString(operation)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    uidSet: ").append(toIndentedString(uidSet)).append("\n");
    sb.append("    seqSet: ").append(toIndentedString(seqSet)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("operation");
    openapiFields.add("flags");
    openapiFields.add("uidSet");
    openapiFields.add("seqSet");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("operation");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImapUpdateFlagsOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ImapUpdateFlagsOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapUpdateFlagsOptions is not found in the empty JSON string", ImapUpdateFlagsOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImapUpdateFlagsOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapUpdateFlagsOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImapUpdateFlagsOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("operation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `operation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("operation").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("flags") != null && !jsonObj.get("flags").isJsonNull() && !jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      if ((jsonObj.get("uidSet") != null && !jsonObj.get("uidSet").isJsonNull()) && !jsonObj.get("uidSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uidSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uidSet").toString()));
      }
      if ((jsonObj.get("seqSet") != null && !jsonObj.get("seqSet").isJsonNull()) && !jsonObj.get("seqSet").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `seqSet` to be a primitive type in the JSON string but got `%s`", jsonObj.get("seqSet").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapUpdateFlagsOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapUpdateFlagsOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapUpdateFlagsOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapUpdateFlagsOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapUpdateFlagsOptions>() {
           @Override
           public void write(JsonWriter out, ImapUpdateFlagsOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapUpdateFlagsOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImapUpdateFlagsOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImapUpdateFlagsOptions
   * @throws IOException if the JSON string is invalid with respect to ImapUpdateFlagsOptions
   */
  public static ImapUpdateFlagsOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapUpdateFlagsOptions.class);
  }

  /**
   * Convert an instance of ImapUpdateFlagsOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

