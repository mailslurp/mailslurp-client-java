/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.ImageIssue;
import com.mailslurp.models.LinkIssue;
import com.mailslurp.models.SpellingIssue;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * CheckEmailBodyResults
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T01:24:11.050965128Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CheckEmailBodyResults {
  public static final String SERIALIZED_NAME_HAS_ISSUES = "hasIssues";
  @SerializedName(SERIALIZED_NAME_HAS_ISSUES)
  @javax.annotation.Nonnull
  private Boolean hasIssues;

  public static final String SERIALIZED_NAME_LINK_ISSUES = "linkIssues";
  @SerializedName(SERIALIZED_NAME_LINK_ISSUES)
  @javax.annotation.Nonnull
  private List<LinkIssue> linkIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_IMAGE_ISSUES = "imageIssues";
  @SerializedName(SERIALIZED_NAME_IMAGE_ISSUES)
  @javax.annotation.Nonnull
  private List<ImageIssue> imageIssues = new ArrayList<>();

  public static final String SERIALIZED_NAME_SPELLING_ISSUES = "spellingIssues";
  @SerializedName(SERIALIZED_NAME_SPELLING_ISSUES)
  @javax.annotation.Nonnull
  private List<SpellingIssue> spellingIssues = new ArrayList<>();

  public CheckEmailBodyResults() {
  }

  public CheckEmailBodyResults hasIssues(@javax.annotation.Nonnull Boolean hasIssues) {
    this.hasIssues = hasIssues;
    return this;
  }

  /**
   * Get hasIssues
   * @return hasIssues
   */
  @javax.annotation.Nonnull
  public Boolean getHasIssues() {
    return hasIssues;
  }

  public void setHasIssues(@javax.annotation.Nonnull Boolean hasIssues) {
    this.hasIssues = hasIssues;
  }


  public CheckEmailBodyResults linkIssues(@javax.annotation.Nonnull List<LinkIssue> linkIssues) {
    this.linkIssues = linkIssues;
    return this;
  }

  public CheckEmailBodyResults addLinkIssuesItem(LinkIssue linkIssuesItem) {
    if (this.linkIssues == null) {
      this.linkIssues = new ArrayList<>();
    }
    this.linkIssues.add(linkIssuesItem);
    return this;
  }

  /**
   * Get linkIssues
   * @return linkIssues
   */
  @javax.annotation.Nonnull
  public List<LinkIssue> getLinkIssues() {
    return linkIssues;
  }

  public void setLinkIssues(@javax.annotation.Nonnull List<LinkIssue> linkIssues) {
    this.linkIssues = linkIssues;
  }


  public CheckEmailBodyResults imageIssues(@javax.annotation.Nonnull List<ImageIssue> imageIssues) {
    this.imageIssues = imageIssues;
    return this;
  }

  public CheckEmailBodyResults addImageIssuesItem(ImageIssue imageIssuesItem) {
    if (this.imageIssues == null) {
      this.imageIssues = new ArrayList<>();
    }
    this.imageIssues.add(imageIssuesItem);
    return this;
  }

  /**
   * Get imageIssues
   * @return imageIssues
   */
  @javax.annotation.Nonnull
  public List<ImageIssue> getImageIssues() {
    return imageIssues;
  }

  public void setImageIssues(@javax.annotation.Nonnull List<ImageIssue> imageIssues) {
    this.imageIssues = imageIssues;
  }


  public CheckEmailBodyResults spellingIssues(@javax.annotation.Nonnull List<SpellingIssue> spellingIssues) {
    this.spellingIssues = spellingIssues;
    return this;
  }

  public CheckEmailBodyResults addSpellingIssuesItem(SpellingIssue spellingIssuesItem) {
    if (this.spellingIssues == null) {
      this.spellingIssues = new ArrayList<>();
    }
    this.spellingIssues.add(spellingIssuesItem);
    return this;
  }

  /**
   * Get spellingIssues
   * @return spellingIssues
   */
  @javax.annotation.Nonnull
  public List<SpellingIssue> getSpellingIssues() {
    return spellingIssues;
  }

  public void setSpellingIssues(@javax.annotation.Nonnull List<SpellingIssue> spellingIssues) {
    this.spellingIssues = spellingIssues;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CheckEmailBodyResults checkEmailBodyResults = (CheckEmailBodyResults) o;
    return Objects.equals(this.hasIssues, checkEmailBodyResults.hasIssues) &&
        Objects.equals(this.linkIssues, checkEmailBodyResults.linkIssues) &&
        Objects.equals(this.imageIssues, checkEmailBodyResults.imageIssues) &&
        Objects.equals(this.spellingIssues, checkEmailBodyResults.spellingIssues);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hasIssues, linkIssues, imageIssues, spellingIssues);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CheckEmailBodyResults {\n");
    sb.append("    hasIssues: ").append(toIndentedString(hasIssues)).append("\n");
    sb.append("    linkIssues: ").append(toIndentedString(linkIssues)).append("\n");
    sb.append("    imageIssues: ").append(toIndentedString(imageIssues)).append("\n");
    sb.append("    spellingIssues: ").append(toIndentedString(spellingIssues)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("hasIssues");
    openapiFields.add("linkIssues");
    openapiFields.add("imageIssues");
    openapiFields.add("spellingIssues");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("hasIssues");
    openapiRequiredFields.add("linkIssues");
    openapiRequiredFields.add("imageIssues");
    openapiRequiredFields.add("spellingIssues");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CheckEmailBodyResults
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CheckEmailBodyResults.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CheckEmailBodyResults is not found in the empty JSON string", CheckEmailBodyResults.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CheckEmailBodyResults.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CheckEmailBodyResults` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CheckEmailBodyResults.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("linkIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `linkIssues` to be an array in the JSON string but got `%s`", jsonObj.get("linkIssues").toString()));
      }

      JsonArray jsonArraylinkIssues = jsonObj.getAsJsonArray("linkIssues");
      // validate the required field `linkIssues` (array)
      for (int i = 0; i < jsonArraylinkIssues.size(); i++) {
        LinkIssue.validateJsonElement(jsonArraylinkIssues.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("imageIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageIssues` to be an array in the JSON string but got `%s`", jsonObj.get("imageIssues").toString()));
      }

      JsonArray jsonArrayimageIssues = jsonObj.getAsJsonArray("imageIssues");
      // validate the required field `imageIssues` (array)
      for (int i = 0; i < jsonArrayimageIssues.size(); i++) {
        ImageIssue.validateJsonElement(jsonArrayimageIssues.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("spellingIssues").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spellingIssues` to be an array in the JSON string but got `%s`", jsonObj.get("spellingIssues").toString()));
      }

      JsonArray jsonArrayspellingIssues = jsonObj.getAsJsonArray("spellingIssues");
      // validate the required field `spellingIssues` (array)
      for (int i = 0; i < jsonArrayspellingIssues.size(); i++) {
        SpellingIssue.validateJsonElement(jsonArrayspellingIssues.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CheckEmailBodyResults.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CheckEmailBodyResults' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CheckEmailBodyResults> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CheckEmailBodyResults.class));

       return (TypeAdapter<T>) new TypeAdapter<CheckEmailBodyResults>() {
           @Override
           public void write(JsonWriter out, CheckEmailBodyResults value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CheckEmailBodyResults read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CheckEmailBodyResults given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CheckEmailBodyResults
   * @throws IOException if the JSON string is invalid with respect to CheckEmailBodyResults
   */
  public static CheckEmailBodyResults fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CheckEmailBodyResults.class);
  }

  /**
   * Convert an instance of CheckEmailBodyResults to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

