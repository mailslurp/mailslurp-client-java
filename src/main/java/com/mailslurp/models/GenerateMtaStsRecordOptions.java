/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * GenerateMtaStsRecordOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class GenerateMtaStsRecordOptions {
  public static final String SERIALIZED_NAME_HOST = "host";
  @SerializedName(SERIALIZED_NAME_HOST)
  @javax.annotation.Nonnull
  private String host;

  /**
   * Gets or Sets version
   */
  @JsonAdapter(VersionEnum.Adapter.class)
  public enum VersionEnum {
    STSV1("STSv1");

    private String value;

    VersionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VersionEnum fromValue(String value) {
      for (VersionEnum b : VersionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VersionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VersionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VersionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VersionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      VersionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  @javax.annotation.Nonnull
  private VersionEnum version;

  /**
   * Gets or Sets mode
   */
  @JsonAdapter(ModeEnum.Adapter.class)
  public enum ModeEnum {
    TESTING("TESTING"),
    
    ENFORCE("ENFORCE"),
    
    NONE("NONE");

    private String value;

    ModeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ModeEnum fromValue(String value) {
      for (ModeEnum b : ModeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ModeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ModeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ModeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ModeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      ModeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_MODE = "mode";
  @SerializedName(SERIALIZED_NAME_MODE)
  @javax.annotation.Nonnull
  private ModeEnum mode;

  public static final String SERIALIZED_NAME_TTL = "ttl";
  @SerializedName(SERIALIZED_NAME_TTL)
  @javax.annotation.Nonnull
  private Integer ttl;

  public static final String SERIALIZED_NAME_MAX_AGE_SECONDS = "maxAgeSeconds";
  @SerializedName(SERIALIZED_NAME_MAX_AGE_SECONDS)
  @javax.annotation.Nonnull
  private Integer maxAgeSeconds;

  public static final String SERIALIZED_NAME_MX_RECORDS = "mxRecords";
  @SerializedName(SERIALIZED_NAME_MX_RECORDS)
  @javax.annotation.Nonnull
  private List<String> mxRecords = new ArrayList<>();

  public GenerateMtaStsRecordOptions() {
  }

  public GenerateMtaStsRecordOptions host(@javax.annotation.Nonnull String host) {
    this.host = host;
    return this;
  }

  /**
   * Get host
   * @return host
   */
  @javax.annotation.Nonnull
  public String getHost() {
    return host;
  }

  public void setHost(@javax.annotation.Nonnull String host) {
    this.host = host;
  }


  public GenerateMtaStsRecordOptions version(@javax.annotation.Nonnull VersionEnum version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nonnull
  public VersionEnum getVersion() {
    return version;
  }

  public void setVersion(@javax.annotation.Nonnull VersionEnum version) {
    this.version = version;
  }


  public GenerateMtaStsRecordOptions mode(@javax.annotation.Nonnull ModeEnum mode) {
    this.mode = mode;
    return this;
  }

  /**
   * Get mode
   * @return mode
   */
  @javax.annotation.Nonnull
  public ModeEnum getMode() {
    return mode;
  }

  public void setMode(@javax.annotation.Nonnull ModeEnum mode) {
    this.mode = mode;
  }


  public GenerateMtaStsRecordOptions ttl(@javax.annotation.Nonnull Integer ttl) {
    this.ttl = ttl;
    return this;
  }

  /**
   * Get ttl
   * @return ttl
   */
  @javax.annotation.Nonnull
  public Integer getTtl() {
    return ttl;
  }

  public void setTtl(@javax.annotation.Nonnull Integer ttl) {
    this.ttl = ttl;
  }


  public GenerateMtaStsRecordOptions maxAgeSeconds(@javax.annotation.Nonnull Integer maxAgeSeconds) {
    this.maxAgeSeconds = maxAgeSeconds;
    return this;
  }

  /**
   * Get maxAgeSeconds
   * @return maxAgeSeconds
   */
  @javax.annotation.Nonnull
  public Integer getMaxAgeSeconds() {
    return maxAgeSeconds;
  }

  public void setMaxAgeSeconds(@javax.annotation.Nonnull Integer maxAgeSeconds) {
    this.maxAgeSeconds = maxAgeSeconds;
  }


  public GenerateMtaStsRecordOptions mxRecords(@javax.annotation.Nonnull List<String> mxRecords) {
    this.mxRecords = mxRecords;
    return this;
  }

  public GenerateMtaStsRecordOptions addMxRecordsItem(String mxRecordsItem) {
    if (this.mxRecords == null) {
      this.mxRecords = new ArrayList<>();
    }
    this.mxRecords.add(mxRecordsItem);
    return this;
  }

  /**
   * Get mxRecords
   * @return mxRecords
   */
  @javax.annotation.Nonnull
  public List<String> getMxRecords() {
    return mxRecords;
  }

  public void setMxRecords(@javax.annotation.Nonnull List<String> mxRecords) {
    this.mxRecords = mxRecords;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GenerateMtaStsRecordOptions generateMtaStsRecordOptions = (GenerateMtaStsRecordOptions) o;
    return Objects.equals(this.host, generateMtaStsRecordOptions.host) &&
        Objects.equals(this.version, generateMtaStsRecordOptions.version) &&
        Objects.equals(this.mode, generateMtaStsRecordOptions.mode) &&
        Objects.equals(this.ttl, generateMtaStsRecordOptions.ttl) &&
        Objects.equals(this.maxAgeSeconds, generateMtaStsRecordOptions.maxAgeSeconds) &&
        Objects.equals(this.mxRecords, generateMtaStsRecordOptions.mxRecords);
  }

  @Override
  public int hashCode() {
    return Objects.hash(host, version, mode, ttl, maxAgeSeconds, mxRecords);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GenerateMtaStsRecordOptions {\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    mode: ").append(toIndentedString(mode)).append("\n");
    sb.append("    ttl: ").append(toIndentedString(ttl)).append("\n");
    sb.append("    maxAgeSeconds: ").append(toIndentedString(maxAgeSeconds)).append("\n");
    sb.append("    mxRecords: ").append(toIndentedString(mxRecords)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("host");
    openapiFields.add("version");
    openapiFields.add("mode");
    openapiFields.add("ttl");
    openapiFields.add("maxAgeSeconds");
    openapiFields.add("mxRecords");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("host");
    openapiRequiredFields.add("version");
    openapiRequiredFields.add("mode");
    openapiRequiredFields.add("ttl");
    openapiRequiredFields.add("maxAgeSeconds");
    openapiRequiredFields.add("mxRecords");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GenerateMtaStsRecordOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!GenerateMtaStsRecordOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GenerateMtaStsRecordOptions is not found in the empty JSON string", GenerateMtaStsRecordOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GenerateMtaStsRecordOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GenerateMtaStsRecordOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GenerateMtaStsRecordOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("host").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `host` to be a primitive type in the JSON string but got `%s`", jsonObj.get("host").toString()));
      }
      if (!jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
      // validate the required field `version`
      VersionEnum.validateJsonElement(jsonObj.get("version"));
      if (!jsonObj.get("mode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mode").toString()));
      }
      // validate the required field `mode`
      ModeEnum.validateJsonElement(jsonObj.get("mode"));
      // ensure the required json array is present
      if (jsonObj.get("mxRecords") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("mxRecords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `mxRecords` to be an array in the JSON string but got `%s`", jsonObj.get("mxRecords").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GenerateMtaStsRecordOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GenerateMtaStsRecordOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GenerateMtaStsRecordOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GenerateMtaStsRecordOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<GenerateMtaStsRecordOptions>() {
           @Override
           public void write(JsonWriter out, GenerateMtaStsRecordOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GenerateMtaStsRecordOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GenerateMtaStsRecordOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GenerateMtaStsRecordOptions
   * @throws IOException if the JSON string is invalid with respect to GenerateMtaStsRecordOptions
   */
  public static GenerateMtaStsRecordOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GenerateMtaStsRecordOptions.class);
  }

  /**
   * Convert an instance of GenerateMtaStsRecordOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

