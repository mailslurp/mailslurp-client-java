/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.EmailRecipients;
import com.mailslurp.models.Sender;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * A compact representation of a full email. Used in list endpoints to keep response sizes low. Body and attachments are not included. To get all fields of the email use the &#x60;getEmail&#x60; method with the email projection&#39;s ID. See &#x60;EmailDto&#x60; for documentation on projection properties.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-13T10:16:48.017348019Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EmailProjection {
  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private Sender sender;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private EmailRecipients recipients;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<String> attachments;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nonnull
  private UUID inboxId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  @javax.annotation.Nullable
  private List<String> cc;

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  @javax.annotation.Nullable
  private List<String> bcc;

  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nullable
  private String messageId;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  @javax.annotation.Nullable
  private UUID domainId;

  public static final String SERIALIZED_NAME_FAVOURITE = "favourite";
  @SerializedName(SERIALIZED_NAME_FAVOURITE)
  @javax.annotation.Nullable
  private Boolean favourite;

  public static final String SERIALIZED_NAME_PLUS_ADDRESS = "plusAddress";
  @SerializedName(SERIALIZED_NAME_PLUS_ADDRESS)
  @javax.annotation.Nullable
  private UUID plusAddress;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  @javax.annotation.Nullable
  private Long sizeBytes;

  public static final String SERIALIZED_NAME_IN_REPLY_TO = "inReplyTo";
  @SerializedName(SERIALIZED_NAME_IN_REPLY_TO)
  @javax.annotation.Nullable
  private String inReplyTo;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  @javax.annotation.Nonnull
  private Boolean read;

  public static final String SERIALIZED_NAME_BODY_EXCERPT = "bodyExcerpt";
  @SerializedName(SERIALIZED_NAME_BODY_EXCERPT)
  @javax.annotation.Nullable
  private String bodyExcerpt;

  public static final String SERIALIZED_NAME_TEXT_EXCERPT = "textExcerpt";
  @SerializedName(SERIALIZED_NAME_TEXT_EXCERPT)
  @javax.annotation.Nullable
  private String textExcerpt;

  public static final String SERIALIZED_NAME_BODY_PART_CONTENT_TYPES = "bodyPartContentTypes";
  @SerializedName(SERIALIZED_NAME_BODY_PART_CONTENT_TYPES)
  @javax.annotation.Nullable
  private List<String> bodyPartContentTypes;

  public static final String SERIALIZED_NAME_BODY_M_D5_HASH = "bodyMD5Hash";
  @SerializedName(SERIALIZED_NAME_BODY_M_D5_HASH)
  @javax.annotation.Nullable
  private String bodyMD5Hash;

  public static final String SERIALIZED_NAME_TEAM_ACCESS = "teamAccess";
  @SerializedName(SERIALIZED_NAME_TEAM_ACCESS)
  @javax.annotation.Nonnull
  private Boolean teamAccess;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_THREAD_ID = "threadId";
  @SerializedName(SERIALIZED_NAME_THREAD_ID)
  @javax.annotation.Nullable
  private UUID threadId;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public EmailProjection() {
  }

  public EmailProjection sender(@javax.annotation.Nullable Sender sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public Sender getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable Sender sender) {
    this.sender = sender;
  }


  public EmailProjection recipients(@javax.annotation.Nullable EmailRecipients recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public EmailRecipients getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable EmailRecipients recipients) {
    this.recipients = recipients;
  }


  public EmailProjection attachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public EmailProjection addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * Get attachments
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
  }


  public EmailProjection inboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Get inboxId
   * @return inboxId
   */
  @javax.annotation.Nonnull
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
  }


  public EmailProjection createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public EmailProjection to(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
    return this;
  }

  public EmailProjection addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * Get to
   * @return to
   */
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
  }


  public EmailProjection cc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
    return this;
  }

  public EmailProjection addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * Get cc
   * @return cc
   */
  @javax.annotation.Nullable
  public List<String> getCc() {
    return cc;
  }

  public void setCc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
  }


  public EmailProjection bcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public EmailProjection addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * Get bcc
   * @return bcc
   */
  @javax.annotation.Nullable
  public List<String> getBcc() {
    return bcc;
  }

  public void setBcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
  }


  public EmailProjection messageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Get messageId
   * @return messageId
   */
  @javax.annotation.Nullable
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nullable String messageId) {
    this.messageId = messageId;
  }


  public EmailProjection domainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Get domainId
   * @return domainId
   */
  @javax.annotation.Nullable
  public UUID getDomainId() {
    return domainId;
  }

  public void setDomainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
  }


  public EmailProjection favourite(@javax.annotation.Nullable Boolean favourite) {
    this.favourite = favourite;
    return this;
  }

  /**
   * Get favourite
   * @return favourite
   */
  @javax.annotation.Nullable
  public Boolean getFavourite() {
    return favourite;
  }

  public void setFavourite(@javax.annotation.Nullable Boolean favourite) {
    this.favourite = favourite;
  }


  public EmailProjection plusAddress(@javax.annotation.Nullable UUID plusAddress) {
    this.plusAddress = plusAddress;
    return this;
  }

  /**
   * Get plusAddress
   * @return plusAddress
   */
  @javax.annotation.Nullable
  public UUID getPlusAddress() {
    return plusAddress;
  }

  public void setPlusAddress(@javax.annotation.Nullable UUID plusAddress) {
    this.plusAddress = plusAddress;
  }


  public EmailProjection sizeBytes(@javax.annotation.Nullable Long sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Get sizeBytes
   * @return sizeBytes
   */
  @javax.annotation.Nullable
  public Long getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(@javax.annotation.Nullable Long sizeBytes) {
    this.sizeBytes = sizeBytes;
  }


  public EmailProjection inReplyTo(@javax.annotation.Nullable String inReplyTo) {
    this.inReplyTo = inReplyTo;
    return this;
  }

  /**
   * Get inReplyTo
   * @return inReplyTo
   */
  @javax.annotation.Nullable
  public String getInReplyTo() {
    return inReplyTo;
  }

  public void setInReplyTo(@javax.annotation.Nullable String inReplyTo) {
    this.inReplyTo = inReplyTo;
  }


  public EmailProjection read(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Get read
   * @return read
   */
  @javax.annotation.Nonnull
  public Boolean getRead() {
    return read;
  }

  public void setRead(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
  }


  public EmailProjection bodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
    return this;
  }

  /**
   * Get bodyExcerpt
   * @return bodyExcerpt
   */
  @javax.annotation.Nullable
  public String getBodyExcerpt() {
    return bodyExcerpt;
  }

  public void setBodyExcerpt(@javax.annotation.Nullable String bodyExcerpt) {
    this.bodyExcerpt = bodyExcerpt;
  }


  public EmailProjection textExcerpt(@javax.annotation.Nullable String textExcerpt) {
    this.textExcerpt = textExcerpt;
    return this;
  }

  /**
   * Get textExcerpt
   * @return textExcerpt
   */
  @javax.annotation.Nullable
  public String getTextExcerpt() {
    return textExcerpt;
  }

  public void setTextExcerpt(@javax.annotation.Nullable String textExcerpt) {
    this.textExcerpt = textExcerpt;
  }


  public EmailProjection bodyPartContentTypes(@javax.annotation.Nullable List<String> bodyPartContentTypes) {
    this.bodyPartContentTypes = bodyPartContentTypes;
    return this;
  }

  public EmailProjection addBodyPartContentTypesItem(String bodyPartContentTypesItem) {
    if (this.bodyPartContentTypes == null) {
      this.bodyPartContentTypes = new ArrayList<>();
    }
    this.bodyPartContentTypes.add(bodyPartContentTypesItem);
    return this;
  }

  /**
   * Get bodyPartContentTypes
   * @return bodyPartContentTypes
   */
  @javax.annotation.Nullable
  public List<String> getBodyPartContentTypes() {
    return bodyPartContentTypes;
  }

  public void setBodyPartContentTypes(@javax.annotation.Nullable List<String> bodyPartContentTypes) {
    this.bodyPartContentTypes = bodyPartContentTypes;
  }


  public EmailProjection bodyMD5Hash(@javax.annotation.Nullable String bodyMD5Hash) {
    this.bodyMD5Hash = bodyMD5Hash;
    return this;
  }

  /**
   * Get bodyMD5Hash
   * @return bodyMD5Hash
   */
  @javax.annotation.Nullable
  public String getBodyMD5Hash() {
    return bodyMD5Hash;
  }

  public void setBodyMD5Hash(@javax.annotation.Nullable String bodyMD5Hash) {
    this.bodyMD5Hash = bodyMD5Hash;
  }


  public EmailProjection teamAccess(@javax.annotation.Nonnull Boolean teamAccess) {
    this.teamAccess = teamAccess;
    return this;
  }

  /**
   * Get teamAccess
   * @return teamAccess
   */
  @javax.annotation.Nonnull
  public Boolean getTeamAccess() {
    return teamAccess;
  }

  public void setTeamAccess(@javax.annotation.Nonnull Boolean teamAccess) {
    this.teamAccess = teamAccess;
  }


  public EmailProjection subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public EmailProjection id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public EmailProjection threadId(@javax.annotation.Nullable UUID threadId) {
    this.threadId = threadId;
    return this;
  }

  /**
   * Get threadId
   * @return threadId
   */
  @javax.annotation.Nullable
  public UUID getThreadId() {
    return threadId;
  }

  public void setThreadId(@javax.annotation.Nullable UUID threadId) {
    this.threadId = threadId;
  }


  public EmailProjection from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * Get from
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailProjection emailProjection = (EmailProjection) o;
    return Objects.equals(this.sender, emailProjection.sender) &&
        Objects.equals(this.recipients, emailProjection.recipients) &&
        Objects.equals(this.attachments, emailProjection.attachments) &&
        Objects.equals(this.inboxId, emailProjection.inboxId) &&
        Objects.equals(this.createdAt, emailProjection.createdAt) &&
        Objects.equals(this.to, emailProjection.to) &&
        Objects.equals(this.cc, emailProjection.cc) &&
        Objects.equals(this.bcc, emailProjection.bcc) &&
        Objects.equals(this.messageId, emailProjection.messageId) &&
        Objects.equals(this.domainId, emailProjection.domainId) &&
        Objects.equals(this.favourite, emailProjection.favourite) &&
        Objects.equals(this.plusAddress, emailProjection.plusAddress) &&
        Objects.equals(this.sizeBytes, emailProjection.sizeBytes) &&
        Objects.equals(this.inReplyTo, emailProjection.inReplyTo) &&
        Objects.equals(this.read, emailProjection.read) &&
        Objects.equals(this.bodyExcerpt, emailProjection.bodyExcerpt) &&
        Objects.equals(this.textExcerpt, emailProjection.textExcerpt) &&
        Objects.equals(this.bodyPartContentTypes, emailProjection.bodyPartContentTypes) &&
        Objects.equals(this.bodyMD5Hash, emailProjection.bodyMD5Hash) &&
        Objects.equals(this.teamAccess, emailProjection.teamAccess) &&
        Objects.equals(this.subject, emailProjection.subject) &&
        Objects.equals(this.id, emailProjection.id) &&
        Objects.equals(this.threadId, emailProjection.threadId) &&
        Objects.equals(this.from, emailProjection.from);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(sender, recipients, attachments, inboxId, createdAt, to, cc, bcc, messageId, domainId, favourite, plusAddress, sizeBytes, inReplyTo, read, bodyExcerpt, textExcerpt, bodyPartContentTypes, bodyMD5Hash, teamAccess, subject, id, threadId, from);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailProjection {\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    favourite: ").append(toIndentedString(favourite)).append("\n");
    sb.append("    plusAddress: ").append(toIndentedString(plusAddress)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("    inReplyTo: ").append(toIndentedString(inReplyTo)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("    bodyExcerpt: ").append(toIndentedString(bodyExcerpt)).append("\n");
    sb.append("    textExcerpt: ").append(toIndentedString(textExcerpt)).append("\n");
    sb.append("    bodyPartContentTypes: ").append(toIndentedString(bodyPartContentTypes)).append("\n");
    sb.append("    bodyMD5Hash: ").append(toIndentedString(bodyMD5Hash)).append("\n");
    sb.append("    teamAccess: ").append(toIndentedString(teamAccess)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    threadId: ").append(toIndentedString(threadId)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("sender");
    openapiFields.add("recipients");
    openapiFields.add("attachments");
    openapiFields.add("inboxId");
    openapiFields.add("createdAt");
    openapiFields.add("to");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("messageId");
    openapiFields.add("domainId");
    openapiFields.add("favourite");
    openapiFields.add("plusAddress");
    openapiFields.add("sizeBytes");
    openapiFields.add("inReplyTo");
    openapiFields.add("read");
    openapiFields.add("bodyExcerpt");
    openapiFields.add("textExcerpt");
    openapiFields.add("bodyPartContentTypes");
    openapiFields.add("bodyMD5Hash");
    openapiFields.add("teamAccess");
    openapiFields.add("subject");
    openapiFields.add("id");
    openapiFields.add("threadId");
    openapiFields.add("from");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("read");
    openapiRequiredFields.add("teamAccess");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("from");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!EmailProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailProjection is not found in the empty JSON string", EmailProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailProjection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        Sender.validateJsonElement(jsonObj.get("sender"));
      }
      // validate the optional field `recipients`
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        EmailRecipients.validateJsonElement(jsonObj.get("recipients"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull() && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("to") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull() && !jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bcc") != null && !jsonObj.get("bcc").isJsonNull() && !jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      if ((jsonObj.get("messageId") != null && !jsonObj.get("messageId").isJsonNull()) && !jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
      if ((jsonObj.get("plusAddress") != null && !jsonObj.get("plusAddress").isJsonNull()) && !jsonObj.get("plusAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plusAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plusAddress").toString()));
      }
      if ((jsonObj.get("inReplyTo") != null && !jsonObj.get("inReplyTo").isJsonNull()) && !jsonObj.get("inReplyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inReplyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inReplyTo").toString()));
      }
      if ((jsonObj.get("bodyExcerpt") != null && !jsonObj.get("bodyExcerpt").isJsonNull()) && !jsonObj.get("bodyExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyExcerpt").toString()));
      }
      if ((jsonObj.get("textExcerpt") != null && !jsonObj.get("textExcerpt").isJsonNull()) && !jsonObj.get("textExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `textExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("textExcerpt").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bodyPartContentTypes") != null && !jsonObj.get("bodyPartContentTypes").isJsonNull() && !jsonObj.get("bodyPartContentTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyPartContentTypes` to be an array in the JSON string but got `%s`", jsonObj.get("bodyPartContentTypes").toString()));
      }
      if ((jsonObj.get("bodyMD5Hash") != null && !jsonObj.get("bodyMD5Hash").isJsonNull()) && !jsonObj.get("bodyMD5Hash").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bodyMD5Hash` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bodyMD5Hash").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("threadId") != null && !jsonObj.get("threadId").isJsonNull()) && !jsonObj.get("threadId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `threadId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("threadId").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailProjection>() {
           @Override
           public void write(JsonWriter out, EmailProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailProjection
   * @throws IOException if the JSON string is invalid with respect to EmailProjection
   */
  public static EmailProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailProjection.class);
  }

  /**
   * Convert an instance of EmailProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

