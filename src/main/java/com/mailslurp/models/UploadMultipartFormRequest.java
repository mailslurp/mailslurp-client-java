/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.File;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * UploadMultipartFormRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class UploadMultipartFormRequest {
  public static final String SERIALIZED_NAME_CONTENT_TYPE_HEADER = "contentTypeHeader";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE_HEADER)
  private String contentTypeHeader;

  public static final String SERIALIZED_NAME_FILE = "file";
  @SerializedName(SERIALIZED_NAME_FILE)
  private File _file;

  public UploadMultipartFormRequest() {
  }

  public UploadMultipartFormRequest contentTypeHeader(String contentTypeHeader) {
    
    this.contentTypeHeader = contentTypeHeader;
    return this;
  }

   /**
   * Optional content type header of attachment
   * @return contentTypeHeader
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Optional content type header of attachment")

  public String getContentTypeHeader() {
    return contentTypeHeader;
  }


  public void setContentTypeHeader(String contentTypeHeader) {
    this.contentTypeHeader = contentTypeHeader;
  }


  public UploadMultipartFormRequest _file(File _file) {
    
    this._file = _file;
    return this;
  }

   /**
   * Get _file
   * @return _file
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public File getFile() {
    return _file;
  }


  public void setFile(File _file) {
    this._file = _file;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadMultipartFormRequest uploadMultipartFormRequest = (UploadMultipartFormRequest) o;
    return Objects.equals(this.contentTypeHeader, uploadMultipartFormRequest.contentTypeHeader) &&
        Objects.equals(this._file, uploadMultipartFormRequest._file);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contentTypeHeader, _file);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadMultipartFormRequest {\n");
    sb.append("    contentTypeHeader: ").append(toIndentedString(contentTypeHeader)).append("\n");
    sb.append("    _file: ").append(toIndentedString(_file)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contentTypeHeader");
    openapiFields.add("file");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("file");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UploadMultipartFormRequest
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!UploadMultipartFormRequest.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UploadMultipartFormRequest is not found in the empty JSON string", UploadMultipartFormRequest.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UploadMultipartFormRequest.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UploadMultipartFormRequest` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UploadMultipartFormRequest.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("contentTypeHeader") != null && !jsonObj.get("contentTypeHeader").isJsonNull()) && !jsonObj.get("contentTypeHeader").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentTypeHeader` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentTypeHeader").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UploadMultipartFormRequest.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UploadMultipartFormRequest' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UploadMultipartFormRequest> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UploadMultipartFormRequest.class));

       return (TypeAdapter<T>) new TypeAdapter<UploadMultipartFormRequest>() {
           @Override
           public void write(JsonWriter out, UploadMultipartFormRequest value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UploadMultipartFormRequest read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UploadMultipartFormRequest given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UploadMultipartFormRequest
  * @throws IOException if the JSON string is invalid with respect to UploadMultipartFormRequest
  */
  public static UploadMultipartFormRequest fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UploadMultipartFormRequest.class);
  }

 /**
  * Convert an instance of UploadMultipartFormRequest to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

