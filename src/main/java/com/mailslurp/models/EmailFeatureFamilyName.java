/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * EmailFeatureFamilyName
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T21:13:29.989373638Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EmailFeatureFamilyName {
  /**
   * Gets or Sets slug
   */
  @JsonAdapter(SlugEnum.Adapter.class)
  public enum SlugEnum {
    AOL("aol"),
    
    APPLE_MAIL("apple-mail"),
    
    FASTMAIL("fastmail"),
    
    FREE_FR("free-fr"),
    
    GMAIL("gmail"),
    
    GMX("gmx"),
    
    HEY("hey"),
    
    IONOS_1AND1("ionos-1and1"),
    
    LAPOSTE("laposte"),
    
    MAIL_RU("mail-ru"),
    
    MICROSOFT("microsoft"),
    
    ORANGE("orange"),
    
    OUTLOOK("outlook"),
    
    PROTONMAIL("protonmail"),
    
    RAINLOOP("rainloop"),
    
    SAMSUNG_EMAIL("samsung-email"),
    
    SFR("sfr"),
    
    T_ONLINE_DE("t-online-de"),
    
    THUNDERBIRD("thunderbird"),
    
    WEB_DE("web-de"),
    
    YAHOO("yahoo");

    private String value;

    SlugEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SlugEnum fromValue(String value) {
      for (SlugEnum b : SlugEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SlugEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SlugEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SlugEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SlugEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SlugEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SLUG = "slug";
  @SerializedName(SERIALIZED_NAME_SLUG)
  @javax.annotation.Nonnull
  private SlugEnum slug;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public EmailFeatureFamilyName() {
  }

  public EmailFeatureFamilyName slug(@javax.annotation.Nonnull SlugEnum slug) {
    this.slug = slug;
    return this;
  }

  /**
   * Get slug
   * @return slug
   */
  @javax.annotation.Nonnull
  public SlugEnum getSlug() {
    return slug;
  }

  public void setSlug(@javax.annotation.Nonnull SlugEnum slug) {
    this.slug = slug;
  }


  public EmailFeatureFamilyName name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailFeatureFamilyName emailFeatureFamilyName = (EmailFeatureFamilyName) o;
    return Objects.equals(this.slug, emailFeatureFamilyName.slug) &&
        Objects.equals(this.name, emailFeatureFamilyName.name);
  }

  @Override
  public int hashCode() {
    return Objects.hash(slug, name);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailFeatureFamilyName {\n");
    sb.append("    slug: ").append(toIndentedString(slug)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("slug");
    openapiFields.add("name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("slug");
    openapiRequiredFields.add("name");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailFeatureFamilyName
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!EmailFeatureFamilyName.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailFeatureFamilyName is not found in the empty JSON string", EmailFeatureFamilyName.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailFeatureFamilyName.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailFeatureFamilyName` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailFeatureFamilyName.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("slug").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `slug` to be a primitive type in the JSON string but got `%s`", jsonObj.get("slug").toString()));
      }
      // validate the required field `slug`
      SlugEnum.validateJsonElement(jsonObj.get("slug"));
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailFeatureFamilyName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailFeatureFamilyName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailFeatureFamilyName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailFeatureFamilyName.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailFeatureFamilyName>() {
           @Override
           public void write(JsonWriter out, EmailFeatureFamilyName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailFeatureFamilyName read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailFeatureFamilyName given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailFeatureFamilyName
   * @throws IOException if the JSON string is invalid with respect to EmailFeatureFamilyName
   */
  public static EmailFeatureFamilyName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailFeatureFamilyName.class);
  }

  /**
   * Convert an instance of EmailFeatureFamilyName to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

