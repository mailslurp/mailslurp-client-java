/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * IMAP fetch content in raw format
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T21:25:04.210100741Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ImapServerFetchItem {
  public static final String SERIALIZED_NAME_CONTENT = "content";
  @SerializedName(SERIALIZED_NAME_CONTENT)
  @javax.annotation.Nonnull
  private String content;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_UID = "uid";
  @SerializedName(SERIALIZED_NAME_UID)
  @javax.annotation.Nonnull
  private Long uid;

  public static final String SERIALIZED_NAME_SEQ_NUM = "seqNum";
  @SerializedName(SERIALIZED_NAME_SEQ_NUM)
  @javax.annotation.Nonnull
  private Long seqNum;

  public static final String SERIALIZED_NAME_READ = "read";
  @SerializedName(SERIALIZED_NAME_READ)
  @javax.annotation.Nonnull
  private Boolean read;

  public ImapServerFetchItem() {
  }

  public ImapServerFetchItem content(@javax.annotation.Nonnull String content) {
    this.content = content;
    return this;
  }

  /**
   * Content of the email
   * @return content
   */
  @javax.annotation.Nonnull
  public String getContent() {
    return content;
  }

  public void setContent(@javax.annotation.Nonnull String content) {
    this.content = content;
  }


  public ImapServerFetchItem id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the email
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public ImapServerFetchItem uid(@javax.annotation.Nonnull Long uid) {
    this.uid = uid;
    return this;
  }

  /**
   * UID of the email
   * @return uid
   */
  @javax.annotation.Nonnull
  public Long getUid() {
    return uid;
  }

  public void setUid(@javax.annotation.Nonnull Long uid) {
    this.uid = uid;
  }


  public ImapServerFetchItem seqNum(@javax.annotation.Nonnull Long seqNum) {
    this.seqNum = seqNum;
    return this;
  }

  /**
   * Sequence number of the email
   * @return seqNum
   */
  @javax.annotation.Nonnull
  public Long getSeqNum() {
    return seqNum;
  }

  public void setSeqNum(@javax.annotation.Nonnull Long seqNum) {
    this.seqNum = seqNum;
  }


  public ImapServerFetchItem read(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
    return this;
  }

  /**
   * Read status of the email
   * @return read
   */
  @javax.annotation.Nonnull
  public Boolean getRead() {
    return read;
  }

  public void setRead(@javax.annotation.Nonnull Boolean read) {
    this.read = read;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapServerFetchItem imapServerFetchItem = (ImapServerFetchItem) o;
    return Objects.equals(this.content, imapServerFetchItem.content) &&
        Objects.equals(this.id, imapServerFetchItem.id) &&
        Objects.equals(this.uid, imapServerFetchItem.uid) &&
        Objects.equals(this.seqNum, imapServerFetchItem.seqNum) &&
        Objects.equals(this.read, imapServerFetchItem.read);
  }

  @Override
  public int hashCode() {
    return Objects.hash(content, id, uid, seqNum, read);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapServerFetchItem {\n");
    sb.append("    content: ").append(toIndentedString(content)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    uid: ").append(toIndentedString(uid)).append("\n");
    sb.append("    seqNum: ").append(toIndentedString(seqNum)).append("\n");
    sb.append("    read: ").append(toIndentedString(read)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("content");
    openapiFields.add("id");
    openapiFields.add("uid");
    openapiFields.add("seqNum");
    openapiFields.add("read");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("content");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("uid");
    openapiRequiredFields.add("seqNum");
    openapiRequiredFields.add("read");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImapServerFetchItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ImapServerFetchItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapServerFetchItem is not found in the empty JSON string", ImapServerFetchItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImapServerFetchItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapServerFetchItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImapServerFetchItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("content").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `content` to be a primitive type in the JSON string but got `%s`", jsonObj.get("content").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapServerFetchItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapServerFetchItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapServerFetchItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapServerFetchItem.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapServerFetchItem>() {
           @Override
           public void write(JsonWriter out, ImapServerFetchItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapServerFetchItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImapServerFetchItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImapServerFetchItem
   * @throws IOException if the JSON string is invalid with respect to ImapServerFetchItem
   */
  public static ImapServerFetchItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapServerFetchItem.class);
  }

  /**
   * Convert an instance of ImapServerFetchItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

