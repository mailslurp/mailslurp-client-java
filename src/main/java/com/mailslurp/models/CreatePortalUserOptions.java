/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.CreateInboxDto;
import java.io.IOException;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * CreatePortalUserOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-26T01:24:11.050965128Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreatePortalUserOptions {
  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  @javax.annotation.Nullable
  private String password;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_SKIP_INBOX_CREATION = "skipInboxCreation";
  @SerializedName(SERIALIZED_NAME_SKIP_INBOX_CREATION)
  @javax.annotation.Nullable
  private Boolean skipInboxCreation;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_CREATE_INBOX_OPTIONS = "createInboxOptions";
  @SerializedName(SERIALIZED_NAME_CREATE_INBOX_OPTIONS)
  @javax.annotation.Nullable
  private CreateInboxDto createInboxOptions;

  public CreatePortalUserOptions() {
  }

  public CreatePortalUserOptions password(@javax.annotation.Nullable String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(@javax.annotation.Nullable String password) {
    this.password = password;
  }


  public CreatePortalUserOptions name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public CreatePortalUserOptions username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Get username
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public CreatePortalUserOptions skipInboxCreation(@javax.annotation.Nullable Boolean skipInboxCreation) {
    this.skipInboxCreation = skipInboxCreation;
    return this;
  }

  /**
   * Get skipInboxCreation
   * @return skipInboxCreation
   */
  @javax.annotation.Nullable
  public Boolean getSkipInboxCreation() {
    return skipInboxCreation;
  }

  public void setSkipInboxCreation(@javax.annotation.Nullable Boolean skipInboxCreation) {
    this.skipInboxCreation = skipInboxCreation;
  }


  public CreatePortalUserOptions inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Get inboxId
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public CreatePortalUserOptions createInboxOptions(@javax.annotation.Nullable CreateInboxDto createInboxOptions) {
    this.createInboxOptions = createInboxOptions;
    return this;
  }

  /**
   * Get createInboxOptions
   * @return createInboxOptions
   */
  @javax.annotation.Nullable
  public CreateInboxDto getCreateInboxOptions() {
    return createInboxOptions;
  }

  public void setCreateInboxOptions(@javax.annotation.Nullable CreateInboxDto createInboxOptions) {
    this.createInboxOptions = createInboxOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreatePortalUserOptions createPortalUserOptions = (CreatePortalUserOptions) o;
    return Objects.equals(this.password, createPortalUserOptions.password) &&
        Objects.equals(this.name, createPortalUserOptions.name) &&
        Objects.equals(this.username, createPortalUserOptions.username) &&
        Objects.equals(this.skipInboxCreation, createPortalUserOptions.skipInboxCreation) &&
        Objects.equals(this.inboxId, createPortalUserOptions.inboxId) &&
        Objects.equals(this.createInboxOptions, createPortalUserOptions.createInboxOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(password, name, username, skipInboxCreation, inboxId, createInboxOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreatePortalUserOptions {\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    skipInboxCreation: ").append(toIndentedString(skipInboxCreation)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    createInboxOptions: ").append(toIndentedString(createInboxOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("password");
    openapiFields.add("name");
    openapiFields.add("username");
    openapiFields.add("skipInboxCreation");
    openapiFields.add("inboxId");
    openapiFields.add("createInboxOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreatePortalUserOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreatePortalUserOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreatePortalUserOptions is not found in the empty JSON string", CreatePortalUserOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreatePortalUserOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreatePortalUserOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      // validate the optional field `createInboxOptions`
      if (jsonObj.get("createInboxOptions") != null && !jsonObj.get("createInboxOptions").isJsonNull()) {
        CreateInboxDto.validateJsonElement(jsonObj.get("createInboxOptions"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreatePortalUserOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreatePortalUserOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreatePortalUserOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreatePortalUserOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreatePortalUserOptions>() {
           @Override
           public void write(JsonWriter out, CreatePortalUserOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreatePortalUserOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreatePortalUserOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreatePortalUserOptions
   * @throws IOException if the JSON string is invalid with respect to CreatePortalUserOptions
   */
  public static CreatePortalUserOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreatePortalUserOptions.class);
  }

  /**
   * Convert an instance of CreatePortalUserOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

