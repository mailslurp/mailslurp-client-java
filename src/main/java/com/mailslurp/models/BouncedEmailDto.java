/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Bounced email
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class BouncedEmailDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_NOTIFICATION_TYPE = "notificationType";
  @SerializedName(SERIALIZED_NAME_NOTIFICATION_TYPE)
  @javax.annotation.Nonnull
  private String notificationType;

  public static final String SERIALIZED_NAME_SENT_TO_RECIPIENTS = "sentToRecipients";
  @SerializedName(SERIALIZED_NAME_SENT_TO_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> sentToRecipients;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nonnull
  private String sender;

  public static final String SERIALIZED_NAME_BOUNCE_MTA = "bounceMta";
  @SerializedName(SERIALIZED_NAME_BOUNCE_MTA)
  @javax.annotation.Nullable
  private String bounceMta;

  public static final String SERIALIZED_NAME_BOUNCE_TYPE = "bounceType";
  @SerializedName(SERIALIZED_NAME_BOUNCE_TYPE)
  @javax.annotation.Nullable
  private String bounceType;

  public static final String SERIALIZED_NAME_BOUNCE_RECIPIENTS = "bounceRecipients";
  @SerializedName(SERIALIZED_NAME_BOUNCE_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> bounceRecipients;

  public static final String SERIALIZED_NAME_BOUNCE_SUB_TYPE = "bounceSubType";
  @SerializedName(SERIALIZED_NAME_BOUNCE_SUB_TYPE)
  @javax.annotation.Nullable
  private String bounceSubType;

  public static final String SERIALIZED_NAME_SENT_EMAIL_ID = "sentEmailId";
  @SerializedName(SERIALIZED_NAME_SENT_EMAIL_ID)
  @javax.annotation.Nullable
  private UUID sentEmailId;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public BouncedEmailDto() {
  }

  public BouncedEmailDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public BouncedEmailDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public BouncedEmailDto notificationType(@javax.annotation.Nonnull String notificationType) {
    this.notificationType = notificationType;
    return this;
  }

  /**
   * Get notificationType
   * @return notificationType
   */
  @javax.annotation.Nonnull
  public String getNotificationType() {
    return notificationType;
  }

  public void setNotificationType(@javax.annotation.Nonnull String notificationType) {
    this.notificationType = notificationType;
  }


  public BouncedEmailDto sentToRecipients(@javax.annotation.Nullable List<String> sentToRecipients) {
    this.sentToRecipients = sentToRecipients;
    return this;
  }

  public BouncedEmailDto addSentToRecipientsItem(String sentToRecipientsItem) {
    if (this.sentToRecipients == null) {
      this.sentToRecipients = new ArrayList<>();
    }
    this.sentToRecipients.add(sentToRecipientsItem);
    return this;
  }

  /**
   * Get sentToRecipients
   * @return sentToRecipients
   */
  @javax.annotation.Nullable
  public List<String> getSentToRecipients() {
    return sentToRecipients;
  }

  public void setSentToRecipients(@javax.annotation.Nullable List<String> sentToRecipients) {
    this.sentToRecipients = sentToRecipients;
  }


  public BouncedEmailDto sender(@javax.annotation.Nonnull String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nonnull
  public String getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nonnull String sender) {
    this.sender = sender;
  }


  public BouncedEmailDto bounceMta(@javax.annotation.Nullable String bounceMta) {
    this.bounceMta = bounceMta;
    return this;
  }

  /**
   * Get bounceMta
   * @return bounceMta
   */
  @javax.annotation.Nullable
  public String getBounceMta() {
    return bounceMta;
  }

  public void setBounceMta(@javax.annotation.Nullable String bounceMta) {
    this.bounceMta = bounceMta;
  }


  public BouncedEmailDto bounceType(@javax.annotation.Nullable String bounceType) {
    this.bounceType = bounceType;
    return this;
  }

  /**
   * Get bounceType
   * @return bounceType
   */
  @javax.annotation.Nullable
  public String getBounceType() {
    return bounceType;
  }

  public void setBounceType(@javax.annotation.Nullable String bounceType) {
    this.bounceType = bounceType;
  }


  public BouncedEmailDto bounceRecipients(@javax.annotation.Nullable List<String> bounceRecipients) {
    this.bounceRecipients = bounceRecipients;
    return this;
  }

  public BouncedEmailDto addBounceRecipientsItem(String bounceRecipientsItem) {
    if (this.bounceRecipients == null) {
      this.bounceRecipients = new ArrayList<>();
    }
    this.bounceRecipients.add(bounceRecipientsItem);
    return this;
  }

  /**
   * Get bounceRecipients
   * @return bounceRecipients
   */
  @javax.annotation.Nullable
  public List<String> getBounceRecipients() {
    return bounceRecipients;
  }

  public void setBounceRecipients(@javax.annotation.Nullable List<String> bounceRecipients) {
    this.bounceRecipients = bounceRecipients;
  }


  public BouncedEmailDto bounceSubType(@javax.annotation.Nullable String bounceSubType) {
    this.bounceSubType = bounceSubType;
    return this;
  }

  /**
   * Get bounceSubType
   * @return bounceSubType
   */
  @javax.annotation.Nullable
  public String getBounceSubType() {
    return bounceSubType;
  }

  public void setBounceSubType(@javax.annotation.Nullable String bounceSubType) {
    this.bounceSubType = bounceSubType;
  }


  public BouncedEmailDto sentEmailId(@javax.annotation.Nullable UUID sentEmailId) {
    this.sentEmailId = sentEmailId;
    return this;
  }

  /**
   * Get sentEmailId
   * @return sentEmailId
   */
  @javax.annotation.Nullable
  public UUID getSentEmailId() {
    return sentEmailId;
  }

  public void setSentEmailId(@javax.annotation.Nullable UUID sentEmailId) {
    this.sentEmailId = sentEmailId;
  }


  public BouncedEmailDto subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public BouncedEmailDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BouncedEmailDto bouncedEmailDto = (BouncedEmailDto) o;
    return Objects.equals(this.id, bouncedEmailDto.id) &&
        Objects.equals(this.userId, bouncedEmailDto.userId) &&
        Objects.equals(this.notificationType, bouncedEmailDto.notificationType) &&
        Objects.equals(this.sentToRecipients, bouncedEmailDto.sentToRecipients) &&
        Objects.equals(this.sender, bouncedEmailDto.sender) &&
        Objects.equals(this.bounceMta, bouncedEmailDto.bounceMta) &&
        Objects.equals(this.bounceType, bouncedEmailDto.bounceType) &&
        Objects.equals(this.bounceRecipients, bouncedEmailDto.bounceRecipients) &&
        Objects.equals(this.bounceSubType, bouncedEmailDto.bounceSubType) &&
        Objects.equals(this.sentEmailId, bouncedEmailDto.sentEmailId) &&
        Objects.equals(this.subject, bouncedEmailDto.subject) &&
        Objects.equals(this.createdAt, bouncedEmailDto.createdAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, notificationType, sentToRecipients, sender, bounceMta, bounceType, bounceRecipients, bounceSubType, sentEmailId, subject, createdAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BouncedEmailDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    notificationType: ").append(toIndentedString(notificationType)).append("\n");
    sb.append("    sentToRecipients: ").append(toIndentedString(sentToRecipients)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    bounceMta: ").append(toIndentedString(bounceMta)).append("\n");
    sb.append("    bounceType: ").append(toIndentedString(bounceType)).append("\n");
    sb.append("    bounceRecipients: ").append(toIndentedString(bounceRecipients)).append("\n");
    sb.append("    bounceSubType: ").append(toIndentedString(bounceSubType)).append("\n");
    sb.append("    sentEmailId: ").append(toIndentedString(sentEmailId)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("notificationType");
    openapiFields.add("sentToRecipients");
    openapiFields.add("sender");
    openapiFields.add("bounceMta");
    openapiFields.add("bounceType");
    openapiFields.add("bounceRecipients");
    openapiFields.add("bounceSubType");
    openapiFields.add("sentEmailId");
    openapiFields.add("subject");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("notificationType");
    openapiRequiredFields.add("sender");
    openapiRequiredFields.add("createdAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to BouncedEmailDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!BouncedEmailDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in BouncedEmailDto is not found in the empty JSON string", BouncedEmailDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!BouncedEmailDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `BouncedEmailDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : BouncedEmailDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("notificationType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `notificationType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("notificationType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sentToRecipients") != null && !jsonObj.get("sentToRecipients").isJsonNull() && !jsonObj.get("sentToRecipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentToRecipients` to be an array in the JSON string but got `%s`", jsonObj.get("sentToRecipients").toString()));
      }
      if (!jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      if ((jsonObj.get("bounceMta") != null && !jsonObj.get("bounceMta").isJsonNull()) && !jsonObj.get("bounceMta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounceMta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounceMta").toString()));
      }
      if ((jsonObj.get("bounceType") != null && !jsonObj.get("bounceType").isJsonNull()) && !jsonObj.get("bounceType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounceType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounceType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bounceRecipients") != null && !jsonObj.get("bounceRecipients").isJsonNull() && !jsonObj.get("bounceRecipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounceRecipients` to be an array in the JSON string but got `%s`", jsonObj.get("bounceRecipients").toString()));
      }
      if ((jsonObj.get("bounceSubType") != null && !jsonObj.get("bounceSubType").isJsonNull()) && !jsonObj.get("bounceSubType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounceSubType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounceSubType").toString()));
      }
      if ((jsonObj.get("sentEmailId") != null && !jsonObj.get("sentEmailId").isJsonNull()) && !jsonObj.get("sentEmailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentEmailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentEmailId").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!BouncedEmailDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'BouncedEmailDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<BouncedEmailDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(BouncedEmailDto.class));

       return (TypeAdapter<T>) new TypeAdapter<BouncedEmailDto>() {
           @Override
           public void write(JsonWriter out, BouncedEmailDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public BouncedEmailDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of BouncedEmailDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of BouncedEmailDto
   * @throws IOException if the JSON string is invalid with respect to BouncedEmailDto
   */
  public static BouncedEmailDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, BouncedEmailDto.class);
  }

  /**
   * Convert an instance of BouncedEmailDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

