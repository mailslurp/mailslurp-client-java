/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ImapServerStatusOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ImapServerStatusOptions {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  /**
   * Gets or Sets statusItems
   */
  @JsonAdapter(StatusItemsEnum.Adapter.class)
  public enum StatusItemsEnum {
    MESSAGES("MESSAGES"),
    
    RECENT("RECENT"),
    
    UIDNEXT("UIDNEXT"),
    
    UIDVALIDITY("UIDVALIDITY"),
    
    UNSEEN("UNSEEN"),
    
    APPENDLIMIT("APPENDLIMIT");

    private String value;

    StatusItemsEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static StatusItemsEnum fromValue(String value) {
      for (StatusItemsEnum b : StatusItemsEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<StatusItemsEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final StatusItemsEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public StatusItemsEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return StatusItemsEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      StatusItemsEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_STATUS_ITEMS = "statusItems";
  @SerializedName(SERIALIZED_NAME_STATUS_ITEMS)
  @javax.annotation.Nullable
  private List<StatusItemsEnum> statusItems;

  public ImapServerStatusOptions() {
  }

  public ImapServerStatusOptions name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public ImapServerStatusOptions statusItems(@javax.annotation.Nullable List<StatusItemsEnum> statusItems) {
    this.statusItems = statusItems;
    return this;
  }

  public ImapServerStatusOptions addStatusItemsItem(StatusItemsEnum statusItemsItem) {
    if (this.statusItems == null) {
      this.statusItems = new ArrayList<>();
    }
    this.statusItems.add(statusItemsItem);
    return this;
  }

  /**
   * Get statusItems
   * @return statusItems
   */
  @javax.annotation.Nullable
  public List<StatusItemsEnum> getStatusItems() {
    return statusItems;
  }

  public void setStatusItems(@javax.annotation.Nullable List<StatusItemsEnum> statusItems) {
    this.statusItems = statusItems;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapServerStatusOptions imapServerStatusOptions = (ImapServerStatusOptions) o;
    return Objects.equals(this.name, imapServerStatusOptions.name) &&
        Objects.equals(this.statusItems, imapServerStatusOptions.statusItems);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, statusItems);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapServerStatusOptions {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    statusItems: ").append(toIndentedString(statusItems)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("statusItems");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImapServerStatusOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ImapServerStatusOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapServerStatusOptions is not found in the empty JSON string", ImapServerStatusOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImapServerStatusOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapServerStatusOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("statusItems") != null && !jsonObj.get("statusItems").isJsonNull() && !jsonObj.get("statusItems").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `statusItems` to be an array in the JSON string but got `%s`", jsonObj.get("statusItems").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapServerStatusOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapServerStatusOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapServerStatusOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapServerStatusOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapServerStatusOptions>() {
           @Override
           public void write(JsonWriter out, ImapServerStatusOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapServerStatusOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImapServerStatusOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImapServerStatusOptions
   * @throws IOException if the JSON string is invalid with respect to ImapServerStatusOptions
   */
  public static ImapServerStatusOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapServerStatusOptions.class);
  }

  /**
   * Convert an instance of ImapServerStatusOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

