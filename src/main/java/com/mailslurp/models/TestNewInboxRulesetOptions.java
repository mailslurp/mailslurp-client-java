/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.CreateInboxRulesetOptions;
import com.mailslurp.models.InboxRulesetTestOptions;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Test inbox ruleset options
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T10:02:43.973907603Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class TestNewInboxRulesetOptions {
  public static final String SERIALIZED_NAME_INBOX_RULESET_TEST_OPTIONS = "inboxRulesetTestOptions";
  @SerializedName(SERIALIZED_NAME_INBOX_RULESET_TEST_OPTIONS)
  @javax.annotation.Nonnull
  private InboxRulesetTestOptions inboxRulesetTestOptions;

  public static final String SERIALIZED_NAME_CREATE_INBOX_RULESET_OPTIONS = "createInboxRulesetOptions";
  @SerializedName(SERIALIZED_NAME_CREATE_INBOX_RULESET_OPTIONS)
  @javax.annotation.Nonnull
  private CreateInboxRulesetOptions createInboxRulesetOptions;

  public TestNewInboxRulesetOptions() {
  }

  public TestNewInboxRulesetOptions inboxRulesetTestOptions(@javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) {
    this.inboxRulesetTestOptions = inboxRulesetTestOptions;
    return this;
  }

  /**
   * Get inboxRulesetTestOptions
   * @return inboxRulesetTestOptions
   */
  @javax.annotation.Nonnull
  public InboxRulesetTestOptions getInboxRulesetTestOptions() {
    return inboxRulesetTestOptions;
  }

  public void setInboxRulesetTestOptions(@javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) {
    this.inboxRulesetTestOptions = inboxRulesetTestOptions;
  }


  public TestNewInboxRulesetOptions createInboxRulesetOptions(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) {
    this.createInboxRulesetOptions = createInboxRulesetOptions;
    return this;
  }

  /**
   * Get createInboxRulesetOptions
   * @return createInboxRulesetOptions
   */
  @javax.annotation.Nonnull
  public CreateInboxRulesetOptions getCreateInboxRulesetOptions() {
    return createInboxRulesetOptions;
  }

  public void setCreateInboxRulesetOptions(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) {
    this.createInboxRulesetOptions = createInboxRulesetOptions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TestNewInboxRulesetOptions testNewInboxRulesetOptions = (TestNewInboxRulesetOptions) o;
    return Objects.equals(this.inboxRulesetTestOptions, testNewInboxRulesetOptions.inboxRulesetTestOptions) &&
        Objects.equals(this.createInboxRulesetOptions, testNewInboxRulesetOptions.createInboxRulesetOptions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxRulesetTestOptions, createInboxRulesetOptions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TestNewInboxRulesetOptions {\n");
    sb.append("    inboxRulesetTestOptions: ").append(toIndentedString(inboxRulesetTestOptions)).append("\n");
    sb.append("    createInboxRulesetOptions: ").append(toIndentedString(createInboxRulesetOptions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboxRulesetTestOptions");
    openapiFields.add("createInboxRulesetOptions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inboxRulesetTestOptions");
    openapiRequiredFields.add("createInboxRulesetOptions");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TestNewInboxRulesetOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!TestNewInboxRulesetOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TestNewInboxRulesetOptions is not found in the empty JSON string", TestNewInboxRulesetOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TestNewInboxRulesetOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TestNewInboxRulesetOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TestNewInboxRulesetOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the required field `inboxRulesetTestOptions`
      InboxRulesetTestOptions.validateJsonElement(jsonObj.get("inboxRulesetTestOptions"));
      // validate the required field `createInboxRulesetOptions`
      CreateInboxRulesetOptions.validateJsonElement(jsonObj.get("createInboxRulesetOptions"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TestNewInboxRulesetOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TestNewInboxRulesetOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TestNewInboxRulesetOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TestNewInboxRulesetOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<TestNewInboxRulesetOptions>() {
           @Override
           public void write(JsonWriter out, TestNewInboxRulesetOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TestNewInboxRulesetOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TestNewInboxRulesetOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TestNewInboxRulesetOptions
   * @throws IOException if the JSON string is invalid with respect to TestNewInboxRulesetOptions
   */
  public static TestNewInboxRulesetOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TestNewInboxRulesetOptions.class);
  }

  /**
   * Convert an instance of TestNewInboxRulesetOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

