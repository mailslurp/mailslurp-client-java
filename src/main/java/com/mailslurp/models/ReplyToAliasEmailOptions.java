/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for replying to an alias email using the alias inbox
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ReplyToAliasEmailOptions {
  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nonnull
  private String body;

  public static final String SERIALIZED_NAME_IS_H_T_M_L = "isHTML";
  @SerializedName(SERIALIZED_NAME_IS_H_T_M_L)
  @javax.annotation.Nonnull
  private Boolean isHTML;

  public static final String SERIALIZED_NAME_CHARSET = "charset";
  @SerializedName(SERIALIZED_NAME_CHARSET)
  @javax.annotation.Nullable
  private String charset;

  public static final String SERIALIZED_NAME_ATTACHMENTS = "attachments";
  @SerializedName(SERIALIZED_NAME_ATTACHMENTS)
  @javax.annotation.Nullable
  private List<String> attachments;

  public static final String SERIALIZED_NAME_TEMPLATE_VARIABLES = "templateVariables";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VARIABLES)
  @javax.annotation.Nullable
  private Map<String, Object> templateVariables;

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  @javax.annotation.Nullable
  private UUID template;

  /**
   * How an email should be sent based on its recipients
   */
  @JsonAdapter(SendStrategyEnum.Adapter.class)
  public enum SendStrategyEnum {
    SINGLE_MESSAGE("SINGLE_MESSAGE");

    private String value;

    SendStrategyEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SendStrategyEnum fromValue(String value) {
      for (SendStrategyEnum b : SendStrategyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SendStrategyEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SendStrategyEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SendStrategyEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SendStrategyEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SendStrategyEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SEND_STRATEGY = "sendStrategy";
  @SerializedName(SERIALIZED_NAME_SEND_STRATEGY)
  @javax.annotation.Nullable
  private SendStrategyEnum sendStrategy;

  public static final String SERIALIZED_NAME_CUSTOM_HEADERS = "customHeaders";
  @SerializedName(SERIALIZED_NAME_CUSTOM_HEADERS)
  @javax.annotation.Nullable
  private Map<String, String> customHeaders;

  public static final String SERIALIZED_NAME_USE_INBOX_NAME = "useInboxName";
  @SerializedName(SERIALIZED_NAME_USE_INBOX_NAME)
  @javax.annotation.Nullable
  private Boolean useInboxName;

  public static final String SERIALIZED_NAME_HTML = "html";
  @SerializedName(SERIALIZED_NAME_HTML)
  @javax.annotation.Nullable
  private Boolean html;

  public ReplyToAliasEmailOptions() {
  }

  public ReplyToAliasEmailOptions body(@javax.annotation.Nonnull String body) {
    this.body = body;
    return this;
  }

  /**
   * Body of the reply email you want to send
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nonnull String body) {
    this.body = body;
  }


  public ReplyToAliasEmailOptions isHTML(@javax.annotation.Nonnull Boolean isHTML) {
    this.isHTML = isHTML;
    return this;
  }

  /**
   * Is the reply HTML
   * @return isHTML
   */
  @javax.annotation.Nonnull
  public Boolean getIsHTML() {
    return isHTML;
  }

  public void setIsHTML(@javax.annotation.Nonnull Boolean isHTML) {
    this.isHTML = isHTML;
  }


  public ReplyToAliasEmailOptions charset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
    return this;
  }

  /**
   * The charset that your message should be sent with. Optional. Default is UTF-8
   * @return charset
   */
  @javax.annotation.Nullable
  public String getCharset() {
    return charset;
  }

  public void setCharset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
  }


  public ReplyToAliasEmailOptions attachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
    return this;
  }

  public ReplyToAliasEmailOptions addAttachmentsItem(String attachmentsItem) {
    if (this.attachments == null) {
      this.attachments = new ArrayList<>();
    }
    this.attachments.add(attachmentsItem);
    return this;
  }

  /**
   * List of uploaded attachments to send with the reply. Optional.
   * @return attachments
   */
  @javax.annotation.Nullable
  public List<String> getAttachments() {
    return attachments;
  }

  public void setAttachments(@javax.annotation.Nullable List<String> attachments) {
    this.attachments = attachments;
  }


  public ReplyToAliasEmailOptions templateVariables(@javax.annotation.Nullable Map<String, Object> templateVariables) {
    this.templateVariables = templateVariables;
    return this;
  }

  public ReplyToAliasEmailOptions putTemplateVariablesItem(String key, Object templateVariablesItem) {
    if (this.templateVariables == null) {
      this.templateVariables = new HashMap<>();
    }
    this.templateVariables.put(key, templateVariablesItem);
    return this;
  }

  /**
   * Template variables if using a template
   * @return templateVariables
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTemplateVariables() {
    return templateVariables;
  }

  public void setTemplateVariables(@javax.annotation.Nullable Map<String, Object> templateVariables) {
    this.templateVariables = templateVariables;
  }


  public ReplyToAliasEmailOptions template(@javax.annotation.Nullable UUID template) {
    this.template = template;
    return this;
  }

  /**
   * Template ID to use instead of body. Will use template variable map to fill defined variable slots.
   * @return template
   */
  @javax.annotation.Nullable
  public UUID getTemplate() {
    return template;
  }

  public void setTemplate(@javax.annotation.Nullable UUID template) {
    this.template = template;
  }


  public ReplyToAliasEmailOptions sendStrategy(@javax.annotation.Nullable SendStrategyEnum sendStrategy) {
    this.sendStrategy = sendStrategy;
    return this;
  }

  /**
   * How an email should be sent based on its recipients
   * @return sendStrategy
   */
  @javax.annotation.Nullable
  public SendStrategyEnum getSendStrategy() {
    return sendStrategy;
  }

  public void setSendStrategy(@javax.annotation.Nullable SendStrategyEnum sendStrategy) {
    this.sendStrategy = sendStrategy;
  }


  public ReplyToAliasEmailOptions customHeaders(@javax.annotation.Nullable Map<String, String> customHeaders) {
    this.customHeaders = customHeaders;
    return this;
  }

  public ReplyToAliasEmailOptions putCustomHeadersItem(String key, String customHeadersItem) {
    if (this.customHeaders == null) {
      this.customHeaders = new HashMap<>();
    }
    this.customHeaders.put(key, customHeadersItem);
    return this;
  }

  /**
   * Optional custom headers
   * @return customHeaders
   */
  @javax.annotation.Nullable
  public Map<String, String> getCustomHeaders() {
    return customHeaders;
  }

  public void setCustomHeaders(@javax.annotation.Nullable Map<String, String> customHeaders) {
    this.customHeaders = customHeaders;
  }


  public ReplyToAliasEmailOptions useInboxName(@javax.annotation.Nullable Boolean useInboxName) {
    this.useInboxName = useInboxName;
    return this;
  }

  /**
   * Optionally use inbox name as display name for sender email address
   * @return useInboxName
   */
  @javax.annotation.Nullable
  public Boolean getUseInboxName() {
    return useInboxName;
  }

  public void setUseInboxName(@javax.annotation.Nullable Boolean useInboxName) {
    this.useInboxName = useInboxName;
  }


  public ReplyToAliasEmailOptions html(@javax.annotation.Nullable Boolean html) {
    this.html = html;
    return this;
  }

  /**
   * Get html
   * @return html
   */
  @javax.annotation.Nullable
  public Boolean getHtml() {
    return html;
  }

  public void setHtml(@javax.annotation.Nullable Boolean html) {
    this.html = html;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ReplyToAliasEmailOptions replyToAliasEmailOptions = (ReplyToAliasEmailOptions) o;
    return Objects.equals(this.body, replyToAliasEmailOptions.body) &&
        Objects.equals(this.isHTML, replyToAliasEmailOptions.isHTML) &&
        Objects.equals(this.charset, replyToAliasEmailOptions.charset) &&
        Objects.equals(this.attachments, replyToAliasEmailOptions.attachments) &&
        Objects.equals(this.templateVariables, replyToAliasEmailOptions.templateVariables) &&
        Objects.equals(this.template, replyToAliasEmailOptions.template) &&
        Objects.equals(this.sendStrategy, replyToAliasEmailOptions.sendStrategy) &&
        Objects.equals(this.customHeaders, replyToAliasEmailOptions.customHeaders) &&
        Objects.equals(this.useInboxName, replyToAliasEmailOptions.useInboxName) &&
        Objects.equals(this.html, replyToAliasEmailOptions.html);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(body, isHTML, charset, attachments, templateVariables, template, sendStrategy, customHeaders, useInboxName, html);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ReplyToAliasEmailOptions {\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    isHTML: ").append(toIndentedString(isHTML)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    attachments: ").append(toIndentedString(attachments)).append("\n");
    sb.append("    templateVariables: ").append(toIndentedString(templateVariables)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    sendStrategy: ").append(toIndentedString(sendStrategy)).append("\n");
    sb.append("    customHeaders: ").append(toIndentedString(customHeaders)).append("\n");
    sb.append("    useInboxName: ").append(toIndentedString(useInboxName)).append("\n");
    sb.append("    html: ").append(toIndentedString(html)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("body");
    openapiFields.add("isHTML");
    openapiFields.add("charset");
    openapiFields.add("attachments");
    openapiFields.add("templateVariables");
    openapiFields.add("template");
    openapiFields.add("sendStrategy");
    openapiFields.add("customHeaders");
    openapiFields.add("useInboxName");
    openapiFields.add("html");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("isHTML");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ReplyToAliasEmailOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ReplyToAliasEmailOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ReplyToAliasEmailOptions is not found in the empty JSON string", ReplyToAliasEmailOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ReplyToAliasEmailOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ReplyToAliasEmailOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ReplyToAliasEmailOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("charset") != null && !jsonObj.get("charset").isJsonNull()) && !jsonObj.get("charset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charset").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("attachments") != null && !jsonObj.get("attachments").isJsonNull() && !jsonObj.get("attachments").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `attachments` to be an array in the JSON string but got `%s`", jsonObj.get("attachments").toString()));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("sendStrategy") != null && !jsonObj.get("sendStrategy").isJsonNull()) && !jsonObj.get("sendStrategy").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sendStrategy` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sendStrategy").toString()));
      }
      // validate the optional field `sendStrategy`
      if (jsonObj.get("sendStrategy") != null && !jsonObj.get("sendStrategy").isJsonNull()) {
        SendStrategyEnum.validateJsonElement(jsonObj.get("sendStrategy"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ReplyToAliasEmailOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ReplyToAliasEmailOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ReplyToAliasEmailOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ReplyToAliasEmailOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ReplyToAliasEmailOptions>() {
           @Override
           public void write(JsonWriter out, ReplyToAliasEmailOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ReplyToAliasEmailOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ReplyToAliasEmailOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ReplyToAliasEmailOptions
   * @throws IOException if the JSON string is invalid with respect to ReplyToAliasEmailOptions
   */
  public static ReplyToAliasEmailOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ReplyToAliasEmailOptions.class);
  }

  /**
   * Convert an instance of ReplyToAliasEmailOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

