/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.ConnectorSyncRequestResultExceptionCause;
import com.mailslurp.models.ConnectorSyncRequestResultExceptionCauseStackTraceInner;
import com.mailslurp.models.ConnectorSyncRequestResultExceptionCauseSuppressedInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ConnectorSyncRequestResultException
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:42:28.001523Z[Etc/UTC]")
public class ConnectorSyncRequestResultException {
  public static final String SERIALIZED_NAME_CAUSE = "cause";
  @SerializedName(SERIALIZED_NAME_CAUSE)
  private ConnectorSyncRequestResultExceptionCause cause;

  public static final String SERIALIZED_NAME_STACK_TRACE = "stackTrace";
  @SerializedName(SERIALIZED_NAME_STACK_TRACE)
  private List<ConnectorSyncRequestResultExceptionCauseStackTraceInner> stackTrace = null;

  public static final String SERIALIZED_NAME_MESSAGE = "message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_SUPPRESSED = "suppressed";
  @SerializedName(SERIALIZED_NAME_SUPPRESSED)
  private List<ConnectorSyncRequestResultExceptionCauseSuppressedInner> suppressed = null;

  public static final String SERIALIZED_NAME_LOCALIZED_MESSAGE = "localizedMessage";
  @SerializedName(SERIALIZED_NAME_LOCALIZED_MESSAGE)
  private String localizedMessage;

  public ConnectorSyncRequestResultException() {
  }

  public ConnectorSyncRequestResultException cause(ConnectorSyncRequestResultExceptionCause cause) {
    
    this.cause = cause;
    return this;
  }

   /**
   * Get cause
   * @return cause
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ConnectorSyncRequestResultExceptionCause getCause() {
    return cause;
  }


  public void setCause(ConnectorSyncRequestResultExceptionCause cause) {
    this.cause = cause;
  }


  public ConnectorSyncRequestResultException stackTrace(List<ConnectorSyncRequestResultExceptionCauseStackTraceInner> stackTrace) {
    
    this.stackTrace = stackTrace;
    return this;
  }

  public ConnectorSyncRequestResultException addStackTraceItem(ConnectorSyncRequestResultExceptionCauseStackTraceInner stackTraceItem) {
    if (this.stackTrace == null) {
      this.stackTrace = new ArrayList<>();
    }
    this.stackTrace.add(stackTraceItem);
    return this;
  }

   /**
   * Get stackTrace
   * @return stackTrace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConnectorSyncRequestResultExceptionCauseStackTraceInner> getStackTrace() {
    return stackTrace;
  }


  public void setStackTrace(List<ConnectorSyncRequestResultExceptionCauseStackTraceInner> stackTrace) {
    this.stackTrace = stackTrace;
  }


  public ConnectorSyncRequestResultException message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Get message
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public ConnectorSyncRequestResultException suppressed(List<ConnectorSyncRequestResultExceptionCauseSuppressedInner> suppressed) {
    
    this.suppressed = suppressed;
    return this;
  }

  public ConnectorSyncRequestResultException addSuppressedItem(ConnectorSyncRequestResultExceptionCauseSuppressedInner suppressedItem) {
    if (this.suppressed == null) {
      this.suppressed = new ArrayList<>();
    }
    this.suppressed.add(suppressedItem);
    return this;
  }

   /**
   * Get suppressed
   * @return suppressed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ConnectorSyncRequestResultExceptionCauseSuppressedInner> getSuppressed() {
    return suppressed;
  }


  public void setSuppressed(List<ConnectorSyncRequestResultExceptionCauseSuppressedInner> suppressed) {
    this.suppressed = suppressed;
  }


  public ConnectorSyncRequestResultException localizedMessage(String localizedMessage) {
    
    this.localizedMessage = localizedMessage;
    return this;
  }

   /**
   * Get localizedMessage
   * @return localizedMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLocalizedMessage() {
    return localizedMessage;
  }


  public void setLocalizedMessage(String localizedMessage) {
    this.localizedMessage = localizedMessage;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorSyncRequestResultException connectorSyncRequestResultException = (ConnectorSyncRequestResultException) o;
    return Objects.equals(this.cause, connectorSyncRequestResultException.cause) &&
        Objects.equals(this.stackTrace, connectorSyncRequestResultException.stackTrace) &&
        Objects.equals(this.message, connectorSyncRequestResultException.message) &&
        Objects.equals(this.suppressed, connectorSyncRequestResultException.suppressed) &&
        Objects.equals(this.localizedMessage, connectorSyncRequestResultException.localizedMessage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(cause, stackTrace, message, suppressed, localizedMessage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorSyncRequestResultException {\n");
    sb.append("    cause: ").append(toIndentedString(cause)).append("\n");
    sb.append("    stackTrace: ").append(toIndentedString(stackTrace)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    suppressed: ").append(toIndentedString(suppressed)).append("\n");
    sb.append("    localizedMessage: ").append(toIndentedString(localizedMessage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cause");
    openapiFields.add("stackTrace");
    openapiFields.add("message");
    openapiFields.add("suppressed");
    openapiFields.add("localizedMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ConnectorSyncRequestResultException
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ConnectorSyncRequestResultException.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConnectorSyncRequestResultException is not found in the empty JSON string", ConnectorSyncRequestResultException.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ConnectorSyncRequestResultException.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConnectorSyncRequestResultException` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }
      // validate the optional field `cause`
      if (jsonObj.get("cause") != null && !jsonObj.get("cause").isJsonNull()) {
        ConnectorSyncRequestResultExceptionCause.validateJsonObject(jsonObj.getAsJsonObject("cause"));
      }
      if (jsonObj.get("stackTrace") != null && !jsonObj.get("stackTrace").isJsonNull()) {
        JsonArray jsonArraystackTrace = jsonObj.getAsJsonArray("stackTrace");
        if (jsonArraystackTrace != null) {
          // ensure the json data is an array
          if (!jsonObj.get("stackTrace").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `stackTrace` to be an array in the JSON string but got `%s`", jsonObj.get("stackTrace").toString()));
          }

          // validate the optional field `stackTrace` (array)
          for (int i = 0; i < jsonArraystackTrace.size(); i++) {
            ConnectorSyncRequestResultExceptionCauseStackTraceInner.validateJsonObject(jsonArraystackTrace.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("message") != null && !jsonObj.get("message").isJsonNull()) && !jsonObj.get("message").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `message` to be a primitive type in the JSON string but got `%s`", jsonObj.get("message").toString()));
      }
      if (jsonObj.get("suppressed") != null && !jsonObj.get("suppressed").isJsonNull()) {
        JsonArray jsonArraysuppressed = jsonObj.getAsJsonArray("suppressed");
        if (jsonArraysuppressed != null) {
          // ensure the json data is an array
          if (!jsonObj.get("suppressed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `suppressed` to be an array in the JSON string but got `%s`", jsonObj.get("suppressed").toString()));
          }

          // validate the optional field `suppressed` (array)
          for (int i = 0; i < jsonArraysuppressed.size(); i++) {
            ConnectorSyncRequestResultExceptionCauseSuppressedInner.validateJsonObject(jsonArraysuppressed.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("localizedMessage") != null && !jsonObj.get("localizedMessage").isJsonNull()) && !jsonObj.get("localizedMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `localizedMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("localizedMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConnectorSyncRequestResultException.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConnectorSyncRequestResultException' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConnectorSyncRequestResultException> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConnectorSyncRequestResultException.class));

       return (TypeAdapter<T>) new TypeAdapter<ConnectorSyncRequestResultException>() {
           @Override
           public void write(JsonWriter out, ConnectorSyncRequestResultException value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConnectorSyncRequestResultException read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ConnectorSyncRequestResultException given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ConnectorSyncRequestResultException
  * @throws IOException if the JSON string is invalid with respect to ConnectorSyncRequestResultException
  */
  public static ConnectorSyncRequestResultException fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConnectorSyncRequestResultException.class);
  }

 /**
  * Convert an instance of ConnectorSyncRequestResultException to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

