/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * EMAIL_OPENED webhook payload. Sent to your webhook url endpoint via HTTP POST when an email containing a tracking pixel is opened and the pixel image is loaded by a reader.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookEmailOpenedPayload {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nonnull
  private String messageId;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  @javax.annotation.Nonnull
  private UUID webhookId;

  /**
   * Name of the event type webhook is being triggered for.
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_AI_TRANSFORM_RESULT("NEW_AI_TRANSFORM_RESULT"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EventNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nonnull
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_WEBHOOK_NAME = "webhookName";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_NAME)
  @javax.annotation.Nullable
  private String webhookName;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nonnull
  private UUID inboxId;

  public static final String SERIALIZED_NAME_PIXEL_ID = "pixelId";
  @SerializedName(SERIALIZED_NAME_PIXEL_ID)
  @javax.annotation.Nonnull
  private UUID pixelId;

  public static final String SERIALIZED_NAME_SENT_EMAIL_ID = "sentEmailId";
  @SerializedName(SERIALIZED_NAME_SENT_EMAIL_ID)
  @javax.annotation.Nonnull
  private UUID sentEmailId;

  public static final String SERIALIZED_NAME_RECIPIENT = "recipient";
  @SerializedName(SERIALIZED_NAME_RECIPIENT)
  @javax.annotation.Nonnull
  private String recipient;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public WebhookEmailOpenedPayload() {
  }

  public WebhookEmailOpenedPayload messageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
  }


  public WebhookEmailOpenedPayload webhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * ID of webhook entity being triggered
   * @return webhookId
   */
  @javax.annotation.Nonnull
  public UUID getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookEmailOpenedPayload eventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Name of the event type webhook is being triggered for.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public EventNameEnum getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookEmailOpenedPayload webhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
    return this;
  }

  /**
   * Name of the webhook being triggered
   * @return webhookName
   */
  @javax.annotation.Nullable
  public String getWebhookName() {
    return webhookName;
  }

  public void setWebhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
  }


  public WebhookEmailOpenedPayload inboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Id of the inbox
   * @return inboxId
   */
  @javax.annotation.Nonnull
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
  }


  public WebhookEmailOpenedPayload pixelId(@javax.annotation.Nonnull UUID pixelId) {
    this.pixelId = pixelId;
    return this;
  }

  /**
   * ID of the tracking pixel
   * @return pixelId
   */
  @javax.annotation.Nonnull
  public UUID getPixelId() {
    return pixelId;
  }

  public void setPixelId(@javax.annotation.Nonnull UUID pixelId) {
    this.pixelId = pixelId;
  }


  public WebhookEmailOpenedPayload sentEmailId(@javax.annotation.Nonnull UUID sentEmailId) {
    this.sentEmailId = sentEmailId;
    return this;
  }

  /**
   * ID of sent email
   * @return sentEmailId
   */
  @javax.annotation.Nonnull
  public UUID getSentEmailId() {
    return sentEmailId;
  }

  public void setSentEmailId(@javax.annotation.Nonnull UUID sentEmailId) {
    this.sentEmailId = sentEmailId;
  }


  public WebhookEmailOpenedPayload recipient(@javax.annotation.Nonnull String recipient) {
    this.recipient = recipient;
    return this;
  }

  /**
   * Email address for the recipient of the tracking pixel
   * @return recipient
   */
  @javax.annotation.Nonnull
  public String getRecipient() {
    return recipient;
  }

  public void setRecipient(@javax.annotation.Nonnull String recipient) {
    this.recipient = recipient;
  }


  public WebhookEmailOpenedPayload createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Date time of event creation
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookEmailOpenedPayload webhookEmailOpenedPayload = (WebhookEmailOpenedPayload) o;
    return Objects.equals(this.messageId, webhookEmailOpenedPayload.messageId) &&
        Objects.equals(this.webhookId, webhookEmailOpenedPayload.webhookId) &&
        Objects.equals(this.eventName, webhookEmailOpenedPayload.eventName) &&
        Objects.equals(this.webhookName, webhookEmailOpenedPayload.webhookName) &&
        Objects.equals(this.inboxId, webhookEmailOpenedPayload.inboxId) &&
        Objects.equals(this.pixelId, webhookEmailOpenedPayload.pixelId) &&
        Objects.equals(this.sentEmailId, webhookEmailOpenedPayload.sentEmailId) &&
        Objects.equals(this.recipient, webhookEmailOpenedPayload.recipient) &&
        Objects.equals(this.createdAt, webhookEmailOpenedPayload.createdAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, webhookId, eventName, webhookName, inboxId, pixelId, sentEmailId, recipient, createdAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookEmailOpenedPayload {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    webhookName: ").append(toIndentedString(webhookName)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    pixelId: ").append(toIndentedString(pixelId)).append("\n");
    sb.append("    sentEmailId: ").append(toIndentedString(sentEmailId)).append("\n");
    sb.append("    recipient: ").append(toIndentedString(recipient)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageId");
    openapiFields.add("webhookId");
    openapiFields.add("eventName");
    openapiFields.add("webhookName");
    openapiFields.add("inboxId");
    openapiFields.add("pixelId");
    openapiFields.add("sentEmailId");
    openapiFields.add("recipient");
    openapiFields.add("createdAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("webhookId");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("pixelId");
    openapiRequiredFields.add("sentEmailId");
    openapiRequiredFields.add("recipient");
    openapiRequiredFields.add("createdAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookEmailOpenedPayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookEmailOpenedPayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookEmailOpenedPayload is not found in the empty JSON string", WebhookEmailOpenedPayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookEmailOpenedPayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookEmailOpenedPayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookEmailOpenedPayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("webhookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookId").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the required field `eventName`
      EventNameEnum.validateJsonElement(jsonObj.get("eventName"));
      if ((jsonObj.get("webhookName") != null && !jsonObj.get("webhookName").isJsonNull()) && !jsonObj.get("webhookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookName").toString()));
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if (!jsonObj.get("pixelId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pixelId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pixelId").toString()));
      }
      if (!jsonObj.get("sentEmailId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentEmailId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentEmailId").toString()));
      }
      if (!jsonObj.get("recipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("recipient").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookEmailOpenedPayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookEmailOpenedPayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookEmailOpenedPayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookEmailOpenedPayload.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookEmailOpenedPayload>() {
           @Override
           public void write(JsonWriter out, WebhookEmailOpenedPayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookEmailOpenedPayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookEmailOpenedPayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookEmailOpenedPayload
   * @throws IOException if the JSON string is invalid with respect to WebhookEmailOpenedPayload
   */
  public static WebhookEmailOpenedPayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookEmailOpenedPayload.class);
  }

  /**
   * Convert an instance of WebhookEmailOpenedPayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

