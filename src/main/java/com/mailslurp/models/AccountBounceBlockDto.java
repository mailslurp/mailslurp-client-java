/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * AccountBounceBlockDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class AccountBounceBlockDto {
  public static final String SERIALIZED_NAME_IS_FROZEN = "isFrozen";
  @SerializedName(SERIALIZED_NAME_IS_FROZEN)
  @javax.annotation.Nonnull
  private Boolean isFrozen;

  public static final String SERIALIZED_NAME_IS_SENDING_BLOCKED = "isSendingBlocked";
  @SerializedName(SERIALIZED_NAME_IS_SENDING_BLOCKED)
  @javax.annotation.Nonnull
  private Boolean isSendingBlocked;

  public static final String SERIALIZED_NAME_BOUNCE_COUNT = "bounceCount";
  @SerializedName(SERIALIZED_NAME_BOUNCE_COUNT)
  @javax.annotation.Nonnull
  private Long bounceCount;

  public static final String SERIALIZED_NAME_BOUNCE_COUNT_TODAY = "bounceCountToday";
  @SerializedName(SERIALIZED_NAME_BOUNCE_COUNT_TODAY)
  @javax.annotation.Nonnull
  private Long bounceCountToday;

  public static final String SERIALIZED_NAME_MAXIMUM_DAILY_BOUNCES = "maximumDailyBounces";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_DAILY_BOUNCES)
  @javax.annotation.Nonnull
  private Long maximumDailyBounces;

  public static final String SERIALIZED_NAME_MAXIMUM_ACCOUNT_BOUNCES = "maximumAccountBounces";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_ACCOUNT_BOUNCES)
  @javax.annotation.Nonnull
  private Long maximumAccountBounces;

  public AccountBounceBlockDto() {
  }

  public AccountBounceBlockDto isFrozen(@javax.annotation.Nonnull Boolean isFrozen) {
    this.isFrozen = isFrozen;
    return this;
  }

  /**
   * Get isFrozen
   * @return isFrozen
   */
  @javax.annotation.Nonnull
  public Boolean getIsFrozen() {
    return isFrozen;
  }

  public void setIsFrozen(@javax.annotation.Nonnull Boolean isFrozen) {
    this.isFrozen = isFrozen;
  }


  public AccountBounceBlockDto isSendingBlocked(@javax.annotation.Nonnull Boolean isSendingBlocked) {
    this.isSendingBlocked = isSendingBlocked;
    return this;
  }

  /**
   * Get isSendingBlocked
   * @return isSendingBlocked
   */
  @javax.annotation.Nonnull
  public Boolean getIsSendingBlocked() {
    return isSendingBlocked;
  }

  public void setIsSendingBlocked(@javax.annotation.Nonnull Boolean isSendingBlocked) {
    this.isSendingBlocked = isSendingBlocked;
  }


  public AccountBounceBlockDto bounceCount(@javax.annotation.Nonnull Long bounceCount) {
    this.bounceCount = bounceCount;
    return this;
  }

  /**
   * Get bounceCount
   * @return bounceCount
   */
  @javax.annotation.Nonnull
  public Long getBounceCount() {
    return bounceCount;
  }

  public void setBounceCount(@javax.annotation.Nonnull Long bounceCount) {
    this.bounceCount = bounceCount;
  }


  public AccountBounceBlockDto bounceCountToday(@javax.annotation.Nonnull Long bounceCountToday) {
    this.bounceCountToday = bounceCountToday;
    return this;
  }

  /**
   * Get bounceCountToday
   * @return bounceCountToday
   */
  @javax.annotation.Nonnull
  public Long getBounceCountToday() {
    return bounceCountToday;
  }

  public void setBounceCountToday(@javax.annotation.Nonnull Long bounceCountToday) {
    this.bounceCountToday = bounceCountToday;
  }


  public AccountBounceBlockDto maximumDailyBounces(@javax.annotation.Nonnull Long maximumDailyBounces) {
    this.maximumDailyBounces = maximumDailyBounces;
    return this;
  }

  /**
   * Get maximumDailyBounces
   * @return maximumDailyBounces
   */
  @javax.annotation.Nonnull
  public Long getMaximumDailyBounces() {
    return maximumDailyBounces;
  }

  public void setMaximumDailyBounces(@javax.annotation.Nonnull Long maximumDailyBounces) {
    this.maximumDailyBounces = maximumDailyBounces;
  }


  public AccountBounceBlockDto maximumAccountBounces(@javax.annotation.Nonnull Long maximumAccountBounces) {
    this.maximumAccountBounces = maximumAccountBounces;
    return this;
  }

  /**
   * Get maximumAccountBounces
   * @return maximumAccountBounces
   */
  @javax.annotation.Nonnull
  public Long getMaximumAccountBounces() {
    return maximumAccountBounces;
  }

  public void setMaximumAccountBounces(@javax.annotation.Nonnull Long maximumAccountBounces) {
    this.maximumAccountBounces = maximumAccountBounces;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccountBounceBlockDto accountBounceBlockDto = (AccountBounceBlockDto) o;
    return Objects.equals(this.isFrozen, accountBounceBlockDto.isFrozen) &&
        Objects.equals(this.isSendingBlocked, accountBounceBlockDto.isSendingBlocked) &&
        Objects.equals(this.bounceCount, accountBounceBlockDto.bounceCount) &&
        Objects.equals(this.bounceCountToday, accountBounceBlockDto.bounceCountToday) &&
        Objects.equals(this.maximumDailyBounces, accountBounceBlockDto.maximumDailyBounces) &&
        Objects.equals(this.maximumAccountBounces, accountBounceBlockDto.maximumAccountBounces);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isFrozen, isSendingBlocked, bounceCount, bounceCountToday, maximumDailyBounces, maximumAccountBounces);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccountBounceBlockDto {\n");
    sb.append("    isFrozen: ").append(toIndentedString(isFrozen)).append("\n");
    sb.append("    isSendingBlocked: ").append(toIndentedString(isSendingBlocked)).append("\n");
    sb.append("    bounceCount: ").append(toIndentedString(bounceCount)).append("\n");
    sb.append("    bounceCountToday: ").append(toIndentedString(bounceCountToday)).append("\n");
    sb.append("    maximumDailyBounces: ").append(toIndentedString(maximumDailyBounces)).append("\n");
    sb.append("    maximumAccountBounces: ").append(toIndentedString(maximumAccountBounces)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isFrozen");
    openapiFields.add("isSendingBlocked");
    openapiFields.add("bounceCount");
    openapiFields.add("bounceCountToday");
    openapiFields.add("maximumDailyBounces");
    openapiFields.add("maximumAccountBounces");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isFrozen");
    openapiRequiredFields.add("isSendingBlocked");
    openapiRequiredFields.add("bounceCount");
    openapiRequiredFields.add("bounceCountToday");
    openapiRequiredFields.add("maximumDailyBounces");
    openapiRequiredFields.add("maximumAccountBounces");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AccountBounceBlockDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!AccountBounceBlockDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AccountBounceBlockDto is not found in the empty JSON string", AccountBounceBlockDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AccountBounceBlockDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AccountBounceBlockDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AccountBounceBlockDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AccountBounceBlockDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AccountBounceBlockDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AccountBounceBlockDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AccountBounceBlockDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AccountBounceBlockDto>() {
           @Override
           public void write(JsonWriter out, AccountBounceBlockDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AccountBounceBlockDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AccountBounceBlockDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AccountBounceBlockDto
   * @throws IOException if the JSON string is invalid with respect to AccountBounceBlockDto
   */
  public static AccountBounceBlockDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AccountBounceBlockDto.class);
  }

  /**
   * Convert an instance of AccountBounceBlockDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

