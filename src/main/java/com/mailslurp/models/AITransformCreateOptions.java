/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.StructuredOutputSchema;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * AITransformCreateOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-13T10:16:48.017348019Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class AITransformCreateOptions {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_CONDITIONS = "conditions";
  @SerializedName(SERIALIZED_NAME_CONDITIONS)
  @javax.annotation.Nullable
  private List<String> conditions;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  @javax.annotation.Nullable
  private List<String> instructions;

  public static final String SERIALIZED_NAME_OUTPUT_SCHEMA = "outputSchema";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCHEMA)
  @javax.annotation.Nullable
  private StructuredOutputSchema outputSchema;

  public static final String SERIALIZED_NAME_OUTPUT_SCHEMA_ID = "outputSchemaId";
  @SerializedName(SERIALIZED_NAME_OUTPUT_SCHEMA_ID)
  @javax.annotation.Nullable
  private UUID outputSchemaId;

  public static final String SERIALIZED_NAME_EXTRACT_PROMPT = "extractPrompt";
  @SerializedName(SERIALIZED_NAME_EXTRACT_PROMPT)
  @javax.annotation.Nullable
  private String extractPrompt;

  public AITransformCreateOptions() {
  }

  public AITransformCreateOptions name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AITransformCreateOptions conditions(@javax.annotation.Nullable List<String> conditions) {
    this.conditions = conditions;
    return this;
  }

  public AITransformCreateOptions addConditionsItem(String conditionsItem) {
    if (this.conditions == null) {
      this.conditions = new ArrayList<>();
    }
    this.conditions.add(conditionsItem);
    return this;
  }

  /**
   * Get conditions
   * @return conditions
   */
  @javax.annotation.Nullable
  public List<String> getConditions() {
    return conditions;
  }

  public void setConditions(@javax.annotation.Nullable List<String> conditions) {
    this.conditions = conditions;
  }


  public AITransformCreateOptions instructions(@javax.annotation.Nullable List<String> instructions) {
    this.instructions = instructions;
    return this;
  }

  public AITransformCreateOptions addInstructionsItem(String instructionsItem) {
    if (this.instructions == null) {
      this.instructions = new ArrayList<>();
    }
    this.instructions.add(instructionsItem);
    return this;
  }

  /**
   * Get instructions
   * @return instructions
   */
  @javax.annotation.Nullable
  public List<String> getInstructions() {
    return instructions;
  }

  public void setInstructions(@javax.annotation.Nullable List<String> instructions) {
    this.instructions = instructions;
  }


  public AITransformCreateOptions outputSchema(@javax.annotation.Nullable StructuredOutputSchema outputSchema) {
    this.outputSchema = outputSchema;
    return this;
  }

  /**
   * Get outputSchema
   * @return outputSchema
   */
  @javax.annotation.Nullable
  public StructuredOutputSchema getOutputSchema() {
    return outputSchema;
  }

  public void setOutputSchema(@javax.annotation.Nullable StructuredOutputSchema outputSchema) {
    this.outputSchema = outputSchema;
  }


  public AITransformCreateOptions outputSchemaId(@javax.annotation.Nullable UUID outputSchemaId) {
    this.outputSchemaId = outputSchemaId;
    return this;
  }

  /**
   * Get outputSchemaId
   * @return outputSchemaId
   */
  @javax.annotation.Nullable
  public UUID getOutputSchemaId() {
    return outputSchemaId;
  }

  public void setOutputSchemaId(@javax.annotation.Nullable UUID outputSchemaId) {
    this.outputSchemaId = outputSchemaId;
  }


  public AITransformCreateOptions extractPrompt(@javax.annotation.Nullable String extractPrompt) {
    this.extractPrompt = extractPrompt;
    return this;
  }

  /**
   * Get extractPrompt
   * @return extractPrompt
   */
  @javax.annotation.Nullable
  public String getExtractPrompt() {
    return extractPrompt;
  }

  public void setExtractPrompt(@javax.annotation.Nullable String extractPrompt) {
    this.extractPrompt = extractPrompt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AITransformCreateOptions aiTransformCreateOptions = (AITransformCreateOptions) o;
    return Objects.equals(this.name, aiTransformCreateOptions.name) &&
        Objects.equals(this.conditions, aiTransformCreateOptions.conditions) &&
        Objects.equals(this.instructions, aiTransformCreateOptions.instructions) &&
        Objects.equals(this.outputSchema, aiTransformCreateOptions.outputSchema) &&
        Objects.equals(this.outputSchemaId, aiTransformCreateOptions.outputSchemaId) &&
        Objects.equals(this.extractPrompt, aiTransformCreateOptions.extractPrompt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, conditions, instructions, outputSchema, outputSchemaId, extractPrompt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AITransformCreateOptions {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    conditions: ").append(toIndentedString(conditions)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    outputSchema: ").append(toIndentedString(outputSchema)).append("\n");
    sb.append("    outputSchemaId: ").append(toIndentedString(outputSchemaId)).append("\n");
    sb.append("    extractPrompt: ").append(toIndentedString(extractPrompt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("conditions");
    openapiFields.add("instructions");
    openapiFields.add("outputSchema");
    openapiFields.add("outputSchemaId");
    openapiFields.add("extractPrompt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AITransformCreateOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!AITransformCreateOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AITransformCreateOptions is not found in the empty JSON string", AITransformCreateOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AITransformCreateOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AITransformCreateOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("conditions") != null && !jsonObj.get("conditions").isJsonNull() && !jsonObj.get("conditions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `conditions` to be an array in the JSON string but got `%s`", jsonObj.get("conditions").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull() && !jsonObj.get("instructions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be an array in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      // validate the optional field `outputSchema`
      if (jsonObj.get("outputSchema") != null && !jsonObj.get("outputSchema").isJsonNull()) {
        StructuredOutputSchema.validateJsonElement(jsonObj.get("outputSchema"));
      }
      if ((jsonObj.get("outputSchemaId") != null && !jsonObj.get("outputSchemaId").isJsonNull()) && !jsonObj.get("outputSchemaId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `outputSchemaId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("outputSchemaId").toString()));
      }
      if ((jsonObj.get("extractPrompt") != null && !jsonObj.get("extractPrompt").isJsonNull()) && !jsonObj.get("extractPrompt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `extractPrompt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("extractPrompt").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AITransformCreateOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AITransformCreateOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AITransformCreateOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AITransformCreateOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<AITransformCreateOptions>() {
           @Override
           public void write(JsonWriter out, AITransformCreateOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AITransformCreateOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AITransformCreateOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AITransformCreateOptions
   * @throws IOException if the JSON string is invalid with respect to AITransformCreateOptions
   */
  public static AITransformCreateOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AITransformCreateOptions.class);
  }

  /**
   * Convert an instance of AITransformCreateOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

