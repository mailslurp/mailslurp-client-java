/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.MatchOption;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Conditions to apply to emails that you are waiting for
 */
@ApiModel(description = "Conditions to apply to emails that you are waiting for")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class WaitForConditions {
  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private UUID inboxId;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  private Integer count;

  public static final String SERIALIZED_NAME_DELAY_TIMEOUT = "delayTimeout";
  @SerializedName(SERIALIZED_NAME_DELAY_TIMEOUT)
  private Long delayTimeout;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  private Long timeout;

  public static final String SERIALIZED_NAME_UNREAD_ONLY = "unreadOnly";
  @SerializedName(SERIALIZED_NAME_UNREAD_ONLY)
  private Boolean unreadOnly;

  /**
   * How result size should be compared with the expected size. Exactly or at-least matching result?
   */
  @JsonAdapter(CountTypeEnum.Adapter.class)
  public enum CountTypeEnum {
    EXACTLY("EXACTLY"),
    
    ATLEAST("ATLEAST");

    private String value;

    CountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountTypeEnum fromValue(String value) {
      for (CountTypeEnum b : CountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COUNT_TYPE = "countType";
  @SerializedName(SERIALIZED_NAME_COUNT_TYPE)
  private CountTypeEnum countType;

  public static final String SERIALIZED_NAME_MATCHES = "matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  private List<MatchOption> matches = null;

  /**
   * Direction to sort matching emails by created time
   */
  @JsonAdapter(SortDirectionEnum.Adapter.class)
  public enum SortDirectionEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortDirectionEnum fromValue(String value) {
      for (SortDirectionEnum b : SortDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SortDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortDirectionEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  private SortDirectionEnum sortDirection;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  private OffsetDateTime since;

  public static final String SERIALIZED_NAME_BEFORE = "before";
  @SerializedName(SERIALIZED_NAME_BEFORE)
  private OffsetDateTime before;

  public WaitForConditions() {
  }

  public WaitForConditions inboxId(UUID inboxId) {
    
    this.inboxId = inboxId;
    return this;
  }

   /**
   * ID of inbox to search within and apply conditions to. Essentially filtering the emails found to give a count.
   * @return inboxId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ID of inbox to search within and apply conditions to. Essentially filtering the emails found to give a count.")

  public UUID getInboxId() {
    return inboxId;
  }


  public void setInboxId(UUID inboxId) {
    this.inboxId = inboxId;
  }


  public WaitForConditions count(Integer count) {
    
    this.count = count;
    return this;
  }

   /**
   * Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.
   * @return count
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of results that should match conditions. Either exactly or at least this amount based on the `countType`. If count condition is not met and the timeout has not been reached the `waitFor` method will retry the operation.")

  public Integer getCount() {
    return count;
  }


  public void setCount(Integer count) {
    this.count = count;
  }


  public WaitForConditions delayTimeout(Long delayTimeout) {
    
    this.delayTimeout = delayTimeout;
    return this;
  }

   /**
   * Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.
   * @return delayTimeout
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Max time in milliseconds to wait between retries if a `timeout` is specified.")

  public Long getDelayTimeout() {
    return delayTimeout;
  }


  public void setDelayTimeout(Long delayTimeout) {
    this.delayTimeout = delayTimeout;
  }


  public WaitForConditions timeout(Long timeout) {
    
    this.timeout = timeout;
    return this;
  }

   /**
   * Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.
   * @return timeout
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Max time in milliseconds to retry the `waitFor` operation until conditions are met.")

  public Long getTimeout() {
    return timeout;
  }


  public void setTimeout(Long timeout) {
    this.timeout = timeout;
  }


  public WaitForConditions unreadOnly(Boolean unreadOnly) {
    
    this.unreadOnly = unreadOnly;
    return this;
  }

   /**
   * Apply conditions only to **unread** emails. All emails begin with &#x60;read&#x3D;false&#x60;. An email is marked &#x60;read&#x3D;true&#x60; when an &#x60;EmailDto&#x60; representation of it has been returned to the user at least once. For example you have called &#x60;getEmail&#x60; or &#x60;waitForLatestEmail&#x60; etc., or you have viewed the email in the dashboard.
   * @return unreadOnly
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Apply conditions only to **unread** emails. All emails begin with `read=false`. An email is marked `read=true` when an `EmailDto` representation of it has been returned to the user at least once. For example you have called `getEmail` or `waitForLatestEmail` etc., or you have viewed the email in the dashboard.")

  public Boolean getUnreadOnly() {
    return unreadOnly;
  }


  public void setUnreadOnly(Boolean unreadOnly) {
    this.unreadOnly = unreadOnly;
  }


  public WaitForConditions countType(CountTypeEnum countType) {
    
    this.countType = countType;
    return this;
  }

   /**
   * How result size should be compared with the expected size. Exactly or at-least matching result?
   * @return countType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "How result size should be compared with the expected size. Exactly or at-least matching result?")

  public CountTypeEnum getCountType() {
    return countType;
  }


  public void setCountType(CountTypeEnum countType) {
    this.countType = countType;
  }


  public WaitForConditions matches(List<MatchOption> matches) {
    
    this.matches = matches;
    return this;
  }

  public WaitForConditions addMatchesItem(MatchOption matchesItem) {
    if (this.matches == null) {
      this.matches = new ArrayList<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

   /**
   * Conditions that should be matched for an email to qualify for results. Each condition will be applied in order to each email within an inbox to filter a result list of matching emails you are waiting for.
   * @return matches
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Conditions that should be matched for an email to qualify for results. Each condition will be applied in order to each email within an inbox to filter a result list of matching emails you are waiting for.")

  public List<MatchOption> getMatches() {
    return matches;
  }


  public void setMatches(List<MatchOption> matches) {
    this.matches = matches;
  }


  public WaitForConditions sortDirection(SortDirectionEnum sortDirection) {
    
    this.sortDirection = sortDirection;
    return this;
  }

   /**
   * Direction to sort matching emails by created time
   * @return sortDirection
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Direction to sort matching emails by created time")

  public SortDirectionEnum getSortDirection() {
    return sortDirection;
  }


  public void setSortDirection(SortDirectionEnum sortDirection) {
    this.sortDirection = sortDirection;
  }


  public WaitForConditions since(OffsetDateTime since) {
    
    this.since = since;
    return this;
  }

   /**
   * ISO Date Time earliest time of email to consider. Filter for matching emails that were received after this date
   * @return since
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO Date Time earliest time of email to consider. Filter for matching emails that were received after this date")

  public OffsetDateTime getSince() {
    return since;
  }


  public void setSince(OffsetDateTime since) {
    this.since = since;
  }


  public WaitForConditions before(OffsetDateTime before) {
    
    this.before = before;
    return this;
  }

   /**
   * ISO Date Time latest time of email to consider. Filter for matching emails that were received before this date
   * @return before
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ISO Date Time latest time of email to consider. Filter for matching emails that were received before this date")

  public OffsetDateTime getBefore() {
    return before;
  }


  public void setBefore(OffsetDateTime before) {
    this.before = before;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaitForConditions waitForConditions = (WaitForConditions) o;
    return Objects.equals(this.inboxId, waitForConditions.inboxId) &&
        Objects.equals(this.count, waitForConditions.count) &&
        Objects.equals(this.delayTimeout, waitForConditions.delayTimeout) &&
        Objects.equals(this.timeout, waitForConditions.timeout) &&
        Objects.equals(this.unreadOnly, waitForConditions.unreadOnly) &&
        Objects.equals(this.countType, waitForConditions.countType) &&
        Objects.equals(this.matches, waitForConditions.matches) &&
        Objects.equals(this.sortDirection, waitForConditions.sortDirection) &&
        Objects.equals(this.since, waitForConditions.since) &&
        Objects.equals(this.before, waitForConditions.before);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxId, count, delayTimeout, timeout, unreadOnly, countType, matches, sortDirection, since, before);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaitForConditions {\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    delayTimeout: ").append(toIndentedString(delayTimeout)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    unreadOnly: ").append(toIndentedString(unreadOnly)).append("\n");
    sb.append("    countType: ").append(toIndentedString(countType)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    before: ").append(toIndentedString(before)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboxId");
    openapiFields.add("count");
    openapiFields.add("delayTimeout");
    openapiFields.add("timeout");
    openapiFields.add("unreadOnly");
    openapiFields.add("countType");
    openapiFields.add("matches");
    openapiFields.add("sortDirection");
    openapiFields.add("since");
    openapiFields.add("before");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("timeout");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WaitForConditions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WaitForConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaitForConditions is not found in the empty JSON string", WaitForConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WaitForConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaitForConditions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaitForConditions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("countType") != null && !jsonObj.get("countType").isJsonNull()) && !jsonObj.get("countType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countType").toString()));
      }
      if (jsonObj.get("matches") != null && !jsonObj.get("matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matches` to be an array in the JSON string but got `%s`", jsonObj.get("matches").toString()));
          }

          // validate the optional field `matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            MatchOption.validateJsonObject(jsonArraymatches.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) && !jsonObj.get("sortDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDirection").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaitForConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaitForConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaitForConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaitForConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<WaitForConditions>() {
           @Override
           public void write(JsonWriter out, WaitForConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaitForConditions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WaitForConditions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WaitForConditions
  * @throws IOException if the JSON string is invalid with respect to WaitForConditions
  */
  public static WaitForConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaitForConditions.class);
  }

 /**
  * Convert an instance of WaitForConditions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

