/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * IMAP operation flags
 */
@ApiModel(description = "IMAP operation flags")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:42:28.001523Z[Etc/UTC]")
public class ImapFlagOperationOptions {
  /**
   * Gets or Sets flagOperation
   */
  @JsonAdapter(FlagOperationEnum.Adapter.class)
  public enum FlagOperationEnum {
    SET_FLAGS("SET_FLAGS"),
    
    ADD_FLAGS("ADD_FLAGS"),
    
    REMOVE_FLAGS("REMOVE_FLAGS");

    private String value;

    FlagOperationEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FlagOperationEnum fromValue(String value) {
      for (FlagOperationEnum b : FlagOperationEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FlagOperationEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FlagOperationEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FlagOperationEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FlagOperationEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_FLAG_OPERATION = "flagOperation";
  @SerializedName(SERIALIZED_NAME_FLAG_OPERATION)
  private FlagOperationEnum flagOperation;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  private List<String> flags = new ArrayList<>();

  public ImapFlagOperationOptions() {
  }

  public ImapFlagOperationOptions flagOperation(FlagOperationEnum flagOperation) {
    
    this.flagOperation = flagOperation;
    return this;
  }

   /**
   * Get flagOperation
   * @return flagOperation
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public FlagOperationEnum getFlagOperation() {
    return flagOperation;
  }


  public void setFlagOperation(FlagOperationEnum flagOperation) {
    this.flagOperation = flagOperation;
  }


  public ImapFlagOperationOptions flags(List<String> flags) {
    
    this.flags = flags;
    return this;
  }

  public ImapFlagOperationOptions addFlagsItem(String flagsItem) {
    this.flags.add(flagsItem);
    return this;
  }

   /**
   * Get flags
   * @return flags
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getFlags() {
    return flags;
  }


  public void setFlags(List<String> flags) {
    this.flags = flags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapFlagOperationOptions imapFlagOperationOptions = (ImapFlagOperationOptions) o;
    return Objects.equals(this.flagOperation, imapFlagOperationOptions.flagOperation) &&
        Objects.equals(this.flags, imapFlagOperationOptions.flags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(flagOperation, flags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapFlagOperationOptions {\n");
    sb.append("    flagOperation: ").append(toIndentedString(flagOperation)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("flagOperation");
    openapiFields.add("flags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("flagOperation");
    openapiRequiredFields.add("flags");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ImapFlagOperationOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ImapFlagOperationOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapFlagOperationOptions is not found in the empty JSON string", ImapFlagOperationOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ImapFlagOperationOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapFlagOperationOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImapFlagOperationOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("flagOperation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `flagOperation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("flagOperation").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("flags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapFlagOperationOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapFlagOperationOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapFlagOperationOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapFlagOperationOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapFlagOperationOptions>() {
           @Override
           public void write(JsonWriter out, ImapFlagOperationOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapFlagOperationOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImapFlagOperationOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImapFlagOperationOptions
  * @throws IOException if the JSON string is invalid with respect to ImapFlagOperationOptions
  */
  public static ImapFlagOperationOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapFlagOperationOptions.class);
  }

 /**
  * Convert an instance of ImapFlagOperationOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

