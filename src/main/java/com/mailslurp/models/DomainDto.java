/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.DomainNameRecord;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Domain plus verification records and status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-13T10:16:48.017348019Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class DomainDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_DOMAIN = "domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  @javax.annotation.Nonnull
  private String domain;

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verificationToken";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  @javax.annotation.Nonnull
  private String verificationToken;

  public static final String SERIALIZED_NAME_DKIM_TOKENS = "dkimTokens";
  @SerializedName(SERIALIZED_NAME_DKIM_TOKENS)
  @javax.annotation.Nonnull
  private List<String> dkimTokens = new ArrayList<>();

  public static final String SERIALIZED_NAME_DUPLICATE_RECORDS_MESSAGE = "duplicateRecordsMessage";
  @SerializedName(SERIALIZED_NAME_DUPLICATE_RECORDS_MESSAGE)
  @javax.annotation.Nullable
  private String duplicateRecordsMessage;

  public static final String SERIALIZED_NAME_HAS_DUPLICATE_RECORDS = "hasDuplicateRecords";
  @SerializedName(SERIALIZED_NAME_HAS_DUPLICATE_RECORDS)
  @javax.annotation.Nonnull
  private Boolean hasDuplicateRecords;

  public static final String SERIALIZED_NAME_MISSING_RECORDS_MESSAGE = "missingRecordsMessage";
  @SerializedName(SERIALIZED_NAME_MISSING_RECORDS_MESSAGE)
  @javax.annotation.Nullable
  private String missingRecordsMessage;

  public static final String SERIALIZED_NAME_HAS_MISSING_RECORDS = "hasMissingRecords";
  @SerializedName(SERIALIZED_NAME_HAS_MISSING_RECORDS)
  @javax.annotation.Nonnull
  private Boolean hasMissingRecords;

  public static final String SERIALIZED_NAME_IS_VERIFIED = "isVerified";
  @SerializedName(SERIALIZED_NAME_IS_VERIFIED)
  @javax.annotation.Nonnull
  private Boolean isVerified;

  public static final String SERIALIZED_NAME_DOMAIN_NAME_RECORDS = "domainNameRecords";
  @SerializedName(SERIALIZED_NAME_DOMAIN_NAME_RECORDS)
  @javax.annotation.Nonnull
  private List<DomainNameRecord> domainNameRecords = new ArrayList<>();

  public static final String SERIALIZED_NAME_CATCH_ALL_INBOX_ID = "catchAllInboxId";
  @SerializedName(SERIALIZED_NAME_CATCH_ALL_INBOX_ID)
  @javax.annotation.Nullable
  private UUID catchAllInboxId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  /**
   * Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
   */
  @JsonAdapter(DomainTypeEnum.Adapter.class)
  public enum DomainTypeEnum {
    HTTP_INBOX("HTTP_INBOX"),
    
    SMTP_DOMAIN("SMTP_DOMAIN");

    private String value;

    DomainTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static DomainTypeEnum fromValue(String value) {
      for (DomainTypeEnum b : DomainTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<DomainTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final DomainTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public DomainTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return DomainTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      DomainTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_DOMAIN_TYPE = "domainType";
  @SerializedName(SERIALIZED_NAME_DOMAIN_TYPE)
  @javax.annotation.Nonnull
  private DomainTypeEnum domainType;

  public DomainDto() {
  }

  public DomainDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public DomainDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public DomainDto domain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
    return this;
  }

  /**
   * Custom domain name
   * @return domain
   */
  @javax.annotation.Nonnull
  public String getDomain() {
    return domain;
  }

  public void setDomain(@javax.annotation.Nonnull String domain) {
    this.domain = domain;
  }


  public DomainDto verificationToken(@javax.annotation.Nonnull String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

  /**
   * Verification tokens
   * @return verificationToken
   */
  @javax.annotation.Nonnull
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(@javax.annotation.Nonnull String verificationToken) {
    this.verificationToken = verificationToken;
  }


  public DomainDto dkimTokens(@javax.annotation.Nonnull List<String> dkimTokens) {
    this.dkimTokens = dkimTokens;
    return this;
  }

  public DomainDto addDkimTokensItem(String dkimTokensItem) {
    if (this.dkimTokens == null) {
      this.dkimTokens = new ArrayList<>();
    }
    this.dkimTokens.add(dkimTokensItem);
    return this;
  }

  /**
   * Unique token DKIM tokens
   * @return dkimTokens
   */
  @javax.annotation.Nonnull
  public List<String> getDkimTokens() {
    return dkimTokens;
  }

  public void setDkimTokens(@javax.annotation.Nonnull List<String> dkimTokens) {
    this.dkimTokens = dkimTokens;
  }


  public DomainDto duplicateRecordsMessage(@javax.annotation.Nullable String duplicateRecordsMessage) {
    this.duplicateRecordsMessage = duplicateRecordsMessage;
    return this;
  }

  /**
   * If the domain is duplicate records.
   * @return duplicateRecordsMessage
   */
  @javax.annotation.Nullable
  public String getDuplicateRecordsMessage() {
    return duplicateRecordsMessage;
  }

  public void setDuplicateRecordsMessage(@javax.annotation.Nullable String duplicateRecordsMessage) {
    this.duplicateRecordsMessage = duplicateRecordsMessage;
  }


  public DomainDto hasDuplicateRecords(@javax.annotation.Nonnull Boolean hasDuplicateRecords) {
    this.hasDuplicateRecords = hasDuplicateRecords;
    return this;
  }

  /**
   * Whether the domain has duplicated required records. If true then see the domain in the dashboard app.
   * @return hasDuplicateRecords
   */
  @javax.annotation.Nonnull
  public Boolean getHasDuplicateRecords() {
    return hasDuplicateRecords;
  }

  public void setHasDuplicateRecords(@javax.annotation.Nonnull Boolean hasDuplicateRecords) {
    this.hasDuplicateRecords = hasDuplicateRecords;
  }


  public DomainDto missingRecordsMessage(@javax.annotation.Nullable String missingRecordsMessage) {
    this.missingRecordsMessage = missingRecordsMessage;
    return this;
  }

  /**
   * If the domain is missing records then show which pairs are missing.
   * @return missingRecordsMessage
   */
  @javax.annotation.Nullable
  public String getMissingRecordsMessage() {
    return missingRecordsMessage;
  }

  public void setMissingRecordsMessage(@javax.annotation.Nullable String missingRecordsMessage) {
    this.missingRecordsMessage = missingRecordsMessage;
  }


  public DomainDto hasMissingRecords(@javax.annotation.Nonnull Boolean hasMissingRecords) {
    this.hasMissingRecords = hasMissingRecords;
    return this;
  }

  /**
   * Whether the domain has missing required records. If true then see the domain in the dashboard app.
   * @return hasMissingRecords
   */
  @javax.annotation.Nonnull
  public Boolean getHasMissingRecords() {
    return hasMissingRecords;
  }

  public void setHasMissingRecords(@javax.annotation.Nonnull Boolean hasMissingRecords) {
    this.hasMissingRecords = hasMissingRecords;
  }


  public DomainDto isVerified(@javax.annotation.Nonnull Boolean isVerified) {
    this.isVerified = isVerified;
    return this;
  }

  /**
   * Whether domain has been verified or not. If the domain is not verified after 72 hours there is most likely an issue with the domains DNS records.
   * @return isVerified
   */
  @javax.annotation.Nonnull
  public Boolean getIsVerified() {
    return isVerified;
  }

  public void setIsVerified(@javax.annotation.Nonnull Boolean isVerified) {
    this.isVerified = isVerified;
  }


  public DomainDto domainNameRecords(@javax.annotation.Nonnull List<DomainNameRecord> domainNameRecords) {
    this.domainNameRecords = domainNameRecords;
    return this;
  }

  public DomainDto addDomainNameRecordsItem(DomainNameRecord domainNameRecordsItem) {
    if (this.domainNameRecords == null) {
      this.domainNameRecords = new ArrayList<>();
    }
    this.domainNameRecords.add(domainNameRecordsItem);
    return this;
  }

  /**
   * List of DNS domain name records (C, MX, TXT) etc that you must add to the DNS server associated with your domain provider.
   * @return domainNameRecords
   */
  @javax.annotation.Nonnull
  public List<DomainNameRecord> getDomainNameRecords() {
    return domainNameRecords;
  }

  public void setDomainNameRecords(@javax.annotation.Nonnull List<DomainNameRecord> domainNameRecords) {
    this.domainNameRecords = domainNameRecords;
  }


  public DomainDto catchAllInboxId(@javax.annotation.Nullable UUID catchAllInboxId) {
    this.catchAllInboxId = catchAllInboxId;
    return this;
  }

  /**
   * The optional catch all inbox that will receive emails sent to the domain that cannot be matched.
   * @return catchAllInboxId
   */
  @javax.annotation.Nullable
  public UUID getCatchAllInboxId() {
    return catchAllInboxId;
  }

  public void setCatchAllInboxId(@javax.annotation.Nullable UUID catchAllInboxId) {
    this.catchAllInboxId = catchAllInboxId;
  }


  public DomainDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DomainDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public DomainDto domainType(@javax.annotation.Nonnull DomainTypeEnum domainType) {
    this.domainType = domainType;
    return this;
  }

  /**
   * Type of domain. Dictates type of inbox that can be created with domain. HTTP means inboxes are processed using SES while SMTP inboxes use a custom SMTP mail server. SMTP does not support sending so use HTTP for sending emails.
   * @return domainType
   */
  @javax.annotation.Nonnull
  public DomainTypeEnum getDomainType() {
    return domainType;
  }

  public void setDomainType(@javax.annotation.Nonnull DomainTypeEnum domainType) {
    this.domainType = domainType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainDto domainDto = (DomainDto) o;
    return Objects.equals(this.id, domainDto.id) &&
        Objects.equals(this.userId, domainDto.userId) &&
        Objects.equals(this.domain, domainDto.domain) &&
        Objects.equals(this.verificationToken, domainDto.verificationToken) &&
        Objects.equals(this.dkimTokens, domainDto.dkimTokens) &&
        Objects.equals(this.duplicateRecordsMessage, domainDto.duplicateRecordsMessage) &&
        Objects.equals(this.hasDuplicateRecords, domainDto.hasDuplicateRecords) &&
        Objects.equals(this.missingRecordsMessage, domainDto.missingRecordsMessage) &&
        Objects.equals(this.hasMissingRecords, domainDto.hasMissingRecords) &&
        Objects.equals(this.isVerified, domainDto.isVerified) &&
        Objects.equals(this.domainNameRecords, domainDto.domainNameRecords) &&
        Objects.equals(this.catchAllInboxId, domainDto.catchAllInboxId) &&
        Objects.equals(this.createdAt, domainDto.createdAt) &&
        Objects.equals(this.updatedAt, domainDto.updatedAt) &&
        Objects.equals(this.domainType, domainDto.domainType);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, domain, verificationToken, dkimTokens, duplicateRecordsMessage, hasDuplicateRecords, missingRecordsMessage, hasMissingRecords, isVerified, domainNameRecords, catchAllInboxId, createdAt, updatedAt, domainType);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("    dkimTokens: ").append(toIndentedString(dkimTokens)).append("\n");
    sb.append("    duplicateRecordsMessage: ").append(toIndentedString(duplicateRecordsMessage)).append("\n");
    sb.append("    hasDuplicateRecords: ").append(toIndentedString(hasDuplicateRecords)).append("\n");
    sb.append("    missingRecordsMessage: ").append(toIndentedString(missingRecordsMessage)).append("\n");
    sb.append("    hasMissingRecords: ").append(toIndentedString(hasMissingRecords)).append("\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    domainNameRecords: ").append(toIndentedString(domainNameRecords)).append("\n");
    sb.append("    catchAllInboxId: ").append(toIndentedString(catchAllInboxId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    domainType: ").append(toIndentedString(domainType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("domain");
    openapiFields.add("verificationToken");
    openapiFields.add("dkimTokens");
    openapiFields.add("duplicateRecordsMessage");
    openapiFields.add("hasDuplicateRecords");
    openapiFields.add("missingRecordsMessage");
    openapiFields.add("hasMissingRecords");
    openapiFields.add("isVerified");
    openapiFields.add("domainNameRecords");
    openapiFields.add("catchAllInboxId");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("domainType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("domain");
    openapiRequiredFields.add("verificationToken");
    openapiRequiredFields.add("dkimTokens");
    openapiRequiredFields.add("hasDuplicateRecords");
    openapiRequiredFields.add("hasMissingRecords");
    openapiRequiredFields.add("isVerified");
    openapiRequiredFields.add("domainNameRecords");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("domainType");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DomainDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!DomainDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainDto is not found in the empty JSON string", DomainDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DomainDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domain").toString()));
      }
      if (!jsonObj.get("verificationToken").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verificationToken` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verificationToken").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dkimTokens") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dkimTokens").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dkimTokens` to be an array in the JSON string but got `%s`", jsonObj.get("dkimTokens").toString()));
      }
      if ((jsonObj.get("duplicateRecordsMessage") != null && !jsonObj.get("duplicateRecordsMessage").isJsonNull()) && !jsonObj.get("duplicateRecordsMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `duplicateRecordsMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("duplicateRecordsMessage").toString()));
      }
      if ((jsonObj.get("missingRecordsMessage") != null && !jsonObj.get("missingRecordsMessage").isJsonNull()) && !jsonObj.get("missingRecordsMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `missingRecordsMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("missingRecordsMessage").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("domainNameRecords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainNameRecords` to be an array in the JSON string but got `%s`", jsonObj.get("domainNameRecords").toString()));
      }

      JsonArray jsonArraydomainNameRecords = jsonObj.getAsJsonArray("domainNameRecords");
      // validate the required field `domainNameRecords` (array)
      for (int i = 0; i < jsonArraydomainNameRecords.size(); i++) {
        DomainNameRecord.validateJsonElement(jsonArraydomainNameRecords.get(i));
      };
      if ((jsonObj.get("catchAllInboxId") != null && !jsonObj.get("catchAllInboxId").isJsonNull()) && !jsonObj.get("catchAllInboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `catchAllInboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("catchAllInboxId").toString()));
      }
      if (!jsonObj.get("domainType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainType").toString()));
      }
      // validate the required field `domainType`
      DomainTypeEnum.validateJsonElement(jsonObj.get("domainType"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainDto>() {
           @Override
           public void write(JsonWriter out, DomainDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DomainDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DomainDto
   * @throws IOException if the JSON string is invalid with respect to DomainDto
   */
  public static DomainDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainDto.class);
  }

  /**
   * Convert an instance of DomainDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

