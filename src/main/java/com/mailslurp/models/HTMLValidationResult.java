/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.ValidationMessage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * HTML Validation Results
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class HTMLValidationResult {
  public static final String SERIALIZED_NAME_IS_VALID = "isValid";
  @SerializedName(SERIALIZED_NAME_IS_VALID)
  @javax.annotation.Nonnull
  private Boolean isValid;

  public static final String SERIALIZED_NAME_INFOS = "infos";
  @SerializedName(SERIALIZED_NAME_INFOS)
  @javax.annotation.Nonnull
  private List<ValidationMessage> infos = new ArrayList<>();

  public static final String SERIALIZED_NAME_ERRORS = "errors";
  @SerializedName(SERIALIZED_NAME_ERRORS)
  @javax.annotation.Nonnull
  private List<ValidationMessage> errors = new ArrayList<>();

  public static final String SERIALIZED_NAME_WARNINGS = "warnings";
  @SerializedName(SERIALIZED_NAME_WARNINGS)
  @javax.annotation.Nonnull
  private List<ValidationMessage> warnings = new ArrayList<>();

  public HTMLValidationResult() {
  }

  public HTMLValidationResult isValid(@javax.annotation.Nonnull Boolean isValid) {
    this.isValid = isValid;
    return this;
  }

  /**
   * Is HTML validation result valid
   * @return isValid
   */
  @javax.annotation.Nonnull
  public Boolean getIsValid() {
    return isValid;
  }

  public void setIsValid(@javax.annotation.Nonnull Boolean isValid) {
    this.isValid = isValid;
  }


  public HTMLValidationResult infos(@javax.annotation.Nonnull List<ValidationMessage> infos) {
    this.infos = infos;
    return this;
  }

  public HTMLValidationResult addInfosItem(ValidationMessage infosItem) {
    if (this.infos == null) {
      this.infos = new ArrayList<>();
    }
    this.infos.add(infosItem);
    return this;
  }

  /**
   * Optional infos resulting from HTML validation
   * @return infos
   */
  @javax.annotation.Nonnull
  public List<ValidationMessage> getInfos() {
    return infos;
  }

  public void setInfos(@javax.annotation.Nonnull List<ValidationMessage> infos) {
    this.infos = infos;
  }


  public HTMLValidationResult errors(@javax.annotation.Nonnull List<ValidationMessage> errors) {
    this.errors = errors;
    return this;
  }

  public HTMLValidationResult addErrorsItem(ValidationMessage errorsItem) {
    if (this.errors == null) {
      this.errors = new ArrayList<>();
    }
    this.errors.add(errorsItem);
    return this;
  }

  /**
   * Optional errors resulting from HTML validation
   * @return errors
   */
  @javax.annotation.Nonnull
  public List<ValidationMessage> getErrors() {
    return errors;
  }

  public void setErrors(@javax.annotation.Nonnull List<ValidationMessage> errors) {
    this.errors = errors;
  }


  public HTMLValidationResult warnings(@javax.annotation.Nonnull List<ValidationMessage> warnings) {
    this.warnings = warnings;
    return this;
  }

  public HTMLValidationResult addWarningsItem(ValidationMessage warningsItem) {
    if (this.warnings == null) {
      this.warnings = new ArrayList<>();
    }
    this.warnings.add(warningsItem);
    return this;
  }

  /**
   * Optional warnings resulting from HTML validation
   * @return warnings
   */
  @javax.annotation.Nonnull
  public List<ValidationMessage> getWarnings() {
    return warnings;
  }

  public void setWarnings(@javax.annotation.Nonnull List<ValidationMessage> warnings) {
    this.warnings = warnings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HTMLValidationResult htMLValidationResult = (HTMLValidationResult) o;
    return Objects.equals(this.isValid, htMLValidationResult.isValid) &&
        Objects.equals(this.infos, htMLValidationResult.infos) &&
        Objects.equals(this.errors, htMLValidationResult.errors) &&
        Objects.equals(this.warnings, htMLValidationResult.warnings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isValid, infos, errors, warnings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HTMLValidationResult {\n");
    sb.append("    isValid: ").append(toIndentedString(isValid)).append("\n");
    sb.append("    infos: ").append(toIndentedString(infos)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    warnings: ").append(toIndentedString(warnings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isValid");
    openapiFields.add("infos");
    openapiFields.add("errors");
    openapiFields.add("warnings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("isValid");
    openapiRequiredFields.add("infos");
    openapiRequiredFields.add("errors");
    openapiRequiredFields.add("warnings");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to HTMLValidationResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!HTMLValidationResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in HTMLValidationResult is not found in the empty JSON string", HTMLValidationResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!HTMLValidationResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `HTMLValidationResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : HTMLValidationResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("infos").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `infos` to be an array in the JSON string but got `%s`", jsonObj.get("infos").toString()));
      }

      JsonArray jsonArrayinfos = jsonObj.getAsJsonArray("infos");
      // validate the required field `infos` (array)
      for (int i = 0; i < jsonArrayinfos.size(); i++) {
        ValidationMessage.validateJsonElement(jsonArrayinfos.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("errors").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `errors` to be an array in the JSON string but got `%s`", jsonObj.get("errors").toString()));
      }

      JsonArray jsonArrayerrors = jsonObj.getAsJsonArray("errors");
      // validate the required field `errors` (array)
      for (int i = 0; i < jsonArrayerrors.size(); i++) {
        ValidationMessage.validateJsonElement(jsonArrayerrors.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("warnings").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `warnings` to be an array in the JSON string but got `%s`", jsonObj.get("warnings").toString()));
      }

      JsonArray jsonArraywarnings = jsonObj.getAsJsonArray("warnings");
      // validate the required field `warnings` (array)
      for (int i = 0; i < jsonArraywarnings.size(); i++) {
        ValidationMessage.validateJsonElement(jsonArraywarnings.get(i));
      };
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!HTMLValidationResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'HTMLValidationResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<HTMLValidationResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(HTMLValidationResult.class));

       return (TypeAdapter<T>) new TypeAdapter<HTMLValidationResult>() {
           @Override
           public void write(JsonWriter out, HTMLValidationResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public HTMLValidationResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of HTMLValidationResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of HTMLValidationResult
   * @throws IOException if the JSON string is invalid with respect to HTMLValidationResult
   */
  public static HTMLValidationResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, HTMLValidationResult.class);
  }

  /**
   * Convert an instance of HTMLValidationResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

