/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * CreateTotpDeviceOtpAuthUrlOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateTotpDeviceOtpAuthUrlOptions {
  public static final String SERIALIZED_NAME_OTP_AUTH_URL = "otpAuthUrl";
  @SerializedName(SERIALIZED_NAME_OTP_AUTH_URL)
  @javax.annotation.Nonnull
  private String otpAuthUrl;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  @javax.annotation.Nullable
  private String username;

  public static final String SERIALIZED_NAME_ISSUER = "issuer";
  @SerializedName(SERIALIZED_NAME_ISSUER)
  @javax.annotation.Nullable
  private String issuer;

  public static final String SERIALIZED_NAME_DIGITS = "digits";
  @SerializedName(SERIALIZED_NAME_DIGITS)
  @javax.annotation.Nullable
  private Integer digits = 6;

  public static final String SERIALIZED_NAME_PERIOD = "period";
  @SerializedName(SERIALIZED_NAME_PERIOD)
  @javax.annotation.Nullable
  private Integer period = 30;

  public static final String SERIALIZED_NAME_ALGORITHM = "algorithm";
  @SerializedName(SERIALIZED_NAME_ALGORITHM)
  @javax.annotation.Nullable
  private String algorithm;

  public CreateTotpDeviceOtpAuthUrlOptions() {
  }

  public CreateTotpDeviceOtpAuthUrlOptions otpAuthUrl(@javax.annotation.Nonnull String otpAuthUrl) {
    this.otpAuthUrl = otpAuthUrl;
    return this;
  }

  /**
   * OTP Auth URI for connecting a TOTP device.
   * @return otpAuthUrl
   */
  @javax.annotation.Nonnull
  public String getOtpAuthUrl() {
    return otpAuthUrl;
  }

  public void setOtpAuthUrl(@javax.annotation.Nonnull String otpAuthUrl) {
    this.otpAuthUrl = otpAuthUrl;
  }


  public CreateTotpDeviceOtpAuthUrlOptions name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name for labeling the TOTP device
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public CreateTotpDeviceOtpAuthUrlOptions username(@javax.annotation.Nullable String username) {
    this.username = username;
    return this;
  }

  /**
   * Optional username for the TOTP device
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(@javax.annotation.Nullable String username) {
    this.username = username;
  }


  public CreateTotpDeviceOtpAuthUrlOptions issuer(@javax.annotation.Nullable String issuer) {
    this.issuer = issuer;
    return this;
  }

  /**
   * Optional issuer override for the TOTP device
   * @return issuer
   */
  @javax.annotation.Nullable
  public String getIssuer() {
    return issuer;
  }

  public void setIssuer(@javax.annotation.Nullable String issuer) {
    this.issuer = issuer;
  }


  public CreateTotpDeviceOtpAuthUrlOptions digits(@javax.annotation.Nullable Integer digits) {
    this.digits = digits;
    return this;
  }

  /**
   * Optional number of digits in TOTP code
   * minimum: 0
   * maximum: 255
   * @return digits
   */
  @javax.annotation.Nullable
  public Integer getDigits() {
    return digits;
  }

  public void setDigits(@javax.annotation.Nullable Integer digits) {
    this.digits = digits;
  }


  public CreateTotpDeviceOtpAuthUrlOptions period(@javax.annotation.Nullable Integer period) {
    this.period = period;
    return this;
  }

  /**
   * Optional period in seconds for TOTP code expiration
   * @return period
   */
  @javax.annotation.Nullable
  public Integer getPeriod() {
    return period;
  }

  public void setPeriod(@javax.annotation.Nullable Integer period) {
    this.period = period;
  }


  public CreateTotpDeviceOtpAuthUrlOptions algorithm(@javax.annotation.Nullable String algorithm) {
    this.algorithm = algorithm;
    return this;
  }

  /**
   * Optional algorithm override
   * @return algorithm
   */
  @javax.annotation.Nullable
  public String getAlgorithm() {
    return algorithm;
  }

  public void setAlgorithm(@javax.annotation.Nullable String algorithm) {
    this.algorithm = algorithm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions = (CreateTotpDeviceOtpAuthUrlOptions) o;
    return Objects.equals(this.otpAuthUrl, createTotpDeviceOtpAuthUrlOptions.otpAuthUrl) &&
        Objects.equals(this.name, createTotpDeviceOtpAuthUrlOptions.name) &&
        Objects.equals(this.username, createTotpDeviceOtpAuthUrlOptions.username) &&
        Objects.equals(this.issuer, createTotpDeviceOtpAuthUrlOptions.issuer) &&
        Objects.equals(this.digits, createTotpDeviceOtpAuthUrlOptions.digits) &&
        Objects.equals(this.period, createTotpDeviceOtpAuthUrlOptions.period) &&
        Objects.equals(this.algorithm, createTotpDeviceOtpAuthUrlOptions.algorithm);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(otpAuthUrl, name, username, issuer, digits, period, algorithm);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTotpDeviceOtpAuthUrlOptions {\n");
    sb.append("    otpAuthUrl: ").append(toIndentedString(otpAuthUrl)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("    issuer: ").append(toIndentedString(issuer)).append("\n");
    sb.append("    digits: ").append(toIndentedString(digits)).append("\n");
    sb.append("    period: ").append(toIndentedString(period)).append("\n");
    sb.append("    algorithm: ").append(toIndentedString(algorithm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("otpAuthUrl");
    openapiFields.add("name");
    openapiFields.add("username");
    openapiFields.add("issuer");
    openapiFields.add("digits");
    openapiFields.add("period");
    openapiFields.add("algorithm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("otpAuthUrl");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTotpDeviceOtpAuthUrlOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreateTotpDeviceOtpAuthUrlOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTotpDeviceOtpAuthUrlOptions is not found in the empty JSON string", CreateTotpDeviceOtpAuthUrlOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTotpDeviceOtpAuthUrlOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTotpDeviceOtpAuthUrlOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateTotpDeviceOtpAuthUrlOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("otpAuthUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `otpAuthUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("otpAuthUrl").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
      if ((jsonObj.get("issuer") != null && !jsonObj.get("issuer").isJsonNull()) && !jsonObj.get("issuer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `issuer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("issuer").toString()));
      }
      if ((jsonObj.get("algorithm") != null && !jsonObj.get("algorithm").isJsonNull()) && !jsonObj.get("algorithm").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `algorithm` to be a primitive type in the JSON string but got `%s`", jsonObj.get("algorithm").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTotpDeviceOtpAuthUrlOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTotpDeviceOtpAuthUrlOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTotpDeviceOtpAuthUrlOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTotpDeviceOtpAuthUrlOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTotpDeviceOtpAuthUrlOptions>() {
           @Override
           public void write(JsonWriter out, CreateTotpDeviceOtpAuthUrlOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTotpDeviceOtpAuthUrlOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTotpDeviceOtpAuthUrlOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTotpDeviceOtpAuthUrlOptions
   * @throws IOException if the JSON string is invalid with respect to CreateTotpDeviceOtpAuthUrlOptions
   */
  public static CreateTotpDeviceOtpAuthUrlOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTotpDeviceOtpAuthUrlOptions.class);
  }

  /**
   * Convert an instance of CreateTotpDeviceOtpAuthUrlOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

