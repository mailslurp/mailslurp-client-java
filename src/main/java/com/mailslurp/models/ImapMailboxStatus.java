/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * ImapMailboxStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T22:36:28.488295423Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ImapMailboxStatus {
  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nonnull
  private String name;

  public static final String SERIALIZED_NAME_READ_ONLY = "readOnly";
  @SerializedName(SERIALIZED_NAME_READ_ONLY)
  @javax.annotation.Nonnull
  private Boolean readOnly;

  public static final String SERIALIZED_NAME_ITEMS = "items";
  @SerializedName(SERIALIZED_NAME_ITEMS)
  @javax.annotation.Nullable
  private Object items;

  public static final String SERIALIZED_NAME_FLAGS = "flags";
  @SerializedName(SERIALIZED_NAME_FLAGS)
  @javax.annotation.Nullable
  private List<String> flags;

  public static final String SERIALIZED_NAME_PERMANENT_FLAGS = "permanentFlags";
  @SerializedName(SERIALIZED_NAME_PERMANENT_FLAGS)
  @javax.annotation.Nullable
  private List<String> permanentFlags;

  public static final String SERIALIZED_NAME_UNSEEN_SEQ_NUM = "unseenSeqNum";
  @SerializedName(SERIALIZED_NAME_UNSEEN_SEQ_NUM)
  @javax.annotation.Nonnull
  private Long unseenSeqNum;

  public static final String SERIALIZED_NAME_MESSAGES = "messages";
  @SerializedName(SERIALIZED_NAME_MESSAGES)
  @javax.annotation.Nonnull
  private Integer messages;

  public static final String SERIALIZED_NAME_RECENT = "recent";
  @SerializedName(SERIALIZED_NAME_RECENT)
  @javax.annotation.Nonnull
  private Integer recent;

  public static final String SERIALIZED_NAME_UNSEEN = "unseen";
  @SerializedName(SERIALIZED_NAME_UNSEEN)
  @javax.annotation.Nonnull
  private Integer unseen;

  public static final String SERIALIZED_NAME_UID_NEXT = "uidNext";
  @SerializedName(SERIALIZED_NAME_UID_NEXT)
  @javax.annotation.Nonnull
  private Long uidNext;

  public static final String SERIALIZED_NAME_UID_VALIDITY = "uidValidity";
  @SerializedName(SERIALIZED_NAME_UID_VALIDITY)
  @javax.annotation.Nonnull
  private Integer uidValidity;

  public static final String SERIALIZED_NAME_APPEND_LIMIT = "appendLimit";
  @SerializedName(SERIALIZED_NAME_APPEND_LIMIT)
  @javax.annotation.Nullable
  private Integer appendLimit;

  public ImapMailboxStatus() {
  }

  public ImapMailboxStatus name(@javax.annotation.Nonnull String name) {
    this.name = name;
    return this;
  }

  /**
   * The mailbox name.
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nonnull String name) {
    this.name = name;
  }


  public ImapMailboxStatus readOnly(@javax.annotation.Nonnull Boolean readOnly) {
    this.readOnly = readOnly;
    return this;
  }

  /**
   * True if the mailbox is open in read-only mode.
   * @return readOnly
   */
  @javax.annotation.Nonnull
  public Boolean getReadOnly() {
    return readOnly;
  }

  public void setReadOnly(@javax.annotation.Nonnull Boolean readOnly) {
    this.readOnly = readOnly;
  }


  public ImapMailboxStatus items(@javax.annotation.Nullable Object items) {
    this.items = items;
    return this;
  }

  /**
   * Results map
   * @return items
   */
  @javax.annotation.Nullable
  public Object getItems() {
    return items;
  }

  public void setItems(@javax.annotation.Nullable Object items) {
    this.items = items;
  }


  public ImapMailboxStatus flags(@javax.annotation.Nullable List<String> flags) {
    this.flags = flags;
    return this;
  }

  public ImapMailboxStatus addFlagsItem(String flagsItem) {
    if (this.flags == null) {
      this.flags = new ArrayList<>();
    }
    this.flags.add(flagsItem);
    return this;
  }

  /**
   * The mailbox flags.
   * @return flags
   */
  @javax.annotation.Nullable
  public List<String> getFlags() {
    return flags;
  }

  public void setFlags(@javax.annotation.Nullable List<String> flags) {
    this.flags = flags;
  }


  public ImapMailboxStatus permanentFlags(@javax.annotation.Nullable List<String> permanentFlags) {
    this.permanentFlags = permanentFlags;
    return this;
  }

  public ImapMailboxStatus addPermanentFlagsItem(String permanentFlagsItem) {
    if (this.permanentFlags == null) {
      this.permanentFlags = new ArrayList<>();
    }
    this.permanentFlags.add(permanentFlagsItem);
    return this;
  }

  /**
   * The mailbox permanent flags.
   * @return permanentFlags
   */
  @javax.annotation.Nullable
  public List<String> getPermanentFlags() {
    return permanentFlags;
  }

  public void setPermanentFlags(@javax.annotation.Nullable List<String> permanentFlags) {
    this.permanentFlags = permanentFlags;
  }


  public ImapMailboxStatus unseenSeqNum(@javax.annotation.Nonnull Long unseenSeqNum) {
    this.unseenSeqNum = unseenSeqNum;
    return this;
  }

  /**
   * The sequence number of the first unseen message in the mailbox.
   * @return unseenSeqNum
   */
  @javax.annotation.Nonnull
  public Long getUnseenSeqNum() {
    return unseenSeqNum;
  }

  public void setUnseenSeqNum(@javax.annotation.Nonnull Long unseenSeqNum) {
    this.unseenSeqNum = unseenSeqNum;
  }


  public ImapMailboxStatus messages(@javax.annotation.Nonnull Integer messages) {
    this.messages = messages;
    return this;
  }

  /**
   * The number of messages in this mailbox.
   * @return messages
   */
  @javax.annotation.Nonnull
  public Integer getMessages() {
    return messages;
  }

  public void setMessages(@javax.annotation.Nonnull Integer messages) {
    this.messages = messages;
  }


  public ImapMailboxStatus recent(@javax.annotation.Nonnull Integer recent) {
    this.recent = recent;
    return this;
  }

  /**
   * The number of messages not seen since the last time the mailbox was opened.
   * @return recent
   */
  @javax.annotation.Nonnull
  public Integer getRecent() {
    return recent;
  }

  public void setRecent(@javax.annotation.Nonnull Integer recent) {
    this.recent = recent;
  }


  public ImapMailboxStatus unseen(@javax.annotation.Nonnull Integer unseen) {
    this.unseen = unseen;
    return this;
  }

  /**
   * The number of unread messages.
   * @return unseen
   */
  @javax.annotation.Nonnull
  public Integer getUnseen() {
    return unseen;
  }

  public void setUnseen(@javax.annotation.Nonnull Integer unseen) {
    this.unseen = unseen;
  }


  public ImapMailboxStatus uidNext(@javax.annotation.Nonnull Long uidNext) {
    this.uidNext = uidNext;
    return this;
  }

  /**
   * The next UID.
   * @return uidNext
   */
  @javax.annotation.Nonnull
  public Long getUidNext() {
    return uidNext;
  }

  public void setUidNext(@javax.annotation.Nonnull Long uidNext) {
    this.uidNext = uidNext;
  }


  public ImapMailboxStatus uidValidity(@javax.annotation.Nonnull Integer uidValidity) {
    this.uidValidity = uidValidity;
    return this;
  }

  /**
   * Together with a UID, it is a unique identifier for a message. Must be greater than or equal to 1.
   * @return uidValidity
   */
  @javax.annotation.Nonnull
  public Integer getUidValidity() {
    return uidValidity;
  }

  public void setUidValidity(@javax.annotation.Nonnull Integer uidValidity) {
    this.uidValidity = uidValidity;
  }


  public ImapMailboxStatus appendLimit(@javax.annotation.Nullable Integer appendLimit) {
    this.appendLimit = appendLimit;
    return this;
  }

  /**
   * Per-mailbox limit of message size. Set only if server supports the APPENDLIMIT extension
   * @return appendLimit
   */
  @javax.annotation.Nullable
  public Integer getAppendLimit() {
    return appendLimit;
  }

  public void setAppendLimit(@javax.annotation.Nullable Integer appendLimit) {
    this.appendLimit = appendLimit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapMailboxStatus imapMailboxStatus = (ImapMailboxStatus) o;
    return Objects.equals(this.name, imapMailboxStatus.name) &&
        Objects.equals(this.readOnly, imapMailboxStatus.readOnly) &&
        Objects.equals(this.items, imapMailboxStatus.items) &&
        Objects.equals(this.flags, imapMailboxStatus.flags) &&
        Objects.equals(this.permanentFlags, imapMailboxStatus.permanentFlags) &&
        Objects.equals(this.unseenSeqNum, imapMailboxStatus.unseenSeqNum) &&
        Objects.equals(this.messages, imapMailboxStatus.messages) &&
        Objects.equals(this.recent, imapMailboxStatus.recent) &&
        Objects.equals(this.unseen, imapMailboxStatus.unseen) &&
        Objects.equals(this.uidNext, imapMailboxStatus.uidNext) &&
        Objects.equals(this.uidValidity, imapMailboxStatus.uidValidity) &&
        Objects.equals(this.appendLimit, imapMailboxStatus.appendLimit);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(name, readOnly, items, flags, permanentFlags, unseenSeqNum, messages, recent, unseen, uidNext, uidValidity, appendLimit);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapMailboxStatus {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    readOnly: ").append(toIndentedString(readOnly)).append("\n");
    sb.append("    items: ").append(toIndentedString(items)).append("\n");
    sb.append("    flags: ").append(toIndentedString(flags)).append("\n");
    sb.append("    permanentFlags: ").append(toIndentedString(permanentFlags)).append("\n");
    sb.append("    unseenSeqNum: ").append(toIndentedString(unseenSeqNum)).append("\n");
    sb.append("    messages: ").append(toIndentedString(messages)).append("\n");
    sb.append("    recent: ").append(toIndentedString(recent)).append("\n");
    sb.append("    unseen: ").append(toIndentedString(unseen)).append("\n");
    sb.append("    uidNext: ").append(toIndentedString(uidNext)).append("\n");
    sb.append("    uidValidity: ").append(toIndentedString(uidValidity)).append("\n");
    sb.append("    appendLimit: ").append(toIndentedString(appendLimit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("name");
    openapiFields.add("readOnly");
    openapiFields.add("items");
    openapiFields.add("flags");
    openapiFields.add("permanentFlags");
    openapiFields.add("unseenSeqNum");
    openapiFields.add("messages");
    openapiFields.add("recent");
    openapiFields.add("unseen");
    openapiFields.add("uidNext");
    openapiFields.add("uidValidity");
    openapiFields.add("appendLimit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("readOnly");
    openapiRequiredFields.add("items");
    openapiRequiredFields.add("flags");
    openapiRequiredFields.add("permanentFlags");
    openapiRequiredFields.add("unseenSeqNum");
    openapiRequiredFields.add("messages");
    openapiRequiredFields.add("recent");
    openapiRequiredFields.add("unseen");
    openapiRequiredFields.add("uidNext");
    openapiRequiredFields.add("uidValidity");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImapMailboxStatus
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ImapMailboxStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapMailboxStatus is not found in the empty JSON string", ImapMailboxStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImapMailboxStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapMailboxStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImapMailboxStatus.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("flags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("flags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `flags` to be an array in the JSON string but got `%s`", jsonObj.get("flags").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("permanentFlags") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("permanentFlags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `permanentFlags` to be an array in the JSON string but got `%s`", jsonObj.get("permanentFlags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapMailboxStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapMailboxStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapMailboxStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapMailboxStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapMailboxStatus>() {
           @Override
           public void write(JsonWriter out, ImapMailboxStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapMailboxStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImapMailboxStatus given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImapMailboxStatus
   * @throws IOException if the JSON string is invalid with respect to ImapMailboxStatus
   */
  public static ImapMailboxStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapMailboxStatus.class);
  }

  /**
   * Convert an instance of ImapMailboxStatus to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

