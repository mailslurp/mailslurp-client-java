/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Access details for inbox using IMAP
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class ImapAccessDetails {
  public static final String SERIALIZED_NAME_SECURE_IMAP_SERVER_HOST = "secureImapServerHost";
  @SerializedName(SERIALIZED_NAME_SECURE_IMAP_SERVER_HOST)
  @javax.annotation.Nonnull
  private String secureImapServerHost;

  public static final String SERIALIZED_NAME_SECURE_IMAP_SERVER_PORT = "secureImapServerPort";
  @SerializedName(SERIALIZED_NAME_SECURE_IMAP_SERVER_PORT)
  @javax.annotation.Nonnull
  private Integer secureImapServerPort;

  public static final String SERIALIZED_NAME_SECURE_IMAP_USERNAME = "secureImapUsername";
  @SerializedName(SERIALIZED_NAME_SECURE_IMAP_USERNAME)
  @javax.annotation.Nonnull
  private String secureImapUsername;

  public static final String SERIALIZED_NAME_SECURE_IMAP_PASSWORD = "secureImapPassword";
  @SerializedName(SERIALIZED_NAME_SECURE_IMAP_PASSWORD)
  @javax.annotation.Nonnull
  private String secureImapPassword;

  public static final String SERIALIZED_NAME_IMAP_SERVER_HOST = "imapServerHost";
  @SerializedName(SERIALIZED_NAME_IMAP_SERVER_HOST)
  @javax.annotation.Nonnull
  private String imapServerHost;

  public static final String SERIALIZED_NAME_IMAP_SERVER_PORT = "imapServerPort";
  @SerializedName(SERIALIZED_NAME_IMAP_SERVER_PORT)
  @javax.annotation.Nonnull
  private Integer imapServerPort;

  public static final String SERIALIZED_NAME_IMAP_USERNAME = "imapUsername";
  @SerializedName(SERIALIZED_NAME_IMAP_USERNAME)
  @javax.annotation.Nonnull
  private String imapUsername;

  public static final String SERIALIZED_NAME_IMAP_PASSWORD = "imapPassword";
  @SerializedName(SERIALIZED_NAME_IMAP_PASSWORD)
  @javax.annotation.Nonnull
  private String imapPassword;

  public static final String SERIALIZED_NAME_IMAP_MAILBOX = "imapMailbox";
  @SerializedName(SERIALIZED_NAME_IMAP_MAILBOX)
  @javax.annotation.Nonnull
  private String imapMailbox;

  public ImapAccessDetails() {
  }

  public ImapAccessDetails secureImapServerHost(@javax.annotation.Nonnull String secureImapServerHost) {
    this.secureImapServerHost = secureImapServerHost;
    return this;
  }

  /**
   * Secure TLS IMAP server host domain
   * @return secureImapServerHost
   */
  @javax.annotation.Nonnull
  public String getSecureImapServerHost() {
    return secureImapServerHost;
  }

  public void setSecureImapServerHost(@javax.annotation.Nonnull String secureImapServerHost) {
    this.secureImapServerHost = secureImapServerHost;
  }


  public ImapAccessDetails secureImapServerPort(@javax.annotation.Nonnull Integer secureImapServerPort) {
    this.secureImapServerPort = secureImapServerPort;
    return this;
  }

  /**
   * Secure TLS IMAP server host port
   * @return secureImapServerPort
   */
  @javax.annotation.Nonnull
  public Integer getSecureImapServerPort() {
    return secureImapServerPort;
  }

  public void setSecureImapServerPort(@javax.annotation.Nonnull Integer secureImapServerPort) {
    this.secureImapServerPort = secureImapServerPort;
  }


  public ImapAccessDetails secureImapUsername(@javax.annotation.Nonnull String secureImapUsername) {
    this.secureImapUsername = secureImapUsername;
    return this;
  }

  /**
   * Secure TLS IMAP username for login
   * @return secureImapUsername
   */
  @javax.annotation.Nonnull
  public String getSecureImapUsername() {
    return secureImapUsername;
  }

  public void setSecureImapUsername(@javax.annotation.Nonnull String secureImapUsername) {
    this.secureImapUsername = secureImapUsername;
  }


  public ImapAccessDetails secureImapPassword(@javax.annotation.Nonnull String secureImapPassword) {
    this.secureImapPassword = secureImapPassword;
    return this;
  }

  /**
   * Secure TLS IMAP password for login
   * @return secureImapPassword
   */
  @javax.annotation.Nonnull
  public String getSecureImapPassword() {
    return secureImapPassword;
  }

  public void setSecureImapPassword(@javax.annotation.Nonnull String secureImapPassword) {
    this.secureImapPassword = secureImapPassword;
  }


  public ImapAccessDetails imapServerHost(@javax.annotation.Nonnull String imapServerHost) {
    this.imapServerHost = imapServerHost;
    return this;
  }

  /**
   * IMAP server host domain
   * @return imapServerHost
   */
  @javax.annotation.Nonnull
  public String getImapServerHost() {
    return imapServerHost;
  }

  public void setImapServerHost(@javax.annotation.Nonnull String imapServerHost) {
    this.imapServerHost = imapServerHost;
  }


  public ImapAccessDetails imapServerPort(@javax.annotation.Nonnull Integer imapServerPort) {
    this.imapServerPort = imapServerPort;
    return this;
  }

  /**
   * IMAP server host port
   * @return imapServerPort
   */
  @javax.annotation.Nonnull
  public Integer getImapServerPort() {
    return imapServerPort;
  }

  public void setImapServerPort(@javax.annotation.Nonnull Integer imapServerPort) {
    this.imapServerPort = imapServerPort;
  }


  public ImapAccessDetails imapUsername(@javax.annotation.Nonnull String imapUsername) {
    this.imapUsername = imapUsername;
    return this;
  }

  /**
   * IMAP username for login
   * @return imapUsername
   */
  @javax.annotation.Nonnull
  public String getImapUsername() {
    return imapUsername;
  }

  public void setImapUsername(@javax.annotation.Nonnull String imapUsername) {
    this.imapUsername = imapUsername;
  }


  public ImapAccessDetails imapPassword(@javax.annotation.Nonnull String imapPassword) {
    this.imapPassword = imapPassword;
    return this;
  }

  /**
   * IMAP password for login
   * @return imapPassword
   */
  @javax.annotation.Nonnull
  public String getImapPassword() {
    return imapPassword;
  }

  public void setImapPassword(@javax.annotation.Nonnull String imapPassword) {
    this.imapPassword = imapPassword;
  }


  public ImapAccessDetails imapMailbox(@javax.annotation.Nonnull String imapMailbox) {
    this.imapMailbox = imapMailbox;
    return this;
  }

  /**
   * IMAP mailbox to SELECT
   * @return imapMailbox
   */
  @javax.annotation.Nonnull
  public String getImapMailbox() {
    return imapMailbox;
  }

  public void setImapMailbox(@javax.annotation.Nonnull String imapMailbox) {
    this.imapMailbox = imapMailbox;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapAccessDetails imapAccessDetails = (ImapAccessDetails) o;
    return Objects.equals(this.secureImapServerHost, imapAccessDetails.secureImapServerHost) &&
        Objects.equals(this.secureImapServerPort, imapAccessDetails.secureImapServerPort) &&
        Objects.equals(this.secureImapUsername, imapAccessDetails.secureImapUsername) &&
        Objects.equals(this.secureImapPassword, imapAccessDetails.secureImapPassword) &&
        Objects.equals(this.imapServerHost, imapAccessDetails.imapServerHost) &&
        Objects.equals(this.imapServerPort, imapAccessDetails.imapServerPort) &&
        Objects.equals(this.imapUsername, imapAccessDetails.imapUsername) &&
        Objects.equals(this.imapPassword, imapAccessDetails.imapPassword) &&
        Objects.equals(this.imapMailbox, imapAccessDetails.imapMailbox);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secureImapServerHost, secureImapServerPort, secureImapUsername, secureImapPassword, imapServerHost, imapServerPort, imapUsername, imapPassword, imapMailbox);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapAccessDetails {\n");
    sb.append("    secureImapServerHost: ").append(toIndentedString(secureImapServerHost)).append("\n");
    sb.append("    secureImapServerPort: ").append(toIndentedString(secureImapServerPort)).append("\n");
    sb.append("    secureImapUsername: ").append(toIndentedString(secureImapUsername)).append("\n");
    sb.append("    secureImapPassword: ").append(toIndentedString(secureImapPassword)).append("\n");
    sb.append("    imapServerHost: ").append(toIndentedString(imapServerHost)).append("\n");
    sb.append("    imapServerPort: ").append(toIndentedString(imapServerPort)).append("\n");
    sb.append("    imapUsername: ").append(toIndentedString(imapUsername)).append("\n");
    sb.append("    imapPassword: ").append(toIndentedString(imapPassword)).append("\n");
    sb.append("    imapMailbox: ").append(toIndentedString(imapMailbox)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("secureImapServerHost");
    openapiFields.add("secureImapServerPort");
    openapiFields.add("secureImapUsername");
    openapiFields.add("secureImapPassword");
    openapiFields.add("imapServerHost");
    openapiFields.add("imapServerPort");
    openapiFields.add("imapUsername");
    openapiFields.add("imapPassword");
    openapiFields.add("imapMailbox");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("secureImapServerHost");
    openapiRequiredFields.add("secureImapServerPort");
    openapiRequiredFields.add("secureImapUsername");
    openapiRequiredFields.add("secureImapPassword");
    openapiRequiredFields.add("imapServerHost");
    openapiRequiredFields.add("imapServerPort");
    openapiRequiredFields.add("imapUsername");
    openapiRequiredFields.add("imapPassword");
    openapiRequiredFields.add("imapMailbox");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImapAccessDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!ImapAccessDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapAccessDetails is not found in the empty JSON string", ImapAccessDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImapAccessDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapAccessDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImapAccessDetails.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("secureImapServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureImapServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureImapServerHost").toString()));
      }
      if (!jsonObj.get("secureImapUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureImapUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureImapUsername").toString()));
      }
      if (!jsonObj.get("secureImapPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureImapPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureImapPassword").toString()));
      }
      if (!jsonObj.get("imapServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapServerHost").toString()));
      }
      if (!jsonObj.get("imapUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapUsername").toString()));
      }
      if (!jsonObj.get("imapPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapPassword").toString()));
      }
      if (!jsonObj.get("imapMailbox").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapMailbox` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapMailbox").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapAccessDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapAccessDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapAccessDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapAccessDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapAccessDetails>() {
           @Override
           public void write(JsonWriter out, ImapAccessDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapAccessDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImapAccessDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImapAccessDetails
   * @throws IOException if the JSON string is invalid with respect to ImapAccessDetails
   */
  public static ImapAccessDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapAccessDetails.class);
  }

  /**
   * Convert an instance of ImapAccessDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

