/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for creating an inbox replier. Repliers can be attached to inboxes and send automated responses when an inbound email matches given criteria.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T08:59:45.429588252Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateInboxReplierOptions {
  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  /**
   * Field to match against to trigger inbox replier for inbound email
   */
  @JsonAdapter(FieldEnum.Adapter.class)
  public enum FieldEnum {
    RECIPIENTS("RECIPIENTS"),
    
    SENDER("SENDER"),
    
    SUBJECT("SUBJECT"),
    
    ATTACHMENTS("ATTACHMENTS");

    private String value;

    FieldEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FieldEnum fromValue(String value) {
      for (FieldEnum b : FieldEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FieldEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FieldEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FieldEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FieldEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      FieldEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FIELD = "field";
  @SerializedName(SERIALIZED_NAME_FIELD)
  @javax.annotation.Nonnull
  private FieldEnum field;

  public static final String SERIALIZED_NAME_MATCH = "match";
  @SerializedName(SERIALIZED_NAME_MATCH)
  @javax.annotation.Nonnull
  private String match;

  public static final String SERIALIZED_NAME_REPLY_TO = "replyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  @javax.annotation.Nullable
  private String replyTo;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public static final String SERIALIZED_NAME_CHARSET = "charset";
  @SerializedName(SERIALIZED_NAME_CHARSET)
  @javax.annotation.Nullable
  private String charset;

  public static final String SERIALIZED_NAME_IGNORE_REPLY_TO = "ignoreReplyTo";
  @SerializedName(SERIALIZED_NAME_IGNORE_REPLY_TO)
  @javax.annotation.Nullable
  private Boolean ignoreReplyTo;

  public static final String SERIALIZED_NAME_IS_H_T_M_L = "isHTML";
  @SerializedName(SERIALIZED_NAME_IS_H_T_M_L)
  @javax.annotation.Nullable
  private Boolean isHTML;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nullable
  private String body;

  public static final String SERIALIZED_NAME_TEMPLATE_ID = "templateId";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_ID)
  @javax.annotation.Nullable
  private UUID templateId;

  public static final String SERIALIZED_NAME_TEMPLATE_VARIABLES = "templateVariables";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_VARIABLES)
  @javax.annotation.Nullable
  private Map<String, Object> templateVariables;

  public CreateInboxReplierOptions() {
  }

  public CreateInboxReplierOptions inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Inbox ID to attach replier to
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public CreateInboxReplierOptions name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name for replier
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public CreateInboxReplierOptions field(@javax.annotation.Nonnull FieldEnum field) {
    this.field = field;
    return this;
  }

  /**
   * Field to match against to trigger inbox replier for inbound email
   * @return field
   */
  @javax.annotation.Nonnull
  public FieldEnum getField() {
    return field;
  }

  public void setField(@javax.annotation.Nonnull FieldEnum field) {
    this.field = field;
  }


  public CreateInboxReplierOptions match(@javax.annotation.Nonnull String match) {
    this.match = match;
    return this;
  }

  /**
   * String or wildcard style match for field specified when evaluating reply rules. Use &#x60;*&#x60; to match anything.
   * @return match
   */
  @javax.annotation.Nonnull
  public String getMatch() {
    return match;
  }

  public void setMatch(@javax.annotation.Nonnull String match) {
    this.match = match;
  }


  public CreateInboxReplierOptions replyTo(@javax.annotation.Nullable String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

  /**
   * Reply-to email address when sending replying
   * @return replyTo
   */
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(@javax.annotation.Nullable String replyTo) {
    this.replyTo = replyTo;
  }


  public CreateInboxReplierOptions subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Subject override when replying to email
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public CreateInboxReplierOptions from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * Send email from address
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }


  public CreateInboxReplierOptions charset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
    return this;
  }

  /**
   * Email reply charset
   * @return charset
   */
  @javax.annotation.Nullable
  public String getCharset() {
    return charset;
  }

  public void setCharset(@javax.annotation.Nullable String charset) {
    this.charset = charset;
  }


  public CreateInboxReplierOptions ignoreReplyTo(@javax.annotation.Nullable Boolean ignoreReplyTo) {
    this.ignoreReplyTo = ignoreReplyTo;
    return this;
  }

  /**
   * Ignore sender replyTo when responding. Send directly to the sender if enabled.
   * @return ignoreReplyTo
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreReplyTo() {
    return ignoreReplyTo;
  }

  public void setIgnoreReplyTo(@javax.annotation.Nullable Boolean ignoreReplyTo) {
    this.ignoreReplyTo = ignoreReplyTo;
  }


  public CreateInboxReplierOptions isHTML(@javax.annotation.Nullable Boolean isHTML) {
    this.isHTML = isHTML;
    return this;
  }

  /**
   * Send HTML email
   * @return isHTML
   */
  @javax.annotation.Nullable
  public Boolean getIsHTML() {
    return isHTML;
  }

  public void setIsHTML(@javax.annotation.Nullable Boolean isHTML) {
    this.isHTML = isHTML;
  }


  public CreateInboxReplierOptions body(@javax.annotation.Nullable String body) {
    this.body = body;
    return this;
  }

  /**
   * Email body for reply
   * @return body
   */
  @javax.annotation.Nullable
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nullable String body) {
    this.body = body;
  }


  public CreateInboxReplierOptions templateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
    return this;
  }

  /**
   * ID of template to use when sending a reply
   * @return templateId
   */
  @javax.annotation.Nullable
  public UUID getTemplateId() {
    return templateId;
  }

  public void setTemplateId(@javax.annotation.Nullable UUID templateId) {
    this.templateId = templateId;
  }


  public CreateInboxReplierOptions templateVariables(@javax.annotation.Nullable Map<String, Object> templateVariables) {
    this.templateVariables = templateVariables;
    return this;
  }

  public CreateInboxReplierOptions putTemplateVariablesItem(String key, Object templateVariablesItem) {
    if (this.templateVariables == null) {
      this.templateVariables = new HashMap<>();
    }
    this.templateVariables.put(key, templateVariablesItem);
    return this;
  }

  /**
   * Template variable values
   * @return templateVariables
   */
  @javax.annotation.Nullable
  public Map<String, Object> getTemplateVariables() {
    return templateVariables;
  }

  public void setTemplateVariables(@javax.annotation.Nullable Map<String, Object> templateVariables) {
    this.templateVariables = templateVariables;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateInboxReplierOptions createInboxReplierOptions = (CreateInboxReplierOptions) o;
    return Objects.equals(this.inboxId, createInboxReplierOptions.inboxId) &&
        Objects.equals(this.name, createInboxReplierOptions.name) &&
        Objects.equals(this.field, createInboxReplierOptions.field) &&
        Objects.equals(this.match, createInboxReplierOptions.match) &&
        Objects.equals(this.replyTo, createInboxReplierOptions.replyTo) &&
        Objects.equals(this.subject, createInboxReplierOptions.subject) &&
        Objects.equals(this.from, createInboxReplierOptions.from) &&
        Objects.equals(this.charset, createInboxReplierOptions.charset) &&
        Objects.equals(this.ignoreReplyTo, createInboxReplierOptions.ignoreReplyTo) &&
        Objects.equals(this.isHTML, createInboxReplierOptions.isHTML) &&
        Objects.equals(this.body, createInboxReplierOptions.body) &&
        Objects.equals(this.templateId, createInboxReplierOptions.templateId) &&
        Objects.equals(this.templateVariables, createInboxReplierOptions.templateVariables);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxId, name, field, match, replyTo, subject, from, charset, ignoreReplyTo, isHTML, body, templateId, templateVariables);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateInboxReplierOptions {\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    field: ").append(toIndentedString(field)).append("\n");
    sb.append("    match: ").append(toIndentedString(match)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    charset: ").append(toIndentedString(charset)).append("\n");
    sb.append("    ignoreReplyTo: ").append(toIndentedString(ignoreReplyTo)).append("\n");
    sb.append("    isHTML: ").append(toIndentedString(isHTML)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    templateId: ").append(toIndentedString(templateId)).append("\n");
    sb.append("    templateVariables: ").append(toIndentedString(templateVariables)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboxId");
    openapiFields.add("name");
    openapiFields.add("field");
    openapiFields.add("match");
    openapiFields.add("replyTo");
    openapiFields.add("subject");
    openapiFields.add("from");
    openapiFields.add("charset");
    openapiFields.add("ignoreReplyTo");
    openapiFields.add("isHTML");
    openapiFields.add("body");
    openapiFields.add("templateId");
    openapiFields.add("templateVariables");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("field");
    openapiRequiredFields.add("match");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateInboxReplierOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreateInboxReplierOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateInboxReplierOptions is not found in the empty JSON string", CreateInboxReplierOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateInboxReplierOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateInboxReplierOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateInboxReplierOptions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("field").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `field` to be a primitive type in the JSON string but got `%s`", jsonObj.get("field").toString()));
      }
      // validate the required field `field`
      FieldEnum.validateJsonElement(jsonObj.get("field"));
      if (!jsonObj.get("match").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `match` to be a primitive type in the JSON string but got `%s`", jsonObj.get("match").toString()));
      }
      if ((jsonObj.get("replyTo") != null && !jsonObj.get("replyTo").isJsonNull()) && !jsonObj.get("replyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyTo").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
      if ((jsonObj.get("charset") != null && !jsonObj.get("charset").isJsonNull()) && !jsonObj.get("charset").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `charset` to be a primitive type in the JSON string but got `%s`", jsonObj.get("charset").toString()));
      }
      if ((jsonObj.get("body") != null && !jsonObj.get("body").isJsonNull()) && !jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if ((jsonObj.get("templateId") != null && !jsonObj.get("templateId").isJsonNull()) && !jsonObj.get("templateId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `templateId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("templateId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateInboxReplierOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateInboxReplierOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateInboxReplierOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateInboxReplierOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateInboxReplierOptions>() {
           @Override
           public void write(JsonWriter out, CreateInboxReplierOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateInboxReplierOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateInboxReplierOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateInboxReplierOptions
   * @throws IOException if the JSON string is invalid with respect to CreateInboxReplierOptions
   */
  public static CreateInboxReplierOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateInboxReplierOptions.class);
  }

  /**
   * Convert an instance of CreateInboxReplierOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

