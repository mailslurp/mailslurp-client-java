/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.EmailRecipientsProjection;
import com.mailslurp.models.SenderProjection;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * An email thread is a message thread created for a email based on Message-ID, In-Reply-To, and References headers
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EmailThreadProjection {
  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nullable
  private SenderProjection sender;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private EmailRecipientsProjection recipients;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  @javax.annotation.Nonnull
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_CC = "cc";
  @SerializedName(SERIALIZED_NAME_CC)
  @javax.annotation.Nullable
  private List<String> cc = new ArrayList<>();

  public static final String SERIALIZED_NAME_BCC = "bcc";
  @SerializedName(SERIALIZED_NAME_BCC)
  @javax.annotation.Nullable
  private List<String> bcc = new ArrayList<>();

  public static final String SERIALIZED_NAME_HAS_ATTACHMENTS = "hasAttachments";
  @SerializedName(SERIALIZED_NAME_HAS_ATTACHMENTS)
  @javax.annotation.Nonnull
  private Boolean hasAttachments;

  public static final String SERIALIZED_NAME_UNREAD = "unread";
  @SerializedName(SERIALIZED_NAME_UNREAD)
  @javax.annotation.Nonnull
  private Boolean unread;

  public static final String SERIALIZED_NAME_MESSAGE_COUNT = "messageCount";
  @SerializedName(SERIALIZED_NAME_MESSAGE_COUNT)
  @javax.annotation.Nonnull
  private Integer messageCount;

  public static final String SERIALIZED_NAME_LAST_BODY_EXCERPT = "lastBodyExcerpt";
  @SerializedName(SERIALIZED_NAME_LAST_BODY_EXCERPT)
  @javax.annotation.Nullable
  private String lastBodyExcerpt;

  public static final String SERIALIZED_NAME_LAST_TEXT_EXCERPT = "lastTextExcerpt";
  @SerializedName(SERIALIZED_NAME_LAST_TEXT_EXCERPT)
  @javax.annotation.Nullable
  private String lastTextExcerpt;

  public static final String SERIALIZED_NAME_LAST_CREATED_AT = "lastCreatedAt";
  @SerializedName(SERIALIZED_NAME_LAST_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime lastCreatedAt;

  public static final String SERIALIZED_NAME_LAST_FROM = "lastFrom";
  @SerializedName(SERIALIZED_NAME_LAST_FROM)
  @javax.annotation.Nullable
  private String lastFrom;

  public static final String SERIALIZED_NAME_LAST_SENDER = "lastSender";
  @SerializedName(SERIALIZED_NAME_LAST_SENDER)
  @javax.annotation.Nullable
  private SenderProjection lastSender;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  @javax.annotation.Nullable
  private String from;

  public EmailThreadProjection() {
  }

  public EmailThreadProjection subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Thread topic subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public EmailThreadProjection sender(@javax.annotation.Nullable SenderProjection sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Get sender
   * @return sender
   */
  @javax.annotation.Nullable
  public SenderProjection getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nullable SenderProjection sender) {
    this.sender = sender;
  }


  public EmailThreadProjection recipients(@javax.annotation.Nullable EmailRecipientsProjection recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public EmailRecipientsProjection getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable EmailRecipientsProjection recipients) {
    this.recipients = recipients;
  }


  public EmailThreadProjection inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Inbox ID
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public EmailThreadProjection userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public EmailThreadProjection updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Updated at DateTime
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public EmailThreadProjection createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Created at DateTime
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public EmailThreadProjection to(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
    return this;
  }

  public EmailThreadProjection addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

  /**
   * To recipients
   * @return to
   */
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }

  public void setTo(@javax.annotation.Nonnull List<String> to) {
    this.to = to;
  }


  public EmailThreadProjection cc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
    return this;
  }

  public EmailThreadProjection addCcItem(String ccItem) {
    if (this.cc == null) {
      this.cc = new ArrayList<>();
    }
    this.cc.add(ccItem);
    return this;
  }

  /**
   * CC recipients
   * @return cc
   */
  @javax.annotation.Nullable
  public List<String> getCc() {
    return cc;
  }

  public void setCc(@javax.annotation.Nullable List<String> cc) {
    this.cc = cc;
  }


  public EmailThreadProjection bcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
    return this;
  }

  public EmailThreadProjection addBccItem(String bccItem) {
    if (this.bcc == null) {
      this.bcc = new ArrayList<>();
    }
    this.bcc.add(bccItem);
    return this;
  }

  /**
   * BCC recipients
   * @return bcc
   */
  @javax.annotation.Nullable
  public List<String> getBcc() {
    return bcc;
  }

  public void setBcc(@javax.annotation.Nullable List<String> bcc) {
    this.bcc = bcc;
  }


  public EmailThreadProjection hasAttachments(@javax.annotation.Nonnull Boolean hasAttachments) {
    this.hasAttachments = hasAttachments;
    return this;
  }

  /**
   * Has attachments
   * @return hasAttachments
   */
  @javax.annotation.Nonnull
  public Boolean getHasAttachments() {
    return hasAttachments;
  }

  public void setHasAttachments(@javax.annotation.Nonnull Boolean hasAttachments) {
    this.hasAttachments = hasAttachments;
  }


  public EmailThreadProjection unread(@javax.annotation.Nonnull Boolean unread) {
    this.unread = unread;
    return this;
  }

  /**
   * Has unread
   * @return unread
   */
  @javax.annotation.Nonnull
  public Boolean getUnread() {
    return unread;
  }

  public void setUnread(@javax.annotation.Nonnull Boolean unread) {
    this.unread = unread;
  }


  public EmailThreadProjection messageCount(@javax.annotation.Nonnull Integer messageCount) {
    this.messageCount = messageCount;
    return this;
  }

  /**
   * Number of messages in the thread
   * @return messageCount
   */
  @javax.annotation.Nonnull
  public Integer getMessageCount() {
    return messageCount;
  }

  public void setMessageCount(@javax.annotation.Nonnull Integer messageCount) {
    this.messageCount = messageCount;
  }


  public EmailThreadProjection lastBodyExcerpt(@javax.annotation.Nullable String lastBodyExcerpt) {
    this.lastBodyExcerpt = lastBodyExcerpt;
    return this;
  }

  /**
   * Last body excerpt
   * @return lastBodyExcerpt
   */
  @javax.annotation.Nullable
  public String getLastBodyExcerpt() {
    return lastBodyExcerpt;
  }

  public void setLastBodyExcerpt(@javax.annotation.Nullable String lastBodyExcerpt) {
    this.lastBodyExcerpt = lastBodyExcerpt;
  }


  public EmailThreadProjection lastTextExcerpt(@javax.annotation.Nullable String lastTextExcerpt) {
    this.lastTextExcerpt = lastTextExcerpt;
    return this;
  }

  /**
   * Last text excerpt
   * @return lastTextExcerpt
   */
  @javax.annotation.Nullable
  public String getLastTextExcerpt() {
    return lastTextExcerpt;
  }

  public void setLastTextExcerpt(@javax.annotation.Nullable String lastTextExcerpt) {
    this.lastTextExcerpt = lastTextExcerpt;
  }


  public EmailThreadProjection lastCreatedAt(@javax.annotation.Nullable OffsetDateTime lastCreatedAt) {
    this.lastCreatedAt = lastCreatedAt;
    return this;
  }

  /**
   * Last email created time
   * @return lastCreatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getLastCreatedAt() {
    return lastCreatedAt;
  }

  public void setLastCreatedAt(@javax.annotation.Nullable OffsetDateTime lastCreatedAt) {
    this.lastCreatedAt = lastCreatedAt;
  }


  public EmailThreadProjection lastFrom(@javax.annotation.Nullable String lastFrom) {
    this.lastFrom = lastFrom;
    return this;
  }

  /**
   * Last sender
   * @return lastFrom
   */
  @javax.annotation.Nullable
  public String getLastFrom() {
    return lastFrom;
  }

  public void setLastFrom(@javax.annotation.Nullable String lastFrom) {
    this.lastFrom = lastFrom;
  }


  public EmailThreadProjection lastSender(@javax.annotation.Nullable SenderProjection lastSender) {
    this.lastSender = lastSender;
    return this;
  }

  /**
   * Get lastSender
   * @return lastSender
   */
  @javax.annotation.Nullable
  public SenderProjection getLastSender() {
    return lastSender;
  }

  public void setLastSender(@javax.annotation.Nullable SenderProjection lastSender) {
    this.lastSender = lastSender;
  }


  public EmailThreadProjection id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of email thread
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public EmailThreadProjection from(@javax.annotation.Nullable String from) {
    this.from = from;
    return this;
  }

  /**
   * From sender
   * @return from
   */
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(@javax.annotation.Nullable String from) {
    this.from = from;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailThreadProjection emailThreadProjection = (EmailThreadProjection) o;
    return Objects.equals(this.subject, emailThreadProjection.subject) &&
        Objects.equals(this.sender, emailThreadProjection.sender) &&
        Objects.equals(this.recipients, emailThreadProjection.recipients) &&
        Objects.equals(this.inboxId, emailThreadProjection.inboxId) &&
        Objects.equals(this.userId, emailThreadProjection.userId) &&
        Objects.equals(this.updatedAt, emailThreadProjection.updatedAt) &&
        Objects.equals(this.createdAt, emailThreadProjection.createdAt) &&
        Objects.equals(this.to, emailThreadProjection.to) &&
        Objects.equals(this.cc, emailThreadProjection.cc) &&
        Objects.equals(this.bcc, emailThreadProjection.bcc) &&
        Objects.equals(this.hasAttachments, emailThreadProjection.hasAttachments) &&
        Objects.equals(this.unread, emailThreadProjection.unread) &&
        Objects.equals(this.messageCount, emailThreadProjection.messageCount) &&
        Objects.equals(this.lastBodyExcerpt, emailThreadProjection.lastBodyExcerpt) &&
        Objects.equals(this.lastTextExcerpt, emailThreadProjection.lastTextExcerpt) &&
        Objects.equals(this.lastCreatedAt, emailThreadProjection.lastCreatedAt) &&
        Objects.equals(this.lastFrom, emailThreadProjection.lastFrom) &&
        Objects.equals(this.lastSender, emailThreadProjection.lastSender) &&
        Objects.equals(this.id, emailThreadProjection.id) &&
        Objects.equals(this.from, emailThreadProjection.from);
  }

  @Override
  public int hashCode() {
    return Objects.hash(subject, sender, recipients, inboxId, userId, updatedAt, createdAt, to, cc, bcc, hasAttachments, unread, messageCount, lastBodyExcerpt, lastTextExcerpt, lastCreatedAt, lastFrom, lastSender, id, from);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailThreadProjection {\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    cc: ").append(toIndentedString(cc)).append("\n");
    sb.append("    bcc: ").append(toIndentedString(bcc)).append("\n");
    sb.append("    hasAttachments: ").append(toIndentedString(hasAttachments)).append("\n");
    sb.append("    unread: ").append(toIndentedString(unread)).append("\n");
    sb.append("    messageCount: ").append(toIndentedString(messageCount)).append("\n");
    sb.append("    lastBodyExcerpt: ").append(toIndentedString(lastBodyExcerpt)).append("\n");
    sb.append("    lastTextExcerpt: ").append(toIndentedString(lastTextExcerpt)).append("\n");
    sb.append("    lastCreatedAt: ").append(toIndentedString(lastCreatedAt)).append("\n");
    sb.append("    lastFrom: ").append(toIndentedString(lastFrom)).append("\n");
    sb.append("    lastSender: ").append(toIndentedString(lastSender)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("subject");
    openapiFields.add("sender");
    openapiFields.add("recipients");
    openapiFields.add("inboxId");
    openapiFields.add("userId");
    openapiFields.add("updatedAt");
    openapiFields.add("createdAt");
    openapiFields.add("to");
    openapiFields.add("cc");
    openapiFields.add("bcc");
    openapiFields.add("hasAttachments");
    openapiFields.add("unread");
    openapiFields.add("messageCount");
    openapiFields.add("lastBodyExcerpt");
    openapiFields.add("lastTextExcerpt");
    openapiFields.add("lastCreatedAt");
    openapiFields.add("lastFrom");
    openapiFields.add("lastSender");
    openapiFields.add("id");
    openapiFields.add("from");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("to");
    openapiRequiredFields.add("hasAttachments");
    openapiRequiredFields.add("unread");
    openapiRequiredFields.add("messageCount");
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailThreadProjection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!EmailThreadProjection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailThreadProjection is not found in the empty JSON string", EmailThreadProjection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailThreadProjection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailThreadProjection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EmailThreadProjection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
      // validate the optional field `sender`
      if (jsonObj.get("sender") != null && !jsonObj.get("sender").isJsonNull()) {
        SenderProjection.validateJsonElement(jsonObj.get("sender"));
      }
      // validate the optional field `recipients`
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull()) {
        EmailRecipientsProjection.validateJsonElement(jsonObj.get("recipients"));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("to") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("to").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `to` to be an array in the JSON string but got `%s`", jsonObj.get("to").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("cc") != null && !jsonObj.get("cc").isJsonNull() && !jsonObj.get("cc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cc` to be an array in the JSON string but got `%s`", jsonObj.get("cc").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bcc") != null && !jsonObj.get("bcc").isJsonNull() && !jsonObj.get("bcc").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bcc` to be an array in the JSON string but got `%s`", jsonObj.get("bcc").toString()));
      }
      if ((jsonObj.get("lastBodyExcerpt") != null && !jsonObj.get("lastBodyExcerpt").isJsonNull()) && !jsonObj.get("lastBodyExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastBodyExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastBodyExcerpt").toString()));
      }
      if ((jsonObj.get("lastTextExcerpt") != null && !jsonObj.get("lastTextExcerpt").isJsonNull()) && !jsonObj.get("lastTextExcerpt").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastTextExcerpt` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastTextExcerpt").toString()));
      }
      if ((jsonObj.get("lastFrom") != null && !jsonObj.get("lastFrom").isJsonNull()) && !jsonObj.get("lastFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastFrom").toString()));
      }
      // validate the optional field `lastSender`
      if (jsonObj.get("lastSender") != null && !jsonObj.get("lastSender").isJsonNull()) {
        SenderProjection.validateJsonElement(jsonObj.get("lastSender"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) && !jsonObj.get("from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("from").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailThreadProjection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailThreadProjection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailThreadProjection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailThreadProjection.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailThreadProjection>() {
           @Override
           public void write(JsonWriter out, EmailThreadProjection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailThreadProjection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailThreadProjection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailThreadProjection
   * @throws IOException if the JSON string is invalid with respect to EmailThreadProjection
   */
  public static EmailThreadProjection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailThreadProjection.class);
  }

  /**
   * Convert an instance of EmailThreadProjection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

