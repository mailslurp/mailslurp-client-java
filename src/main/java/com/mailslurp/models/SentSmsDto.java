/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * SentSmsDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class SentSmsDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_PHONE_NUMBER = "phoneNumber";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER)
  @javax.annotation.Nonnull
  private UUID phoneNumber;

  public static final String SERIALIZED_NAME_FROM_NUMBER = "fromNumber";
  @SerializedName(SERIALIZED_NAME_FROM_NUMBER)
  @javax.annotation.Nonnull
  private String fromNumber;

  public static final String SERIALIZED_NAME_TO_NUMBER = "toNumber";
  @SerializedName(SERIALIZED_NAME_TO_NUMBER)
  @javax.annotation.Nonnull
  private String toNumber;

  public static final String SERIALIZED_NAME_BODY = "body";
  @SerializedName(SERIALIZED_NAME_BODY)
  @javax.annotation.Nonnull
  private String body;

  public static final String SERIALIZED_NAME_SID = "sid";
  @SerializedName(SERIALIZED_NAME_SID)
  @javax.annotation.Nonnull
  private String sid;

  public static final String SERIALIZED_NAME_REPLY_TO_SID = "replyToSid";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_SID)
  @javax.annotation.Nullable
  private String replyToSid;

  public static final String SERIALIZED_NAME_REPLY_TO_ID = "replyToId";
  @SerializedName(SERIALIZED_NAME_REPLY_TO_ID)
  @javax.annotation.Nullable
  private UUID replyToId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public SentSmsDto() {
  }

  public SentSmsDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public SentSmsDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public SentSmsDto phoneNumber(@javax.annotation.Nonnull UUID phoneNumber) {
    this.phoneNumber = phoneNumber;
    return this;
  }

  /**
   * Get phoneNumber
   * @return phoneNumber
   */
  @javax.annotation.Nonnull
  public UUID getPhoneNumber() {
    return phoneNumber;
  }

  public void setPhoneNumber(@javax.annotation.Nonnull UUID phoneNumber) {
    this.phoneNumber = phoneNumber;
  }


  public SentSmsDto fromNumber(@javax.annotation.Nonnull String fromNumber) {
    this.fromNumber = fromNumber;
    return this;
  }

  /**
   * Get fromNumber
   * @return fromNumber
   */
  @javax.annotation.Nonnull
  public String getFromNumber() {
    return fromNumber;
  }

  public void setFromNumber(@javax.annotation.Nonnull String fromNumber) {
    this.fromNumber = fromNumber;
  }


  public SentSmsDto toNumber(@javax.annotation.Nonnull String toNumber) {
    this.toNumber = toNumber;
    return this;
  }

  /**
   * Get toNumber
   * @return toNumber
   */
  @javax.annotation.Nonnull
  public String getToNumber() {
    return toNumber;
  }

  public void setToNumber(@javax.annotation.Nonnull String toNumber) {
    this.toNumber = toNumber;
  }


  public SentSmsDto body(@javax.annotation.Nonnull String body) {
    this.body = body;
    return this;
  }

  /**
   * Get body
   * @return body
   */
  @javax.annotation.Nonnull
  public String getBody() {
    return body;
  }

  public void setBody(@javax.annotation.Nonnull String body) {
    this.body = body;
  }


  public SentSmsDto sid(@javax.annotation.Nonnull String sid) {
    this.sid = sid;
    return this;
  }

  /**
   * Get sid
   * @return sid
   */
  @javax.annotation.Nonnull
  public String getSid() {
    return sid;
  }

  public void setSid(@javax.annotation.Nonnull String sid) {
    this.sid = sid;
  }


  public SentSmsDto replyToSid(@javax.annotation.Nullable String replyToSid) {
    this.replyToSid = replyToSid;
    return this;
  }

  /**
   * Get replyToSid
   * @return replyToSid
   */
  @javax.annotation.Nullable
  public String getReplyToSid() {
    return replyToSid;
  }

  public void setReplyToSid(@javax.annotation.Nullable String replyToSid) {
    this.replyToSid = replyToSid;
  }


  public SentSmsDto replyToId(@javax.annotation.Nullable UUID replyToId) {
    this.replyToId = replyToId;
    return this;
  }

  /**
   * Get replyToId
   * @return replyToId
   */
  @javax.annotation.Nullable
  public UUID getReplyToId() {
    return replyToId;
  }

  public void setReplyToId(@javax.annotation.Nullable UUID replyToId) {
    this.replyToId = replyToId;
  }


  public SentSmsDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public SentSmsDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SentSmsDto sentSmsDto = (SentSmsDto) o;
    return Objects.equals(this.id, sentSmsDto.id) &&
        Objects.equals(this.userId, sentSmsDto.userId) &&
        Objects.equals(this.phoneNumber, sentSmsDto.phoneNumber) &&
        Objects.equals(this.fromNumber, sentSmsDto.fromNumber) &&
        Objects.equals(this.toNumber, sentSmsDto.toNumber) &&
        Objects.equals(this.body, sentSmsDto.body) &&
        Objects.equals(this.sid, sentSmsDto.sid) &&
        Objects.equals(this.replyToSid, sentSmsDto.replyToSid) &&
        Objects.equals(this.replyToId, sentSmsDto.replyToId) &&
        Objects.equals(this.createdAt, sentSmsDto.createdAt) &&
        Objects.equals(this.updatedAt, sentSmsDto.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, phoneNumber, fromNumber, toNumber, body, sid, replyToSid, replyToId, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SentSmsDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    phoneNumber: ").append(toIndentedString(phoneNumber)).append("\n");
    sb.append("    fromNumber: ").append(toIndentedString(fromNumber)).append("\n");
    sb.append("    toNumber: ").append(toIndentedString(toNumber)).append("\n");
    sb.append("    body: ").append(toIndentedString(body)).append("\n");
    sb.append("    sid: ").append(toIndentedString(sid)).append("\n");
    sb.append("    replyToSid: ").append(toIndentedString(replyToSid)).append("\n");
    sb.append("    replyToId: ").append(toIndentedString(replyToId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("phoneNumber");
    openapiFields.add("fromNumber");
    openapiFields.add("toNumber");
    openapiFields.add("body");
    openapiFields.add("sid");
    openapiFields.add("replyToSid");
    openapiFields.add("replyToId");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("phoneNumber");
    openapiRequiredFields.add("fromNumber");
    openapiRequiredFields.add("toNumber");
    openapiRequiredFields.add("body");
    openapiRequiredFields.add("sid");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SentSmsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!SentSmsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SentSmsDto is not found in the empty JSON string", SentSmsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SentSmsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SentSmsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SentSmsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("phoneNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumber").toString()));
      }
      if (!jsonObj.get("fromNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fromNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fromNumber").toString()));
      }
      if (!jsonObj.get("toNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `toNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("toNumber").toString()));
      }
      if (!jsonObj.get("body").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `body` to be a primitive type in the JSON string but got `%s`", jsonObj.get("body").toString()));
      }
      if (!jsonObj.get("sid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sid").toString()));
      }
      if ((jsonObj.get("replyToSid") != null && !jsonObj.get("replyToSid").isJsonNull()) && !jsonObj.get("replyToSid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyToSid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyToSid").toString()));
      }
      if ((jsonObj.get("replyToId") != null && !jsonObj.get("replyToId").isJsonNull()) && !jsonObj.get("replyToId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `replyToId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("replyToId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SentSmsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SentSmsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SentSmsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SentSmsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<SentSmsDto>() {
           @Override
           public void write(JsonWriter out, SentSmsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SentSmsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SentSmsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SentSmsDto
   * @throws IOException if the JSON string is invalid with respect to SentSmsDto
   */
  public static SentSmsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SentSmsDto.class);
  }

  /**
   * Convert an instance of SentSmsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

