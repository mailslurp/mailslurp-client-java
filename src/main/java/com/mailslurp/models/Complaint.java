/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Complaint
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class Complaint {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nullable
  private UUID userId;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "eventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  @javax.annotation.Nullable
  private String eventType;

  public static final String SERIALIZED_NAME_MAIL_SOURCE = "mailSource";
  @SerializedName(SERIALIZED_NAME_MAIL_SOURCE)
  @javax.annotation.Nullable
  private String mailSource;

  public static final String SERIALIZED_NAME_MAIL_MESSAGE_ID = "mailMessageId";
  @SerializedName(SERIALIZED_NAME_MAIL_MESSAGE_ID)
  @javax.annotation.Nullable
  private String mailMessageId;

  public static final String SERIALIZED_NAME_COMPLAINT_RECIPIENT = "complaintRecipient";
  @SerializedName(SERIALIZED_NAME_COMPLAINT_RECIPIENT)
  @javax.annotation.Nonnull
  private String complaintRecipient;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public Complaint() {
  }

  public Complaint id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public Complaint userId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nullable
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nullable UUID userId) {
    this.userId = userId;
  }


  public Complaint eventType(@javax.annotation.Nullable String eventType) {
    this.eventType = eventType;
    return this;
  }

  /**
   * Get eventType
   * @return eventType
   */
  @javax.annotation.Nullable
  public String getEventType() {
    return eventType;
  }

  public void setEventType(@javax.annotation.Nullable String eventType) {
    this.eventType = eventType;
  }


  public Complaint mailSource(@javax.annotation.Nullable String mailSource) {
    this.mailSource = mailSource;
    return this;
  }

  /**
   * Get mailSource
   * @return mailSource
   */
  @javax.annotation.Nullable
  public String getMailSource() {
    return mailSource;
  }

  public void setMailSource(@javax.annotation.Nullable String mailSource) {
    this.mailSource = mailSource;
  }


  public Complaint mailMessageId(@javax.annotation.Nullable String mailMessageId) {
    this.mailMessageId = mailMessageId;
    return this;
  }

  /**
   * Get mailMessageId
   * @return mailMessageId
   */
  @javax.annotation.Nullable
  public String getMailMessageId() {
    return mailMessageId;
  }

  public void setMailMessageId(@javax.annotation.Nullable String mailMessageId) {
    this.mailMessageId = mailMessageId;
  }


  public Complaint complaintRecipient(@javax.annotation.Nonnull String complaintRecipient) {
    this.complaintRecipient = complaintRecipient;
    return this;
  }

  /**
   * Get complaintRecipient
   * @return complaintRecipient
   */
  @javax.annotation.Nonnull
  public String getComplaintRecipient() {
    return complaintRecipient;
  }

  public void setComplaintRecipient(@javax.annotation.Nonnull String complaintRecipient) {
    this.complaintRecipient = complaintRecipient;
  }


  public Complaint createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public Complaint updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Complaint complaint = (Complaint) o;
    return Objects.equals(this.id, complaint.id) &&
        Objects.equals(this.userId, complaint.userId) &&
        Objects.equals(this.eventType, complaint.eventType) &&
        Objects.equals(this.mailSource, complaint.mailSource) &&
        Objects.equals(this.mailMessageId, complaint.mailMessageId) &&
        Objects.equals(this.complaintRecipient, complaint.complaintRecipient) &&
        Objects.equals(this.createdAt, complaint.createdAt) &&
        Objects.equals(this.updatedAt, complaint.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, eventType, mailSource, mailMessageId, complaintRecipient, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Complaint {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    mailSource: ").append(toIndentedString(mailSource)).append("\n");
    sb.append("    mailMessageId: ").append(toIndentedString(mailMessageId)).append("\n");
    sb.append("    complaintRecipient: ").append(toIndentedString(complaintRecipient)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("eventType");
    openapiFields.add("mailSource");
    openapiFields.add("mailMessageId");
    openapiFields.add("complaintRecipient");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("complaintRecipient");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Complaint
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!Complaint.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Complaint is not found in the empty JSON string", Complaint.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Complaint.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Complaint` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Complaint.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("userId") != null && !jsonObj.get("userId").isJsonNull()) && !jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("eventType") != null && !jsonObj.get("eventType").isJsonNull()) && !jsonObj.get("eventType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventType").toString()));
      }
      if ((jsonObj.get("mailSource") != null && !jsonObj.get("mailSource").isJsonNull()) && !jsonObj.get("mailSource").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailSource` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailSource").toString()));
      }
      if ((jsonObj.get("mailMessageId") != null && !jsonObj.get("mailMessageId").isJsonNull()) && !jsonObj.get("mailMessageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `mailMessageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("mailMessageId").toString()));
      }
      if (!jsonObj.get("complaintRecipient").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `complaintRecipient` to be a primitive type in the JSON string but got `%s`", jsonObj.get("complaintRecipient").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Complaint.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Complaint' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Complaint> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Complaint.class));

       return (TypeAdapter<T>) new TypeAdapter<Complaint>() {
           @Override
           public void write(JsonWriter out, Complaint value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Complaint read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Complaint given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Complaint
   * @throws IOException if the JSON string is invalid with respect to Complaint
   */
  public static Complaint fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Complaint.class);
  }

  /**
   * Convert an instance of Complaint to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

