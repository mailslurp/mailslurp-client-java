/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Result of validating a list of email addresses
 */
@ApiModel(description = "Result of validating a list of email addresses")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class ValidateEmailAddressListResult {
  public static final String SERIALIZED_NAME_VALID_EMAIL_ADDRESSES = "validEmailAddresses";
  @SerializedName(SERIALIZED_NAME_VALID_EMAIL_ADDRESSES)
  private List<String> validEmailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_INVALID_EMAIL_ADDRESSES = "invalidEmailAddresses";
  @SerializedName(SERIALIZED_NAME_INVALID_EMAIL_ADDRESSES)
  private List<String> invalidEmailAddresses = new ArrayList<>();

  public static final String SERIALIZED_NAME_RESULT_MAP_EMAIL_ADDRESS_IS_VALID = "resultMapEmailAddressIsValid";
  @SerializedName(SERIALIZED_NAME_RESULT_MAP_EMAIL_ADDRESS_IS_VALID)
  private Map<String, Boolean> resultMapEmailAddressIsValid = new HashMap<>();

  public ValidateEmailAddressListResult() {
  }

  public ValidateEmailAddressListResult validEmailAddresses(List<String> validEmailAddresses) {
    
    this.validEmailAddresses = validEmailAddresses;
    return this;
  }

  public ValidateEmailAddressListResult addValidEmailAddressesItem(String validEmailAddressesItem) {
    this.validEmailAddresses.add(validEmailAddressesItem);
    return this;
  }

   /**
   * Get validEmailAddresses
   * @return validEmailAddresses
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getValidEmailAddresses() {
    return validEmailAddresses;
  }


  public void setValidEmailAddresses(List<String> validEmailAddresses) {
    this.validEmailAddresses = validEmailAddresses;
  }


  public ValidateEmailAddressListResult invalidEmailAddresses(List<String> invalidEmailAddresses) {
    
    this.invalidEmailAddresses = invalidEmailAddresses;
    return this;
  }

  public ValidateEmailAddressListResult addInvalidEmailAddressesItem(String invalidEmailAddressesItem) {
    this.invalidEmailAddresses.add(invalidEmailAddressesItem);
    return this;
  }

   /**
   * Get invalidEmailAddresses
   * @return invalidEmailAddresses
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getInvalidEmailAddresses() {
    return invalidEmailAddresses;
  }


  public void setInvalidEmailAddresses(List<String> invalidEmailAddresses) {
    this.invalidEmailAddresses = invalidEmailAddresses;
  }


  public ValidateEmailAddressListResult resultMapEmailAddressIsValid(Map<String, Boolean> resultMapEmailAddressIsValid) {
    
    this.resultMapEmailAddressIsValid = resultMapEmailAddressIsValid;
    return this;
  }

  public ValidateEmailAddressListResult putResultMapEmailAddressIsValidItem(String key, Boolean resultMapEmailAddressIsValidItem) {
    this.resultMapEmailAddressIsValid.put(key, resultMapEmailAddressIsValidItem);
    return this;
  }

   /**
   * Get resultMapEmailAddressIsValid
   * @return resultMapEmailAddressIsValid
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Map<String, Boolean> getResultMapEmailAddressIsValid() {
    return resultMapEmailAddressIsValid;
  }


  public void setResultMapEmailAddressIsValid(Map<String, Boolean> resultMapEmailAddressIsValid) {
    this.resultMapEmailAddressIsValid = resultMapEmailAddressIsValid;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateEmailAddressListResult validateEmailAddressListResult = (ValidateEmailAddressListResult) o;
    return Objects.equals(this.validEmailAddresses, validateEmailAddressListResult.validEmailAddresses) &&
        Objects.equals(this.invalidEmailAddresses, validateEmailAddressListResult.invalidEmailAddresses) &&
        Objects.equals(this.resultMapEmailAddressIsValid, validateEmailAddressListResult.resultMapEmailAddressIsValid);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validEmailAddresses, invalidEmailAddresses, resultMapEmailAddressIsValid);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateEmailAddressListResult {\n");
    sb.append("    validEmailAddresses: ").append(toIndentedString(validEmailAddresses)).append("\n");
    sb.append("    invalidEmailAddresses: ").append(toIndentedString(invalidEmailAddresses)).append("\n");
    sb.append("    resultMapEmailAddressIsValid: ").append(toIndentedString(resultMapEmailAddressIsValid)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("validEmailAddresses");
    openapiFields.add("invalidEmailAddresses");
    openapiFields.add("resultMapEmailAddressIsValid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("validEmailAddresses");
    openapiRequiredFields.add("invalidEmailAddresses");
    openapiRequiredFields.add("resultMapEmailAddressIsValid");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ValidateEmailAddressListResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ValidateEmailAddressListResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateEmailAddressListResult is not found in the empty JSON string", ValidateEmailAddressListResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ValidateEmailAddressListResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateEmailAddressListResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ValidateEmailAddressListResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the required json array is present
      if (jsonObj.get("validEmailAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("validEmailAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `validEmailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("validEmailAddresses").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("invalidEmailAddresses") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("invalidEmailAddresses").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `invalidEmailAddresses` to be an array in the JSON string but got `%s`", jsonObj.get("invalidEmailAddresses").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateEmailAddressListResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateEmailAddressListResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateEmailAddressListResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateEmailAddressListResult.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateEmailAddressListResult>() {
           @Override
           public void write(JsonWriter out, ValidateEmailAddressListResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateEmailAddressListResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ValidateEmailAddressListResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ValidateEmailAddressListResult
  * @throws IOException if the JSON string is invalid with respect to ValidateEmailAddressListResult
  */
  public static ValidateEmailAddressListResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateEmailAddressListResult.class);
  }

 /**
  * Convert an instance of ValidateEmailAddressListResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

