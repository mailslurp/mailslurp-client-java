/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

/**
 * ConnectorDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:18:57.829Z[GMT]")
public class ConnectorDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  /**
   * Gets or Sets connectorType
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    IMAP("IMAP");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private ConnectorTypeEnum connectorType;

  /**
   * Gets or Sets connectorAuthType
   */
  @JsonAdapter(ConnectorAuthTypeEnum.Adapter.class)
  public enum ConnectorAuthTypeEnum {
    PLAIN_TEXT("PLAIN_TEXT");

    private String value;

    ConnectorAuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorAuthTypeEnum fromValue(String value) {
      for (ConnectorAuthTypeEnum b : ConnectorAuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorAuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorAuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorAuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorAuthTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_AUTH_TYPE = "connectorAuthType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_AUTH_TYPE)
  private ConnectorAuthTypeEnum connectorAuthType;

  public static final String SERIALIZED_NAME_SYNC_ENABLED = "syncEnabled";
  @SerializedName(SERIALIZED_NAME_SYNC_ENABLED)
  private Boolean syncEnabled;

  /**
   * Gets or Sets syncScheduleType
   */
  @JsonAdapter(SyncScheduleTypeEnum.Adapter.class)
  public enum SyncScheduleTypeEnum {
    INTERVAL("INTERVAL");

    private String value;

    SyncScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncScheduleTypeEnum fromValue(String value) {
      for (SyncScheduleTypeEnum b : SyncScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncScheduleTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SYNC_SCHEDULE_TYPE = "syncScheduleType";
  @SerializedName(SERIALIZED_NAME_SYNC_SCHEDULE_TYPE)
  private SyncScheduleTypeEnum syncScheduleType;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "syncInterval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  private Integer syncInterval;

  public static final String SERIALIZED_NAME_IMAP_HOST = "imapHost";
  @SerializedName(SERIALIZED_NAME_IMAP_HOST)
  private String imapHost;

  public static final String SERIALIZED_NAME_IMAP_PORT = "imapPort";
  @SerializedName(SERIALIZED_NAME_IMAP_PORT)
  private Integer imapPort;

  public static final String SERIALIZED_NAME_IMAP_USERNAME = "imapUsername";
  @SerializedName(SERIALIZED_NAME_IMAP_USERNAME)
  private String imapUsername;

  public static final String SERIALIZED_NAME_IMAP_PASSWORD = "imapPassword";
  @SerializedName(SERIALIZED_NAME_IMAP_PASSWORD)
  private String imapPassword;

  public static final String SERIALIZED_NAME_IMAP_SSL = "imapSsl";
  @SerializedName(SERIALIZED_NAME_IMAP_SSL)
  private Boolean imapSsl;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;


  public ConnectorDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public ConnectorDto userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * Get userId
   * @return userId
  **/
  @ApiModelProperty(required = true, value = "")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public ConnectorDto connectorType(ConnectorTypeEnum connectorType) {
    
    this.connectorType = connectorType;
    return this;
  }

   /**
   * Get connectorType
   * @return connectorType
  **/
  @ApiModelProperty(required = true, value = "")

  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }


  public void setConnectorType(ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
  }


  public ConnectorDto connectorAuthType(ConnectorAuthTypeEnum connectorAuthType) {
    
    this.connectorAuthType = connectorAuthType;
    return this;
  }

   /**
   * Get connectorAuthType
   * @return connectorAuthType
  **/
  @ApiModelProperty(required = true, value = "")

  public ConnectorAuthTypeEnum getConnectorAuthType() {
    return connectorAuthType;
  }


  public void setConnectorAuthType(ConnectorAuthTypeEnum connectorAuthType) {
    this.connectorAuthType = connectorAuthType;
  }


  public ConnectorDto syncEnabled(Boolean syncEnabled) {
    
    this.syncEnabled = syncEnabled;
    return this;
  }

   /**
   * Get syncEnabled
   * @return syncEnabled
  **/
  @ApiModelProperty(required = true, value = "")

  public Boolean getSyncEnabled() {
    return syncEnabled;
  }


  public void setSyncEnabled(Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
  }


  public ConnectorDto syncScheduleType(SyncScheduleTypeEnum syncScheduleType) {
    
    this.syncScheduleType = syncScheduleType;
    return this;
  }

   /**
   * Get syncScheduleType
   * @return syncScheduleType
  **/
  @ApiModelProperty(required = true, value = "")

  public SyncScheduleTypeEnum getSyncScheduleType() {
    return syncScheduleType;
  }


  public void setSyncScheduleType(SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
  }


  public ConnectorDto syncInterval(Integer syncInterval) {
    
    this.syncInterval = syncInterval;
    return this;
  }

   /**
   * Get syncInterval
   * @return syncInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSyncInterval() {
    return syncInterval;
  }


  public void setSyncInterval(Integer syncInterval) {
    this.syncInterval = syncInterval;
  }


  public ConnectorDto imapHost(String imapHost) {
    
    this.imapHost = imapHost;
    return this;
  }

   /**
   * Get imapHost
   * @return imapHost
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImapHost() {
    return imapHost;
  }


  public void setImapHost(String imapHost) {
    this.imapHost = imapHost;
  }


  public ConnectorDto imapPort(Integer imapPort) {
    
    this.imapPort = imapPort;
    return this;
  }

   /**
   * Get imapPort
   * @return imapPort
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getImapPort() {
    return imapPort;
  }


  public void setImapPort(Integer imapPort) {
    this.imapPort = imapPort;
  }


  public ConnectorDto imapUsername(String imapUsername) {
    
    this.imapUsername = imapUsername;
    return this;
  }

   /**
   * Get imapUsername
   * @return imapUsername
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImapUsername() {
    return imapUsername;
  }


  public void setImapUsername(String imapUsername) {
    this.imapUsername = imapUsername;
  }


  public ConnectorDto imapPassword(String imapPassword) {
    
    this.imapPassword = imapPassword;
    return this;
  }

   /**
   * Get imapPassword
   * @return imapPassword
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getImapPassword() {
    return imapPassword;
  }


  public void setImapPassword(String imapPassword) {
    this.imapPassword = imapPassword;
  }


  public ConnectorDto imapSsl(Boolean imapSsl) {
    
    this.imapSsl = imapSsl;
    return this;
  }

   /**
   * Get imapSsl
   * @return imapSsl
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getImapSsl() {
    return imapSsl;
  }


  public void setImapSsl(Boolean imapSsl) {
    this.imapSsl = imapSsl;
  }


  public ConnectorDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConnectorDto connectorDto = (ConnectorDto) o;
    return Objects.equals(this.id, connectorDto.id) &&
        Objects.equals(this.userId, connectorDto.userId) &&
        Objects.equals(this.connectorType, connectorDto.connectorType) &&
        Objects.equals(this.connectorAuthType, connectorDto.connectorAuthType) &&
        Objects.equals(this.syncEnabled, connectorDto.syncEnabled) &&
        Objects.equals(this.syncScheduleType, connectorDto.syncScheduleType) &&
        Objects.equals(this.syncInterval, connectorDto.syncInterval) &&
        Objects.equals(this.imapHost, connectorDto.imapHost) &&
        Objects.equals(this.imapPort, connectorDto.imapPort) &&
        Objects.equals(this.imapUsername, connectorDto.imapUsername) &&
        Objects.equals(this.imapPassword, connectorDto.imapPassword) &&
        Objects.equals(this.imapSsl, connectorDto.imapSsl) &&
        Objects.equals(this.createdAt, connectorDto.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, connectorType, connectorAuthType, syncEnabled, syncScheduleType, syncInterval, imapHost, imapPort, imapUsername, imapPassword, imapSsl, createdAt);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConnectorDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorAuthType: ").append(toIndentedString(connectorAuthType)).append("\n");
    sb.append("    syncEnabled: ").append(toIndentedString(syncEnabled)).append("\n");
    sb.append("    syncScheduleType: ").append(toIndentedString(syncScheduleType)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("    imapHost: ").append(toIndentedString(imapHost)).append("\n");
    sb.append("    imapPort: ").append(toIndentedString(imapPort)).append("\n");
    sb.append("    imapUsername: ").append(toIndentedString(imapUsername)).append("\n");
    sb.append("    imapPassword: ").append(toIndentedString(imapPassword)).append("\n");
    sb.append("    imapSsl: ").append(toIndentedString(imapSsl)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

