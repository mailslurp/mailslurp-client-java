/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * BOUNCE webhook payload. Sent to your webhook url endpoint via HTTP POST when an email bounced or was rejected by a recipient. Save the recipients to a ban list on your server and avoid emailing them again. It is recommended you also listen to the BOUNCE_RECIPIENT payload.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookBouncePayload {
  public static final String SERIALIZED_NAME_MESSAGE_ID = "messageId";
  @SerializedName(SERIALIZED_NAME_MESSAGE_ID)
  @javax.annotation.Nonnull
  private String messageId;

  public static final String SERIALIZED_NAME_WEBHOOK_ID = "webhookId";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_ID)
  @javax.annotation.Nonnull
  private UUID webhookId;

  /**
   * Name of the event type webhook is being triggered for.
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_AI_TRANSFORM_RESULT("NEW_AI_TRANSFORM_RESULT"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EventNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nonnull
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_WEBHOOK_NAME = "webhookName";
  @SerializedName(SERIALIZED_NAME_WEBHOOK_NAME)
  @javax.annotation.Nullable
  private String webhookName;

  public static final String SERIALIZED_NAME_BOUNCE_ID = "bounceId";
  @SerializedName(SERIALIZED_NAME_BOUNCE_ID)
  @javax.annotation.Nonnull
  private UUID bounceId;

  public static final String SERIALIZED_NAME_SENT_TO_RECIPIENTS = "sentToRecipients";
  @SerializedName(SERIALIZED_NAME_SENT_TO_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> sentToRecipients;

  public static final String SERIALIZED_NAME_SENDER = "sender";
  @SerializedName(SERIALIZED_NAME_SENDER)
  @javax.annotation.Nonnull
  private String sender;

  public static final String SERIALIZED_NAME_BOUNCE_RECIPIENTS = "bounceRecipients";
  @SerializedName(SERIALIZED_NAME_BOUNCE_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> bounceRecipients;

  public WebhookBouncePayload() {
  }

  public WebhookBouncePayload messageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
    return this;
  }

  /**
   * Idempotent message ID. Store this ID locally or in a database to prevent message duplication.
   * @return messageId
   */
  @javax.annotation.Nonnull
  public String getMessageId() {
    return messageId;
  }

  public void setMessageId(@javax.annotation.Nonnull String messageId) {
    this.messageId = messageId;
  }


  public WebhookBouncePayload webhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
    return this;
  }

  /**
   * ID of webhook entity being triggered
   * @return webhookId
   */
  @javax.annotation.Nonnull
  public UUID getWebhookId() {
    return webhookId;
  }

  public void setWebhookId(@javax.annotation.Nonnull UUID webhookId) {
    this.webhookId = webhookId;
  }


  public WebhookBouncePayload eventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Name of the event type webhook is being triggered for.
   * @return eventName
   */
  @javax.annotation.Nonnull
  public EventNameEnum getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nonnull EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookBouncePayload webhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
    return this;
  }

  /**
   * Name of the webhook being triggered
   * @return webhookName
   */
  @javax.annotation.Nullable
  public String getWebhookName() {
    return webhookName;
  }

  public void setWebhookName(@javax.annotation.Nullable String webhookName) {
    this.webhookName = webhookName;
  }


  public WebhookBouncePayload bounceId(@javax.annotation.Nonnull UUID bounceId) {
    this.bounceId = bounceId;
    return this;
  }

  /**
   * ID of the bounce email record. Use the ID with the bounce controller to view more information
   * @return bounceId
   */
  @javax.annotation.Nonnull
  public UUID getBounceId() {
    return bounceId;
  }

  public void setBounceId(@javax.annotation.Nonnull UUID bounceId) {
    this.bounceId = bounceId;
  }


  public WebhookBouncePayload sentToRecipients(@javax.annotation.Nullable List<String> sentToRecipients) {
    this.sentToRecipients = sentToRecipients;
    return this;
  }

  public WebhookBouncePayload addSentToRecipientsItem(String sentToRecipientsItem) {
    if (this.sentToRecipients == null) {
      this.sentToRecipients = new ArrayList<>();
    }
    this.sentToRecipients.add(sentToRecipientsItem);
    return this;
  }

  /**
   * Email sent to recipients
   * @return sentToRecipients
   */
  @javax.annotation.Nullable
  public List<String> getSentToRecipients() {
    return sentToRecipients;
  }

  public void setSentToRecipients(@javax.annotation.Nullable List<String> sentToRecipients) {
    this.sentToRecipients = sentToRecipients;
  }


  public WebhookBouncePayload sender(@javax.annotation.Nonnull String sender) {
    this.sender = sender;
    return this;
  }

  /**
   * Sender causing bounce
   * @return sender
   */
  @javax.annotation.Nonnull
  public String getSender() {
    return sender;
  }

  public void setSender(@javax.annotation.Nonnull String sender) {
    this.sender = sender;
  }


  public WebhookBouncePayload bounceRecipients(@javax.annotation.Nullable List<String> bounceRecipients) {
    this.bounceRecipients = bounceRecipients;
    return this;
  }

  public WebhookBouncePayload addBounceRecipientsItem(String bounceRecipientsItem) {
    if (this.bounceRecipients == null) {
      this.bounceRecipients = new ArrayList<>();
    }
    this.bounceRecipients.add(bounceRecipientsItem);
    return this;
  }

  /**
   * Email addresses that resulted in a bounce or email being rejected. Please save these recipients and avoid emailing them in the future to maintain your reputation.
   * @return bounceRecipients
   */
  @javax.annotation.Nullable
  public List<String> getBounceRecipients() {
    return bounceRecipients;
  }

  public void setBounceRecipients(@javax.annotation.Nullable List<String> bounceRecipients) {
    this.bounceRecipients = bounceRecipients;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookBouncePayload webhookBouncePayload = (WebhookBouncePayload) o;
    return Objects.equals(this.messageId, webhookBouncePayload.messageId) &&
        Objects.equals(this.webhookId, webhookBouncePayload.webhookId) &&
        Objects.equals(this.eventName, webhookBouncePayload.eventName) &&
        Objects.equals(this.webhookName, webhookBouncePayload.webhookName) &&
        Objects.equals(this.bounceId, webhookBouncePayload.bounceId) &&
        Objects.equals(this.sentToRecipients, webhookBouncePayload.sentToRecipients) &&
        Objects.equals(this.sender, webhookBouncePayload.sender) &&
        Objects.equals(this.bounceRecipients, webhookBouncePayload.bounceRecipients);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(messageId, webhookId, eventName, webhookName, bounceId, sentToRecipients, sender, bounceRecipients);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookBouncePayload {\n");
    sb.append("    messageId: ").append(toIndentedString(messageId)).append("\n");
    sb.append("    webhookId: ").append(toIndentedString(webhookId)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    webhookName: ").append(toIndentedString(webhookName)).append("\n");
    sb.append("    bounceId: ").append(toIndentedString(bounceId)).append("\n");
    sb.append("    sentToRecipients: ").append(toIndentedString(sentToRecipients)).append("\n");
    sb.append("    sender: ").append(toIndentedString(sender)).append("\n");
    sb.append("    bounceRecipients: ").append(toIndentedString(bounceRecipients)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("messageId");
    openapiFields.add("webhookId");
    openapiFields.add("eventName");
    openapiFields.add("webhookName");
    openapiFields.add("bounceId");
    openapiFields.add("sentToRecipients");
    openapiFields.add("sender");
    openapiFields.add("bounceRecipients");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("messageId");
    openapiRequiredFields.add("webhookId");
    openapiRequiredFields.add("eventName");
    openapiRequiredFields.add("bounceId");
    openapiRequiredFields.add("sender");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookBouncePayload
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookBouncePayload.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookBouncePayload is not found in the empty JSON string", WebhookBouncePayload.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookBouncePayload.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookBouncePayload` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookBouncePayload.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("messageId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `messageId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("messageId").toString()));
      }
      if (!jsonObj.get("webhookId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookId").toString()));
      }
      if (!jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the required field `eventName`
      EventNameEnum.validateJsonElement(jsonObj.get("eventName"));
      if ((jsonObj.get("webhookName") != null && !jsonObj.get("webhookName").isJsonNull()) && !jsonObj.get("webhookName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `webhookName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("webhookName").toString()));
      }
      if (!jsonObj.get("bounceId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounceId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bounceId").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sentToRecipients") != null && !jsonObj.get("sentToRecipients").isJsonNull() && !jsonObj.get("sentToRecipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentToRecipients` to be an array in the JSON string but got `%s`", jsonObj.get("sentToRecipients").toString()));
      }
      if (!jsonObj.get("sender").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sender` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sender").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bounceRecipients") != null && !jsonObj.get("bounceRecipients").isJsonNull() && !jsonObj.get("bounceRecipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounceRecipients` to be an array in the JSON string but got `%s`", jsonObj.get("bounceRecipients").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookBouncePayload.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookBouncePayload' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookBouncePayload> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookBouncePayload.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookBouncePayload>() {
           @Override
           public void write(JsonWriter out, WebhookBouncePayload value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookBouncePayload read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookBouncePayload given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookBouncePayload
   * @throws IOException if the JSON string is invalid with respect to WebhookBouncePayload
   */
  public static WebhookBouncePayload fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookBouncePayload.class);
  }

  /**
   * Convert an instance of WebhookBouncePayload to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

