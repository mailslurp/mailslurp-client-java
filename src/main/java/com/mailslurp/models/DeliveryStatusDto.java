/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * DeliveryStatusDto
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T22:03:04.172026956Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class DeliveryStatusDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_SENT_ID = "sentId";
  @SerializedName(SERIALIZED_NAME_SENT_ID)
  @javax.annotation.Nullable
  private UUID sentId;

  public static final String SERIALIZED_NAME_REMOTE_MTA_IP = "remoteMtaIp";
  @SerializedName(SERIALIZED_NAME_REMOTE_MTA_IP)
  @javax.annotation.Nullable
  private String remoteMtaIp;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_REPORTING_MTA = "reportingMta";
  @SerializedName(SERIALIZED_NAME_REPORTING_MTA)
  @javax.annotation.Nullable
  private String reportingMta;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  @javax.annotation.Nullable
  private List<String> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_SMTP_RESPONSE = "smtpResponse";
  @SerializedName(SERIALIZED_NAME_SMTP_RESPONSE)
  @javax.annotation.Nullable
  private String smtpResponse;

  public static final String SERIALIZED_NAME_SMTP_STATUS_CODE = "smtpStatusCode";
  @SerializedName(SERIALIZED_NAME_SMTP_STATUS_CODE)
  @javax.annotation.Nullable
  private Integer smtpStatusCode;

  public static final String SERIALIZED_NAME_PROCESSING_TIME_MILLIS = "processingTimeMillis";
  @SerializedName(SERIALIZED_NAME_PROCESSING_TIME_MILLIS)
  @javax.annotation.Nullable
  private Long processingTimeMillis;

  public static final String SERIALIZED_NAME_RECEIVED = "received";
  @SerializedName(SERIALIZED_NAME_RECEIVED)
  @javax.annotation.Nullable
  private OffsetDateTime received;

  public static final String SERIALIZED_NAME_SUBJECT = "subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  @javax.annotation.Nullable
  private String subject;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public DeliveryStatusDto() {
  }

  public DeliveryStatusDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public DeliveryStatusDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public DeliveryStatusDto sentId(@javax.annotation.Nullable UUID sentId) {
    this.sentId = sentId;
    return this;
  }

  /**
   * Get sentId
   * @return sentId
   */
  @javax.annotation.Nullable
  public UUID getSentId() {
    return sentId;
  }

  public void setSentId(@javax.annotation.Nullable UUID sentId) {
    this.sentId = sentId;
  }


  public DeliveryStatusDto remoteMtaIp(@javax.annotation.Nullable String remoteMtaIp) {
    this.remoteMtaIp = remoteMtaIp;
    return this;
  }

  /**
   * Get remoteMtaIp
   * @return remoteMtaIp
   */
  @javax.annotation.Nullable
  public String getRemoteMtaIp() {
    return remoteMtaIp;
  }

  public void setRemoteMtaIp(@javax.annotation.Nullable String remoteMtaIp) {
    this.remoteMtaIp = remoteMtaIp;
  }


  public DeliveryStatusDto inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Get inboxId
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public DeliveryStatusDto reportingMta(@javax.annotation.Nullable String reportingMta) {
    this.reportingMta = reportingMta;
    return this;
  }

  /**
   * Get reportingMta
   * @return reportingMta
   */
  @javax.annotation.Nullable
  public String getReportingMta() {
    return reportingMta;
  }

  public void setReportingMta(@javax.annotation.Nullable String reportingMta) {
    this.reportingMta = reportingMta;
  }


  public DeliveryStatusDto recipients(@javax.annotation.Nullable List<String> recipients) {
    this.recipients = recipients;
    return this;
  }

  public DeliveryStatusDto addRecipientsItem(String recipientsItem) {
    if (this.recipients == null) {
      this.recipients = new ArrayList<>();
    }
    this.recipients.add(recipientsItem);
    return this;
  }

  /**
   * Get recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public List<String> getRecipients() {
    return recipients;
  }

  public void setRecipients(@javax.annotation.Nullable List<String> recipients) {
    this.recipients = recipients;
  }


  public DeliveryStatusDto smtpResponse(@javax.annotation.Nullable String smtpResponse) {
    this.smtpResponse = smtpResponse;
    return this;
  }

  /**
   * Get smtpResponse
   * @return smtpResponse
   */
  @javax.annotation.Nullable
  public String getSmtpResponse() {
    return smtpResponse;
  }

  public void setSmtpResponse(@javax.annotation.Nullable String smtpResponse) {
    this.smtpResponse = smtpResponse;
  }


  public DeliveryStatusDto smtpStatusCode(@javax.annotation.Nullable Integer smtpStatusCode) {
    this.smtpStatusCode = smtpStatusCode;
    return this;
  }

  /**
   * Get smtpStatusCode
   * @return smtpStatusCode
   */
  @javax.annotation.Nullable
  public Integer getSmtpStatusCode() {
    return smtpStatusCode;
  }

  public void setSmtpStatusCode(@javax.annotation.Nullable Integer smtpStatusCode) {
    this.smtpStatusCode = smtpStatusCode;
  }


  public DeliveryStatusDto processingTimeMillis(@javax.annotation.Nullable Long processingTimeMillis) {
    this.processingTimeMillis = processingTimeMillis;
    return this;
  }

  /**
   * Get processingTimeMillis
   * @return processingTimeMillis
   */
  @javax.annotation.Nullable
  public Long getProcessingTimeMillis() {
    return processingTimeMillis;
  }

  public void setProcessingTimeMillis(@javax.annotation.Nullable Long processingTimeMillis) {
    this.processingTimeMillis = processingTimeMillis;
  }


  public DeliveryStatusDto received(@javax.annotation.Nullable OffsetDateTime received) {
    this.received = received;
    return this;
  }

  /**
   * Get received
   * @return received
   */
  @javax.annotation.Nullable
  public OffsetDateTime getReceived() {
    return received;
  }

  public void setReceived(@javax.annotation.Nullable OffsetDateTime received) {
    this.received = received;
  }


  public DeliveryStatusDto subject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
    return this;
  }

  /**
   * Get subject
   * @return subject
   */
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(@javax.annotation.Nullable String subject) {
    this.subject = subject;
  }


  public DeliveryStatusDto createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public DeliveryStatusDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DeliveryStatusDto deliveryStatusDto = (DeliveryStatusDto) o;
    return Objects.equals(this.id, deliveryStatusDto.id) &&
        Objects.equals(this.userId, deliveryStatusDto.userId) &&
        Objects.equals(this.sentId, deliveryStatusDto.sentId) &&
        Objects.equals(this.remoteMtaIp, deliveryStatusDto.remoteMtaIp) &&
        Objects.equals(this.inboxId, deliveryStatusDto.inboxId) &&
        Objects.equals(this.reportingMta, deliveryStatusDto.reportingMta) &&
        Objects.equals(this.recipients, deliveryStatusDto.recipients) &&
        Objects.equals(this.smtpResponse, deliveryStatusDto.smtpResponse) &&
        Objects.equals(this.smtpStatusCode, deliveryStatusDto.smtpStatusCode) &&
        Objects.equals(this.processingTimeMillis, deliveryStatusDto.processingTimeMillis) &&
        Objects.equals(this.received, deliveryStatusDto.received) &&
        Objects.equals(this.subject, deliveryStatusDto.subject) &&
        Objects.equals(this.createdAt, deliveryStatusDto.createdAt) &&
        Objects.equals(this.updatedAt, deliveryStatusDto.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, sentId, remoteMtaIp, inboxId, reportingMta, recipients, smtpResponse, smtpStatusCode, processingTimeMillis, received, subject, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DeliveryStatusDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    sentId: ").append(toIndentedString(sentId)).append("\n");
    sb.append("    remoteMtaIp: ").append(toIndentedString(remoteMtaIp)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    reportingMta: ").append(toIndentedString(reportingMta)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    smtpResponse: ").append(toIndentedString(smtpResponse)).append("\n");
    sb.append("    smtpStatusCode: ").append(toIndentedString(smtpStatusCode)).append("\n");
    sb.append("    processingTimeMillis: ").append(toIndentedString(processingTimeMillis)).append("\n");
    sb.append("    received: ").append(toIndentedString(received)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("sentId");
    openapiFields.add("remoteMtaIp");
    openapiFields.add("inboxId");
    openapiFields.add("reportingMta");
    openapiFields.add("recipients");
    openapiFields.add("smtpResponse");
    openapiFields.add("smtpStatusCode");
    openapiFields.add("processingTimeMillis");
    openapiFields.add("received");
    openapiFields.add("subject");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DeliveryStatusDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!DeliveryStatusDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DeliveryStatusDto is not found in the empty JSON string", DeliveryStatusDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DeliveryStatusDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DeliveryStatusDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DeliveryStatusDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("sentId") != null && !jsonObj.get("sentId").isJsonNull()) && !jsonObj.get("sentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sentId").toString()));
      }
      if ((jsonObj.get("remoteMtaIp") != null && !jsonObj.get("remoteMtaIp").isJsonNull()) && !jsonObj.get("remoteMtaIp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `remoteMtaIp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("remoteMtaIp").toString()));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("reportingMta") != null && !jsonObj.get("reportingMta").isJsonNull()) && !jsonObj.get("reportingMta").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `reportingMta` to be a primitive type in the JSON string but got `%s`", jsonObj.get("reportingMta").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("recipients") != null && !jsonObj.get("recipients").isJsonNull() && !jsonObj.get("recipients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `recipients` to be an array in the JSON string but got `%s`", jsonObj.get("recipients").toString()));
      }
      if ((jsonObj.get("smtpResponse") != null && !jsonObj.get("smtpResponse").isJsonNull()) && !jsonObj.get("smtpResponse").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpResponse` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpResponse").toString()));
      }
      if ((jsonObj.get("subject") != null && !jsonObj.get("subject").isJsonNull()) && !jsonObj.get("subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subject").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DeliveryStatusDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DeliveryStatusDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DeliveryStatusDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DeliveryStatusDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DeliveryStatusDto>() {
           @Override
           public void write(JsonWriter out, DeliveryStatusDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DeliveryStatusDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DeliveryStatusDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DeliveryStatusDto
   * @throws IOException if the JSON string is invalid with respect to DeliveryStatusDto
   */
  public static DeliveryStatusDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DeliveryStatusDto.class);
  }

  /**
   * Convert an instance of DeliveryStatusDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

