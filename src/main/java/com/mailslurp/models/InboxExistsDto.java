/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Result of email exists query
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-08-13T10:16:48.017348019Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class InboxExistsDto {
  public static final String SERIALIZED_NAME_EXISTS = "exists";
  @SerializedName(SERIALIZED_NAME_EXISTS)
  @javax.annotation.Nonnull
  private Boolean exists;

  public static final String SERIALIZED_NAME_SOFT_BOUNCE = "softBounce";
  @SerializedName(SERIALIZED_NAME_SOFT_BOUNCE)
  @javax.annotation.Nullable
  private Boolean softBounce;

  public static final String SERIALIZED_NAME_HARD_BOUNCE = "hardBounce";
  @SerializedName(SERIALIZED_NAME_HARD_BOUNCE)
  @javax.annotation.Nullable
  private Boolean hardBounce;

  public InboxExistsDto() {
  }

  public InboxExistsDto exists(@javax.annotation.Nonnull Boolean exists) {
    this.exists = exists;
    return this;
  }

  /**
   * Get exists
   * @return exists
   */
  @javax.annotation.Nonnull
  public Boolean getExists() {
    return exists;
  }

  public void setExists(@javax.annotation.Nonnull Boolean exists) {
    this.exists = exists;
  }


  public InboxExistsDto softBounce(@javax.annotation.Nullable Boolean softBounce) {
    this.softBounce = softBounce;
    return this;
  }

  /**
   * Inbox is full or simulating a soft bounce via inbox replier or rulesets
   * @return softBounce
   */
  @javax.annotation.Nullable
  public Boolean getSoftBounce() {
    return softBounce;
  }

  public void setSoftBounce(@javax.annotation.Nullable Boolean softBounce) {
    this.softBounce = softBounce;
  }


  public InboxExistsDto hardBounce(@javax.annotation.Nullable Boolean hardBounce) {
    this.hardBounce = hardBounce;
    return this;
  }

  /**
   * Inbox is blocking receiving emails or simulating a hard bounce via inbox replier or rulesets
   * @return hardBounce
   */
  @javax.annotation.Nullable
  public Boolean getHardBounce() {
    return hardBounce;
  }

  public void setHardBounce(@javax.annotation.Nullable Boolean hardBounce) {
    this.hardBounce = hardBounce;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboxExistsDto inboxExistsDto = (InboxExistsDto) o;
    return Objects.equals(this.exists, inboxExistsDto.exists) &&
        Objects.equals(this.softBounce, inboxExistsDto.softBounce) &&
        Objects.equals(this.hardBounce, inboxExistsDto.hardBounce);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(exists, softBounce, hardBounce);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboxExistsDto {\n");
    sb.append("    exists: ").append(toIndentedString(exists)).append("\n");
    sb.append("    softBounce: ").append(toIndentedString(softBounce)).append("\n");
    sb.append("    hardBounce: ").append(toIndentedString(hardBounce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exists");
    openapiFields.add("softBounce");
    openapiFields.add("hardBounce");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("exists");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InboxExistsDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!InboxExistsDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboxExistsDto is not found in the empty JSON string", InboxExistsDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboxExistsDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboxExistsDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InboxExistsDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboxExistsDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboxExistsDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboxExistsDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboxExistsDto.class));

       return (TypeAdapter<T>) new TypeAdapter<InboxExistsDto>() {
           @Override
           public void write(JsonWriter out, InboxExistsDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboxExistsDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InboxExistsDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InboxExistsDto
   * @throws IOException if the JSON string is invalid with respect to InboxExistsDto
   */
  public static InboxExistsDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboxExistsDto.class);
  }

  /**
   * Convert an instance of InboxExistsDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

