/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * SearchEmailsOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class SearchEmailsOptions {
  public static final String SERIALIZED_NAME_INBOX_IDS = "inboxIds";
  @SerializedName(SERIALIZED_NAME_INBOX_IDS)
  @javax.annotation.Nullable
  private List<UUID> inboxIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_PAGE_INDEX = "pageIndex";
  @SerializedName(SERIALIZED_NAME_PAGE_INDEX)
  @javax.annotation.Nullable
  private Integer pageIndex;

  public static final String SERIALIZED_NAME_PAGE_SIZE = "pageSize";
  @SerializedName(SERIALIZED_NAME_PAGE_SIZE)
  @javax.annotation.Nullable
  private Integer pageSize;

  /**
   * Optional createdAt sort direction ASC or DESC
   */
  @JsonAdapter(SortDirectionEnum.Adapter.class)
  public enum SortDirectionEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortDirectionEnum fromValue(String value) {
      for (SortDirectionEnum b : SortDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SortDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SortDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  @javax.annotation.Nullable
  private SortDirectionEnum sortDirection;

  public static final String SERIALIZED_NAME_UNREAD_ONLY = "unreadOnly";
  @SerializedName(SERIALIZED_NAME_UNREAD_ONLY)
  @javax.annotation.Nullable
  private Boolean unreadOnly;

  public static final String SERIALIZED_NAME_SEARCH_FILTER = "searchFilter";
  @SerializedName(SERIALIZED_NAME_SEARCH_FILTER)
  @javax.annotation.Nullable
  private String searchFilter;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  @javax.annotation.Nullable
  private OffsetDateTime since;

  public static final String SERIALIZED_NAME_BEFORE = "before";
  @SerializedName(SERIALIZED_NAME_BEFORE)
  @javax.annotation.Nullable
  private OffsetDateTime before;

  public SearchEmailsOptions() {
  }

  public SearchEmailsOptions inboxIds(@javax.annotation.Nullable List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
    return this;
  }

  public SearchEmailsOptions addInboxIdsItem(UUID inboxIdsItem) {
    if (this.inboxIds == null) {
      this.inboxIds = new ArrayList<>();
    }
    this.inboxIds.add(inboxIdsItem);
    return this;
  }

  /**
   * Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account.
   * @return inboxIds
   */
  @javax.annotation.Nullable
  public List<UUID> getInboxIds() {
    return inboxIds;
  }

  public void setInboxIds(@javax.annotation.Nullable List<UUID> inboxIds) {
    this.inboxIds = inboxIds;
  }


  public SearchEmailsOptions pageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
    return this;
  }

  /**
   * Optional page index in email list pagination
   * @return pageIndex
   */
  @javax.annotation.Nullable
  public Integer getPageIndex() {
    return pageIndex;
  }

  public void setPageIndex(@javax.annotation.Nullable Integer pageIndex) {
    this.pageIndex = pageIndex;
  }


  public SearchEmailsOptions pageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
    return this;
  }

  /**
   * Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results
   * maximum: 100
   * @return pageSize
   */
  @javax.annotation.Nullable
  public Integer getPageSize() {
    return pageSize;
  }

  public void setPageSize(@javax.annotation.Nullable Integer pageSize) {
    this.pageSize = pageSize;
  }


  public SearchEmailsOptions sortDirection(@javax.annotation.Nullable SortDirectionEnum sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  /**
   * Optional createdAt sort direction ASC or DESC
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public SortDirectionEnum getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(@javax.annotation.Nullable SortDirectionEnum sortDirection) {
    this.sortDirection = sortDirection;
  }


  public SearchEmailsOptions unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
    this.unreadOnly = unreadOnly;
    return this;
  }

  /**
   * Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly
   * @return unreadOnly
   */
  @javax.annotation.Nullable
  public Boolean getUnreadOnly() {
    return unreadOnly;
  }

  public void setUnreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
    this.unreadOnly = unreadOnly;
  }


  public SearchEmailsOptions searchFilter(@javax.annotation.Nullable String searchFilter) {
    this.searchFilter = searchFilter;
    return this;
  }

  /**
   * Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body
   * @return searchFilter
   */
  @javax.annotation.Nullable
  public String getSearchFilter() {
    return searchFilter;
  }

  public void setSearchFilter(@javax.annotation.Nullable String searchFilter) {
    this.searchFilter = searchFilter;
  }


  public SearchEmailsOptions since(@javax.annotation.Nullable OffsetDateTime since) {
    this.since = since;
    return this;
  }

  /**
   * Optional filter emails received after given date time
   * @return since
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSince() {
    return since;
  }

  public void setSince(@javax.annotation.Nullable OffsetDateTime since) {
    this.since = since;
  }


  public SearchEmailsOptions before(@javax.annotation.Nullable OffsetDateTime before) {
    this.before = before;
    return this;
  }

  /**
   * Optional filter emails received before given date time
   * @return before
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBefore() {
    return before;
  }

  public void setBefore(@javax.annotation.Nullable OffsetDateTime before) {
    this.before = before;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchEmailsOptions searchEmailsOptions = (SearchEmailsOptions) o;
    return Objects.equals(this.inboxIds, searchEmailsOptions.inboxIds) &&
        Objects.equals(this.pageIndex, searchEmailsOptions.pageIndex) &&
        Objects.equals(this.pageSize, searchEmailsOptions.pageSize) &&
        Objects.equals(this.sortDirection, searchEmailsOptions.sortDirection) &&
        Objects.equals(this.unreadOnly, searchEmailsOptions.unreadOnly) &&
        Objects.equals(this.searchFilter, searchEmailsOptions.searchFilter) &&
        Objects.equals(this.since, searchEmailsOptions.since) &&
        Objects.equals(this.before, searchEmailsOptions.before);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inboxIds, pageIndex, pageSize, sortDirection, unreadOnly, searchFilter, since, before);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchEmailsOptions {\n");
    sb.append("    inboxIds: ").append(toIndentedString(inboxIds)).append("\n");
    sb.append("    pageIndex: ").append(toIndentedString(pageIndex)).append("\n");
    sb.append("    pageSize: ").append(toIndentedString(pageSize)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    unreadOnly: ").append(toIndentedString(unreadOnly)).append("\n");
    sb.append("    searchFilter: ").append(toIndentedString(searchFilter)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    before: ").append(toIndentedString(before)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("inboxIds");
    openapiFields.add("pageIndex");
    openapiFields.add("pageSize");
    openapiFields.add("sortDirection");
    openapiFields.add("unreadOnly");
    openapiFields.add("searchFilter");
    openapiFields.add("since");
    openapiFields.add("before");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SearchEmailsOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!SearchEmailsOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SearchEmailsOptions is not found in the empty JSON string", SearchEmailsOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SearchEmailsOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SearchEmailsOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("inboxIds") != null && !jsonObj.get("inboxIds").isJsonNull() && !jsonObj.get("inboxIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxIds` to be an array in the JSON string but got `%s`", jsonObj.get("inboxIds").toString()));
      }
      if ((jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) && !jsonObj.get("sortDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDirection").toString()));
      }
      // validate the optional field `sortDirection`
      if (jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) {
        SortDirectionEnum.validateJsonElement(jsonObj.get("sortDirection"));
      }
      if ((jsonObj.get("searchFilter") != null && !jsonObj.get("searchFilter").isJsonNull()) && !jsonObj.get("searchFilter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `searchFilter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("searchFilter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SearchEmailsOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SearchEmailsOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SearchEmailsOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SearchEmailsOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<SearchEmailsOptions>() {
           @Override
           public void write(JsonWriter out, SearchEmailsOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SearchEmailsOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SearchEmailsOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SearchEmailsOptions
   * @throws IOException if the JSON string is invalid with respect to SearchEmailsOptions
   */
  public static SearchEmailsOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SearchEmailsOptions.class);
  }

  /**
   * Convert an instance of SearchEmailsOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

