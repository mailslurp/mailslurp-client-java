/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Access details for inbox using SMTP or IMAP
 */
@ApiModel(description = "Access details for inbox using SMTP or IMAP")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class ImapSmtpAccessDetails {
  public static final String SERIALIZED_NAME_SECURE_SMTP_SERVER_HOST = "secureSmtpServerHost";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_SERVER_HOST)
  private String secureSmtpServerHost;

  public static final String SERIALIZED_NAME_SECURE_SMTP_SERVER_PORT = "secureSmtpServerPort";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_SERVER_PORT)
  private Integer secureSmtpServerPort;

  public static final String SERIALIZED_NAME_SECURE_SMTP_USERNAME = "secureSmtpUsername";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_USERNAME)
  private String secureSmtpUsername;

  public static final String SERIALIZED_NAME_SECURE_SMTP_PASSWORD = "secureSmtpPassword";
  @SerializedName(SERIALIZED_NAME_SECURE_SMTP_PASSWORD)
  private String secureSmtpPassword;

  public static final String SERIALIZED_NAME_SMTP_SERVER_HOST = "smtpServerHost";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER_HOST)
  private String smtpServerHost;

  public static final String SERIALIZED_NAME_SMTP_SERVER_PORT = "smtpServerPort";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER_PORT)
  private Integer smtpServerPort;

  public static final String SERIALIZED_NAME_SMTP_USERNAME = "smtpUsername";
  @SerializedName(SERIALIZED_NAME_SMTP_USERNAME)
  private String smtpUsername;

  public static final String SERIALIZED_NAME_SMTP_PASSWORD = "smtpPassword";
  @SerializedName(SERIALIZED_NAME_SMTP_PASSWORD)
  private String smtpPassword;

  public static final String SERIALIZED_NAME_IMAP_SERVER_HOST = "imapServerHost";
  @SerializedName(SERIALIZED_NAME_IMAP_SERVER_HOST)
  private String imapServerHost;

  public static final String SERIALIZED_NAME_IMAP_SERVER_PORT = "imapServerPort";
  @SerializedName(SERIALIZED_NAME_IMAP_SERVER_PORT)
  private Integer imapServerPort;

  public static final String SERIALIZED_NAME_IMAP_USERNAME = "imapUsername";
  @SerializedName(SERIALIZED_NAME_IMAP_USERNAME)
  private String imapUsername;

  public static final String SERIALIZED_NAME_IMAP_PASSWORD = "imapPassword";
  @SerializedName(SERIALIZED_NAME_IMAP_PASSWORD)
  private String imapPassword;

  public ImapSmtpAccessDetails() {
  }

  public ImapSmtpAccessDetails secureSmtpServerHost(String secureSmtpServerHost) {
    
    this.secureSmtpServerHost = secureSmtpServerHost;
    return this;
  }

   /**
   * Secure TLS SMTP server host domain
   * @return secureSmtpServerHost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Secure TLS SMTP server host domain")

  public String getSecureSmtpServerHost() {
    return secureSmtpServerHost;
  }


  public void setSecureSmtpServerHost(String secureSmtpServerHost) {
    this.secureSmtpServerHost = secureSmtpServerHost;
  }


  public ImapSmtpAccessDetails secureSmtpServerPort(Integer secureSmtpServerPort) {
    
    this.secureSmtpServerPort = secureSmtpServerPort;
    return this;
  }

   /**
   * Secure TLS SMTP server host port
   * @return secureSmtpServerPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Secure TLS SMTP server host port")

  public Integer getSecureSmtpServerPort() {
    return secureSmtpServerPort;
  }


  public void setSecureSmtpServerPort(Integer secureSmtpServerPort) {
    this.secureSmtpServerPort = secureSmtpServerPort;
  }


  public ImapSmtpAccessDetails secureSmtpUsername(String secureSmtpUsername) {
    
    this.secureSmtpUsername = secureSmtpUsername;
    return this;
  }

   /**
   * Secure TLS SMTP username for login
   * @return secureSmtpUsername
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Secure TLS SMTP username for login")

  public String getSecureSmtpUsername() {
    return secureSmtpUsername;
  }


  public void setSecureSmtpUsername(String secureSmtpUsername) {
    this.secureSmtpUsername = secureSmtpUsername;
  }


  public ImapSmtpAccessDetails secureSmtpPassword(String secureSmtpPassword) {
    
    this.secureSmtpPassword = secureSmtpPassword;
    return this;
  }

   /**
   * Secure TLS SMTP password for login
   * @return secureSmtpPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Secure TLS SMTP password for login")

  public String getSecureSmtpPassword() {
    return secureSmtpPassword;
  }


  public void setSecureSmtpPassword(String secureSmtpPassword) {
    this.secureSmtpPassword = secureSmtpPassword;
  }


  public ImapSmtpAccessDetails smtpServerHost(String smtpServerHost) {
    
    this.smtpServerHost = smtpServerHost;
    return this;
  }

   /**
   * SMTP server host domain
   * @return smtpServerHost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SMTP server host domain")

  public String getSmtpServerHost() {
    return smtpServerHost;
  }


  public void setSmtpServerHost(String smtpServerHost) {
    this.smtpServerHost = smtpServerHost;
  }


  public ImapSmtpAccessDetails smtpServerPort(Integer smtpServerPort) {
    
    this.smtpServerPort = smtpServerPort;
    return this;
  }

   /**
   * SMTP server host port
   * @return smtpServerPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SMTP server host port")

  public Integer getSmtpServerPort() {
    return smtpServerPort;
  }


  public void setSmtpServerPort(Integer smtpServerPort) {
    this.smtpServerPort = smtpServerPort;
  }


  public ImapSmtpAccessDetails smtpUsername(String smtpUsername) {
    
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * SMTP username for login
   * @return smtpUsername
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SMTP username for login")

  public String getSmtpUsername() {
    return smtpUsername;
  }


  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public ImapSmtpAccessDetails smtpPassword(String smtpPassword) {
    
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * SMTP password for login
   * @return smtpPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "SMTP password for login")

  public String getSmtpPassword() {
    return smtpPassword;
  }


  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  public ImapSmtpAccessDetails imapServerHost(String imapServerHost) {
    
    this.imapServerHost = imapServerHost;
    return this;
  }

   /**
   * IMAP server host domain
   * @return imapServerHost
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IMAP server host domain")

  public String getImapServerHost() {
    return imapServerHost;
  }


  public void setImapServerHost(String imapServerHost) {
    this.imapServerHost = imapServerHost;
  }


  public ImapSmtpAccessDetails imapServerPort(Integer imapServerPort) {
    
    this.imapServerPort = imapServerPort;
    return this;
  }

   /**
   * IMAP server host port
   * @return imapServerPort
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IMAP server host port")

  public Integer getImapServerPort() {
    return imapServerPort;
  }


  public void setImapServerPort(Integer imapServerPort) {
    this.imapServerPort = imapServerPort;
  }


  public ImapSmtpAccessDetails imapUsername(String imapUsername) {
    
    this.imapUsername = imapUsername;
    return this;
  }

   /**
   * IMAP username for login
   * @return imapUsername
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IMAP username for login")

  public String getImapUsername() {
    return imapUsername;
  }


  public void setImapUsername(String imapUsername) {
    this.imapUsername = imapUsername;
  }


  public ImapSmtpAccessDetails imapPassword(String imapPassword) {
    
    this.imapPassword = imapPassword;
    return this;
  }

   /**
   * IMAP password for login
   * @return imapPassword
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "IMAP password for login")

  public String getImapPassword() {
    return imapPassword;
  }


  public void setImapPassword(String imapPassword) {
    this.imapPassword = imapPassword;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapSmtpAccessDetails imapSmtpAccessDetails = (ImapSmtpAccessDetails) o;
    return Objects.equals(this.secureSmtpServerHost, imapSmtpAccessDetails.secureSmtpServerHost) &&
        Objects.equals(this.secureSmtpServerPort, imapSmtpAccessDetails.secureSmtpServerPort) &&
        Objects.equals(this.secureSmtpUsername, imapSmtpAccessDetails.secureSmtpUsername) &&
        Objects.equals(this.secureSmtpPassword, imapSmtpAccessDetails.secureSmtpPassword) &&
        Objects.equals(this.smtpServerHost, imapSmtpAccessDetails.smtpServerHost) &&
        Objects.equals(this.smtpServerPort, imapSmtpAccessDetails.smtpServerPort) &&
        Objects.equals(this.smtpUsername, imapSmtpAccessDetails.smtpUsername) &&
        Objects.equals(this.smtpPassword, imapSmtpAccessDetails.smtpPassword) &&
        Objects.equals(this.imapServerHost, imapSmtpAccessDetails.imapServerHost) &&
        Objects.equals(this.imapServerPort, imapSmtpAccessDetails.imapServerPort) &&
        Objects.equals(this.imapUsername, imapSmtpAccessDetails.imapUsername) &&
        Objects.equals(this.imapPassword, imapSmtpAccessDetails.imapPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(secureSmtpServerHost, secureSmtpServerPort, secureSmtpUsername, secureSmtpPassword, smtpServerHost, smtpServerPort, smtpUsername, smtpPassword, imapServerHost, imapServerPort, imapUsername, imapPassword);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapSmtpAccessDetails {\n");
    sb.append("    secureSmtpServerHost: ").append(toIndentedString(secureSmtpServerHost)).append("\n");
    sb.append("    secureSmtpServerPort: ").append(toIndentedString(secureSmtpServerPort)).append("\n");
    sb.append("    secureSmtpUsername: ").append(toIndentedString(secureSmtpUsername)).append("\n");
    sb.append("    secureSmtpPassword: ").append(toIndentedString(secureSmtpPassword)).append("\n");
    sb.append("    smtpServerHost: ").append(toIndentedString(smtpServerHost)).append("\n");
    sb.append("    smtpServerPort: ").append(toIndentedString(smtpServerPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    imapServerHost: ").append(toIndentedString(imapServerHost)).append("\n");
    sb.append("    imapServerPort: ").append(toIndentedString(imapServerPort)).append("\n");
    sb.append("    imapUsername: ").append(toIndentedString(imapUsername)).append("\n");
    sb.append("    imapPassword: ").append(toIndentedString(imapPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("secureSmtpServerHost");
    openapiFields.add("secureSmtpServerPort");
    openapiFields.add("secureSmtpUsername");
    openapiFields.add("secureSmtpPassword");
    openapiFields.add("smtpServerHost");
    openapiFields.add("smtpServerPort");
    openapiFields.add("smtpUsername");
    openapiFields.add("smtpPassword");
    openapiFields.add("imapServerHost");
    openapiFields.add("imapServerPort");
    openapiFields.add("imapUsername");
    openapiFields.add("imapPassword");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("secureSmtpServerHost");
    openapiRequiredFields.add("secureSmtpServerPort");
    openapiRequiredFields.add("secureSmtpUsername");
    openapiRequiredFields.add("secureSmtpPassword");
    openapiRequiredFields.add("smtpServerHost");
    openapiRequiredFields.add("smtpServerPort");
    openapiRequiredFields.add("smtpUsername");
    openapiRequiredFields.add("smtpPassword");
    openapiRequiredFields.add("imapServerHost");
    openapiRequiredFields.add("imapServerPort");
    openapiRequiredFields.add("imapUsername");
    openapiRequiredFields.add("imapPassword");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ImapSmtpAccessDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ImapSmtpAccessDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImapSmtpAccessDetails is not found in the empty JSON string", ImapSmtpAccessDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ImapSmtpAccessDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImapSmtpAccessDetails` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ImapSmtpAccessDetails.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("secureSmtpServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureSmtpServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureSmtpServerHost").toString()));
      }
      if (!jsonObj.get("secureSmtpUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureSmtpUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureSmtpUsername").toString()));
      }
      if (!jsonObj.get("secureSmtpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secureSmtpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secureSmtpPassword").toString()));
      }
      if (!jsonObj.get("smtpServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpServerHost").toString()));
      }
      if (!jsonObj.get("smtpUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpUsername").toString()));
      }
      if (!jsonObj.get("smtpPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `smtpPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("smtpPassword").toString()));
      }
      if (!jsonObj.get("imapServerHost").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapServerHost` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapServerHost").toString()));
      }
      if (!jsonObj.get("imapUsername").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapUsername` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapUsername").toString()));
      }
      if (!jsonObj.get("imapPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imapPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imapPassword").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImapSmtpAccessDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImapSmtpAccessDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImapSmtpAccessDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImapSmtpAccessDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ImapSmtpAccessDetails>() {
           @Override
           public void write(JsonWriter out, ImapSmtpAccessDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImapSmtpAccessDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ImapSmtpAccessDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ImapSmtpAccessDetails
  * @throws IOException if the JSON string is invalid with respect to ImapSmtpAccessDetails
  */
  public static ImapSmtpAccessDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImapSmtpAccessDetails.class);
  }

 /**
  * Convert an instance of ImapSmtpAccessDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

