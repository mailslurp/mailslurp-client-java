/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * ImapSmtpAccessDetails
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-31T11:13:15.269Z[GMT]")
public class ImapSmtpAccessDetails {
  public static final String SERIALIZED_NAME_SMTP_SERVER_HOST = "smtpServerHost";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER_HOST)
  private String smtpServerHost;

  public static final String SERIALIZED_NAME_SMTP_SERVER_PORT = "smtpServerPort";
  @SerializedName(SERIALIZED_NAME_SMTP_SERVER_PORT)
  private Integer smtpServerPort;

  public static final String SERIALIZED_NAME_SMTP_USERNAME = "smtpUsername";
  @SerializedName(SERIALIZED_NAME_SMTP_USERNAME)
  private String smtpUsername;

  public static final String SERIALIZED_NAME_SMTP_PASSWORD = "smtpPassword";
  @SerializedName(SERIALIZED_NAME_SMTP_PASSWORD)
  private String smtpPassword;

  public static final String SERIALIZED_NAME_IMAP_SERVER_HOST = "imapServerHost";
  @SerializedName(SERIALIZED_NAME_IMAP_SERVER_HOST)
  private String imapServerHost;

  public static final String SERIALIZED_NAME_IMAP_SERVER_PORT = "imapServerPort";
  @SerializedName(SERIALIZED_NAME_IMAP_SERVER_PORT)
  private Integer imapServerPort;

  public static final String SERIALIZED_NAME_IMAP_USERNAME = "imapUsername";
  @SerializedName(SERIALIZED_NAME_IMAP_USERNAME)
  private String imapUsername;

  public static final String SERIALIZED_NAME_IMAP_PASSWORD = "imapPassword";
  @SerializedName(SERIALIZED_NAME_IMAP_PASSWORD)
  private String imapPassword;


  public ImapSmtpAccessDetails smtpServerHost(String smtpServerHost) {
    
    this.smtpServerHost = smtpServerHost;
    return this;
  }

   /**
   * Get smtpServerHost
   * @return smtpServerHost
  **/
  @ApiModelProperty(required = true, value = "")

  public String getSmtpServerHost() {
    return smtpServerHost;
  }


  public void setSmtpServerHost(String smtpServerHost) {
    this.smtpServerHost = smtpServerHost;
  }


  public ImapSmtpAccessDetails smtpServerPort(Integer smtpServerPort) {
    
    this.smtpServerPort = smtpServerPort;
    return this;
  }

   /**
   * Get smtpServerPort
   * @return smtpServerPort
  **/
  @ApiModelProperty(required = true, value = "")

  public Integer getSmtpServerPort() {
    return smtpServerPort;
  }


  public void setSmtpServerPort(Integer smtpServerPort) {
    this.smtpServerPort = smtpServerPort;
  }


  public ImapSmtpAccessDetails smtpUsername(String smtpUsername) {
    
    this.smtpUsername = smtpUsername;
    return this;
  }

   /**
   * Get smtpUsername
   * @return smtpUsername
  **/
  @ApiModelProperty(required = true, value = "")

  public String getSmtpUsername() {
    return smtpUsername;
  }


  public void setSmtpUsername(String smtpUsername) {
    this.smtpUsername = smtpUsername;
  }


  public ImapSmtpAccessDetails smtpPassword(String smtpPassword) {
    
    this.smtpPassword = smtpPassword;
    return this;
  }

   /**
   * Get smtpPassword
   * @return smtpPassword
  **/
  @ApiModelProperty(required = true, value = "")

  public String getSmtpPassword() {
    return smtpPassword;
  }


  public void setSmtpPassword(String smtpPassword) {
    this.smtpPassword = smtpPassword;
  }


  public ImapSmtpAccessDetails imapServerHost(String imapServerHost) {
    
    this.imapServerHost = imapServerHost;
    return this;
  }

   /**
   * Get imapServerHost
   * @return imapServerHost
  **/
  @ApiModelProperty(required = true, value = "")

  public String getImapServerHost() {
    return imapServerHost;
  }


  public void setImapServerHost(String imapServerHost) {
    this.imapServerHost = imapServerHost;
  }


  public ImapSmtpAccessDetails imapServerPort(Integer imapServerPort) {
    
    this.imapServerPort = imapServerPort;
    return this;
  }

   /**
   * Get imapServerPort
   * @return imapServerPort
  **/
  @ApiModelProperty(required = true, value = "")

  public Integer getImapServerPort() {
    return imapServerPort;
  }


  public void setImapServerPort(Integer imapServerPort) {
    this.imapServerPort = imapServerPort;
  }


  public ImapSmtpAccessDetails imapUsername(String imapUsername) {
    
    this.imapUsername = imapUsername;
    return this;
  }

   /**
   * Get imapUsername
   * @return imapUsername
  **/
  @ApiModelProperty(required = true, value = "")

  public String getImapUsername() {
    return imapUsername;
  }


  public void setImapUsername(String imapUsername) {
    this.imapUsername = imapUsername;
  }


  public ImapSmtpAccessDetails imapPassword(String imapPassword) {
    
    this.imapPassword = imapPassword;
    return this;
  }

   /**
   * Get imapPassword
   * @return imapPassword
  **/
  @ApiModelProperty(required = true, value = "")

  public String getImapPassword() {
    return imapPassword;
  }


  public void setImapPassword(String imapPassword) {
    this.imapPassword = imapPassword;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImapSmtpAccessDetails imapSmtpAccessDetails = (ImapSmtpAccessDetails) o;
    return Objects.equals(this.smtpServerHost, imapSmtpAccessDetails.smtpServerHost) &&
        Objects.equals(this.smtpServerPort, imapSmtpAccessDetails.smtpServerPort) &&
        Objects.equals(this.smtpUsername, imapSmtpAccessDetails.smtpUsername) &&
        Objects.equals(this.smtpPassword, imapSmtpAccessDetails.smtpPassword) &&
        Objects.equals(this.imapServerHost, imapSmtpAccessDetails.imapServerHost) &&
        Objects.equals(this.imapServerPort, imapSmtpAccessDetails.imapServerPort) &&
        Objects.equals(this.imapUsername, imapSmtpAccessDetails.imapUsername) &&
        Objects.equals(this.imapPassword, imapSmtpAccessDetails.imapPassword);
  }

  @Override
  public int hashCode() {
    return Objects.hash(smtpServerHost, smtpServerPort, smtpUsername, smtpPassword, imapServerHost, imapServerPort, imapUsername, imapPassword);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImapSmtpAccessDetails {\n");
    sb.append("    smtpServerHost: ").append(toIndentedString(smtpServerHost)).append("\n");
    sb.append("    smtpServerPort: ").append(toIndentedString(smtpServerPort)).append("\n");
    sb.append("    smtpUsername: ").append(toIndentedString(smtpUsername)).append("\n");
    sb.append("    smtpPassword: ").append(toIndentedString(smtpPassword)).append("\n");
    sb.append("    imapServerHost: ").append(toIndentedString(imapServerHost)).append("\n");
    sb.append("    imapServerPort: ").append(toIndentedString(imapServerPort)).append("\n");
    sb.append("    imapUsername: ").append(toIndentedString(imapUsername)).append("\n");
    sb.append("    imapPassword: ").append(toIndentedString(imapPassword)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

