/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY or dynamic error message
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-09T10:53:29.446521491Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class EmailAnalysis {
  public static final String SERIALIZED_NAME_SPAM_VERDICT = "spamVerdict";
  @SerializedName(SERIALIZED_NAME_SPAM_VERDICT)
  @javax.annotation.Nullable
  private String spamVerdict;

  public static final String SERIALIZED_NAME_VIRUS_VERDICT = "virusVerdict";
  @SerializedName(SERIALIZED_NAME_VIRUS_VERDICT)
  @javax.annotation.Nullable
  private String virusVerdict;

  public static final String SERIALIZED_NAME_SPF_VERDICT = "spfVerdict";
  @SerializedName(SERIALIZED_NAME_SPF_VERDICT)
  @javax.annotation.Nullable
  private String spfVerdict;

  public static final String SERIALIZED_NAME_DKIM_VERDICT = "dkimVerdict";
  @SerializedName(SERIALIZED_NAME_DKIM_VERDICT)
  @javax.annotation.Nullable
  private String dkimVerdict;

  public static final String SERIALIZED_NAME_DMARC_VERDICT = "dmarcVerdict";
  @SerializedName(SERIALIZED_NAME_DMARC_VERDICT)
  @javax.annotation.Nullable
  private String dmarcVerdict;

  public EmailAnalysis() {
  }

  public EmailAnalysis spamVerdict(@javax.annotation.Nullable String spamVerdict) {
    this.spamVerdict = spamVerdict;
    return this;
  }

  /**
   * Verdict of spam ranking analysis
   * @return spamVerdict
   */
  @javax.annotation.Nullable
  public String getSpamVerdict() {
    return spamVerdict;
  }

  public void setSpamVerdict(@javax.annotation.Nullable String spamVerdict) {
    this.spamVerdict = spamVerdict;
  }


  public EmailAnalysis virusVerdict(@javax.annotation.Nullable String virusVerdict) {
    this.virusVerdict = virusVerdict;
    return this;
  }

  /**
   * Verdict of virus scan analysis
   * @return virusVerdict
   */
  @javax.annotation.Nullable
  public String getVirusVerdict() {
    return virusVerdict;
  }

  public void setVirusVerdict(@javax.annotation.Nullable String virusVerdict) {
    this.virusVerdict = virusVerdict;
  }


  public EmailAnalysis spfVerdict(@javax.annotation.Nullable String spfVerdict) {
    this.spfVerdict = spfVerdict;
    return this;
  }

  /**
   * Verdict of Send Policy Framework record spoofing analysis
   * @return spfVerdict
   */
  @javax.annotation.Nullable
  public String getSpfVerdict() {
    return spfVerdict;
  }

  public void setSpfVerdict(@javax.annotation.Nullable String spfVerdict) {
    this.spfVerdict = spfVerdict;
  }


  public EmailAnalysis dkimVerdict(@javax.annotation.Nullable String dkimVerdict) {
    this.dkimVerdict = dkimVerdict;
    return this;
  }

  /**
   * Verdict of DomainKeys Identified Mail analysis
   * @return dkimVerdict
   */
  @javax.annotation.Nullable
  public String getDkimVerdict() {
    return dkimVerdict;
  }

  public void setDkimVerdict(@javax.annotation.Nullable String dkimVerdict) {
    this.dkimVerdict = dkimVerdict;
  }


  public EmailAnalysis dmarcVerdict(@javax.annotation.Nullable String dmarcVerdict) {
    this.dmarcVerdict = dmarcVerdict;
    return this;
  }

  /**
   * Verdict of Domain-based Message Authentication Reporting and Conformance analysis
   * @return dmarcVerdict
   */
  @javax.annotation.Nullable
  public String getDmarcVerdict() {
    return dmarcVerdict;
  }

  public void setDmarcVerdict(@javax.annotation.Nullable String dmarcVerdict) {
    this.dmarcVerdict = dmarcVerdict;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailAnalysis emailAnalysis = (EmailAnalysis) o;
    return Objects.equals(this.spamVerdict, emailAnalysis.spamVerdict) &&
        Objects.equals(this.virusVerdict, emailAnalysis.virusVerdict) &&
        Objects.equals(this.spfVerdict, emailAnalysis.spfVerdict) &&
        Objects.equals(this.dkimVerdict, emailAnalysis.dkimVerdict) &&
        Objects.equals(this.dmarcVerdict, emailAnalysis.dmarcVerdict);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(spamVerdict, virusVerdict, spfVerdict, dkimVerdict, dmarcVerdict);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailAnalysis {\n");
    sb.append("    spamVerdict: ").append(toIndentedString(spamVerdict)).append("\n");
    sb.append("    virusVerdict: ").append(toIndentedString(virusVerdict)).append("\n");
    sb.append("    spfVerdict: ").append(toIndentedString(spfVerdict)).append("\n");
    sb.append("    dkimVerdict: ").append(toIndentedString(dkimVerdict)).append("\n");
    sb.append("    dmarcVerdict: ").append(toIndentedString(dmarcVerdict)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("spamVerdict");
    openapiFields.add("virusVerdict");
    openapiFields.add("spfVerdict");
    openapiFields.add("dkimVerdict");
    openapiFields.add("dmarcVerdict");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EmailAnalysis
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!EmailAnalysis.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailAnalysis is not found in the empty JSON string", EmailAnalysis.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailAnalysis.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailAnalysis` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("spamVerdict") != null && !jsonObj.get("spamVerdict").isJsonNull()) && !jsonObj.get("spamVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spamVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spamVerdict").toString()));
      }
      if ((jsonObj.get("virusVerdict") != null && !jsonObj.get("virusVerdict").isJsonNull()) && !jsonObj.get("virusVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `virusVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("virusVerdict").toString()));
      }
      if ((jsonObj.get("spfVerdict") != null && !jsonObj.get("spfVerdict").isJsonNull()) && !jsonObj.get("spfVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spfVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spfVerdict").toString()));
      }
      if ((jsonObj.get("dkimVerdict") != null && !jsonObj.get("dkimVerdict").isJsonNull()) && !jsonObj.get("dkimVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dkimVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dkimVerdict").toString()));
      }
      if ((jsonObj.get("dmarcVerdict") != null && !jsonObj.get("dmarcVerdict").isJsonNull()) && !jsonObj.get("dmarcVerdict").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dmarcVerdict` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dmarcVerdict").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailAnalysis.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailAnalysis' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailAnalysis> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailAnalysis.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailAnalysis>() {
           @Override
           public void write(JsonWriter out, EmailAnalysis value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailAnalysis read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EmailAnalysis given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EmailAnalysis
   * @throws IOException if the JSON string is invalid with respect to EmailAnalysis
   */
  public static EmailAnalysis fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailAnalysis.class);
  }

  /**
   * Convert an instance of EmailAnalysis to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

