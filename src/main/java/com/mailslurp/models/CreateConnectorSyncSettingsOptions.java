/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Options for creating automatic syncing between an inbox connection and an external mail provider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T10:02:43.973907603Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class CreateConnectorSyncSettingsOptions {
  public static final String SERIALIZED_NAME_SYNC_ENABLED = "syncEnabled";
  @SerializedName(SERIALIZED_NAME_SYNC_ENABLED)
  @javax.annotation.Nullable
  private Boolean syncEnabled;

  /**
   * Sync schedule type
   */
  @JsonAdapter(SyncScheduleTypeEnum.Adapter.class)
  public enum SyncScheduleTypeEnum {
    INTERVAL("INTERVAL");

    private String value;

    SyncScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncScheduleTypeEnum fromValue(String value) {
      for (SyncScheduleTypeEnum b : SyncScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SyncScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncScheduleTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SyncScheduleTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SYNC_SCHEDULE_TYPE = "syncScheduleType";
  @SerializedName(SERIALIZED_NAME_SYNC_SCHEDULE_TYPE)
  @javax.annotation.Nullable
  private SyncScheduleTypeEnum syncScheduleType;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "syncInterval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  @javax.annotation.Nullable
  private Integer syncInterval;

  public CreateConnectorSyncSettingsOptions() {
  }

  public CreateConnectorSyncSettingsOptions syncEnabled(@javax.annotation.Nullable Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
    return this;
  }

  /**
   * Enable automatic background sync
   * @return syncEnabled
   */
  @javax.annotation.Nullable
  public Boolean getSyncEnabled() {
    return syncEnabled;
  }

  public void setSyncEnabled(@javax.annotation.Nullable Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
  }


  public CreateConnectorSyncSettingsOptions syncScheduleType(@javax.annotation.Nullable SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
    return this;
  }

  /**
   * Sync schedule type
   * @return syncScheduleType
   */
  @javax.annotation.Nullable
  public SyncScheduleTypeEnum getSyncScheduleType() {
    return syncScheduleType;
  }

  public void setSyncScheduleType(@javax.annotation.Nullable SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
  }


  public CreateConnectorSyncSettingsOptions syncInterval(@javax.annotation.Nullable Integer syncInterval) {
    this.syncInterval = syncInterval;
    return this;
  }

  /**
   * Sync interval in minutes
   * @return syncInterval
   */
  @javax.annotation.Nullable
  public Integer getSyncInterval() {
    return syncInterval;
  }

  public void setSyncInterval(@javax.annotation.Nullable Integer syncInterval) {
    this.syncInterval = syncInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions = (CreateConnectorSyncSettingsOptions) o;
    return Objects.equals(this.syncEnabled, createConnectorSyncSettingsOptions.syncEnabled) &&
        Objects.equals(this.syncScheduleType, createConnectorSyncSettingsOptions.syncScheduleType) &&
        Objects.equals(this.syncInterval, createConnectorSyncSettingsOptions.syncInterval);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(syncEnabled, syncScheduleType, syncInterval);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConnectorSyncSettingsOptions {\n");
    sb.append("    syncEnabled: ").append(toIndentedString(syncEnabled)).append("\n");
    sb.append("    syncScheduleType: ").append(toIndentedString(syncScheduleType)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("syncEnabled");
    openapiFields.add("syncScheduleType");
    openapiFields.add("syncInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateConnectorSyncSettingsOptions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!CreateConnectorSyncSettingsOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConnectorSyncSettingsOptions is not found in the empty JSON string", CreateConnectorSyncSettingsOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateConnectorSyncSettingsOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConnectorSyncSettingsOptions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("syncScheduleType") != null && !jsonObj.get("syncScheduleType").isJsonNull()) && !jsonObj.get("syncScheduleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncScheduleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncScheduleType").toString()));
      }
      // validate the optional field `syncScheduleType`
      if (jsonObj.get("syncScheduleType") != null && !jsonObj.get("syncScheduleType").isJsonNull()) {
        SyncScheduleTypeEnum.validateJsonElement(jsonObj.get("syncScheduleType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConnectorSyncSettingsOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConnectorSyncSettingsOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConnectorSyncSettingsOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConnectorSyncSettingsOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConnectorSyncSettingsOptions>() {
           @Override
           public void write(JsonWriter out, CreateConnectorSyncSettingsOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConnectorSyncSettingsOptions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateConnectorSyncSettingsOptions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateConnectorSyncSettingsOptions
   * @throws IOException if the JSON string is invalid with respect to CreateConnectorSyncSettingsOptions
   */
  public static CreateConnectorSyncSettingsOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConnectorSyncSettingsOptions.class);
  }

  /**
   * Convert an instance of CreateConnectorSyncSettingsOptions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

