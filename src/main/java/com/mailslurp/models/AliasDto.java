/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Email alias representation
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-06-08T10:02:43.973907603Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class AliasDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_EMAIL_ADDRESS = "emailAddress";
  @SerializedName(SERIALIZED_NAME_EMAIL_ADDRESS)
  @javax.annotation.Nonnull
  private String emailAddress;

  public static final String SERIALIZED_NAME_MASKED_EMAIL_ADDRESS = "maskedEmailAddress";
  @SerializedName(SERIALIZED_NAME_MASKED_EMAIL_ADDRESS)
  @javax.annotation.Nullable
  private String maskedEmailAddress;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nonnull
  private UUID inboxId;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_USE_THREADS = "useThreads";
  @SerializedName(SERIALIZED_NAME_USE_THREADS)
  @javax.annotation.Nullable
  private Boolean useThreads;

  public static final String SERIALIZED_NAME_IS_VERIFIED = "isVerified";
  @SerializedName(SERIALIZED_NAME_IS_VERIFIED)
  @javax.annotation.Nonnull
  private Boolean isVerified;

  public static final String SERIALIZED_NAME_DOMAIN_ID = "domainId";
  @SerializedName(SERIALIZED_NAME_DOMAIN_ID)
  @javax.annotation.Nullable
  private UUID domainId;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime updatedAt;

  public AliasDto() {
  }

  public AliasDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public AliasDto emailAddress(@javax.annotation.Nonnull String emailAddress) {
    this.emailAddress = emailAddress;
    return this;
  }

  /**
   * The alias&#39;s email address for receiving email
   * @return emailAddress
   */
  @javax.annotation.Nonnull
  public String getEmailAddress() {
    return emailAddress;
  }

  public void setEmailAddress(@javax.annotation.Nonnull String emailAddress) {
    this.emailAddress = emailAddress;
  }


  public AliasDto maskedEmailAddress(@javax.annotation.Nullable String maskedEmailAddress) {
    this.maskedEmailAddress = maskedEmailAddress;
    return this;
  }

  /**
   * The underlying email address that is hidden and will received forwarded email
   * @return maskedEmailAddress
   */
  @javax.annotation.Nullable
  public String getMaskedEmailAddress() {
    return maskedEmailAddress;
  }

  public void setMaskedEmailAddress(@javax.annotation.Nullable String maskedEmailAddress) {
    this.maskedEmailAddress = maskedEmailAddress;
  }


  public AliasDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * Get userId
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public AliasDto inboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * Inbox that is associated with the alias
   * @return inboxId
   */
  @javax.annotation.Nonnull
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nonnull UUID inboxId) {
    this.inboxId = inboxId;
  }


  public AliasDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public AliasDto useThreads(@javax.annotation.Nullable Boolean useThreads) {
    this.useThreads = useThreads;
    return this;
  }

  /**
   * If alias will generate response threads or not when email are received by it
   * @return useThreads
   */
  @javax.annotation.Nullable
  public Boolean getUseThreads() {
    return useThreads;
  }

  public void setUseThreads(@javax.annotation.Nullable Boolean useThreads) {
    this.useThreads = useThreads;
  }


  public AliasDto isVerified(@javax.annotation.Nonnull Boolean isVerified) {
    this.isVerified = isVerified;
    return this;
  }

  /**
   * Has the alias been verified. You must verify an alias if the masked email address has not yet been verified by your account
   * @return isVerified
   */
  @javax.annotation.Nonnull
  public Boolean getIsVerified() {
    return isVerified;
  }

  public void setIsVerified(@javax.annotation.Nonnull Boolean isVerified) {
    this.isVerified = isVerified;
  }


  public AliasDto domainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
    return this;
  }

  /**
   * Domain ID associated with the alias
   * @return domainId
   */
  @javax.annotation.Nullable
  public UUID getDomainId() {
    return domainId;
  }

  public void setDomainId(@javax.annotation.Nullable UUID domainId) {
    this.domainId = domainId;
  }


  public AliasDto createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public AliasDto updatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nullable OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AliasDto aliasDto = (AliasDto) o;
    return Objects.equals(this.id, aliasDto.id) &&
        Objects.equals(this.emailAddress, aliasDto.emailAddress) &&
        Objects.equals(this.maskedEmailAddress, aliasDto.maskedEmailAddress) &&
        Objects.equals(this.userId, aliasDto.userId) &&
        Objects.equals(this.inboxId, aliasDto.inboxId) &&
        Objects.equals(this.name, aliasDto.name) &&
        Objects.equals(this.useThreads, aliasDto.useThreads) &&
        Objects.equals(this.isVerified, aliasDto.isVerified) &&
        Objects.equals(this.domainId, aliasDto.domainId) &&
        Objects.equals(this.createdAt, aliasDto.createdAt) &&
        Objects.equals(this.updatedAt, aliasDto.updatedAt);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, emailAddress, maskedEmailAddress, userId, inboxId, name, useThreads, isVerified, domainId, createdAt, updatedAt);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AliasDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    emailAddress: ").append(toIndentedString(emailAddress)).append("\n");
    sb.append("    maskedEmailAddress: ").append(toIndentedString(maskedEmailAddress)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    useThreads: ").append(toIndentedString(useThreads)).append("\n");
    sb.append("    isVerified: ").append(toIndentedString(isVerified)).append("\n");
    sb.append("    domainId: ").append(toIndentedString(domainId)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("emailAddress");
    openapiFields.add("maskedEmailAddress");
    openapiFields.add("userId");
    openapiFields.add("inboxId");
    openapiFields.add("name");
    openapiFields.add("useThreads");
    openapiFields.add("isVerified");
    openapiFields.add("domainId");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("emailAddress");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("inboxId");
    openapiRequiredFields.add("isVerified");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AliasDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!AliasDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AliasDto is not found in the empty JSON string", AliasDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AliasDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AliasDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AliasDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("emailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `emailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("emailAddress").toString()));
      }
      if ((jsonObj.get("maskedEmailAddress") != null && !jsonObj.get("maskedEmailAddress").isJsonNull()) && !jsonObj.get("maskedEmailAddress").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `maskedEmailAddress` to be a primitive type in the JSON string but got `%s`", jsonObj.get("maskedEmailAddress").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if (!jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("domainId") != null && !jsonObj.get("domainId").isJsonNull()) && !jsonObj.get("domainId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `domainId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("domainId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AliasDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AliasDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AliasDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AliasDto.class));

       return (TypeAdapter<T>) new TypeAdapter<AliasDto>() {
           @Override
           public void write(JsonWriter out, AliasDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AliasDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AliasDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AliasDto
   * @throws IOException if the JSON string is invalid with respect to AliasDto
   */
  public static AliasDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AliasDto.class);
  }

  /**
   * Convert an instance of AliasDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

