/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.CreateConnectorImapOptions;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * CreateConnectorOptions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T12:41:59.646329Z[Etc/UTC]")
public class CreateConnectorOptions {
  /**
   * Gets or Sets connectorType
   */
  @JsonAdapter(ConnectorTypeEnum.Adapter.class)
  public enum ConnectorTypeEnum {
    IMAP("IMAP");

    private String value;

    ConnectorTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorTypeEnum fromValue(String value) {
      for (ConnectorTypeEnum b : ConnectorTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_TYPE = "connectorType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_TYPE)
  private ConnectorTypeEnum connectorType;

  /**
   * Gets or Sets connectorAuthType
   */
  @JsonAdapter(ConnectorAuthTypeEnum.Adapter.class)
  public enum ConnectorAuthTypeEnum {
    PLAIN_TEXT("PLAIN_TEXT");

    private String value;

    ConnectorAuthTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static ConnectorAuthTypeEnum fromValue(String value) {
      for (ConnectorAuthTypeEnum b : ConnectorAuthTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<ConnectorAuthTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final ConnectorAuthTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public ConnectorAuthTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return ConnectorAuthTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_CONNECTOR_AUTH_TYPE = "connectorAuthType";
  @SerializedName(SERIALIZED_NAME_CONNECTOR_AUTH_TYPE)
  private ConnectorAuthTypeEnum connectorAuthType;

  public static final String SERIALIZED_NAME_IMAP_SETTINGS = "imapSettings";
  @SerializedName(SERIALIZED_NAME_IMAP_SETTINGS)
  private CreateConnectorImapOptions imapSettings;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private UUID inboxId;

  public static final String SERIALIZED_NAME_SYNC_ENABLED = "syncEnabled";
  @SerializedName(SERIALIZED_NAME_SYNC_ENABLED)
  private Boolean syncEnabled;

  /**
   * Gets or Sets syncScheduleType
   */
  @JsonAdapter(SyncScheduleTypeEnum.Adapter.class)
  public enum SyncScheduleTypeEnum {
    INTERVAL("INTERVAL");

    private String value;

    SyncScheduleTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SyncScheduleTypeEnum fromValue(String value) {
      for (SyncScheduleTypeEnum b : SyncScheduleTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SyncScheduleTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SyncScheduleTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SyncScheduleTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SyncScheduleTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_SYNC_SCHEDULE_TYPE = "syncScheduleType";
  @SerializedName(SERIALIZED_NAME_SYNC_SCHEDULE_TYPE)
  private SyncScheduleTypeEnum syncScheduleType;

  public static final String SERIALIZED_NAME_SYNC_INTERVAL = "syncInterval";
  @SerializedName(SERIALIZED_NAME_SYNC_INTERVAL)
  private Integer syncInterval;

  public CreateConnectorOptions() {
  }

  public CreateConnectorOptions connectorType(ConnectorTypeEnum connectorType) {
    
    this.connectorType = connectorType;
    return this;
  }

   /**
   * Get connectorType
   * @return connectorType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ConnectorTypeEnum getConnectorType() {
    return connectorType;
  }


  public void setConnectorType(ConnectorTypeEnum connectorType) {
    this.connectorType = connectorType;
  }


  public CreateConnectorOptions connectorAuthType(ConnectorAuthTypeEnum connectorAuthType) {
    
    this.connectorAuthType = connectorAuthType;
    return this;
  }

   /**
   * Get connectorAuthType
   * @return connectorAuthType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ConnectorAuthTypeEnum getConnectorAuthType() {
    return connectorAuthType;
  }


  public void setConnectorAuthType(ConnectorAuthTypeEnum connectorAuthType) {
    this.connectorAuthType = connectorAuthType;
  }


  public CreateConnectorOptions imapSettings(CreateConnectorImapOptions imapSettings) {
    
    this.imapSettings = imapSettings;
    return this;
  }

   /**
   * Get imapSettings
   * @return imapSettings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CreateConnectorImapOptions getImapSettings() {
    return imapSettings;
  }


  public void setImapSettings(CreateConnectorImapOptions imapSettings) {
    this.imapSettings = imapSettings;
  }


  public CreateConnectorOptions inboxId(UUID inboxId) {
    
    this.inboxId = inboxId;
    return this;
  }

   /**
   * Get inboxId
   * @return inboxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getInboxId() {
    return inboxId;
  }


  public void setInboxId(UUID inboxId) {
    this.inboxId = inboxId;
  }


  public CreateConnectorOptions syncEnabled(Boolean syncEnabled) {
    
    this.syncEnabled = syncEnabled;
    return this;
  }

   /**
   * Get syncEnabled
   * @return syncEnabled
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Boolean getSyncEnabled() {
    return syncEnabled;
  }


  public void setSyncEnabled(Boolean syncEnabled) {
    this.syncEnabled = syncEnabled;
  }


  public CreateConnectorOptions syncScheduleType(SyncScheduleTypeEnum syncScheduleType) {
    
    this.syncScheduleType = syncScheduleType;
    return this;
  }

   /**
   * Get syncScheduleType
   * @return syncScheduleType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public SyncScheduleTypeEnum getSyncScheduleType() {
    return syncScheduleType;
  }


  public void setSyncScheduleType(SyncScheduleTypeEnum syncScheduleType) {
    this.syncScheduleType = syncScheduleType;
  }


  public CreateConnectorOptions syncInterval(Integer syncInterval) {
    
    this.syncInterval = syncInterval;
    return this;
  }

   /**
   * Get syncInterval
   * @return syncInterval
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getSyncInterval() {
    return syncInterval;
  }


  public void setSyncInterval(Integer syncInterval) {
    this.syncInterval = syncInterval;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateConnectorOptions createConnectorOptions = (CreateConnectorOptions) o;
    return Objects.equals(this.connectorType, createConnectorOptions.connectorType) &&
        Objects.equals(this.connectorAuthType, createConnectorOptions.connectorAuthType) &&
        Objects.equals(this.imapSettings, createConnectorOptions.imapSettings) &&
        Objects.equals(this.inboxId, createConnectorOptions.inboxId) &&
        Objects.equals(this.syncEnabled, createConnectorOptions.syncEnabled) &&
        Objects.equals(this.syncScheduleType, createConnectorOptions.syncScheduleType) &&
        Objects.equals(this.syncInterval, createConnectorOptions.syncInterval);
  }

  @Override
  public int hashCode() {
    return Objects.hash(connectorType, connectorAuthType, imapSettings, inboxId, syncEnabled, syncScheduleType, syncInterval);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateConnectorOptions {\n");
    sb.append("    connectorType: ").append(toIndentedString(connectorType)).append("\n");
    sb.append("    connectorAuthType: ").append(toIndentedString(connectorAuthType)).append("\n");
    sb.append("    imapSettings: ").append(toIndentedString(imapSettings)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    syncEnabled: ").append(toIndentedString(syncEnabled)).append("\n");
    sb.append("    syncScheduleType: ").append(toIndentedString(syncScheduleType)).append("\n");
    sb.append("    syncInterval: ").append(toIndentedString(syncInterval)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("connectorType");
    openapiFields.add("connectorAuthType");
    openapiFields.add("imapSettings");
    openapiFields.add("inboxId");
    openapiFields.add("syncEnabled");
    openapiFields.add("syncScheduleType");
    openapiFields.add("syncInterval");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("connectorType");
    openapiRequiredFields.add("connectorAuthType");
    openapiRequiredFields.add("syncEnabled");
    openapiRequiredFields.add("syncScheduleType");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CreateConnectorOptions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CreateConnectorOptions.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateConnectorOptions is not found in the empty JSON string", CreateConnectorOptions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!CreateConnectorOptions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateConnectorOptions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CreateConnectorOptions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("connectorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorType").toString()));
      }
      if (!jsonObj.get("connectorAuthType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `connectorAuthType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("connectorAuthType").toString()));
      }
      // validate the optional field `imapSettings`
      if (jsonObj.get("imapSettings") != null && !jsonObj.get("imapSettings").isJsonNull()) {
        CreateConnectorImapOptions.validateJsonObject(jsonObj.getAsJsonObject("imapSettings"));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if (!jsonObj.get("syncScheduleType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `syncScheduleType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("syncScheduleType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateConnectorOptions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateConnectorOptions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateConnectorOptions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateConnectorOptions.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateConnectorOptions>() {
           @Override
           public void write(JsonWriter out, CreateConnectorOptions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateConnectorOptions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CreateConnectorOptions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CreateConnectorOptions
  * @throws IOException if the JSON string is invalid with respect to CreateConnectorOptions
  */
  public static CreateConnectorOptions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateConnectorOptions.class);
  }

 /**
  * Convert an instance of CreateConnectorOptions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

