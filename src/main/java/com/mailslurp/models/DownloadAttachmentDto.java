/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Content of attachment
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class DownloadAttachmentDto {
  public static final String SERIALIZED_NAME_BASE64_FILE_CONTENTS = "base64FileContents";
  @SerializedName(SERIALIZED_NAME_BASE64_FILE_CONTENTS)
  @javax.annotation.Nonnull
  private String base64FileContents;

  public static final String SERIALIZED_NAME_CONTENT_TYPE = "contentType";
  @SerializedName(SERIALIZED_NAME_CONTENT_TYPE)
  @javax.annotation.Nonnull
  private String contentType;

  public static final String SERIALIZED_NAME_SIZE_BYTES = "sizeBytes";
  @SerializedName(SERIALIZED_NAME_SIZE_BYTES)
  @javax.annotation.Nonnull
  private Long sizeBytes;

  public DownloadAttachmentDto() {
  }

  public DownloadAttachmentDto base64FileContents(@javax.annotation.Nonnull String base64FileContents) {
    this.base64FileContents = base64FileContents;
    return this;
  }

  /**
   * Base64 encoded string of attachment bytes. Decode the base64 encoded string to get the raw contents. If the file has a content type such as &#x60;text/html&#x60; you can read the contents directly by converting it to string using &#x60;utf-8&#x60; encoding.
   * @return base64FileContents
   */
  @javax.annotation.Nonnull
  public String getBase64FileContents() {
    return base64FileContents;
  }

  public void setBase64FileContents(@javax.annotation.Nonnull String base64FileContents) {
    this.base64FileContents = base64FileContents;
  }


  public DownloadAttachmentDto contentType(@javax.annotation.Nonnull String contentType) {
    this.contentType = contentType;
    return this;
  }

  /**
   * Content type of attachment. Examples are &#x60;image/png&#x60;, &#x60;application/msword&#x60;, &#x60;text/csv&#x60; etc.
   * @return contentType
   */
  @javax.annotation.Nonnull
  public String getContentType() {
    return contentType;
  }

  public void setContentType(@javax.annotation.Nonnull String contentType) {
    this.contentType = contentType;
  }


  public DownloadAttachmentDto sizeBytes(@javax.annotation.Nonnull Long sizeBytes) {
    this.sizeBytes = sizeBytes;
    return this;
  }

  /**
   * Size in bytes of attachment content
   * @return sizeBytes
   */
  @javax.annotation.Nonnull
  public Long getSizeBytes() {
    return sizeBytes;
  }

  public void setSizeBytes(@javax.annotation.Nonnull Long sizeBytes) {
    this.sizeBytes = sizeBytes;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadAttachmentDto downloadAttachmentDto = (DownloadAttachmentDto) o;
    return Objects.equals(this.base64FileContents, downloadAttachmentDto.base64FileContents) &&
        Objects.equals(this.contentType, downloadAttachmentDto.contentType) &&
        Objects.equals(this.sizeBytes, downloadAttachmentDto.sizeBytes);
  }

  @Override
  public int hashCode() {
    return Objects.hash(base64FileContents, contentType, sizeBytes);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadAttachmentDto {\n");
    sb.append("    base64FileContents: ").append(toIndentedString(base64FileContents)).append("\n");
    sb.append("    contentType: ").append(toIndentedString(contentType)).append("\n");
    sb.append("    sizeBytes: ").append(toIndentedString(sizeBytes)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("base64FileContents");
    openapiFields.add("contentType");
    openapiFields.add("sizeBytes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("base64FileContents");
    openapiRequiredFields.add("contentType");
    openapiRequiredFields.add("sizeBytes");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadAttachmentDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!DownloadAttachmentDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadAttachmentDto is not found in the empty JSON string", DownloadAttachmentDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadAttachmentDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadAttachmentDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DownloadAttachmentDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("base64FileContents").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `base64FileContents` to be a primitive type in the JSON string but got `%s`", jsonObj.get("base64FileContents").toString()));
      }
      if (!jsonObj.get("contentType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contentType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contentType").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadAttachmentDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadAttachmentDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadAttachmentDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadAttachmentDto.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadAttachmentDto>() {
           @Override
           public void write(JsonWriter out, DownloadAttachmentDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadAttachmentDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadAttachmentDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadAttachmentDto
   * @throws IOException if the JSON string is invalid with respect to DownloadAttachmentDto
   */
  public static DownloadAttachmentDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadAttachmentDto.class);
  }

  /**
   * Convert an instance of DownloadAttachmentDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

