/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.WebhookHeaders;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://java.api.mailslurp.com/schemas/webhook-payload for the payload schema.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WebhookDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  @javax.annotation.Nonnull
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  @javax.annotation.Nonnull
  private UUID userId;

  public static final String SERIALIZED_NAME_BASIC_AUTH = "basicAuth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  @javax.annotation.Nonnull
  private Boolean basicAuth;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  @javax.annotation.Nullable
  private String name;

  public static final String SERIALIZED_NAME_PHONE_ID = "phoneId";
  @SerializedName(SERIALIZED_NAME_PHONE_ID)
  @javax.annotation.Nullable
  private UUID phoneId;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  @javax.annotation.Nullable
  private UUID inboxId;

  public static final String SERIALIZED_NAME_REQUEST_BODY_TEMPLATE = "requestBodyTemplate";
  @SerializedName(SERIALIZED_NAME_REQUEST_BODY_TEMPLATE)
  @javax.annotation.Nullable
  private String requestBodyTemplate;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  @javax.annotation.Nonnull
  private String url;

  /**
   * HTTP method that your server endpoint must listen for
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    POST("POST"),
    
    DELETE("DELETE"),
    
    GET("GET"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    HEAD("HEAD"),
    
    OPTIONS("OPTIONS"),
    
    TRACE("TRACE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      MethodEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  @javax.annotation.Nonnull
  private MethodEnum method;

  public static final String SERIALIZED_NAME_PAYLOAD_JSON_SCHEMA = "payloadJsonSchema";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_JSON_SCHEMA)
  @javax.annotation.Nonnull
  private String payloadJsonSchema;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  @javax.annotation.Nullable
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  /**
   * Webhook trigger event name
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_AI_TRANSFORM_RESULT("NEW_AI_TRANSFORM_RESULT"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS"),
    
    NEW_GUEST_USER("NEW_GUEST_USER");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      EventNameEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  @javax.annotation.Nullable
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "requestHeaders";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  @javax.annotation.Nullable
  private WebhookHeaders requestHeaders;

  public static final String SERIALIZED_NAME_AI_TRANSFORM_ID = "aiTransformId";
  @SerializedName(SERIALIZED_NAME_AI_TRANSFORM_ID)
  @javax.annotation.Nullable
  private UUID aiTransformId;

  public static final String SERIALIZED_NAME_IGNORE_INSECURE_SSL_CERTIFICATES = "ignoreInsecureSslCertificates";
  @SerializedName(SERIALIZED_NAME_IGNORE_INSECURE_SSL_CERTIFICATES)
  @javax.annotation.Nullable
  private Boolean ignoreInsecureSslCertificates;

  public static final String SERIALIZED_NAME_USE_STATIC_IP_RANGE = "useStaticIpRange";
  @SerializedName(SERIALIZED_NAME_USE_STATIC_IP_RANGE)
  @javax.annotation.Nullable
  private Boolean useStaticIpRange;

  /**
   * Webhook health
   */
  @JsonAdapter(HealthStatusEnum.Adapter.class)
  public enum HealthStatusEnum {
    HEALTHY("HEALTHY"),
    
    UNHEALTHY("UNHEALTHY");

    private String value;

    HealthStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static HealthStatusEnum fromValue(String value) {
      for (HealthStatusEnum b : HealthStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<HealthStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final HealthStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public HealthStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return HealthStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      HealthStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_HEALTH_STATUS = "healthStatus";
  @SerializedName(SERIALIZED_NAME_HEALTH_STATUS)
  @javax.annotation.Nullable
  private HealthStatusEnum healthStatus;

  public WebhookDto() {
  }

  public WebhookDto id(@javax.annotation.Nonnull UUID id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the Webhook
   * @return id
   */
  @javax.annotation.Nonnull
  public UUID getId() {
    return id;
  }

  public void setId(@javax.annotation.Nonnull UUID id) {
    this.id = id;
  }


  public WebhookDto userId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
    return this;
  }

  /**
   * User ID of the Webhook
   * @return userId
   */
  @javax.annotation.Nonnull
  public UUID getUserId() {
    return userId;
  }

  public void setUserId(@javax.annotation.Nonnull UUID userId) {
    this.userId = userId;
  }


  public WebhookDto basicAuth(@javax.annotation.Nonnull Boolean basicAuth) {
    this.basicAuth = basicAuth;
    return this;
  }

  /**
   * Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.
   * @return basicAuth
   */
  @javax.annotation.Nonnull
  public Boolean getBasicAuth() {
    return basicAuth;
  }

  public void setBasicAuth(@javax.annotation.Nonnull Boolean basicAuth) {
    this.basicAuth = basicAuth;
  }


  public WebhookDto name(@javax.annotation.Nullable String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the webhook
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(@javax.annotation.Nullable String name) {
    this.name = name;
  }


  public WebhookDto phoneId(@javax.annotation.Nullable UUID phoneId) {
    this.phoneId = phoneId;
    return this;
  }

  /**
   * The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set
   * @return phoneId
   */
  @javax.annotation.Nullable
  public UUID getPhoneId() {
    return phoneId;
  }

  public void setPhoneId(@javax.annotation.Nullable UUID phoneId) {
    this.phoneId = phoneId;
  }


  public WebhookDto inboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
    return this;
  }

  /**
   * The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set
   * @return inboxId
   */
  @javax.annotation.Nullable
  public UUID getInboxId() {
    return inboxId;
  }

  public void setInboxId(@javax.annotation.Nullable UUID inboxId) {
    this.inboxId = inboxId;
  }


  public WebhookDto requestBodyTemplate(@javax.annotation.Nullable String requestBodyTemplate) {
    this.requestBodyTemplate = requestBodyTemplate;
    return this;
  }

  /**
   * Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.
   * @return requestBodyTemplate
   */
  @javax.annotation.Nullable
  public String getRequestBodyTemplate() {
    return requestBodyTemplate;
  }

  public void setRequestBodyTemplate(@javax.annotation.Nullable String requestBodyTemplate) {
    this.requestBodyTemplate = requestBodyTemplate;
  }


  public WebhookDto url(@javax.annotation.Nonnull String url) {
    this.url = url;
    return this;
  }

  /**
   * URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.
   * @return url
   */
  @javax.annotation.Nonnull
  public String getUrl() {
    return url;
  }

  public void setUrl(@javax.annotation.Nonnull String url) {
    this.url = url;
  }


  public WebhookDto method(@javax.annotation.Nonnull MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * HTTP method that your server endpoint must listen for
   * @return method
   */
  @javax.annotation.Nonnull
  public MethodEnum getMethod() {
    return method;
  }

  public void setMethod(@javax.annotation.Nonnull MethodEnum method) {
    this.method = method;
  }


  public WebhookDto payloadJsonSchema(@javax.annotation.Nonnull String payloadJsonSchema) {
    this.payloadJsonSchema = payloadJsonSchema;
    return this;
  }

  /**
   * Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method
   * @return payloadJsonSchema
   */
  @javax.annotation.Nonnull
  public String getPayloadJsonSchema() {
    return payloadJsonSchema;
  }

  public void setPayloadJsonSchema(@javax.annotation.Nonnull String payloadJsonSchema) {
    this.payloadJsonSchema = payloadJsonSchema;
  }


  public WebhookDto createdAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * When the webhook was created
   * @return createdAt
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(@javax.annotation.Nullable OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookDto updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Get updatedAt
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookDto eventName(@javax.annotation.Nullable EventNameEnum eventName) {
    this.eventName = eventName;
    return this;
  }

  /**
   * Webhook trigger event name
   * @return eventName
   */
  @javax.annotation.Nullable
  public EventNameEnum getEventName() {
    return eventName;
  }

  public void setEventName(@javax.annotation.Nullable EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookDto requestHeaders(@javax.annotation.Nullable WebhookHeaders requestHeaders) {
    this.requestHeaders = requestHeaders;
    return this;
  }

  /**
   * Get requestHeaders
   * @return requestHeaders
   */
  @javax.annotation.Nullable
  public WebhookHeaders getRequestHeaders() {
    return requestHeaders;
  }

  public void setRequestHeaders(@javax.annotation.Nullable WebhookHeaders requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public WebhookDto aiTransformId(@javax.annotation.Nullable UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
    return this;
  }

  /**
   * ID of AI transformer for payload
   * @return aiTransformId
   */
  @javax.annotation.Nullable
  public UUID getAiTransformId() {
    return aiTransformId;
  }

  public void setAiTransformId(@javax.annotation.Nullable UUID aiTransformId) {
    this.aiTransformId = aiTransformId;
  }


  public WebhookDto ignoreInsecureSslCertificates(@javax.annotation.Nullable Boolean ignoreInsecureSslCertificates) {
    this.ignoreInsecureSslCertificates = ignoreInsecureSslCertificates;
    return this;
  }

  /**
   * Should notifier ignore insecure SSL certificates
   * @return ignoreInsecureSslCertificates
   */
  @javax.annotation.Nullable
  public Boolean getIgnoreInsecureSslCertificates() {
    return ignoreInsecureSslCertificates;
  }

  public void setIgnoreInsecureSslCertificates(@javax.annotation.Nullable Boolean ignoreInsecureSslCertificates) {
    this.ignoreInsecureSslCertificates = ignoreInsecureSslCertificates;
  }


  public WebhookDto useStaticIpRange(@javax.annotation.Nullable Boolean useStaticIpRange) {
    this.useStaticIpRange = useStaticIpRange;
    return this;
  }

  /**
   * Should notifier use static IP range when sending webhook payload
   * @return useStaticIpRange
   */
  @javax.annotation.Nullable
  public Boolean getUseStaticIpRange() {
    return useStaticIpRange;
  }

  public void setUseStaticIpRange(@javax.annotation.Nullable Boolean useStaticIpRange) {
    this.useStaticIpRange = useStaticIpRange;
  }


  public WebhookDto healthStatus(@javax.annotation.Nullable HealthStatusEnum healthStatus) {
    this.healthStatus = healthStatus;
    return this;
  }

  /**
   * Webhook health
   * @return healthStatus
   */
  @javax.annotation.Nullable
  public HealthStatusEnum getHealthStatus() {
    return healthStatus;
  }

  public void setHealthStatus(@javax.annotation.Nullable HealthStatusEnum healthStatus) {
    this.healthStatus = healthStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookDto webhookDto = (WebhookDto) o;
    return Objects.equals(this.id, webhookDto.id) &&
        Objects.equals(this.userId, webhookDto.userId) &&
        Objects.equals(this.basicAuth, webhookDto.basicAuth) &&
        Objects.equals(this.name, webhookDto.name) &&
        Objects.equals(this.phoneId, webhookDto.phoneId) &&
        Objects.equals(this.inboxId, webhookDto.inboxId) &&
        Objects.equals(this.requestBodyTemplate, webhookDto.requestBodyTemplate) &&
        Objects.equals(this.url, webhookDto.url) &&
        Objects.equals(this.method, webhookDto.method) &&
        Objects.equals(this.payloadJsonSchema, webhookDto.payloadJsonSchema) &&
        Objects.equals(this.createdAt, webhookDto.createdAt) &&
        Objects.equals(this.updatedAt, webhookDto.updatedAt) &&
        Objects.equals(this.eventName, webhookDto.eventName) &&
        Objects.equals(this.requestHeaders, webhookDto.requestHeaders) &&
        Objects.equals(this.aiTransformId, webhookDto.aiTransformId) &&
        Objects.equals(this.ignoreInsecureSslCertificates, webhookDto.ignoreInsecureSslCertificates) &&
        Objects.equals(this.useStaticIpRange, webhookDto.useStaticIpRange) &&
        Objects.equals(this.healthStatus, webhookDto.healthStatus);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, basicAuth, name, phoneId, inboxId, requestBodyTemplate, url, method, payloadJsonSchema, createdAt, updatedAt, eventName, requestHeaders, aiTransformId, ignoreInsecureSslCertificates, useStaticIpRange, healthStatus);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneId: ").append(toIndentedString(phoneId)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    requestBodyTemplate: ").append(toIndentedString(requestBodyTemplate)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    payloadJsonSchema: ").append(toIndentedString(payloadJsonSchema)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    aiTransformId: ").append(toIndentedString(aiTransformId)).append("\n");
    sb.append("    ignoreInsecureSslCertificates: ").append(toIndentedString(ignoreInsecureSslCertificates)).append("\n");
    sb.append("    useStaticIpRange: ").append(toIndentedString(useStaticIpRange)).append("\n");
    sb.append("    healthStatus: ").append(toIndentedString(healthStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("basicAuth");
    openapiFields.add("name");
    openapiFields.add("phoneId");
    openapiFields.add("inboxId");
    openapiFields.add("requestBodyTemplate");
    openapiFields.add("url");
    openapiFields.add("method");
    openapiFields.add("payloadJsonSchema");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("eventName");
    openapiFields.add("requestHeaders");
    openapiFields.add("aiTransformId");
    openapiFields.add("ignoreInsecureSslCertificates");
    openapiFields.add("useStaticIpRange");
    openapiFields.add("healthStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("basicAuth");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("payloadJsonSchema");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WebhookDto
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WebhookDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookDto is not found in the empty JSON string", WebhookDto.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WebhookDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookDto` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookDto.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phoneId") != null && !jsonObj.get("phoneId").isJsonNull()) && !jsonObj.get("phoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneId").toString()));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("requestBodyTemplate") != null && !jsonObj.get("requestBodyTemplate").isJsonNull()) && !jsonObj.get("requestBodyTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestBodyTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestBodyTemplate").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      // validate the required field `method`
      MethodEnum.validateJsonElement(jsonObj.get("method"));
      if (!jsonObj.get("payloadJsonSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payloadJsonSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payloadJsonSchema").toString()));
      }
      if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) && !jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the optional field `eventName`
      if (jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) {
        EventNameEnum.validateJsonElement(jsonObj.get("eventName"));
      }
      // validate the optional field `requestHeaders`
      if (jsonObj.get("requestHeaders") != null && !jsonObj.get("requestHeaders").isJsonNull()) {
        WebhookHeaders.validateJsonElement(jsonObj.get("requestHeaders"));
      }
      if ((jsonObj.get("aiTransformId") != null && !jsonObj.get("aiTransformId").isJsonNull()) && !jsonObj.get("aiTransformId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aiTransformId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aiTransformId").toString()));
      }
      if ((jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) && !jsonObj.get("healthStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `healthStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("healthStatus").toString()));
      }
      // validate the optional field `healthStatus`
      if (jsonObj.get("healthStatus") != null && !jsonObj.get("healthStatus").isJsonNull()) {
        HealthStatusEnum.validateJsonElement(jsonObj.get("healthStatus"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookDto.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookDto>() {
           @Override
           public void write(JsonWriter out, WebhookDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookDto read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WebhookDto given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WebhookDto
   * @throws IOException if the JSON string is invalid with respect to WebhookDto
   */
  public static WebhookDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookDto.class);
  }

  /**
   * Convert an instance of WebhookDto to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

