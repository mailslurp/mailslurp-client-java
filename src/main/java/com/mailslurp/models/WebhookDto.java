/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.WebhookHeaders;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://java.api.mailslurp.com/schemas/webhook-payload for the payload schema.
 */
@ApiModel(description = "Representation of a webhook for an inbox. The URL specified will be using by MailSlurp whenever an email is received by the attached inbox. A webhook entity should have a URL that points to your server. Your server should accept HTTP/S POST requests and return a success 200. MailSlurp will retry your webhooks if they fail. See https://java.api.mailslurp.com/schemas/webhook-payload for the payload schema.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2023-06-12T23:33:57.654989Z[Etc/UTC]")
public class WebhookDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_USER_ID = "userId";
  @SerializedName(SERIALIZED_NAME_USER_ID)
  private UUID userId;

  public static final String SERIALIZED_NAME_BASIC_AUTH = "basicAuth";
  @SerializedName(SERIALIZED_NAME_BASIC_AUTH)
  private Boolean basicAuth;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PHONE_ID = "phoneId";
  @SerializedName(SERIALIZED_NAME_PHONE_ID)
  private UUID phoneId;

  public static final String SERIALIZED_NAME_INBOX_ID = "inboxId";
  @SerializedName(SERIALIZED_NAME_INBOX_ID)
  private UUID inboxId;

  public static final String SERIALIZED_NAME_REQUEST_BODY_TEMPLATE = "requestBodyTemplate";
  @SerializedName(SERIALIZED_NAME_REQUEST_BODY_TEMPLATE)
  private String requestBodyTemplate;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  /**
   * HTTP method that your server endpoint must listen for
   */
  @JsonAdapter(MethodEnum.Adapter.class)
  public enum MethodEnum {
    GET("GET"),
    
    HEAD("HEAD"),
    
    POST("POST"),
    
    PUT("PUT"),
    
    PATCH("PATCH"),
    
    DELETE("DELETE"),
    
    OPTIONS("OPTIONS"),
    
    TRACE("TRACE");

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<MethodEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final MethodEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public MethodEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return MethodEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_METHOD = "method";
  @SerializedName(SERIALIZED_NAME_METHOD)
  private MethodEnum method;

  public static final String SERIALIZED_NAME_PAYLOAD_JSON_SCHEMA = "payloadJsonSchema";
  @SerializedName(SERIALIZED_NAME_PAYLOAD_JSON_SCHEMA)
  private String payloadJsonSchema;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  /**
   * Webhook trigger event name
   */
  @JsonAdapter(EventNameEnum.Adapter.class)
  public enum EventNameEnum {
    EMAIL_RECEIVED("EMAIL_RECEIVED"),
    
    NEW_EMAIL("NEW_EMAIL"),
    
    NEW_CONTACT("NEW_CONTACT"),
    
    NEW_ATTACHMENT("NEW_ATTACHMENT"),
    
    EMAIL_OPENED("EMAIL_OPENED"),
    
    EMAIL_READ("EMAIL_READ"),
    
    DELIVERY_STATUS("DELIVERY_STATUS"),
    
    BOUNCE("BOUNCE"),
    
    BOUNCE_RECIPIENT("BOUNCE_RECIPIENT"),
    
    NEW_SMS("NEW_SMS");

    private String value;

    EventNameEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EventNameEnum fromValue(String value) {
      for (EventNameEnum b : EventNameEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<EventNameEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EventNameEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EventNameEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EventNameEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EVENT_NAME = "eventName";
  @SerializedName(SERIALIZED_NAME_EVENT_NAME)
  private EventNameEnum eventName;

  public static final String SERIALIZED_NAME_REQUEST_HEADERS = "requestHeaders";
  @SerializedName(SERIALIZED_NAME_REQUEST_HEADERS)
  private WebhookHeaders requestHeaders;

  public static final String SERIALIZED_NAME_IGNORE_INSECURE_SSL_CERTIFICATES = "ignoreInsecureSslCertificates";
  @SerializedName(SERIALIZED_NAME_IGNORE_INSECURE_SSL_CERTIFICATES)
  private Boolean ignoreInsecureSslCertificates;

  public static final String SERIALIZED_NAME_USE_STATIC_IP_RANGE = "useStaticIpRange";
  @SerializedName(SERIALIZED_NAME_USE_STATIC_IP_RANGE)
  private Boolean useStaticIpRange;

  public WebhookDto() {
  }

  public WebhookDto id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * ID of the Webhook
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "ID of the Webhook")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public WebhookDto userId(UUID userId) {
    
    this.userId = userId;
    return this;
  }

   /**
   * User ID of the Webhook
   * @return userId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "User ID of the Webhook")

  public UUID getUserId() {
    return userId;
  }


  public void setUserId(UUID userId) {
    this.userId = userId;
  }


  public WebhookDto basicAuth(Boolean basicAuth) {
    
    this.basicAuth = basicAuth;
    return this;
  }

   /**
   * Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.
   * @return basicAuth
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Does webhook expect basic authentication? If true it means you created this webhook with a username and password. MailSlurp will use these in the URL to authenticate itself.")

  public Boolean getBasicAuth() {
    return basicAuth;
  }


  public void setBasicAuth(Boolean basicAuth) {
    this.basicAuth = basicAuth;
  }


  public WebhookDto name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of the webhook
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of the webhook")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public WebhookDto phoneId(UUID phoneId) {
    
    this.phoneId = phoneId;
    return this;
  }

   /**
   * The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set
   * @return phoneId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The phoneNumberId that the Webhook will be triggered by. If null then webhook triggered at account level or inbox level if inboxId set")

  public UUID getPhoneId() {
    return phoneId;
  }


  public void setPhoneId(UUID phoneId) {
    this.phoneId = phoneId;
  }


  public WebhookDto inboxId(UUID inboxId) {
    
    this.inboxId = inboxId;
    return this;
  }

   /**
   * The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set
   * @return inboxId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The inbox that the Webhook will be triggered by. If null then webhook triggered at account level or phone level if phoneId set")

  public UUID getInboxId() {
    return inboxId;
  }


  public void setInboxId(UUID inboxId) {
    this.inboxId = inboxId;
  }


  public WebhookDto requestBodyTemplate(String requestBodyTemplate) {
    
    this.requestBodyTemplate = requestBodyTemplate;
    return this;
  }

   /**
   * Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.
   * @return requestBodyTemplate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Request body template for HTTP request that will be sent for the webhook. Use Moustache style template variables to insert values from the original event payload.")

  public String getRequestBodyTemplate() {
    return requestBodyTemplate;
  }


  public void setRequestBodyTemplate(String requestBodyTemplate) {
    this.requestBodyTemplate = requestBodyTemplate;
  }


  public WebhookDto url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "URL of your server that the webhook will be sent to. The schema of the JSON that is sent is described by the payloadJsonSchema.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public WebhookDto method(MethodEnum method) {
    
    this.method = method;
    return this;
  }

   /**
   * HTTP method that your server endpoint must listen for
   * @return method
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "HTTP method that your server endpoint must listen for")

  public MethodEnum getMethod() {
    return method;
  }


  public void setMethod(MethodEnum method) {
    this.method = method;
  }


  public WebhookDto payloadJsonSchema(String payloadJsonSchema) {
    
    this.payloadJsonSchema = payloadJsonSchema;
    return this;
  }

   /**
   * Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method
   * @return payloadJsonSchema
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Deprecated. Fetch JSON Schema for webhook using the getJsonSchemaForWebhookPayload method")

  public String getPayloadJsonSchema() {
    return payloadJsonSchema;
  }


  public void setPayloadJsonSchema(String payloadJsonSchema) {
    this.payloadJsonSchema = payloadJsonSchema;
  }


  public WebhookDto createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * When the webhook was created
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(required = true, value = "When the webhook was created")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public WebhookDto updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public WebhookDto eventName(EventNameEnum eventName) {
    
    this.eventName = eventName;
    return this;
  }

   /**
   * Webhook trigger event name
   * @return eventName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Webhook trigger event name")

  public EventNameEnum getEventName() {
    return eventName;
  }


  public void setEventName(EventNameEnum eventName) {
    this.eventName = eventName;
  }


  public WebhookDto requestHeaders(WebhookHeaders requestHeaders) {
    
    this.requestHeaders = requestHeaders;
    return this;
  }

   /**
   * Get requestHeaders
   * @return requestHeaders
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public WebhookHeaders getRequestHeaders() {
    return requestHeaders;
  }


  public void setRequestHeaders(WebhookHeaders requestHeaders) {
    this.requestHeaders = requestHeaders;
  }


  public WebhookDto ignoreInsecureSslCertificates(Boolean ignoreInsecureSslCertificates) {
    
    this.ignoreInsecureSslCertificates = ignoreInsecureSslCertificates;
    return this;
  }

   /**
   * Should notifier ignore insecure SSL certificates
   * @return ignoreInsecureSslCertificates
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should notifier ignore insecure SSL certificates")

  public Boolean getIgnoreInsecureSslCertificates() {
    return ignoreInsecureSslCertificates;
  }


  public void setIgnoreInsecureSslCertificates(Boolean ignoreInsecureSslCertificates) {
    this.ignoreInsecureSslCertificates = ignoreInsecureSslCertificates;
  }


  public WebhookDto useStaticIpRange(Boolean useStaticIpRange) {
    
    this.useStaticIpRange = useStaticIpRange;
    return this;
  }

   /**
   * Should notifier use static IP range when sending webhook payload
   * @return useStaticIpRange
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Should notifier use static IP range when sending webhook payload")

  public Boolean getUseStaticIpRange() {
    return useStaticIpRange;
  }


  public void setUseStaticIpRange(Boolean useStaticIpRange) {
    this.useStaticIpRange = useStaticIpRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WebhookDto webhookDto = (WebhookDto) o;
    return Objects.equals(this.id, webhookDto.id) &&
        Objects.equals(this.userId, webhookDto.userId) &&
        Objects.equals(this.basicAuth, webhookDto.basicAuth) &&
        Objects.equals(this.name, webhookDto.name) &&
        Objects.equals(this.phoneId, webhookDto.phoneId) &&
        Objects.equals(this.inboxId, webhookDto.inboxId) &&
        Objects.equals(this.requestBodyTemplate, webhookDto.requestBodyTemplate) &&
        Objects.equals(this.url, webhookDto.url) &&
        Objects.equals(this.method, webhookDto.method) &&
        Objects.equals(this.payloadJsonSchema, webhookDto.payloadJsonSchema) &&
        Objects.equals(this.createdAt, webhookDto.createdAt) &&
        Objects.equals(this.updatedAt, webhookDto.updatedAt) &&
        Objects.equals(this.eventName, webhookDto.eventName) &&
        Objects.equals(this.requestHeaders, webhookDto.requestHeaders) &&
        Objects.equals(this.ignoreInsecureSslCertificates, webhookDto.ignoreInsecureSslCertificates) &&
        Objects.equals(this.useStaticIpRange, webhookDto.useStaticIpRange);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, userId, basicAuth, name, phoneId, inboxId, requestBodyTemplate, url, method, payloadJsonSchema, createdAt, updatedAt, eventName, requestHeaders, ignoreInsecureSslCertificates, useStaticIpRange);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WebhookDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    userId: ").append(toIndentedString(userId)).append("\n");
    sb.append("    basicAuth: ").append(toIndentedString(basicAuth)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    phoneId: ").append(toIndentedString(phoneId)).append("\n");
    sb.append("    inboxId: ").append(toIndentedString(inboxId)).append("\n");
    sb.append("    requestBodyTemplate: ").append(toIndentedString(requestBodyTemplate)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    payloadJsonSchema: ").append(toIndentedString(payloadJsonSchema)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    eventName: ").append(toIndentedString(eventName)).append("\n");
    sb.append("    requestHeaders: ").append(toIndentedString(requestHeaders)).append("\n");
    sb.append("    ignoreInsecureSslCertificates: ").append(toIndentedString(ignoreInsecureSslCertificates)).append("\n");
    sb.append("    useStaticIpRange: ").append(toIndentedString(useStaticIpRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("userId");
    openapiFields.add("basicAuth");
    openapiFields.add("name");
    openapiFields.add("phoneId");
    openapiFields.add("inboxId");
    openapiFields.add("requestBodyTemplate");
    openapiFields.add("url");
    openapiFields.add("method");
    openapiFields.add("payloadJsonSchema");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("eventName");
    openapiFields.add("requestHeaders");
    openapiFields.add("ignoreInsecureSslCertificates");
    openapiFields.add("useStaticIpRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("userId");
    openapiRequiredFields.add("basicAuth");
    openapiRequiredFields.add("url");
    openapiRequiredFields.add("method");
    openapiRequiredFields.add("payloadJsonSchema");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to WebhookDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!WebhookDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WebhookDto is not found in the empty JSON string", WebhookDto.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!WebhookDto.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WebhookDto` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WebhookDto.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("userId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `userId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("userId").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("phoneId") != null && !jsonObj.get("phoneId").isJsonNull()) && !jsonObj.get("phoneId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneId").toString()));
      }
      if ((jsonObj.get("inboxId") != null && !jsonObj.get("inboxId").isJsonNull()) && !jsonObj.get("inboxId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `inboxId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("inboxId").toString()));
      }
      if ((jsonObj.get("requestBodyTemplate") != null && !jsonObj.get("requestBodyTemplate").isJsonNull()) && !jsonObj.get("requestBodyTemplate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `requestBodyTemplate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("requestBodyTemplate").toString()));
      }
      if (!jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      if (!jsonObj.get("method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("method").toString()));
      }
      if (!jsonObj.get("payloadJsonSchema").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payloadJsonSchema` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payloadJsonSchema").toString()));
      }
      if ((jsonObj.get("eventName") != null && !jsonObj.get("eventName").isJsonNull()) && !jsonObj.get("eventName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eventName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eventName").toString()));
      }
      // validate the optional field `requestHeaders`
      if (jsonObj.get("requestHeaders") != null && !jsonObj.get("requestHeaders").isJsonNull()) {
        WebhookHeaders.validateJsonObject(jsonObj.getAsJsonObject("requestHeaders"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WebhookDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WebhookDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WebhookDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WebhookDto.class));

       return (TypeAdapter<T>) new TypeAdapter<WebhookDto>() {
           @Override
           public void write(JsonWriter out, WebhookDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WebhookDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of WebhookDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of WebhookDto
  * @throws IOException if the JSON string is invalid with respect to WebhookDto
  */
  public static WebhookDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WebhookDto.class);
  }

 /**
  * Convert an instance of WebhookDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

