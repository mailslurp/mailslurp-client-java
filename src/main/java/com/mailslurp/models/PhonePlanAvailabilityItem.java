/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * PhonePlanAvailabilityItem
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-30T22:25:17.446308831Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class PhonePlanAvailabilityItem {
  /**
   * Gets or Sets phoneCountry
   */
  @JsonAdapter(PhoneCountryEnum.Adapter.class)
  public enum PhoneCountryEnum {
    US("US"),
    
    GB("GB"),
    
    AU("AU"),
    
    CA("CA"),
    
    EE("EE"),
    
    HK("HK"),
    
    PL("PL"),
    
    CH("CH"),
    
    PT("PT"),
    
    NL("NL"),
    
    IL("IL"),
    
    SE("SE");

    private String value;

    PhoneCountryEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PhoneCountryEnum fromValue(String value) {
      for (PhoneCountryEnum b : PhoneCountryEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PhoneCountryEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PhoneCountryEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PhoneCountryEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PhoneCountryEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      PhoneCountryEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PHONE_COUNTRY = "phoneCountry";
  @SerializedName(SERIALIZED_NAME_PHONE_COUNTRY)
  @javax.annotation.Nonnull
  private PhoneCountryEnum phoneCountry;

  /**
   * Gets or Sets availabilityStatus
   */
  @JsonAdapter(AvailabilityStatusEnum.Adapter.class)
  public enum AvailabilityStatusEnum {
    AVAILABLE("AVAILABLE"),
    
    NON_MATCHING_SUBSCRIPTION_CURRENCY("NON_MATCHING_SUBSCRIPTION_CURRENCY"),
    
    NON_MATCHING_SUBSCRIPTION_TYPE("NON_MATCHING_SUBSCRIPTION_TYPE"),
    
    ALREADY_ASSIGNED("ALREADY_ASSIGNED");

    private String value;

    AvailabilityStatusEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AvailabilityStatusEnum fromValue(String value) {
      for (AvailabilityStatusEnum b : AvailabilityStatusEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AvailabilityStatusEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AvailabilityStatusEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AvailabilityStatusEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AvailabilityStatusEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      AvailabilityStatusEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AVAILABILITY_STATUS = "availabilityStatus";
  @SerializedName(SERIALIZED_NAME_AVAILABILITY_STATUS)
  @javax.annotation.Nonnull
  private AvailabilityStatusEnum availabilityStatus;

  public PhonePlanAvailabilityItem() {
  }

  public PhonePlanAvailabilityItem phoneCountry(@javax.annotation.Nonnull PhoneCountryEnum phoneCountry) {
    this.phoneCountry = phoneCountry;
    return this;
  }

  /**
   * Get phoneCountry
   * @return phoneCountry
   */
  @javax.annotation.Nonnull
  public PhoneCountryEnum getPhoneCountry() {
    return phoneCountry;
  }

  public void setPhoneCountry(@javax.annotation.Nonnull PhoneCountryEnum phoneCountry) {
    this.phoneCountry = phoneCountry;
  }


  public PhonePlanAvailabilityItem availabilityStatus(@javax.annotation.Nonnull AvailabilityStatusEnum availabilityStatus) {
    this.availabilityStatus = availabilityStatus;
    return this;
  }

  /**
   * Get availabilityStatus
   * @return availabilityStatus
   */
  @javax.annotation.Nonnull
  public AvailabilityStatusEnum getAvailabilityStatus() {
    return availabilityStatus;
  }

  public void setAvailabilityStatus(@javax.annotation.Nonnull AvailabilityStatusEnum availabilityStatus) {
    this.availabilityStatus = availabilityStatus;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PhonePlanAvailabilityItem phonePlanAvailabilityItem = (PhonePlanAvailabilityItem) o;
    return Objects.equals(this.phoneCountry, phonePlanAvailabilityItem.phoneCountry) &&
        Objects.equals(this.availabilityStatus, phonePlanAvailabilityItem.availabilityStatus);
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneCountry, availabilityStatus);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PhonePlanAvailabilityItem {\n");
    sb.append("    phoneCountry: ").append(toIndentedString(phoneCountry)).append("\n");
    sb.append("    availabilityStatus: ").append(toIndentedString(availabilityStatus)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phoneCountry");
    openapiFields.add("availabilityStatus");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phoneCountry");
    openapiRequiredFields.add("availabilityStatus");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PhonePlanAvailabilityItem
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!PhonePlanAvailabilityItem.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PhonePlanAvailabilityItem is not found in the empty JSON string", PhonePlanAvailabilityItem.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PhonePlanAvailabilityItem.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PhonePlanAvailabilityItem` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PhonePlanAvailabilityItem.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("phoneCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneCountry").toString()));
      }
      // validate the required field `phoneCountry`
      PhoneCountryEnum.validateJsonElement(jsonObj.get("phoneCountry"));
      if (!jsonObj.get("availabilityStatus").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `availabilityStatus` to be a primitive type in the JSON string but got `%s`", jsonObj.get("availabilityStatus").toString()));
      }
      // validate the required field `availabilityStatus`
      AvailabilityStatusEnum.validateJsonElement(jsonObj.get("availabilityStatus"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PhonePlanAvailabilityItem.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PhonePlanAvailabilityItem' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PhonePlanAvailabilityItem> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PhonePlanAvailabilityItem.class));

       return (TypeAdapter<T>) new TypeAdapter<PhonePlanAvailabilityItem>() {
           @Override
           public void write(JsonWriter out, PhonePlanAvailabilityItem value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PhonePlanAvailabilityItem read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PhonePlanAvailabilityItem given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PhonePlanAvailabilityItem
   * @throws IOException if the JSON string is invalid with respect to PhonePlanAvailabilityItem
   */
  public static PhonePlanAvailabilityItem fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PhonePlanAvailabilityItem.class);
  }

  /**
   * Convert an instance of PhonePlanAvailabilityItem to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

