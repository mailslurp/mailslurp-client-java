/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.mailslurp.models.SmsMatchOption;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.mailslurp.clients.JSON;

/**
 * Conditions to apply to emails that you are waiting for
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-07-29T21:25:04.210100741Z[Etc/UTC]", comments = "Generator version: 7.13.0")
public class WaitForSmsConditions {
  public static final String SERIALIZED_NAME_PHONE_NUMBER_ID = "phoneNumberId";
  @SerializedName(SERIALIZED_NAME_PHONE_NUMBER_ID)
  @javax.annotation.Nonnull
  private UUID phoneNumberId;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  @javax.annotation.Nullable
  private Integer limit;

  public static final String SERIALIZED_NAME_COUNT = "count";
  @SerializedName(SERIALIZED_NAME_COUNT)
  @javax.annotation.Nonnull
  private Long count;

  public static final String SERIALIZED_NAME_DELAY_TIMEOUT = "delayTimeout";
  @SerializedName(SERIALIZED_NAME_DELAY_TIMEOUT)
  @javax.annotation.Nullable
  private Long delayTimeout;

  public static final String SERIALIZED_NAME_TIMEOUT = "timeout";
  @SerializedName(SERIALIZED_NAME_TIMEOUT)
  @javax.annotation.Nonnull
  private Long timeout;

  public static final String SERIALIZED_NAME_UNREAD_ONLY = "unreadOnly";
  @SerializedName(SERIALIZED_NAME_UNREAD_ONLY)
  @javax.annotation.Nullable
  private Boolean unreadOnly;

  /**
   * How result size should be compared with the expected size. Exactly or at-least matching result?
   */
  @JsonAdapter(CountTypeEnum.Adapter.class)
  public enum CountTypeEnum {
    EXACTLY("EXACTLY"),
    
    ATLEAST("ATLEAST");

    private String value;

    CountTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CountTypeEnum fromValue(String value) {
      for (CountTypeEnum b : CountTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<CountTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CountTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CountTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CountTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      CountTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_COUNT_TYPE = "countType";
  @SerializedName(SERIALIZED_NAME_COUNT_TYPE)
  @javax.annotation.Nullable
  private CountTypeEnum countType;

  public static final String SERIALIZED_NAME_MATCHES = "matches";
  @SerializedName(SERIALIZED_NAME_MATCHES)
  @javax.annotation.Nullable
  private List<SmsMatchOption> matches;

  /**
   * Direction to sort matching SMSs by created time
   */
  @JsonAdapter(SortDirectionEnum.Adapter.class)
  public enum SortDirectionEnum {
    ASC("ASC"),
    
    DESC("DESC");

    private String value;

    SortDirectionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SortDirectionEnum fromValue(String value) {
      for (SortDirectionEnum b : SortDirectionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      return null;
    }

    public static class Adapter extends TypeAdapter<SortDirectionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SortDirectionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SortDirectionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SortDirectionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      String value = jsonElement.getAsString();
      SortDirectionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SORT_DIRECTION = "sortDirection";
  @SerializedName(SERIALIZED_NAME_SORT_DIRECTION)
  @javax.annotation.Nullable
  private SortDirectionEnum sortDirection;

  public static final String SERIALIZED_NAME_SINCE = "since";
  @SerializedName(SERIALIZED_NAME_SINCE)
  @javax.annotation.Nullable
  private OffsetDateTime since;

  public static final String SERIALIZED_NAME_BEFORE = "before";
  @SerializedName(SERIALIZED_NAME_BEFORE)
  @javax.annotation.Nullable
  private OffsetDateTime before;

  public WaitForSmsConditions() {
  }

  public WaitForSmsConditions phoneNumberId(@javax.annotation.Nonnull UUID phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
    return this;
  }

  /**
   * ID of phone number to search within and apply conditions to. Essentially filtering the SMS found to give a count.
   * @return phoneNumberId
   */
  @javax.annotation.Nonnull
  public UUID getPhoneNumberId() {
    return phoneNumberId;
  }

  public void setPhoneNumberId(@javax.annotation.Nonnull UUID phoneNumberId) {
    this.phoneNumberId = phoneNumberId;
  }


  public WaitForSmsConditions limit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Limit results
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(@javax.annotation.Nullable Integer limit) {
    this.limit = limit;
  }


  public WaitForSmsConditions count(@javax.annotation.Nonnull Long count) {
    this.count = count;
    return this;
  }

  /**
   * Number of results that should match conditions. Either exactly or at least this amount based on the &#x60;countType&#x60;. If count condition is not met and the timeout has not been reached the &#x60;waitFor&#x60; method will retry the operation.
   * @return count
   */
  @javax.annotation.Nonnull
  public Long getCount() {
    return count;
  }

  public void setCount(@javax.annotation.Nonnull Long count) {
    this.count = count;
  }


  public WaitForSmsConditions delayTimeout(@javax.annotation.Nullable Long delayTimeout) {
    this.delayTimeout = delayTimeout;
    return this;
  }

  /**
   * Max time in milliseconds to wait between retries if a &#x60;timeout&#x60; is specified.
   * @return delayTimeout
   */
  @javax.annotation.Nullable
  public Long getDelayTimeout() {
    return delayTimeout;
  }

  public void setDelayTimeout(@javax.annotation.Nullable Long delayTimeout) {
    this.delayTimeout = delayTimeout;
  }


  public WaitForSmsConditions timeout(@javax.annotation.Nonnull Long timeout) {
    this.timeout = timeout;
    return this;
  }

  /**
   * Max time in milliseconds to retry the &#x60;waitFor&#x60; operation until conditions are met.
   * @return timeout
   */
  @javax.annotation.Nonnull
  public Long getTimeout() {
    return timeout;
  }

  public void setTimeout(@javax.annotation.Nonnull Long timeout) {
    this.timeout = timeout;
  }


  public WaitForSmsConditions unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
    this.unreadOnly = unreadOnly;
    return this;
  }

  /**
   * Apply conditions only to **unread** SMS. All SMS messages begin with &#x60;read&#x3D;false&#x60;. An SMS is marked &#x60;read&#x3D;true&#x60; when an &#x60;SMS&#x60; has been returned to the user at least once. For example you have called &#x60;getSms&#x60;, or you have viewed the SMS in the dashboard.
   * @return unreadOnly
   */
  @javax.annotation.Nullable
  public Boolean getUnreadOnly() {
    return unreadOnly;
  }

  public void setUnreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
    this.unreadOnly = unreadOnly;
  }


  public WaitForSmsConditions countType(@javax.annotation.Nullable CountTypeEnum countType) {
    this.countType = countType;
    return this;
  }

  /**
   * How result size should be compared with the expected size. Exactly or at-least matching result?
   * @return countType
   */
  @javax.annotation.Nullable
  public CountTypeEnum getCountType() {
    return countType;
  }

  public void setCountType(@javax.annotation.Nullable CountTypeEnum countType) {
    this.countType = countType;
  }


  public WaitForSmsConditions matches(@javax.annotation.Nullable List<SmsMatchOption> matches) {
    this.matches = matches;
    return this;
  }

  public WaitForSmsConditions addMatchesItem(SmsMatchOption matchesItem) {
    if (this.matches == null) {
      this.matches = new ArrayList<>();
    }
    this.matches.add(matchesItem);
    return this;
  }

  /**
   * Conditions that should be matched for an SMS to qualify for results. Each condition will be applied in order to each SMS within a phone number to filter a result list of matching SMSs you are waiting for.
   * @return matches
   */
  @javax.annotation.Nullable
  public List<SmsMatchOption> getMatches() {
    return matches;
  }

  public void setMatches(@javax.annotation.Nullable List<SmsMatchOption> matches) {
    this.matches = matches;
  }


  public WaitForSmsConditions sortDirection(@javax.annotation.Nullable SortDirectionEnum sortDirection) {
    this.sortDirection = sortDirection;
    return this;
  }

  /**
   * Direction to sort matching SMSs by created time
   * @return sortDirection
   */
  @javax.annotation.Nullable
  public SortDirectionEnum getSortDirection() {
    return sortDirection;
  }

  public void setSortDirection(@javax.annotation.Nullable SortDirectionEnum sortDirection) {
    this.sortDirection = sortDirection;
  }


  public WaitForSmsConditions since(@javax.annotation.Nullable OffsetDateTime since) {
    this.since = since;
    return this;
  }

  /**
   * ISO Date Time earliest time of SMS to consider. Filter for matching SMSs that were received after this date
   * @return since
   */
  @javax.annotation.Nullable
  public OffsetDateTime getSince() {
    return since;
  }

  public void setSince(@javax.annotation.Nullable OffsetDateTime since) {
    this.since = since;
  }


  public WaitForSmsConditions before(@javax.annotation.Nullable OffsetDateTime before) {
    this.before = before;
    return this;
  }

  /**
   * ISO Date Time latest time of SMS to consider. Filter for matching SMSs that were received before this date
   * @return before
   */
  @javax.annotation.Nullable
  public OffsetDateTime getBefore() {
    return before;
  }

  public void setBefore(@javax.annotation.Nullable OffsetDateTime before) {
    this.before = before;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    WaitForSmsConditions waitForSmsConditions = (WaitForSmsConditions) o;
    return Objects.equals(this.phoneNumberId, waitForSmsConditions.phoneNumberId) &&
        Objects.equals(this.limit, waitForSmsConditions.limit) &&
        Objects.equals(this.count, waitForSmsConditions.count) &&
        Objects.equals(this.delayTimeout, waitForSmsConditions.delayTimeout) &&
        Objects.equals(this.timeout, waitForSmsConditions.timeout) &&
        Objects.equals(this.unreadOnly, waitForSmsConditions.unreadOnly) &&
        Objects.equals(this.countType, waitForSmsConditions.countType) &&
        Objects.equals(this.matches, waitForSmsConditions.matches) &&
        Objects.equals(this.sortDirection, waitForSmsConditions.sortDirection) &&
        Objects.equals(this.since, waitForSmsConditions.since) &&
        Objects.equals(this.before, waitForSmsConditions.before);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(phoneNumberId, limit, count, delayTimeout, timeout, unreadOnly, countType, matches, sortDirection, since, before);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class WaitForSmsConditions {\n");
    sb.append("    phoneNumberId: ").append(toIndentedString(phoneNumberId)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    count: ").append(toIndentedString(count)).append("\n");
    sb.append("    delayTimeout: ").append(toIndentedString(delayTimeout)).append("\n");
    sb.append("    timeout: ").append(toIndentedString(timeout)).append("\n");
    sb.append("    unreadOnly: ").append(toIndentedString(unreadOnly)).append("\n");
    sb.append("    countType: ").append(toIndentedString(countType)).append("\n");
    sb.append("    matches: ").append(toIndentedString(matches)).append("\n");
    sb.append("    sortDirection: ").append(toIndentedString(sortDirection)).append("\n");
    sb.append("    since: ").append(toIndentedString(since)).append("\n");
    sb.append("    before: ").append(toIndentedString(before)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("phoneNumberId");
    openapiFields.add("limit");
    openapiFields.add("count");
    openapiFields.add("delayTimeout");
    openapiFields.add("timeout");
    openapiFields.add("unreadOnly");
    openapiFields.add("countType");
    openapiFields.add("matches");
    openapiFields.add("sortDirection");
    openapiFields.add("since");
    openapiFields.add("before");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("phoneNumberId");
    openapiRequiredFields.add("count");
    openapiRequiredFields.add("timeout");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to WaitForSmsConditions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException { if (true) { return; }
      if (jsonElement == null) {
        if (!WaitForSmsConditions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in WaitForSmsConditions is not found in the empty JSON string", WaitForSmsConditions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!WaitForSmsConditions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `WaitForSmsConditions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : WaitForSmsConditions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("phoneNumberId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `phoneNumberId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("phoneNumberId").toString()));
      }
      if ((jsonObj.get("countType") != null && !jsonObj.get("countType").isJsonNull()) && !jsonObj.get("countType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countType").toString()));
      }
      // validate the optional field `countType`
      if (jsonObj.get("countType") != null && !jsonObj.get("countType").isJsonNull()) {
        CountTypeEnum.validateJsonElement(jsonObj.get("countType"));
      }
      if (jsonObj.get("matches") != null && !jsonObj.get("matches").isJsonNull()) {
        JsonArray jsonArraymatches = jsonObj.getAsJsonArray("matches");
        if (jsonArraymatches != null) {
          // ensure the json data is an array
          if (!jsonObj.get("matches").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `matches` to be an array in the JSON string but got `%s`", jsonObj.get("matches").toString()));
          }

          // validate the optional field `matches` (array)
          for (int i = 0; i < jsonArraymatches.size(); i++) {
            SmsMatchOption.validateJsonElement(jsonArraymatches.get(i));
          };
        }
      }
      if ((jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) && !jsonObj.get("sortDirection").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sortDirection` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sortDirection").toString()));
      }
      // validate the optional field `sortDirection`
      if (jsonObj.get("sortDirection") != null && !jsonObj.get("sortDirection").isJsonNull()) {
        SortDirectionEnum.validateJsonElement(jsonObj.get("sortDirection"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!WaitForSmsConditions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'WaitForSmsConditions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<WaitForSmsConditions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(WaitForSmsConditions.class));

       return (TypeAdapter<T>) new TypeAdapter<WaitForSmsConditions>() {
           @Override
           public void write(JsonWriter out, WaitForSmsConditions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public WaitForSmsConditions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of WaitForSmsConditions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of WaitForSmsConditions
   * @throws IOException if the JSON string is invalid with respect to WaitForSmsConditions
   */
  public static WaitForSmsConditions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, WaitForSmsConditions.class);
  }

  /**
   * Convert an instance of WaitForSmsConditions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

