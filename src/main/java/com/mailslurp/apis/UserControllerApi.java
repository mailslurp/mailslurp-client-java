/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.mailslurp.models.PageEntityAutomationItems;
import com.mailslurp.models.PageEntityEventItems;
import com.mailslurp.models.PageEntityFavouriteItems;
import java.util.UUID;
import com.mailslurp.models.UserInfoDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class UserControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public UserControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public UserControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getEntityAutomationsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/automations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityAutomationsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable String filter, final ApiCallback _callback) throws ApiException {
        return getEntityAutomationsCall(page, size, sort, since, before, inboxId, phoneId, filter, _callback);

    }


    private ApiResponse<PageEntityAutomationItems> getEntityAutomationsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable String filter) throws ApiException {
        okhttp3.Call localVarCall = getEntityAutomationsValidateBeforeCall(page, size, sort, since, before, inboxId, phoneId, filter, null);
        Type localVarReturnType = new TypeToken<PageEntityAutomationItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntityAutomationsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable String filter, final ApiCallback<PageEntityAutomationItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityAutomationsValidateBeforeCall(page, size, sort, since, before, inboxId, phoneId, filter, _callback);
        Type localVarReturnType = new TypeToken<PageEntityAutomationItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEntityAutomationsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private String filter;

        private APIgetEntityAutomationsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index (optional, default to 0)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size (optional, default to 20)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to DESC)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID (optional)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Optional phone ID (optional)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set filter
         * @param filter Optional automation type filter (optional)
         * @return APIgetEntityAutomationsRequest
         */
        public APIgetEntityAutomationsRequest filter(@javax.annotation.Nullable String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for getEntityAutomations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntityAutomationsCall(page, size, sort, since, before, inboxId, phoneId, filter, _callback);
        }

        /**
         * Execute getEntityAutomations request
         * @return PageEntityAutomationItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEntityAutomationItems execute() throws ApiException {
            ApiResponse<PageEntityAutomationItems> localVarResp = getEntityAutomationsWithHttpInfo(page, size, sort, since, before, inboxId, phoneId, filter);
            return localVarResp.getData();
        }

        /**
         * Execute getEntityAutomations request with HTTP info returned
         * @return ApiResponse&lt;PageEntityAutomationItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEntityAutomationItems> executeWithHttpInfo() throws ApiException {
            return getEntityAutomationsWithHttpInfo(page, size, sort, since, before, inboxId, phoneId, filter);
        }

        /**
         * Execute getEntityAutomations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEntityAutomationItems> _callback) throws ApiException {
            return getEntityAutomationsAsync(page, size, sort, since, before, inboxId, phoneId, filter, _callback);
        }
    }

    /**
     * 
     * 
     * @return APIgetEntityAutomationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEntityAutomationsRequest getEntityAutomations() {
        return new APIgetEntityAutomationsRequest();
    }
    private okhttp3.Call getEntityEventsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (smsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smsId", smsId));
        }

        if (attachmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentId", attachmentId));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityEventsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable String filter, final ApiCallback _callback) throws ApiException {
        return getEntityEventsCall(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter, _callback);

    }


    private ApiResponse<PageEntityEventItems> getEntityEventsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable String filter) throws ApiException {
        okhttp3.Call localVarCall = getEntityEventsValidateBeforeCall(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter, null);
        Type localVarReturnType = new TypeToken<PageEntityEventItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntityEventsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable String filter, final ApiCallback<PageEntityEventItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityEventsValidateBeforeCall(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter, _callback);
        Type localVarReturnType = new TypeToken<PageEntityEventItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEntityEventsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID emailId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private UUID smsId;
        @javax.annotation.Nullable
        private UUID attachmentId;
        @javax.annotation.Nullable
        private String filter;

        private APIgetEntityEventsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index (optional, default to 0)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size (optional, default to 20)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to DESC)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set emailId
         * @param emailId Optional email ID (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest emailId(@javax.annotation.Nullable UUID emailId) {
            this.emailId = emailId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Optional phone ID (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set smsId
         * @param smsId Optional SMS ID (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest smsId(@javax.annotation.Nullable UUID smsId) {
            this.smsId = smsId;
            return this;
        }

        /**
         * Set attachmentId
         * @param attachmentId Optional attachment ID (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest attachmentId(@javax.annotation.Nullable UUID attachmentId) {
            this.attachmentId = attachmentId;
            return this;
        }

        /**
         * Set filter
         * @param filter Optional type filter (optional)
         * @return APIgetEntityEventsRequest
         */
        public APIgetEntityEventsRequest filter(@javax.annotation.Nullable String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for getEntityEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntityEventsCall(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter, _callback);
        }

        /**
         * Execute getEntityEvents request
         * @return PageEntityEventItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEntityEventItems execute() throws ApiException {
            ApiResponse<PageEntityEventItems> localVarResp = getEntityEventsWithHttpInfo(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter);
            return localVarResp.getData();
        }

        /**
         * Execute getEntityEvents request with HTTP info returned
         * @return ApiResponse&lt;PageEntityEventItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEntityEventItems> executeWithHttpInfo() throws ApiException {
            return getEntityEventsWithHttpInfo(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter);
        }

        /**
         * Execute getEntityEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEntityEventItems> _callback) throws ApiException {
            return getEntityEventsAsync(page, size, sort, since, before, inboxId, emailId, phoneId, smsId, attachmentId, filter, _callback);
        }
    }

    /**
     * 
     * 
     * @return APIgetEntityEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEntityEventsRequest getEntityEvents() {
        return new APIgetEntityEventsRequest();
    }
    private okhttp3.Call getEntityFavoritesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/favorites";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEntityFavoritesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String filter, final ApiCallback _callback) throws ApiException {
        return getEntityFavoritesCall(page, size, sort, since, before, filter, _callback);

    }


    private ApiResponse<PageEntityFavouriteItems> getEntityFavoritesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String filter) throws ApiException {
        okhttp3.Call localVarCall = getEntityFavoritesValidateBeforeCall(page, size, sort, since, before, filter, null);
        Type localVarReturnType = new TypeToken<PageEntityFavouriteItems>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEntityFavoritesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String filter, final ApiCallback<PageEntityFavouriteItems> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEntityFavoritesValidateBeforeCall(page, size, sort, since, before, filter, _callback);
        Type localVarReturnType = new TypeToken<PageEntityFavouriteItems>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEntityFavoritesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String filter;

        private APIgetEntityFavoritesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index (optional, default to 0)
         * @return APIgetEntityFavoritesRequest
         */
        public APIgetEntityFavoritesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size (optional, default to 20)
         * @return APIgetEntityFavoritesRequest
         */
        public APIgetEntityFavoritesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to DESC)
         * @return APIgetEntityFavoritesRequest
         */
        public APIgetEntityFavoritesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetEntityFavoritesRequest
         */
        public APIgetEntityFavoritesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetEntityFavoritesRequest
         */
        public APIgetEntityFavoritesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set filter
         * @param filter Optional type filter (optional)
         * @return APIgetEntityFavoritesRequest
         */
        public APIgetEntityFavoritesRequest filter(@javax.annotation.Nullable String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Build call for getEntityFavorites
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEntityFavoritesCall(page, size, sort, since, before, filter, _callback);
        }

        /**
         * Execute getEntityFavorites request
         * @return PageEntityFavouriteItems
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEntityFavouriteItems execute() throws ApiException {
            ApiResponse<PageEntityFavouriteItems> localVarResp = getEntityFavoritesWithHttpInfo(page, size, sort, since, before, filter);
            return localVarResp.getData();
        }

        /**
         * Execute getEntityFavorites request with HTTP info returned
         * @return ApiResponse&lt;PageEntityFavouriteItems&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEntityFavouriteItems> executeWithHttpInfo() throws ApiException {
            return getEntityFavoritesWithHttpInfo(page, size, sort, since, before, filter);
        }

        /**
         * Execute getEntityFavorites request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEntityFavouriteItems> _callback) throws ApiException {
            return getEntityFavoritesAsync(page, size, sort, since, before, filter, _callback);
        }
    }

    /**
     * 
     * 
     * @return APIgetEntityFavoritesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEntityFavoritesRequest getEntityFavorites() {
        return new APIgetEntityFavoritesRequest();
    }
    private okhttp3.Call getJsonPropertyAsStringCall(@javax.annotation.Nonnull String property, @javax.annotation.Nullable Object body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/user/json/pluck";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (property != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("property", property));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonPropertyAsStringValidateBeforeCall(@javax.annotation.Nonnull String property, @javax.annotation.Nullable Object body, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'property' is set
        if (property == null) {
            throw new ApiException("Missing the required parameter 'property' when calling getJsonPropertyAsString(Async)");
        }

        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling getJsonPropertyAsString(Async)");
        }

        return getJsonPropertyAsStringCall(property, body, _callback);

    }


    private ApiResponse<String> getJsonPropertyAsStringWithHttpInfo(@javax.annotation.Nonnull String property, @javax.annotation.Nullable Object body) throws ApiException {
        okhttp3.Call localVarCall = getJsonPropertyAsStringValidateBeforeCall(property, body, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJsonPropertyAsStringAsync(@javax.annotation.Nonnull String property, @javax.annotation.Nullable Object body, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonPropertyAsStringValidateBeforeCall(property, body, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetJsonPropertyAsStringRequest {
        @javax.annotation.Nonnull
        private final String property;
        @javax.annotation.Nullable
        private final Object body;

        private APIgetJsonPropertyAsStringRequest(@javax.annotation.Nonnull String property, @javax.annotation.Nullable Object body) {
            this.property = property;
            this.body = body;
        }

        /**
         * Build call for getJsonPropertyAsString
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJsonPropertyAsStringCall(property, body, _callback);
        }

        /**
         * Execute getJsonPropertyAsString request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getJsonPropertyAsStringWithHttpInfo(property, body);
            return localVarResp.getData();
        }

        /**
         * Execute getJsonPropertyAsString request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getJsonPropertyAsStringWithHttpInfo(property, body);
        }

        /**
         * Execute getJsonPropertyAsString request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getJsonPropertyAsStringAsync(property, body, _callback);
        }
    }

    /**
     * 
     * Utility function to extract properties from JSON objects in language where this is cumbersome.
     * @param property JSON property name or dot separated path selector such as &#x60;a.b.c&#x60; (required)
     * @param body  (required)
     * @return APIgetJsonPropertyAsStringRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetJsonPropertyAsStringRequest getJsonPropertyAsString(@javax.annotation.Nonnull String property, @javax.annotation.Nullable Object body) {
        return new APIgetJsonPropertyAsStringRequest(property, body);
    }
    private okhttp3.Call getUserInfoCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/user/info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUserInfoValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUserInfoCall(_callback);

    }


    private ApiResponse<UserInfoDto> getUserInfoWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UserInfoDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUserInfoAsync(final ApiCallback<UserInfoDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUserInfoValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UserInfoDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUserInfoRequest {

        private APIgetUserInfoRequest() {
        }

        /**
         * Build call for getUserInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUserInfoCall(_callback);
        }

        /**
         * Execute getUserInfo request
         * @return UserInfoDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UserInfoDto execute() throws ApiException {
            ApiResponse<UserInfoDto> localVarResp = getUserInfoWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getUserInfo request with HTTP info returned
         * @return ApiResponse&lt;UserInfoDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UserInfoDto> executeWithHttpInfo() throws ApiException {
            return getUserInfoWithHttpInfo();
        }

        /**
         * Execute getUserInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UserInfoDto> _callback) throws ApiException {
            return getUserInfoAsync(_callback);
        }
    }

    /**
     * 
     * Get account information for your user
     * @return APIgetUserInfoRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUserInfoRequest getUserInfo() {
        return new APIgetUserInfoRequest();
    }
}
