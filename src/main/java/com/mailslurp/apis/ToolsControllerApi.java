/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CheckEmailFeaturesClientSupportOptions;
import com.mailslurp.models.CheckEmailFeaturesClientSupportResults;
import com.mailslurp.models.FakeEmailPreview;
import com.mailslurp.models.FakeEmailResult;
import com.mailslurp.models.GenerateBimiRecordOptions;
import com.mailslurp.models.GenerateBimiRecordResults;
import com.mailslurp.models.GenerateDmarcRecordOptions;
import com.mailslurp.models.GenerateDmarcRecordResults;
import com.mailslurp.models.GenerateMtaStsRecordOptions;
import com.mailslurp.models.GenerateMtaStsRecordResults;
import com.mailslurp.models.GenerateTlsReportingRecordOptions;
import com.mailslurp.models.GenerateTlsReportingRecordResults;
import com.mailslurp.models.LookupBimiDomainOptions;
import com.mailslurp.models.LookupBimiDomainResults;
import com.mailslurp.models.LookupDmarcDomainOptions;
import com.mailslurp.models.LookupDmarcDomainResults;
import com.mailslurp.models.LookupMtaStsDomainOptions;
import com.mailslurp.models.LookupMtaStsDomainResults;
import com.mailslurp.models.LookupTlsReportingDomainOptions;
import com.mailslurp.models.LookupTlsReportingDomainResults;
import com.mailslurp.models.NewFakeEmailAddressResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ToolsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ToolsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ToolsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call checkEmailFeaturesClientSupportCall(@javax.annotation.Nonnull CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkEmailFeaturesClientSupportOptions;

        // create path and map variables
        String localVarPath = "/tools/check-email-features-client-support";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkEmailFeaturesClientSupportValidateBeforeCall(@javax.annotation.Nonnull CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkEmailFeaturesClientSupportOptions' is set
        if (checkEmailFeaturesClientSupportOptions == null) {
            throw new ApiException("Missing the required parameter 'checkEmailFeaturesClientSupportOptions' when calling checkEmailFeaturesClientSupport(Async)");
        }

        return checkEmailFeaturesClientSupportCall(checkEmailFeaturesClientSupportOptions, _callback);

    }


    private ApiResponse<CheckEmailFeaturesClientSupportResults> checkEmailFeaturesClientSupportWithHttpInfo(@javax.annotation.Nonnull CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions) throws ApiException {
        okhttp3.Call localVarCall = checkEmailFeaturesClientSupportValidateBeforeCall(checkEmailFeaturesClientSupportOptions, null);
        Type localVarReturnType = new TypeToken<CheckEmailFeaturesClientSupportResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkEmailFeaturesClientSupportAsync(@javax.annotation.Nonnull CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions, final ApiCallback<CheckEmailFeaturesClientSupportResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkEmailFeaturesClientSupportValidateBeforeCall(checkEmailFeaturesClientSupportOptions, _callback);
        Type localVarReturnType = new TypeToken<CheckEmailFeaturesClientSupportResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcheckEmailFeaturesClientSupportRequest {
        @javax.annotation.Nonnull
        private final CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions;

        private APIcheckEmailFeaturesClientSupportRequest(@javax.annotation.Nonnull CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions) {
            this.checkEmailFeaturesClientSupportOptions = checkEmailFeaturesClientSupportOptions;
        }

        /**
         * Build call for checkEmailFeaturesClientSupport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkEmailFeaturesClientSupportCall(checkEmailFeaturesClientSupportOptions, _callback);
        }

        /**
         * Execute checkEmailFeaturesClientSupport request
         * @return CheckEmailFeaturesClientSupportResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckEmailFeaturesClientSupportResults execute() throws ApiException {
            ApiResponse<CheckEmailFeaturesClientSupportResults> localVarResp = checkEmailFeaturesClientSupportWithHttpInfo(checkEmailFeaturesClientSupportOptions);
            return localVarResp.getData();
        }

        /**
         * Execute checkEmailFeaturesClientSupport request with HTTP info returned
         * @return ApiResponse&lt;CheckEmailFeaturesClientSupportResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckEmailFeaturesClientSupportResults> executeWithHttpInfo() throws ApiException {
            return checkEmailFeaturesClientSupportWithHttpInfo(checkEmailFeaturesClientSupportOptions);
        }

        /**
         * Execute checkEmailFeaturesClientSupport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckEmailFeaturesClientSupportResults> _callback) throws ApiException {
            return checkEmailFeaturesClientSupportAsync(checkEmailFeaturesClientSupportOptions, _callback);
        }
    }

    /**
     * Check email client support for email HTML and CSS features
     * 
     * @param checkEmailFeaturesClientSupportOptions  (required)
     * @return APIcheckEmailFeaturesClientSupportRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcheckEmailFeaturesClientSupportRequest checkEmailFeaturesClientSupport(@javax.annotation.Nonnull CheckEmailFeaturesClientSupportOptions checkEmailFeaturesClientSupportOptions) {
        return new APIcheckEmailFeaturesClientSupportRequest(checkEmailFeaturesClientSupportOptions);
    }
    private okhttp3.Call createNewFakeEmailAddressCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tools/fake-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewFakeEmailAddressValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createNewFakeEmailAddressCall(_callback);

    }


    private ApiResponse<NewFakeEmailAddressResult> createNewFakeEmailAddressWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createNewFakeEmailAddressValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<NewFakeEmailAddressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewFakeEmailAddressAsync(final ApiCallback<NewFakeEmailAddressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewFakeEmailAddressValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<NewFakeEmailAddressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNewFakeEmailAddressRequest {

        private APIcreateNewFakeEmailAddressRequest() {
        }

        /**
         * Build call for createNewFakeEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewFakeEmailAddressCall(_callback);
        }

        /**
         * Execute createNewFakeEmailAddress request
         * @return NewFakeEmailAddressResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public NewFakeEmailAddressResult execute() throws ApiException {
            ApiResponse<NewFakeEmailAddressResult> localVarResp = createNewFakeEmailAddressWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute createNewFakeEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;NewFakeEmailAddressResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<NewFakeEmailAddressResult> executeWithHttpInfo() throws ApiException {
            return createNewFakeEmailAddressWithHttpInfo();
        }

        /**
         * Execute createNewFakeEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NewFakeEmailAddressResult> _callback) throws ApiException {
            return createNewFakeEmailAddressAsync(_callback);
        }
    }

    /**
     * Create a new email address using the fake email domains
     * 
     * @return APIcreateNewFakeEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNewFakeEmailAddressRequest createNewFakeEmailAddress() {
        return new APIcreateNewFakeEmailAddressRequest();
    }
    private okhttp3.Call deleteNewFakeEmailAddressCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tools/fake-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteNewFakeEmailAddressValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling deleteNewFakeEmailAddress(Async)");
        }

        return deleteNewFakeEmailAddressCall(emailAddress, _callback);

    }


    private ApiResponse<Void> deleteNewFakeEmailAddressWithHttpInfo(@javax.annotation.Nonnull String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = deleteNewFakeEmailAddressValidateBeforeCall(emailAddress, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteNewFakeEmailAddressAsync(@javax.annotation.Nonnull String emailAddress, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteNewFakeEmailAddressValidateBeforeCall(emailAddress, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteNewFakeEmailAddressRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;

        private APIdeleteNewFakeEmailAddressRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Build call for deleteNewFakeEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteNewFakeEmailAddressCall(emailAddress, _callback);
        }

        /**
         * Execute deleteNewFakeEmailAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteNewFakeEmailAddressWithHttpInfo(emailAddress);
        }

        /**
         * Execute deleteNewFakeEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteNewFakeEmailAddressWithHttpInfo(emailAddress);
        }

        /**
         * Execute deleteNewFakeEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteNewFakeEmailAddressAsync(emailAddress, _callback);
        }
    }

    /**
     * Delete a fake email address using the fake email domains
     * Delete a fake email address using the fake email domains
     * @param emailAddress  (required)
     * @return APIdeleteNewFakeEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteNewFakeEmailAddressRequest deleteNewFakeEmailAddress(@javax.annotation.Nonnull String emailAddress) {
        return new APIdeleteNewFakeEmailAddressRequest(emailAddress);
    }
    private okhttp3.Call generateBimiRecordCall(@javax.annotation.Nonnull GenerateBimiRecordOptions generateBimiRecordOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateBimiRecordOptions;

        // create path and map variables
        String localVarPath = "/tools/generate-bimi-record";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateBimiRecordValidateBeforeCall(@javax.annotation.Nonnull GenerateBimiRecordOptions generateBimiRecordOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateBimiRecordOptions' is set
        if (generateBimiRecordOptions == null) {
            throw new ApiException("Missing the required parameter 'generateBimiRecordOptions' when calling generateBimiRecord(Async)");
        }

        return generateBimiRecordCall(generateBimiRecordOptions, _callback);

    }


    private ApiResponse<GenerateBimiRecordResults> generateBimiRecordWithHttpInfo(@javax.annotation.Nonnull GenerateBimiRecordOptions generateBimiRecordOptions) throws ApiException {
        okhttp3.Call localVarCall = generateBimiRecordValidateBeforeCall(generateBimiRecordOptions, null);
        Type localVarReturnType = new TypeToken<GenerateBimiRecordResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateBimiRecordAsync(@javax.annotation.Nonnull GenerateBimiRecordOptions generateBimiRecordOptions, final ApiCallback<GenerateBimiRecordResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateBimiRecordValidateBeforeCall(generateBimiRecordOptions, _callback);
        Type localVarReturnType = new TypeToken<GenerateBimiRecordResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateBimiRecordRequest {
        @javax.annotation.Nonnull
        private final GenerateBimiRecordOptions generateBimiRecordOptions;

        private APIgenerateBimiRecordRequest(@javax.annotation.Nonnull GenerateBimiRecordOptions generateBimiRecordOptions) {
            this.generateBimiRecordOptions = generateBimiRecordOptions;
        }

        /**
         * Build call for generateBimiRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateBimiRecordCall(generateBimiRecordOptions, _callback);
        }

        /**
         * Execute generateBimiRecord request
         * @return GenerateBimiRecordResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GenerateBimiRecordResults execute() throws ApiException {
            ApiResponse<GenerateBimiRecordResults> localVarResp = generateBimiRecordWithHttpInfo(generateBimiRecordOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateBimiRecord request with HTTP info returned
         * @return ApiResponse&lt;GenerateBimiRecordResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenerateBimiRecordResults> executeWithHttpInfo() throws ApiException {
            return generateBimiRecordWithHttpInfo(generateBimiRecordOptions);
        }

        /**
         * Execute generateBimiRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenerateBimiRecordResults> _callback) throws ApiException {
            return generateBimiRecordAsync(generateBimiRecordOptions, _callback);
        }
    }

    /**
     * Create a BIMI record policy
     * 
     * @param generateBimiRecordOptions  (required)
     * @return APIgenerateBimiRecordRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateBimiRecordRequest generateBimiRecord(@javax.annotation.Nonnull GenerateBimiRecordOptions generateBimiRecordOptions) {
        return new APIgenerateBimiRecordRequest(generateBimiRecordOptions);
    }
    private okhttp3.Call generateDmarcRecordCall(@javax.annotation.Nonnull GenerateDmarcRecordOptions generateDmarcRecordOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateDmarcRecordOptions;

        // create path and map variables
        String localVarPath = "/tools/generate-dmarc-record";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateDmarcRecordValidateBeforeCall(@javax.annotation.Nonnull GenerateDmarcRecordOptions generateDmarcRecordOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateDmarcRecordOptions' is set
        if (generateDmarcRecordOptions == null) {
            throw new ApiException("Missing the required parameter 'generateDmarcRecordOptions' when calling generateDmarcRecord(Async)");
        }

        return generateDmarcRecordCall(generateDmarcRecordOptions, _callback);

    }


    private ApiResponse<GenerateDmarcRecordResults> generateDmarcRecordWithHttpInfo(@javax.annotation.Nonnull GenerateDmarcRecordOptions generateDmarcRecordOptions) throws ApiException {
        okhttp3.Call localVarCall = generateDmarcRecordValidateBeforeCall(generateDmarcRecordOptions, null);
        Type localVarReturnType = new TypeToken<GenerateDmarcRecordResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateDmarcRecordAsync(@javax.annotation.Nonnull GenerateDmarcRecordOptions generateDmarcRecordOptions, final ApiCallback<GenerateDmarcRecordResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateDmarcRecordValidateBeforeCall(generateDmarcRecordOptions, _callback);
        Type localVarReturnType = new TypeToken<GenerateDmarcRecordResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateDmarcRecordRequest {
        @javax.annotation.Nonnull
        private final GenerateDmarcRecordOptions generateDmarcRecordOptions;

        private APIgenerateDmarcRecordRequest(@javax.annotation.Nonnull GenerateDmarcRecordOptions generateDmarcRecordOptions) {
            this.generateDmarcRecordOptions = generateDmarcRecordOptions;
        }

        /**
         * Build call for generateDmarcRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateDmarcRecordCall(generateDmarcRecordOptions, _callback);
        }

        /**
         * Execute generateDmarcRecord request
         * @return GenerateDmarcRecordResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GenerateDmarcRecordResults execute() throws ApiException {
            ApiResponse<GenerateDmarcRecordResults> localVarResp = generateDmarcRecordWithHttpInfo(generateDmarcRecordOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateDmarcRecord request with HTTP info returned
         * @return ApiResponse&lt;GenerateDmarcRecordResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenerateDmarcRecordResults> executeWithHttpInfo() throws ApiException {
            return generateDmarcRecordWithHttpInfo(generateDmarcRecordOptions);
        }

        /**
         * Execute generateDmarcRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenerateDmarcRecordResults> _callback) throws ApiException {
            return generateDmarcRecordAsync(generateDmarcRecordOptions, _callback);
        }
    }

    /**
     * Create a DMARC record policy
     * 
     * @param generateDmarcRecordOptions  (required)
     * @return APIgenerateDmarcRecordRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateDmarcRecordRequest generateDmarcRecord(@javax.annotation.Nonnull GenerateDmarcRecordOptions generateDmarcRecordOptions) {
        return new APIgenerateDmarcRecordRequest(generateDmarcRecordOptions);
    }
    private okhttp3.Call generateMtaStsRecordCall(@javax.annotation.Nonnull GenerateMtaStsRecordOptions generateMtaStsRecordOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateMtaStsRecordOptions;

        // create path and map variables
        String localVarPath = "/tools/generate-mta-sts-record";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateMtaStsRecordValidateBeforeCall(@javax.annotation.Nonnull GenerateMtaStsRecordOptions generateMtaStsRecordOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateMtaStsRecordOptions' is set
        if (generateMtaStsRecordOptions == null) {
            throw new ApiException("Missing the required parameter 'generateMtaStsRecordOptions' when calling generateMtaStsRecord(Async)");
        }

        return generateMtaStsRecordCall(generateMtaStsRecordOptions, _callback);

    }


    private ApiResponse<GenerateMtaStsRecordResults> generateMtaStsRecordWithHttpInfo(@javax.annotation.Nonnull GenerateMtaStsRecordOptions generateMtaStsRecordOptions) throws ApiException {
        okhttp3.Call localVarCall = generateMtaStsRecordValidateBeforeCall(generateMtaStsRecordOptions, null);
        Type localVarReturnType = new TypeToken<GenerateMtaStsRecordResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateMtaStsRecordAsync(@javax.annotation.Nonnull GenerateMtaStsRecordOptions generateMtaStsRecordOptions, final ApiCallback<GenerateMtaStsRecordResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateMtaStsRecordValidateBeforeCall(generateMtaStsRecordOptions, _callback);
        Type localVarReturnType = new TypeToken<GenerateMtaStsRecordResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateMtaStsRecordRequest {
        @javax.annotation.Nonnull
        private final GenerateMtaStsRecordOptions generateMtaStsRecordOptions;

        private APIgenerateMtaStsRecordRequest(@javax.annotation.Nonnull GenerateMtaStsRecordOptions generateMtaStsRecordOptions) {
            this.generateMtaStsRecordOptions = generateMtaStsRecordOptions;
        }

        /**
         * Build call for generateMtaStsRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateMtaStsRecordCall(generateMtaStsRecordOptions, _callback);
        }

        /**
         * Execute generateMtaStsRecord request
         * @return GenerateMtaStsRecordResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GenerateMtaStsRecordResults execute() throws ApiException {
            ApiResponse<GenerateMtaStsRecordResults> localVarResp = generateMtaStsRecordWithHttpInfo(generateMtaStsRecordOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateMtaStsRecord request with HTTP info returned
         * @return ApiResponse&lt;GenerateMtaStsRecordResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenerateMtaStsRecordResults> executeWithHttpInfo() throws ApiException {
            return generateMtaStsRecordWithHttpInfo(generateMtaStsRecordOptions);
        }

        /**
         * Execute generateMtaStsRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenerateMtaStsRecordResults> _callback) throws ApiException {
            return generateMtaStsRecordAsync(generateMtaStsRecordOptions, _callback);
        }
    }

    /**
     * Create a TLS reporting record policy
     * 
     * @param generateMtaStsRecordOptions  (required)
     * @return APIgenerateMtaStsRecordRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateMtaStsRecordRequest generateMtaStsRecord(@javax.annotation.Nonnull GenerateMtaStsRecordOptions generateMtaStsRecordOptions) {
        return new APIgenerateMtaStsRecordRequest(generateMtaStsRecordOptions);
    }
    private okhttp3.Call generateTlsReportingRecordCall(@javax.annotation.Nonnull GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateTlsReportingRecordOptions;

        // create path and map variables
        String localVarPath = "/tools/generate-tls-reporting-record";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateTlsReportingRecordValidateBeforeCall(@javax.annotation.Nonnull GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateTlsReportingRecordOptions' is set
        if (generateTlsReportingRecordOptions == null) {
            throw new ApiException("Missing the required parameter 'generateTlsReportingRecordOptions' when calling generateTlsReportingRecord(Async)");
        }

        return generateTlsReportingRecordCall(generateTlsReportingRecordOptions, _callback);

    }


    private ApiResponse<GenerateTlsReportingRecordResults> generateTlsReportingRecordWithHttpInfo(@javax.annotation.Nonnull GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions) throws ApiException {
        okhttp3.Call localVarCall = generateTlsReportingRecordValidateBeforeCall(generateTlsReportingRecordOptions, null);
        Type localVarReturnType = new TypeToken<GenerateTlsReportingRecordResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateTlsReportingRecordAsync(@javax.annotation.Nonnull GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions, final ApiCallback<GenerateTlsReportingRecordResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateTlsReportingRecordValidateBeforeCall(generateTlsReportingRecordOptions, _callback);
        Type localVarReturnType = new TypeToken<GenerateTlsReportingRecordResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateTlsReportingRecordRequest {
        @javax.annotation.Nonnull
        private final GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions;

        private APIgenerateTlsReportingRecordRequest(@javax.annotation.Nonnull GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions) {
            this.generateTlsReportingRecordOptions = generateTlsReportingRecordOptions;
        }

        /**
         * Build call for generateTlsReportingRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateTlsReportingRecordCall(generateTlsReportingRecordOptions, _callback);
        }

        /**
         * Execute generateTlsReportingRecord request
         * @return GenerateTlsReportingRecordResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GenerateTlsReportingRecordResults execute() throws ApiException {
            ApiResponse<GenerateTlsReportingRecordResults> localVarResp = generateTlsReportingRecordWithHttpInfo(generateTlsReportingRecordOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateTlsReportingRecord request with HTTP info returned
         * @return ApiResponse&lt;GenerateTlsReportingRecordResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GenerateTlsReportingRecordResults> executeWithHttpInfo() throws ApiException {
            return generateTlsReportingRecordWithHttpInfo(generateTlsReportingRecordOptions);
        }

        /**
         * Execute generateTlsReportingRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GenerateTlsReportingRecordResults> _callback) throws ApiException {
            return generateTlsReportingRecordAsync(generateTlsReportingRecordOptions, _callback);
        }
    }

    /**
     * Create a TLS reporting record policy
     * 
     * @param generateTlsReportingRecordOptions  (required)
     * @return APIgenerateTlsReportingRecordRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateTlsReportingRecordRequest generateTlsReportingRecord(@javax.annotation.Nonnull GenerateTlsReportingRecordOptions generateTlsReportingRecordOptions) {
        return new APIgenerateTlsReportingRecordRequest(generateTlsReportingRecordOptions);
    }
    private okhttp3.Call getFakeEmailByEmailAddressCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tools/fake-email/byEmailAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFakeEmailByEmailAddressValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getFakeEmailByEmailAddress(Async)");
        }

        return getFakeEmailByEmailAddressCall(emailAddress, _callback);

    }


    private ApiResponse<FakeEmailResult> getFakeEmailByEmailAddressWithHttpInfo(@javax.annotation.Nonnull String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = getFakeEmailByEmailAddressValidateBeforeCall(emailAddress, null);
        Type localVarReturnType = new TypeToken<FakeEmailResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFakeEmailByEmailAddressAsync(@javax.annotation.Nonnull String emailAddress, final ApiCallback<FakeEmailResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFakeEmailByEmailAddressValidateBeforeCall(emailAddress, _callback);
        Type localVarReturnType = new TypeToken<FakeEmailResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFakeEmailByEmailAddressRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;

        private APIgetFakeEmailByEmailAddressRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Build call for getFakeEmailByEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFakeEmailByEmailAddressCall(emailAddress, _callback);
        }

        /**
         * Execute getFakeEmailByEmailAddress request
         * @return FakeEmailResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FakeEmailResult execute() throws ApiException {
            ApiResponse<FakeEmailResult> localVarResp = getFakeEmailByEmailAddressWithHttpInfo(emailAddress);
            return localVarResp.getData();
        }

        /**
         * Execute getFakeEmailByEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;FakeEmailResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FakeEmailResult> executeWithHttpInfo() throws ApiException {
            return getFakeEmailByEmailAddressWithHttpInfo(emailAddress);
        }

        /**
         * Execute getFakeEmailByEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FakeEmailResult> _callback) throws ApiException {
            return getFakeEmailByEmailAddressAsync(emailAddress, _callback);
        }
    }

    /**
     * 
     * 
     * @param emailAddress  (required)
     * @return APIgetFakeEmailByEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFakeEmailByEmailAddressRequest getFakeEmailByEmailAddress(@javax.annotation.Nonnull String emailAddress) {
        return new APIgetFakeEmailByEmailAddressRequest(emailAddress);
    }
    private okhttp3.Call getFakeEmailByIdCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tools/fake-email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFakeEmailByIdValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFakeEmailById(Async)");
        }

        return getFakeEmailByIdCall(id, _callback);

    }


    private ApiResponse<FakeEmailResult> getFakeEmailByIdWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getFakeEmailByIdValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FakeEmailResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFakeEmailByIdAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<FakeEmailResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFakeEmailByIdValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FakeEmailResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFakeEmailByIdRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetFakeEmailByIdRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getFakeEmailById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFakeEmailByIdCall(id, _callback);
        }

        /**
         * Execute getFakeEmailById request
         * @return FakeEmailResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FakeEmailResult execute() throws ApiException {
            ApiResponse<FakeEmailResult> localVarResp = getFakeEmailByIdWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getFakeEmailById request with HTTP info returned
         * @return ApiResponse&lt;FakeEmailResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FakeEmailResult> executeWithHttpInfo() throws ApiException {
            return getFakeEmailByIdWithHttpInfo(id);
        }

        /**
         * Execute getFakeEmailById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FakeEmailResult> _callback) throws ApiException {
            return getFakeEmailByIdAsync(id, _callback);
        }
    }

    /**
     * Get a fake email by its ID
     * Get a fake email by its ID
     * @param id  (required)
     * @return APIgetFakeEmailByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFakeEmailByIdRequest getFakeEmailById(@javax.annotation.Nonnull UUID id) {
        return new APIgetFakeEmailByIdRequest(id);
    }
    private okhttp3.Call getFakeEmailRawCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tools/fake-email/html";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "text/plain;charset=utf-8",
            "text/html;charset=utf-8",
            "text/plain; charset=utf-8",
            "text/html; charset=utf-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFakeEmailRawValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFakeEmailRaw(Async)");
        }

        return getFakeEmailRawCall(id, _callback);

    }


    private ApiResponse<String> getFakeEmailRawWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getFakeEmailRawValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFakeEmailRawAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFakeEmailRawValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFakeEmailRawRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetFakeEmailRawRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getFakeEmailRaw
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFakeEmailRawCall(id, _callback);
        }

        /**
         * Execute getFakeEmailRaw request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getFakeEmailRawWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getFakeEmailRaw request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getFakeEmailRawWithHttpInfo(id);
        }

        /**
         * Execute getFakeEmailRaw request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getFakeEmailRawAsync(id, _callback);
        }
    }

    /**
     * Get raw fake email content
     * Retrieve the raw content of a fake email by its ID
     * @param id  (required)
     * @return APIgetFakeEmailRawRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFakeEmailRawRequest getFakeEmailRaw(@javax.annotation.Nonnull UUID id) {
        return new APIgetFakeEmailRawRequest(id);
    }
    private okhttp3.Call getFakeEmailsForAddressCall(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tools/fake-emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFakeEmailsForAddressValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Integer page, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getFakeEmailsForAddress(Async)");
        }

        return getFakeEmailsForAddressCall(emailAddress, page, _callback);

    }


    private ApiResponse<List<FakeEmailPreview>> getFakeEmailsForAddressWithHttpInfo(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Integer page) throws ApiException {
        okhttp3.Call localVarCall = getFakeEmailsForAddressValidateBeforeCall(emailAddress, page, null);
        Type localVarReturnType = new TypeToken<List<FakeEmailPreview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFakeEmailsForAddressAsync(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Integer page, final ApiCallback<List<FakeEmailPreview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFakeEmailsForAddressValidateBeforeCall(emailAddress, page, _callback);
        Type localVarReturnType = new TypeToken<List<FakeEmailPreview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetFakeEmailsForAddressRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;
        @javax.annotation.Nullable
        private Integer page;

        private APIgetFakeEmailsForAddressRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Set page
         * @param page  (optional)
         * @return APIgetFakeEmailsForAddressRequest
         */
        public APIgetFakeEmailsForAddressRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Build call for getFakeEmailsForAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFakeEmailsForAddressCall(emailAddress, page, _callback);
        }

        /**
         * Execute getFakeEmailsForAddress request
         * @return List&lt;FakeEmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<FakeEmailPreview> execute() throws ApiException {
            ApiResponse<List<FakeEmailPreview>> localVarResp = getFakeEmailsForAddressWithHttpInfo(emailAddress, page);
            return localVarResp.getData();
        }

        /**
         * Execute getFakeEmailsForAddress request with HTTP info returned
         * @return ApiResponse&lt;List&lt;FakeEmailPreview&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<FakeEmailPreview>> executeWithHttpInfo() throws ApiException {
            return getFakeEmailsForAddressWithHttpInfo(emailAddress, page);
        }

        /**
         * Execute getFakeEmailsForAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<FakeEmailPreview>> _callback) throws ApiException {
            return getFakeEmailsForAddressAsync(emailAddress, page, _callback);
        }
    }

    /**
     * Get fake emails for an address
     * Get fake emails for an address
     * @param emailAddress  (required)
     * @return APIgetFakeEmailsForAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetFakeEmailsForAddressRequest getFakeEmailsForAddress(@javax.annotation.Nonnull String emailAddress) {
        return new APIgetFakeEmailsForAddressRequest(emailAddress);
    }
    private okhttp3.Call lookupBimiDomainCall(@javax.annotation.Nonnull LookupBimiDomainOptions lookupBimiDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookupBimiDomainOptions;

        // create path and map variables
        String localVarPath = "/tools/lookup-bimi-domain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupBimiDomainValidateBeforeCall(@javax.annotation.Nonnull LookupBimiDomainOptions lookupBimiDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lookupBimiDomainOptions' is set
        if (lookupBimiDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'lookupBimiDomainOptions' when calling lookupBimiDomain(Async)");
        }

        return lookupBimiDomainCall(lookupBimiDomainOptions, _callback);

    }


    private ApiResponse<LookupBimiDomainResults> lookupBimiDomainWithHttpInfo(@javax.annotation.Nonnull LookupBimiDomainOptions lookupBimiDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = lookupBimiDomainValidateBeforeCall(lookupBimiDomainOptions, null);
        Type localVarReturnType = new TypeToken<LookupBimiDomainResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupBimiDomainAsync(@javax.annotation.Nonnull LookupBimiDomainOptions lookupBimiDomainOptions, final ApiCallback<LookupBimiDomainResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupBimiDomainValidateBeforeCall(lookupBimiDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<LookupBimiDomainResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlookupBimiDomainRequest {
        @javax.annotation.Nonnull
        private final LookupBimiDomainOptions lookupBimiDomainOptions;

        private APIlookupBimiDomainRequest(@javax.annotation.Nonnull LookupBimiDomainOptions lookupBimiDomainOptions) {
            this.lookupBimiDomainOptions = lookupBimiDomainOptions;
        }

        /**
         * Build call for lookupBimiDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupBimiDomainCall(lookupBimiDomainOptions, _callback);
        }

        /**
         * Execute lookupBimiDomain request
         * @return LookupBimiDomainResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LookupBimiDomainResults execute() throws ApiException {
            ApiResponse<LookupBimiDomainResults> localVarResp = lookupBimiDomainWithHttpInfo(lookupBimiDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute lookupBimiDomain request with HTTP info returned
         * @return ApiResponse&lt;LookupBimiDomainResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LookupBimiDomainResults> executeWithHttpInfo() throws ApiException {
            return lookupBimiDomainWithHttpInfo(lookupBimiDomainOptions);
        }

        /**
         * Execute lookupBimiDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LookupBimiDomainResults> _callback) throws ApiException {
            return lookupBimiDomainAsync(lookupBimiDomainOptions, _callback);
        }
    }

    /**
     * Lookup a BIMI record policy
     * 
     * @param lookupBimiDomainOptions  (required)
     * @return APIlookupBimiDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlookupBimiDomainRequest lookupBimiDomain(@javax.annotation.Nonnull LookupBimiDomainOptions lookupBimiDomainOptions) {
        return new APIlookupBimiDomainRequest(lookupBimiDomainOptions);
    }
    private okhttp3.Call lookupDmarcDomainCall(@javax.annotation.Nonnull LookupDmarcDomainOptions lookupDmarcDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookupDmarcDomainOptions;

        // create path and map variables
        String localVarPath = "/tools/lookup-dmarc-domain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupDmarcDomainValidateBeforeCall(@javax.annotation.Nonnull LookupDmarcDomainOptions lookupDmarcDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lookupDmarcDomainOptions' is set
        if (lookupDmarcDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'lookupDmarcDomainOptions' when calling lookupDmarcDomain(Async)");
        }

        return lookupDmarcDomainCall(lookupDmarcDomainOptions, _callback);

    }


    private ApiResponse<LookupDmarcDomainResults> lookupDmarcDomainWithHttpInfo(@javax.annotation.Nonnull LookupDmarcDomainOptions lookupDmarcDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = lookupDmarcDomainValidateBeforeCall(lookupDmarcDomainOptions, null);
        Type localVarReturnType = new TypeToken<LookupDmarcDomainResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupDmarcDomainAsync(@javax.annotation.Nonnull LookupDmarcDomainOptions lookupDmarcDomainOptions, final ApiCallback<LookupDmarcDomainResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupDmarcDomainValidateBeforeCall(lookupDmarcDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<LookupDmarcDomainResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlookupDmarcDomainRequest {
        @javax.annotation.Nonnull
        private final LookupDmarcDomainOptions lookupDmarcDomainOptions;

        private APIlookupDmarcDomainRequest(@javax.annotation.Nonnull LookupDmarcDomainOptions lookupDmarcDomainOptions) {
            this.lookupDmarcDomainOptions = lookupDmarcDomainOptions;
        }

        /**
         * Build call for lookupDmarcDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupDmarcDomainCall(lookupDmarcDomainOptions, _callback);
        }

        /**
         * Execute lookupDmarcDomain request
         * @return LookupDmarcDomainResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LookupDmarcDomainResults execute() throws ApiException {
            ApiResponse<LookupDmarcDomainResults> localVarResp = lookupDmarcDomainWithHttpInfo(lookupDmarcDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute lookupDmarcDomain request with HTTP info returned
         * @return ApiResponse&lt;LookupDmarcDomainResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LookupDmarcDomainResults> executeWithHttpInfo() throws ApiException {
            return lookupDmarcDomainWithHttpInfo(lookupDmarcDomainOptions);
        }

        /**
         * Execute lookupDmarcDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LookupDmarcDomainResults> _callback) throws ApiException {
            return lookupDmarcDomainAsync(lookupDmarcDomainOptions, _callback);
        }
    }

    /**
     * Lookup a DMARC record policy
     * 
     * @param lookupDmarcDomainOptions  (required)
     * @return APIlookupDmarcDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlookupDmarcDomainRequest lookupDmarcDomain(@javax.annotation.Nonnull LookupDmarcDomainOptions lookupDmarcDomainOptions) {
        return new APIlookupDmarcDomainRequest(lookupDmarcDomainOptions);
    }
    private okhttp3.Call lookupMtaStsDomainCall(@javax.annotation.Nonnull LookupMtaStsDomainOptions lookupMtaStsDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookupMtaStsDomainOptions;

        // create path and map variables
        String localVarPath = "/tools/lookup-mta-sts-domain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupMtaStsDomainValidateBeforeCall(@javax.annotation.Nonnull LookupMtaStsDomainOptions lookupMtaStsDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lookupMtaStsDomainOptions' is set
        if (lookupMtaStsDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'lookupMtaStsDomainOptions' when calling lookupMtaStsDomain(Async)");
        }

        return lookupMtaStsDomainCall(lookupMtaStsDomainOptions, _callback);

    }


    private ApiResponse<LookupMtaStsDomainResults> lookupMtaStsDomainWithHttpInfo(@javax.annotation.Nonnull LookupMtaStsDomainOptions lookupMtaStsDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = lookupMtaStsDomainValidateBeforeCall(lookupMtaStsDomainOptions, null);
        Type localVarReturnType = new TypeToken<LookupMtaStsDomainResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupMtaStsDomainAsync(@javax.annotation.Nonnull LookupMtaStsDomainOptions lookupMtaStsDomainOptions, final ApiCallback<LookupMtaStsDomainResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupMtaStsDomainValidateBeforeCall(lookupMtaStsDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<LookupMtaStsDomainResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlookupMtaStsDomainRequest {
        @javax.annotation.Nonnull
        private final LookupMtaStsDomainOptions lookupMtaStsDomainOptions;

        private APIlookupMtaStsDomainRequest(@javax.annotation.Nonnull LookupMtaStsDomainOptions lookupMtaStsDomainOptions) {
            this.lookupMtaStsDomainOptions = lookupMtaStsDomainOptions;
        }

        /**
         * Build call for lookupMtaStsDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupMtaStsDomainCall(lookupMtaStsDomainOptions, _callback);
        }

        /**
         * Execute lookupMtaStsDomain request
         * @return LookupMtaStsDomainResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LookupMtaStsDomainResults execute() throws ApiException {
            ApiResponse<LookupMtaStsDomainResults> localVarResp = lookupMtaStsDomainWithHttpInfo(lookupMtaStsDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute lookupMtaStsDomain request with HTTP info returned
         * @return ApiResponse&lt;LookupMtaStsDomainResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LookupMtaStsDomainResults> executeWithHttpInfo() throws ApiException {
            return lookupMtaStsDomainWithHttpInfo(lookupMtaStsDomainOptions);
        }

        /**
         * Execute lookupMtaStsDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LookupMtaStsDomainResults> _callback) throws ApiException {
            return lookupMtaStsDomainAsync(lookupMtaStsDomainOptions, _callback);
        }
    }

    /**
     * Lookup a MTA-STS domain policy
     * 
     * @param lookupMtaStsDomainOptions  (required)
     * @return APIlookupMtaStsDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlookupMtaStsDomainRequest lookupMtaStsDomain(@javax.annotation.Nonnull LookupMtaStsDomainOptions lookupMtaStsDomainOptions) {
        return new APIlookupMtaStsDomainRequest(lookupMtaStsDomainOptions);
    }
    private okhttp3.Call lookupTlsReportingDomainCall(@javax.annotation.Nonnull LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = lookupTlsReportingDomainOptions;

        // create path and map variables
        String localVarPath = "/tools/lookup-tls-reporting-domain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lookupTlsReportingDomainValidateBeforeCall(@javax.annotation.Nonnull LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'lookupTlsReportingDomainOptions' is set
        if (lookupTlsReportingDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'lookupTlsReportingDomainOptions' when calling lookupTlsReportingDomain(Async)");
        }

        return lookupTlsReportingDomainCall(lookupTlsReportingDomainOptions, _callback);

    }


    private ApiResponse<LookupTlsReportingDomainResults> lookupTlsReportingDomainWithHttpInfo(@javax.annotation.Nonnull LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = lookupTlsReportingDomainValidateBeforeCall(lookupTlsReportingDomainOptions, null);
        Type localVarReturnType = new TypeToken<LookupTlsReportingDomainResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call lookupTlsReportingDomainAsync(@javax.annotation.Nonnull LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions, final ApiCallback<LookupTlsReportingDomainResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = lookupTlsReportingDomainValidateBeforeCall(lookupTlsReportingDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<LookupTlsReportingDomainResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlookupTlsReportingDomainRequest {
        @javax.annotation.Nonnull
        private final LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions;

        private APIlookupTlsReportingDomainRequest(@javax.annotation.Nonnull LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions) {
            this.lookupTlsReportingDomainOptions = lookupTlsReportingDomainOptions;
        }

        /**
         * Build call for lookupTlsReportingDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return lookupTlsReportingDomainCall(lookupTlsReportingDomainOptions, _callback);
        }

        /**
         * Execute lookupTlsReportingDomain request
         * @return LookupTlsReportingDomainResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public LookupTlsReportingDomainResults execute() throws ApiException {
            ApiResponse<LookupTlsReportingDomainResults> localVarResp = lookupTlsReportingDomainWithHttpInfo(lookupTlsReportingDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute lookupTlsReportingDomain request with HTTP info returned
         * @return ApiResponse&lt;LookupTlsReportingDomainResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<LookupTlsReportingDomainResults> executeWithHttpInfo() throws ApiException {
            return lookupTlsReportingDomainWithHttpInfo(lookupTlsReportingDomainOptions);
        }

        /**
         * Execute lookupTlsReportingDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<LookupTlsReportingDomainResults> _callback) throws ApiException {
            return lookupTlsReportingDomainAsync(lookupTlsReportingDomainOptions, _callback);
        }
    }

    /**
     * Lookup a TLS reporting domain policy
     * 
     * @param lookupTlsReportingDomainOptions  (required)
     * @return APIlookupTlsReportingDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlookupTlsReportingDomainRequest lookupTlsReportingDomain(@javax.annotation.Nonnull LookupTlsReportingDomainOptions lookupTlsReportingDomainOptions) {
        return new APIlookupTlsReportingDomainRequest(lookupTlsReportingDomainOptions);
    }
}
