/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateInboxForwarderOptions;
import com.mailslurp.models.InboxForwarderDto;
import com.mailslurp.models.InboxForwarderEventDto;
import com.mailslurp.models.InboxForwarderTestOptions;
import com.mailslurp.models.InboxForwarderTestResult;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageInboxForwarderDto;
import com.mailslurp.models.PageInboxForwarderEvents;
import com.mailslurp.models.TestNewInboxForwarderOptions;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboxForwarderControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboxForwarderControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboxForwarderControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewInboxForwarderCall(@javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboxForwarderOptions;

        // create path and map variables
        String localVarPath = "/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewInboxForwarderValidateBeforeCall(@javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createInboxForwarderOptions' is set
        if (createInboxForwarderOptions == null) {
            throw new ApiException("Missing the required parameter 'createInboxForwarderOptions' when calling createNewInboxForwarder(Async)");
        }

        return createNewInboxForwarderCall(createInboxForwarderOptions, inboxId, _callback);

    }


    private ApiResponse<InboxForwarderDto> createNewInboxForwarderWithHttpInfo(@javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = createNewInboxForwarderValidateBeforeCall(createInboxForwarderOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<InboxForwarderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewInboxForwarderAsync(@javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<InboxForwarderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewInboxForwarderValidateBeforeCall(createInboxForwarderOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNewInboxForwarderRequest {
        @javax.annotation.Nonnull
        private final CreateInboxForwarderOptions createInboxForwarderOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIcreateNewInboxForwarderRequest(@javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions) {
            this.createInboxForwarderOptions = createInboxForwarderOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox id to attach forwarder to (optional)
         * @return APIcreateNewInboxForwarderRequest
         */
        public APIcreateNewInboxForwarderRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for createNewInboxForwarder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewInboxForwarderCall(createInboxForwarderOptions, inboxId, _callback);
        }

        /**
         * Execute createNewInboxForwarder request
         * @return InboxForwarderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderDto execute() throws ApiException {
            ApiResponse<InboxForwarderDto> localVarResp = createNewInboxForwarderWithHttpInfo(createInboxForwarderOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute createNewInboxForwarder request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderDto> executeWithHttpInfo() throws ApiException {
            return createNewInboxForwarderWithHttpInfo(createInboxForwarderOptions, inboxId);
        }

        /**
         * Execute createNewInboxForwarder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderDto> _callback) throws ApiException {
            return createNewInboxForwarderAsync(createInboxForwarderOptions, inboxId, _callback);
        }
    }

    /**
     * Create an inbox forwarder
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * @param createInboxForwarderOptions  (required)
     * @return APIcreateNewInboxForwarderRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNewInboxForwarderRequest createNewInboxForwarder(@javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions) {
        return new APIcreateNewInboxForwarderRequest(createInboxForwarderOptions);
    }
    private okhttp3.Call deleteInboxForwarderCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxForwarderValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteInboxForwarder(Async)");
        }

        return deleteInboxForwarderCall(id, _callback);

    }


    private ApiResponse<Void> deleteInboxForwarderWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxForwarderValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxForwarderAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxForwarderValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxForwarderRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteInboxForwarderRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteInboxForwarder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxForwarderCall(id, _callback);
        }

        /**
         * Execute deleteInboxForwarder request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxForwarderWithHttpInfo(id);
        }

        /**
         * Execute deleteInboxForwarder request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxForwarderWithHttpInfo(id);
        }

        /**
         * Execute deleteInboxForwarder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxForwarderAsync(id, _callback);
        }
    }

    /**
     * Delete an inbox forwarder
     * Delete inbox forwarder
     * @param id ID of inbox forwarder (required)
     * @return APIdeleteInboxForwarderRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxForwarderRequest deleteInboxForwarder(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteInboxForwarderRequest(id);
    }
    private okhttp3.Call deleteInboxForwardersCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxForwardersValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return deleteInboxForwardersCall(inboxId, _callback);

    }


    private ApiResponse<Void> deleteInboxForwardersWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxForwardersValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxForwardersAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxForwardersValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxForwardersRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIdeleteInboxForwardersRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to attach forwarder to (optional)
         * @return APIdeleteInboxForwardersRequest
         */
        public APIdeleteInboxForwardersRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for deleteInboxForwarders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxForwardersCall(inboxId, _callback);
        }

        /**
         * Execute deleteInboxForwarders request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxForwardersWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInboxForwarders request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxForwardersWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInboxForwarders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxForwardersAsync(inboxId, _callback);
        }
    }

    /**
     * Delete inbox forwarders
     * Delete inbox forwarders. Accepts optional inboxId filter.
     * @return APIdeleteInboxForwardersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxForwardersRequest deleteInboxForwarders() {
        return new APIdeleteInboxForwardersRequest();
    }
    private okhttp3.Call getAllInboxForwarderEventsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (sentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentId", sentId));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInboxForwarderEventsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return getAllInboxForwarderEventsCall(page, size, inboxId, emailId, sentId, sort, _callback);

    }


    private ApiResponse<PageInboxForwarderEvents> getAllInboxForwarderEventsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllInboxForwarderEventsValidateBeforeCall(page, size, inboxId, emailId, sentId, sort, null);
        Type localVarReturnType = new TypeToken<PageInboxForwarderEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInboxForwarderEventsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable String sort, final ApiCallback<PageInboxForwarderEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInboxForwarderEventsValidateBeforeCall(page, size, inboxId, emailId, sentId, sort, _callback);
        Type localVarReturnType = new TypeToken<PageInboxForwarderEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllInboxForwarderEventsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID emailId;
        @javax.annotation.Nullable
        private UUID sentId;
        @javax.annotation.Nullable
        private String sort;

        private APIgetAllInboxForwarderEventsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in inbox forwarder event list pagination (optional, default to 0)
         * @return APIgetAllInboxForwarderEventsRequest
         */
        public APIgetAllInboxForwarderEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox forwarder event list pagination (optional, default to 20)
         * @return APIgetAllInboxForwarderEventsRequest
         */
        public APIgetAllInboxForwarderEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID to filter for (optional)
         * @return APIgetAllInboxForwarderEventsRequest
         */
        public APIgetAllInboxForwarderEventsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set emailId
         * @param emailId Optional email ID to filter for (optional)
         * @return APIgetAllInboxForwarderEventsRequest
         */
        public APIgetAllInboxForwarderEventsRequest emailId(@javax.annotation.Nullable UUID emailId) {
            this.emailId = emailId;
            return this;
        }

        /**
         * Set sentId
         * @param sentId Optional sent ID to filter for (optional)
         * @return APIgetAllInboxForwarderEventsRequest
         */
        public APIgetAllInboxForwarderEventsRequest sentId(@javax.annotation.Nullable UUID sentId) {
            this.sentId = sentId;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllInboxForwarderEventsRequest
         */
        public APIgetAllInboxForwarderEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getAllInboxForwarderEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInboxForwarderEventsCall(page, size, inboxId, emailId, sentId, sort, _callback);
        }

        /**
         * Execute getAllInboxForwarderEvents request
         * @return PageInboxForwarderEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxForwarderEvents execute() throws ApiException {
            ApiResponse<PageInboxForwarderEvents> localVarResp = getAllInboxForwarderEventsWithHttpInfo(page, size, inboxId, emailId, sentId, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getAllInboxForwarderEvents request with HTTP info returned
         * @return ApiResponse&lt;PageInboxForwarderEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxForwarderEvents> executeWithHttpInfo() throws ApiException {
            return getAllInboxForwarderEventsWithHttpInfo(page, size, inboxId, emailId, sentId, sort);
        }

        /**
         * Execute getAllInboxForwarderEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxForwarderEvents> _callback) throws ApiException {
            return getAllInboxForwarderEventsAsync(page, size, inboxId, emailId, sentId, sort, _callback);
        }
    }

    /**
     * Get all inbox forwarder events
     * Get all inbox forwarder events
     * @return APIgetAllInboxForwarderEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllInboxForwarderEventsRequest getAllInboxForwarderEvents() {
        return new APIgetAllInboxForwarderEventsRequest();
    }
    private okhttp3.Call getForwarderEventCall(@javax.annotation.Nonnull UUID eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders/events/{eventId}"
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getForwarderEventValidateBeforeCall(@javax.annotation.Nonnull UUID eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getForwarderEvent(Async)");
        }

        return getForwarderEventCall(eventId, _callback);

    }


    private ApiResponse<InboxForwarderEventDto> getForwarderEventWithHttpInfo(@javax.annotation.Nonnull UUID eventId) throws ApiException {
        okhttp3.Call localVarCall = getForwarderEventValidateBeforeCall(eventId, null);
        Type localVarReturnType = new TypeToken<InboxForwarderEventDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getForwarderEventAsync(@javax.annotation.Nonnull UUID eventId, final ApiCallback<InboxForwarderEventDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getForwarderEventValidateBeforeCall(eventId, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderEventDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetForwarderEventRequest {
        @javax.annotation.Nonnull
        private final UUID eventId;

        private APIgetForwarderEventRequest(@javax.annotation.Nonnull UUID eventId) {
            this.eventId = eventId;
        }

        /**
         * Build call for getForwarderEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getForwarderEventCall(eventId, _callback);
        }

        /**
         * Execute getForwarderEvent request
         * @return InboxForwarderEventDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderEventDto execute() throws ApiException {
            ApiResponse<InboxForwarderEventDto> localVarResp = getForwarderEventWithHttpInfo(eventId);
            return localVarResp.getData();
        }

        /**
         * Execute getForwarderEvent request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderEventDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderEventDto> executeWithHttpInfo() throws ApiException {
            return getForwarderEventWithHttpInfo(eventId);
        }

        /**
         * Execute getForwarderEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderEventDto> _callback) throws ApiException {
            return getForwarderEventAsync(eventId, _callback);
        }
    }

    /**
     * Get a forwarder event
     * Get forwarder event
     * @param eventId ID of inbox forwarder event (required)
     * @return APIgetForwarderEventRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetForwarderEventRequest getForwarderEvent(@javax.annotation.Nonnull UUID eventId) {
        return new APIgetForwarderEventRequest(eventId);
    }
    private okhttp3.Call getInboxForwarderCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxForwarderValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInboxForwarder(Async)");
        }

        return getInboxForwarderCall(id, _callback);

    }


    private ApiResponse<InboxForwarderDto> getInboxForwarderWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getInboxForwarderValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InboxForwarderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxForwarderAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<InboxForwarderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxForwarderValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxForwarderRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetInboxForwarderRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getInboxForwarder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxForwarderCall(id, _callback);
        }

        /**
         * Execute getInboxForwarder request
         * @return InboxForwarderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderDto execute() throws ApiException {
            ApiResponse<InboxForwarderDto> localVarResp = getInboxForwarderWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxForwarder request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderDto> executeWithHttpInfo() throws ApiException {
            return getInboxForwarderWithHttpInfo(id);
        }

        /**
         * Execute getInboxForwarder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderDto> _callback) throws ApiException {
            return getInboxForwarderAsync(id, _callback);
        }
    }

    /**
     * Get an inbox forwarder
     * Get inbox forwarder
     * @param id ID of inbox forwarder (required)
     * @return APIgetInboxForwarderRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxForwarderRequest getInboxForwarder(@javax.annotation.Nonnull UUID id) {
        return new APIgetInboxForwarderRequest(id);
    }
    private okhttp3.Call getInboxForwarderEventCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UUID eventId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders/{id}/events/{eventId}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()))
            .replace("{" + "eventId" + "}", localVarApiClient.escapeString(eventId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxForwarderEventValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UUID eventId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInboxForwarderEvent(Async)");
        }

        // verify the required parameter 'eventId' is set
        if (eventId == null) {
            throw new ApiException("Missing the required parameter 'eventId' when calling getInboxForwarderEvent(Async)");
        }

        return getInboxForwarderEventCall(id, eventId, _callback);

    }


    private ApiResponse<InboxForwarderEventDto> getInboxForwarderEventWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UUID eventId) throws ApiException {
        okhttp3.Call localVarCall = getInboxForwarderEventValidateBeforeCall(id, eventId, null);
        Type localVarReturnType = new TypeToken<InboxForwarderEventDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxForwarderEventAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UUID eventId, final ApiCallback<InboxForwarderEventDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxForwarderEventValidateBeforeCall(id, eventId, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderEventDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxForwarderEventRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final UUID eventId;

        private APIgetInboxForwarderEventRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UUID eventId) {
            this.id = id;
            this.eventId = eventId;
        }

        /**
         * Build call for getInboxForwarderEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxForwarderEventCall(id, eventId, _callback);
        }

        /**
         * Execute getInboxForwarderEvent request
         * @return InboxForwarderEventDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderEventDto execute() throws ApiException {
            ApiResponse<InboxForwarderEventDto> localVarResp = getInboxForwarderEventWithHttpInfo(id, eventId);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxForwarderEvent request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderEventDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderEventDto> executeWithHttpInfo() throws ApiException {
            return getInboxForwarderEventWithHttpInfo(id, eventId);
        }

        /**
         * Execute getInboxForwarderEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderEventDto> _callback) throws ApiException {
            return getInboxForwarderEventAsync(id, eventId, _callback);
        }
    }

    /**
     * Get an inbox forwarder event
     * Get inbox forwarder event
     * @param id ID of inbox forwarder (required)
     * @param eventId ID of inbox forwarder event (required)
     * @return APIgetInboxForwarderEventRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxForwarderEventRequest getInboxForwarderEvent(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UUID eventId) {
        return new APIgetInboxForwarderEventRequest(id, eventId);
    }
    private okhttp3.Call getInboxForwarderEventsCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxForwarderEventsValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInboxForwarderEvents(Async)");
        }

        return getInboxForwarderEventsCall(id, page, size, sort, _callback);

    }


    private ApiResponse<PageInboxForwarderEvents> getInboxForwarderEventsWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getInboxForwarderEventsValidateBeforeCall(id, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageInboxForwarderEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxForwarderEventsAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PageInboxForwarderEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxForwarderEventsValidateBeforeCall(id, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageInboxForwarderEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxForwarderEventsRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetInboxForwarderEventsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Optional page index in inbox forwarder event list pagination (optional, default to 0)
         * @return APIgetInboxForwarderEventsRequest
         */
        public APIgetInboxForwarderEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox forwarder event list pagination (optional, default to 20)
         * @return APIgetInboxForwarderEventsRequest
         */
        public APIgetInboxForwarderEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxForwarderEventsRequest
         */
        public APIgetInboxForwarderEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getInboxForwarderEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxForwarderEventsCall(id, page, size, sort, _callback);
        }

        /**
         * Execute getInboxForwarderEvents request
         * @return PageInboxForwarderEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxForwarderEvents execute() throws ApiException {
            ApiResponse<PageInboxForwarderEvents> localVarResp = getInboxForwarderEventsWithHttpInfo(id, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxForwarderEvents request with HTTP info returned
         * @return ApiResponse&lt;PageInboxForwarderEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxForwarderEvents> executeWithHttpInfo() throws ApiException {
            return getInboxForwarderEventsWithHttpInfo(id, page, size, sort);
        }

        /**
         * Execute getInboxForwarderEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxForwarderEvents> _callback) throws ApiException {
            return getInboxForwarderEventsAsync(id, page, size, sort, _callback);
        }
    }

    /**
     * Get an inbox forwarder event list
     * Get inbox forwarder events
     * @param id ID of inbox forwarder (required)
     * @return APIgetInboxForwarderEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxForwarderEventsRequest getInboxForwarderEvents(@javax.annotation.Nonnull UUID id) {
        return new APIgetInboxForwarderEventsRequest(id);
    }
    private okhttp3.Call getInboxForwardersCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxForwardersValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getInboxForwardersCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageInboxForwarderDto> getInboxForwardersWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getInboxForwardersValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageInboxForwarderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxForwardersAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageInboxForwarderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxForwardersValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageInboxForwarderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxForwardersRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetInboxForwardersRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to get forwarders from (optional)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in inbox forwarder list pagination (optional, default to 0)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox forwarder list pagination (optional, default to 20)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetInboxForwardersRequest
         */
        public APIgetInboxForwardersRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getInboxForwarders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxForwardersCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getInboxForwarders request
         * @return PageInboxForwarderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxForwarderDto execute() throws ApiException {
            ApiResponse<PageInboxForwarderDto> localVarResp = getInboxForwardersWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxForwarders request with HTTP info returned
         * @return ApiResponse&lt;PageInboxForwarderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxForwarderDto> executeWithHttpInfo() throws ApiException {
            return getInboxForwardersWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getInboxForwarders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxForwarderDto> _callback) throws ApiException {
            return getInboxForwardersAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * List inbox forwarders
     * List all forwarders attached to an inbox
     * @return APIgetInboxForwardersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxForwardersRequest getInboxForwarders() {
        return new APIgetInboxForwardersRequest();
    }
    private okhttp3.Call testInboxForwarderCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboxForwarderTestOptions;

        // create path and map variables
        String localVarPath = "/forwarders/{id}/test"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxForwarderValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testInboxForwarder(Async)");
        }

        // verify the required parameter 'inboxForwarderTestOptions' is set
        if (inboxForwarderTestOptions == null) {
            throw new ApiException("Missing the required parameter 'inboxForwarderTestOptions' when calling testInboxForwarder(Async)");
        }

        return testInboxForwarderCall(id, inboxForwarderTestOptions, _callback);

    }


    private ApiResponse<InboxForwarderTestResult> testInboxForwarderWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxForwarderValidateBeforeCall(id, inboxForwarderTestOptions, null);
        Type localVarReturnType = new TypeToken<InboxForwarderTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxForwarderAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions, final ApiCallback<InboxForwarderTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxForwarderValidateBeforeCall(id, inboxForwarderTestOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxForwarderRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final InboxForwarderTestOptions inboxForwarderTestOptions;

        private APItestInboxForwarderRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions) {
            this.id = id;
            this.inboxForwarderTestOptions = inboxForwarderTestOptions;
        }

        /**
         * Build call for testInboxForwarder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxForwarderCall(id, inboxForwarderTestOptions, _callback);
        }

        /**
         * Execute testInboxForwarder request
         * @return InboxForwarderTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderTestResult execute() throws ApiException {
            ApiResponse<InboxForwarderTestResult> localVarResp = testInboxForwarderWithHttpInfo(id, inboxForwarderTestOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxForwarder request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderTestResult> executeWithHttpInfo() throws ApiException {
            return testInboxForwarderWithHttpInfo(id, inboxForwarderTestOptions);
        }

        /**
         * Execute testInboxForwarder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderTestResult> _callback) throws ApiException {
            return testInboxForwarderAsync(id, inboxForwarderTestOptions, _callback);
        }
    }

    /**
     * Test an inbox forwarder
     * Test an inbox forwarder
     * @param id ID of inbox forwarder (required)
     * @param inboxForwarderTestOptions  (required)
     * @return APItestInboxForwarderRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxForwarderRequest testInboxForwarder(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions) {
        return new APItestInboxForwarderRequest(id, inboxForwarderTestOptions);
    }
    private okhttp3.Call testInboxForwardersForInboxCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboxForwarderTestOptions;

        // create path and map variables
        String localVarPath = "/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxForwardersForInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling testInboxForwardersForInbox(Async)");
        }

        // verify the required parameter 'inboxForwarderTestOptions' is set
        if (inboxForwarderTestOptions == null) {
            throw new ApiException("Missing the required parameter 'inboxForwarderTestOptions' when calling testInboxForwardersForInbox(Async)");
        }

        return testInboxForwardersForInboxCall(inboxId, inboxForwarderTestOptions, _callback);

    }


    private ApiResponse<InboxForwarderTestResult> testInboxForwardersForInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxForwardersForInboxValidateBeforeCall(inboxId, inboxForwarderTestOptions, null);
        Type localVarReturnType = new TypeToken<InboxForwarderTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxForwardersForInboxAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions, final ApiCallback<InboxForwarderTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxForwardersForInboxValidateBeforeCall(inboxId, inboxForwarderTestOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxForwardersForInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final InboxForwarderTestOptions inboxForwarderTestOptions;

        private APItestInboxForwardersForInboxRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions) {
            this.inboxId = inboxId;
            this.inboxForwarderTestOptions = inboxForwarderTestOptions;
        }

        /**
         * Build call for testInboxForwardersForInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxForwardersForInboxCall(inboxId, inboxForwarderTestOptions, _callback);
        }

        /**
         * Execute testInboxForwardersForInbox request
         * @return InboxForwarderTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderTestResult execute() throws ApiException {
            ApiResponse<InboxForwarderTestResult> localVarResp = testInboxForwardersForInboxWithHttpInfo(inboxId, inboxForwarderTestOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxForwardersForInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderTestResult> executeWithHttpInfo() throws ApiException {
            return testInboxForwardersForInboxWithHttpInfo(inboxId, inboxForwarderTestOptions);
        }

        /**
         * Execute testInboxForwardersForInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderTestResult> _callback) throws ApiException {
            return testInboxForwardersForInboxAsync(inboxId, inboxForwarderTestOptions, _callback);
        }
    }

    /**
     * Test inbox forwarders for inbox
     * Test inbox forwarders for inbox
     * @param inboxId ID of inbox (required)
     * @param inboxForwarderTestOptions  (required)
     * @return APItestInboxForwardersForInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxForwardersForInboxRequest testInboxForwardersForInbox(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxForwarderTestOptions inboxForwarderTestOptions) {
        return new APItestInboxForwardersForInboxRequest(inboxId, inboxForwarderTestOptions);
    }
    private okhttp3.Call testNewInboxForwarderCall(@javax.annotation.Nonnull TestNewInboxForwarderOptions testNewInboxForwarderOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testNewInboxForwarderOptions;

        // create path and map variables
        String localVarPath = "/forwarders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testNewInboxForwarderValidateBeforeCall(@javax.annotation.Nonnull TestNewInboxForwarderOptions testNewInboxForwarderOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testNewInboxForwarderOptions' is set
        if (testNewInboxForwarderOptions == null) {
            throw new ApiException("Missing the required parameter 'testNewInboxForwarderOptions' when calling testNewInboxForwarder(Async)");
        }

        return testNewInboxForwarderCall(testNewInboxForwarderOptions, _callback);

    }


    private ApiResponse<InboxForwarderTestResult> testNewInboxForwarderWithHttpInfo(@javax.annotation.Nonnull TestNewInboxForwarderOptions testNewInboxForwarderOptions) throws ApiException {
        okhttp3.Call localVarCall = testNewInboxForwarderValidateBeforeCall(testNewInboxForwarderOptions, null);
        Type localVarReturnType = new TypeToken<InboxForwarderTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testNewInboxForwarderAsync(@javax.annotation.Nonnull TestNewInboxForwarderOptions testNewInboxForwarderOptions, final ApiCallback<InboxForwarderTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testNewInboxForwarderValidateBeforeCall(testNewInboxForwarderOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestNewInboxForwarderRequest {
        @javax.annotation.Nonnull
        private final TestNewInboxForwarderOptions testNewInboxForwarderOptions;

        private APItestNewInboxForwarderRequest(@javax.annotation.Nonnull TestNewInboxForwarderOptions testNewInboxForwarderOptions) {
            this.testNewInboxForwarderOptions = testNewInboxForwarderOptions;
        }

        /**
         * Build call for testNewInboxForwarder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testNewInboxForwarderCall(testNewInboxForwarderOptions, _callback);
        }

        /**
         * Execute testNewInboxForwarder request
         * @return InboxForwarderTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderTestResult execute() throws ApiException {
            ApiResponse<InboxForwarderTestResult> localVarResp = testNewInboxForwarderWithHttpInfo(testNewInboxForwarderOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testNewInboxForwarder request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderTestResult> executeWithHttpInfo() throws ApiException {
            return testNewInboxForwarderWithHttpInfo(testNewInboxForwarderOptions);
        }

        /**
         * Execute testNewInboxForwarder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderTestResult> _callback) throws ApiException {
            return testNewInboxForwarderAsync(testNewInboxForwarderOptions, _callback);
        }
    }

    /**
     * Test new inbox forwarder
     * Test new inbox forwarder
     * @param testNewInboxForwarderOptions  (required)
     * @return APItestNewInboxForwarderRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestNewInboxForwarderRequest testNewInboxForwarder(@javax.annotation.Nonnull TestNewInboxForwarderOptions testNewInboxForwarderOptions) {
        return new APItestNewInboxForwarderRequest(testNewInboxForwarderOptions);
    }
    private okhttp3.Call updateInboxForwarderCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboxForwarderOptions;

        // create path and map variables
        String localVarPath = "/forwarders/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboxForwarderValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateInboxForwarder(Async)");
        }

        // verify the required parameter 'createInboxForwarderOptions' is set
        if (createInboxForwarderOptions == null) {
            throw new ApiException("Missing the required parameter 'createInboxForwarderOptions' when calling updateInboxForwarder(Async)");
        }

        return updateInboxForwarderCall(id, createInboxForwarderOptions, _callback);

    }


    private ApiResponse<InboxForwarderDto> updateInboxForwarderWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions) throws ApiException {
        okhttp3.Call localVarCall = updateInboxForwarderValidateBeforeCall(id, createInboxForwarderOptions, null);
        Type localVarReturnType = new TypeToken<InboxForwarderDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInboxForwarderAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions, final ApiCallback<InboxForwarderDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInboxForwarderValidateBeforeCall(id, createInboxForwarderOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxForwarderDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateInboxForwarderRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateInboxForwarderOptions createInboxForwarderOptions;

        private APIupdateInboxForwarderRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions) {
            this.id = id;
            this.createInboxForwarderOptions = createInboxForwarderOptions;
        }

        /**
         * Build call for updateInboxForwarder
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateInboxForwarderCall(id, createInboxForwarderOptions, _callback);
        }

        /**
         * Execute updateInboxForwarder request
         * @return InboxForwarderDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxForwarderDto execute() throws ApiException {
            ApiResponse<InboxForwarderDto> localVarResp = updateInboxForwarderWithHttpInfo(id, createInboxForwarderOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateInboxForwarder request with HTTP info returned
         * @return ApiResponse&lt;InboxForwarderDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxForwarderDto> executeWithHttpInfo() throws ApiException {
            return updateInboxForwarderWithHttpInfo(id, createInboxForwarderOptions);
        }

        /**
         * Execute updateInboxForwarder request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxForwarderDto> _callback) throws ApiException {
            return updateInboxForwarderAsync(id, createInboxForwarderOptions, _callback);
        }
    }

    /**
     * Update an inbox forwarder
     * Update inbox forwarder
     * @param id ID of inbox forwarder (required)
     * @param createInboxForwarderOptions  (required)
     * @return APIupdateInboxForwarderRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateInboxForwarderRequest updateInboxForwarder(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateInboxForwarderOptions createInboxForwarderOptions) {
        return new APIupdateInboxForwarderRequest(id, createInboxForwarderOptions);
    }
}
