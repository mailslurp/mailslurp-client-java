/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.ConsentStatusDto;
import com.mailslurp.models.CreateEmergencyAddressOptions;
import com.mailslurp.models.CreatePhoneNumberOptions;
import com.mailslurp.models.EmergencyAddress;
import com.mailslurp.models.EmergencyAddressDto;
import com.mailslurp.models.EmptyResponseDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PagePhoneMessageThreadItemProjection;
import com.mailslurp.models.PagePhoneMessageThreadProjection;
import com.mailslurp.models.PagePhoneNumberProjection;
import com.mailslurp.models.PageSentSmsProjection;
import com.mailslurp.models.PageSmsProjection;
import com.mailslurp.models.PhoneNumberDto;
import com.mailslurp.models.PhoneNumberValidationDto;
import com.mailslurp.models.PhonePlanAvailability;
import com.mailslurp.models.PhonePlanDto;
import com.mailslurp.models.SentSmsDto;
import com.mailslurp.models.SetPhoneFavouritedOptions;
import com.mailslurp.models.SmsSendOptions;
import com.mailslurp.models.TestPhoneNumberOptions;
import java.util.UUID;
import com.mailslurp.models.UpdatePhoneNumberOptions;
import com.mailslurp.models.ValidatePhoneNumberOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PhoneControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PhoneControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PhoneControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createEmergencyAddressCall(@javax.annotation.Nonnull CreateEmergencyAddressOptions createEmergencyAddressOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createEmergencyAddressOptions;

        // create path and map variables
        String localVarPath = "/phone/emergency-addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createEmergencyAddressValidateBeforeCall(@javax.annotation.Nonnull CreateEmergencyAddressOptions createEmergencyAddressOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createEmergencyAddressOptions' is set
        if (createEmergencyAddressOptions == null) {
            throw new ApiException("Missing the required parameter 'createEmergencyAddressOptions' when calling createEmergencyAddress(Async)");
        }

        return createEmergencyAddressCall(createEmergencyAddressOptions, _callback);

    }


    private ApiResponse<EmergencyAddress> createEmergencyAddressWithHttpInfo(@javax.annotation.Nonnull CreateEmergencyAddressOptions createEmergencyAddressOptions) throws ApiException {
        okhttp3.Call localVarCall = createEmergencyAddressValidateBeforeCall(createEmergencyAddressOptions, null);
        Type localVarReturnType = new TypeToken<EmergencyAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createEmergencyAddressAsync(@javax.annotation.Nonnull CreateEmergencyAddressOptions createEmergencyAddressOptions, final ApiCallback<EmergencyAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = createEmergencyAddressValidateBeforeCall(createEmergencyAddressOptions, _callback);
        Type localVarReturnType = new TypeToken<EmergencyAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateEmergencyAddressRequest {
        @javax.annotation.Nonnull
        private final CreateEmergencyAddressOptions createEmergencyAddressOptions;

        private APIcreateEmergencyAddressRequest(@javax.annotation.Nonnull CreateEmergencyAddressOptions createEmergencyAddressOptions) {
            this.createEmergencyAddressOptions = createEmergencyAddressOptions;
        }

        /**
         * Build call for createEmergencyAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createEmergencyAddressCall(createEmergencyAddressOptions, _callback);
        }

        /**
         * Execute createEmergencyAddress request
         * @return EmergencyAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmergencyAddress execute() throws ApiException {
            ApiResponse<EmergencyAddress> localVarResp = createEmergencyAddressWithHttpInfo(createEmergencyAddressOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createEmergencyAddress request with HTTP info returned
         * @return ApiResponse&lt;EmergencyAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmergencyAddress> executeWithHttpInfo() throws ApiException {
            return createEmergencyAddressWithHttpInfo(createEmergencyAddressOptions);
        }

        /**
         * Execute createEmergencyAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmergencyAddress> _callback) throws ApiException {
            return createEmergencyAddressAsync(createEmergencyAddressOptions, _callback);
        }
    }

    /**
     * Create an emergency address
     * Add an emergency address to a phone number
     * @param createEmergencyAddressOptions  (required)
     * @return APIcreateEmergencyAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateEmergencyAddressRequest createEmergencyAddress(@javax.annotation.Nonnull CreateEmergencyAddressOptions createEmergencyAddressOptions) {
        return new APIcreateEmergencyAddressRequest(createEmergencyAddressOptions);
    }
    private okhttp3.Call createPhoneNumberCall(@javax.annotation.Nonnull CreatePhoneNumberOptions createPhoneNumberOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPhoneNumberOptions;

        // create path and map variables
        String localVarPath = "/phone";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull CreatePhoneNumberOptions createPhoneNumberOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPhoneNumberOptions' is set
        if (createPhoneNumberOptions == null) {
            throw new ApiException("Missing the required parameter 'createPhoneNumberOptions' when calling createPhoneNumber(Async)");
        }

        return createPhoneNumberCall(createPhoneNumberOptions, _callback);

    }


    private ApiResponse<PhoneNumberDto> createPhoneNumberWithHttpInfo(@javax.annotation.Nonnull CreatePhoneNumberOptions createPhoneNumberOptions) throws ApiException {
        okhttp3.Call localVarCall = createPhoneNumberValidateBeforeCall(createPhoneNumberOptions, null);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createPhoneNumberAsync(@javax.annotation.Nonnull CreatePhoneNumberOptions createPhoneNumberOptions, final ApiCallback<PhoneNumberDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPhoneNumberValidateBeforeCall(createPhoneNumberOptions, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreatePhoneNumberRequest {
        @javax.annotation.Nonnull
        private final CreatePhoneNumberOptions createPhoneNumberOptions;

        private APIcreatePhoneNumberRequest(@javax.annotation.Nonnull CreatePhoneNumberOptions createPhoneNumberOptions) {
            this.createPhoneNumberOptions = createPhoneNumberOptions;
        }

        /**
         * Build call for createPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createPhoneNumberCall(createPhoneNumberOptions, _callback);
        }

        /**
         * Execute createPhoneNumber request
         * @return PhoneNumberDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberDto execute() throws ApiException {
            ApiResponse<PhoneNumberDto> localVarResp = createPhoneNumberWithHttpInfo(createPhoneNumberOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberDto> executeWithHttpInfo() throws ApiException {
            return createPhoneNumberWithHttpInfo(createPhoneNumberOptions);
        }

        /**
         * Execute createPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberDto> _callback) throws ApiException {
            return createPhoneNumberAsync(createPhoneNumberOptions, _callback);
        }
    }

    /**
     * Add phone number to your account. Only works if you have already added a plan and an initial phone number in your account and acknowledged the pricing and terms of service by enabling API phone creation.
     * Create new phone number
     * @param createPhoneNumberOptions  (required)
     * @return APIcreatePhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreatePhoneNumberRequest createPhoneNumber(@javax.annotation.Nonnull CreatePhoneNumberOptions createPhoneNumberOptions) {
        return new APIcreatePhoneNumberRequest(createPhoneNumberOptions);
    }
    private okhttp3.Call deleteEmergencyAddressCall(@javax.annotation.Nonnull UUID addressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/emergency-addresses/{addressId}"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmergencyAddressValidateBeforeCall(@javax.annotation.Nonnull UUID addressId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling deleteEmergencyAddress(Async)");
        }

        return deleteEmergencyAddressCall(addressId, _callback);

    }


    private ApiResponse<EmptyResponseDto> deleteEmergencyAddressWithHttpInfo(@javax.annotation.Nonnull UUID addressId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmergencyAddressValidateBeforeCall(addressId, null);
        Type localVarReturnType = new TypeToken<EmptyResponseDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteEmergencyAddressAsync(@javax.annotation.Nonnull UUID addressId, final ApiCallback<EmptyResponseDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmergencyAddressValidateBeforeCall(addressId, _callback);
        Type localVarReturnType = new TypeToken<EmptyResponseDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteEmergencyAddressRequest {
        @javax.annotation.Nonnull
        private final UUID addressId;

        private APIdeleteEmergencyAddressRequest(@javax.annotation.Nonnull UUID addressId) {
            this.addressId = addressId;
        }

        /**
         * Build call for deleteEmergencyAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmergencyAddressCall(addressId, _callback);
        }

        /**
         * Execute deleteEmergencyAddress request
         * @return EmptyResponseDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmptyResponseDto execute() throws ApiException {
            ApiResponse<EmptyResponseDto> localVarResp = deleteEmergencyAddressWithHttpInfo(addressId);
            return localVarResp.getData();
        }

        /**
         * Execute deleteEmergencyAddress request with HTTP info returned
         * @return ApiResponse&lt;EmptyResponseDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmptyResponseDto> executeWithHttpInfo() throws ApiException {
            return deleteEmergencyAddressWithHttpInfo(addressId);
        }

        /**
         * Execute deleteEmergencyAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmptyResponseDto> _callback) throws ApiException {
            return deleteEmergencyAddressAsync(addressId, _callback);
        }
    }

    /**
     * Delete an emergency address
     * Delete an emergency address
     * @param addressId  (required)
     * @return APIdeleteEmergencyAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteEmergencyAddressRequest deleteEmergencyAddress(@javax.annotation.Nonnull UUID addressId) {
        return new APIdeleteEmergencyAddressRequest(addressId);
    }
    private okhttp3.Call deletePhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling deletePhoneNumber(Async)");
        }

        return deletePhoneNumberCall(phoneNumberId, _callback);

    }


    private ApiResponse<Void> deletePhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId) throws ApiException {
        okhttp3.Call localVarCall = deletePhoneNumberValidateBeforeCall(phoneNumberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deletePhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePhoneNumberValidateBeforeCall(phoneNumberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeletePhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;

        private APIdeletePhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
        }

        /**
         * Build call for deletePhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deletePhoneNumberCall(phoneNumberId, _callback);
        }

        /**
         * Execute deletePhoneNumber request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deletePhoneNumberWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute deletePhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deletePhoneNumberWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute deletePhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deletePhoneNumberAsync(phoneNumberId, _callback);
        }
    }

    /**
     * Delete a phone number
     * Remove phone number from account
     * @param phoneNumberId  (required)
     * @return APIdeletePhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeletePhoneNumberRequest deletePhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId) {
        return new APIdeletePhoneNumberRequest(phoneNumberId);
    }
    private okhttp3.Call getAllPhoneMessageThreadsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/message-threads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPhoneMessageThreadsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback _callback) throws ApiException {
        return getAllPhoneMessageThreadsCall(page, size, _callback);

    }


    private ApiResponse<PagePhoneMessageThreadProjection> getAllPhoneMessageThreadsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size) throws ApiException {
        okhttp3.Call localVarCall = getAllPhoneMessageThreadsValidateBeforeCall(page, size, null);
        Type localVarReturnType = new TypeToken<PagePhoneMessageThreadProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPhoneMessageThreadsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback<PagePhoneMessageThreadProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPhoneMessageThreadsValidateBeforeCall(page, size, _callback);
        Type localVarReturnType = new TypeToken<PagePhoneMessageThreadProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllPhoneMessageThreadsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;

        private APIgetAllPhoneMessageThreadsRequest() {
        }

        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return APIgetAllPhoneMessageThreadsRequest
         */
        public APIgetAllPhoneMessageThreadsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size  (optional, default to 20)
         * @return APIgetAllPhoneMessageThreadsRequest
         */
        public APIgetAllPhoneMessageThreadsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Build call for getAllPhoneMessageThreads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPhoneMessageThreadsCall(page, size, _callback);
        }

        /**
         * Execute getAllPhoneMessageThreads request
         * @return PagePhoneMessageThreadProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PagePhoneMessageThreadProjection execute() throws ApiException {
            ApiResponse<PagePhoneMessageThreadProjection> localVarResp = getAllPhoneMessageThreadsWithHttpInfo(page, size);
            return localVarResp.getData();
        }

        /**
         * Execute getAllPhoneMessageThreads request with HTTP info returned
         * @return ApiResponse&lt;PagePhoneMessageThreadProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagePhoneMessageThreadProjection> executeWithHttpInfo() throws ApiException {
            return getAllPhoneMessageThreadsWithHttpInfo(page, size);
        }

        /**
         * Execute getAllPhoneMessageThreads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagePhoneMessageThreadProjection> _callback) throws ApiException {
            return getAllPhoneMessageThreadsAsync(page, size, _callback);
        }
    }

    /**
     * Get the latest messages for all phones
     * List all message threads for all phones
     * @return APIgetAllPhoneMessageThreadsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllPhoneMessageThreadsRequest getAllPhoneMessageThreads() {
        return new APIgetAllPhoneMessageThreadsRequest();
    }
    private okhttp3.Call getConsentStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/consent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConsentStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConsentStatusCall(_callback);

    }


    private ApiResponse<ConsentStatusDto> getConsentStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConsentStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConsentStatusDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConsentStatusAsync(final ApiCallback<ConsentStatusDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConsentStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConsentStatusDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConsentStatusRequest {

        private APIgetConsentStatusRequest() {
        }

        /**
         * Build call for getConsentStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConsentStatusCall(_callback);
        }

        /**
         * Execute getConsentStatus request
         * @return ConsentStatusDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConsentStatusDto execute() throws ApiException {
            ApiResponse<ConsentStatusDto> localVarResp = getConsentStatusWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getConsentStatus request with HTTP info returned
         * @return ApiResponse&lt;ConsentStatusDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsentStatusDto> executeWithHttpInfo() throws ApiException {
            return getConsentStatusWithHttpInfo();
        }

        /**
         * Execute getConsentStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsentStatusDto> _callback) throws ApiException {
            return getConsentStatusAsync(_callback);
        }
    }

    /**
     * Get consent status
     * Get the status of phone usage consent
     * @return APIgetConsentStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConsentStatusRequest getConsentStatus() {
        return new APIgetConsentStatusRequest();
    }
    private okhttp3.Call getEmergencyAddressCall(@javax.annotation.Nonnull UUID addressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/emergency-addresses/{addressId}"
            .replace("{" + "addressId" + "}", localVarApiClient.escapeString(addressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmergencyAddressValidateBeforeCall(@javax.annotation.Nonnull UUID addressId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'addressId' is set
        if (addressId == null) {
            throw new ApiException("Missing the required parameter 'addressId' when calling getEmergencyAddress(Async)");
        }

        return getEmergencyAddressCall(addressId, _callback);

    }


    private ApiResponse<EmergencyAddress> getEmergencyAddressWithHttpInfo(@javax.annotation.Nonnull UUID addressId) throws ApiException {
        okhttp3.Call localVarCall = getEmergencyAddressValidateBeforeCall(addressId, null);
        Type localVarReturnType = new TypeToken<EmergencyAddress>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmergencyAddressAsync(@javax.annotation.Nonnull UUID addressId, final ApiCallback<EmergencyAddress> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmergencyAddressValidateBeforeCall(addressId, _callback);
        Type localVarReturnType = new TypeToken<EmergencyAddress>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmergencyAddressRequest {
        @javax.annotation.Nonnull
        private final UUID addressId;

        private APIgetEmergencyAddressRequest(@javax.annotation.Nonnull UUID addressId) {
            this.addressId = addressId;
        }

        /**
         * Build call for getEmergencyAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmergencyAddressCall(addressId, _callback);
        }

        /**
         * Execute getEmergencyAddress request
         * @return EmergencyAddress
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmergencyAddress execute() throws ApiException {
            ApiResponse<EmergencyAddress> localVarResp = getEmergencyAddressWithHttpInfo(addressId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmergencyAddress request with HTTP info returned
         * @return ApiResponse&lt;EmergencyAddress&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmergencyAddress> executeWithHttpInfo() throws ApiException {
            return getEmergencyAddressWithHttpInfo(addressId);
        }

        /**
         * Execute getEmergencyAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmergencyAddress> _callback) throws ApiException {
            return getEmergencyAddressAsync(addressId, _callback);
        }
    }

    /**
     * Get an emergency address
     * Fetch an emergency address by ID
     * @param addressId  (required)
     * @return APIgetEmergencyAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmergencyAddressRequest getEmergencyAddress(@javax.annotation.Nonnull UUID addressId) {
        return new APIgetEmergencyAddressRequest(addressId);
    }
    private okhttp3.Call getEmergencyAddressesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/emergency-addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmergencyAddressesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEmergencyAddressesCall(_callback);

    }


    private ApiResponse<List<EmergencyAddressDto>> getEmergencyAddressesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEmergencyAddressesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<EmergencyAddressDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmergencyAddressesAsync(final ApiCallback<List<EmergencyAddressDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmergencyAddressesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<EmergencyAddressDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmergencyAddressesRequest {

        private APIgetEmergencyAddressesRequest() {
        }

        /**
         * Build call for getEmergencyAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmergencyAddressesCall(_callback);
        }

        /**
         * Execute getEmergencyAddresses request
         * @return List&lt;EmergencyAddressDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<EmergencyAddressDto> execute() throws ApiException {
            ApiResponse<List<EmergencyAddressDto>> localVarResp = getEmergencyAddressesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getEmergencyAddresses request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmergencyAddressDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmergencyAddressDto>> executeWithHttpInfo() throws ApiException {
            return getEmergencyAddressesWithHttpInfo();
        }

        /**
         * Execute getEmergencyAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmergencyAddressDto>> _callback) throws ApiException {
            return getEmergencyAddressesAsync(_callback);
        }
    }

    /**
     * Get emergency addresses
     * List emergency addresses
     * @return APIgetEmergencyAddressesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmergencyAddressesRequest getEmergencyAddresses() {
        return new APIgetEmergencyAddressesRequest();
    }
    private okhttp3.Call getPhoneMessageThreadItemsCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull String otherNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/message-threads/{otherNumber}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()))
            .replace("{" + "otherNumber" + "}", localVarApiClient.escapeString(otherNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneMessageThreadItemsValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull String otherNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling getPhoneMessageThreadItems(Async)");
        }

        // verify the required parameter 'otherNumber' is set
        if (otherNumber == null) {
            throw new ApiException("Missing the required parameter 'otherNumber' when calling getPhoneMessageThreadItems(Async)");
        }

        return getPhoneMessageThreadItemsCall(phoneNumberId, otherNumber, page, size, _callback);

    }


    private ApiResponse<PagePhoneMessageThreadItemProjection> getPhoneMessageThreadItemsWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull String otherNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size) throws ApiException {
        okhttp3.Call localVarCall = getPhoneMessageThreadItemsValidateBeforeCall(phoneNumberId, otherNumber, page, size, null);
        Type localVarReturnType = new TypeToken<PagePhoneMessageThreadItemProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneMessageThreadItemsAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull String otherNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback<PagePhoneMessageThreadItemProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneMessageThreadItemsValidateBeforeCall(phoneNumberId, otherNumber, page, size, _callback);
        Type localVarReturnType = new TypeToken<PagePhoneMessageThreadItemProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneMessageThreadItemsRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nonnull
        private final String otherNumber;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;

        private APIgetPhoneMessageThreadItemsRequest(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull String otherNumber) {
            this.phoneNumberId = phoneNumberId;
            this.otherNumber = otherNumber;
        }

        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return APIgetPhoneMessageThreadItemsRequest
         */
        public APIgetPhoneMessageThreadItemsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size  (optional, default to 20)
         * @return APIgetPhoneMessageThreadItemsRequest
         */
        public APIgetPhoneMessageThreadItemsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Build call for getPhoneMessageThreadItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneMessageThreadItemsCall(phoneNumberId, otherNumber, page, size, _callback);
        }

        /**
         * Execute getPhoneMessageThreadItems request
         * @return PagePhoneMessageThreadItemProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PagePhoneMessageThreadItemProjection execute() throws ApiException {
            ApiResponse<PagePhoneMessageThreadItemProjection> localVarResp = getPhoneMessageThreadItemsWithHttpInfo(phoneNumberId, otherNumber, page, size);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneMessageThreadItems request with HTTP info returned
         * @return ApiResponse&lt;PagePhoneMessageThreadItemProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagePhoneMessageThreadItemProjection> executeWithHttpInfo() throws ApiException {
            return getPhoneMessageThreadItemsWithHttpInfo(phoneNumberId, otherNumber, page, size);
        }

        /**
         * Execute getPhoneMessageThreadItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagePhoneMessageThreadItemProjection> _callback) throws ApiException {
            return getPhoneMessageThreadItemsAsync(phoneNumberId, otherNumber, page, size, _callback);
        }
    }

    /**
     * Get messages in a phone thread
     * List message thread messages for a phone message thread
     * @param phoneNumberId  (required)
     * @param otherNumber  (required)
     * @return APIgetPhoneMessageThreadItemsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneMessageThreadItemsRequest getPhoneMessageThreadItems(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull String otherNumber) {
        return new APIgetPhoneMessageThreadItemsRequest(phoneNumberId, otherNumber);
    }
    private okhttp3.Call getPhoneMessageThreadsCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/message-threads"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneMessageThreadsValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling getPhoneMessageThreads(Async)");
        }

        return getPhoneMessageThreadsCall(phoneNumberId, page, size, _callback);

    }


    private ApiResponse<PagePhoneMessageThreadProjection> getPhoneMessageThreadsWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size) throws ApiException {
        okhttp3.Call localVarCall = getPhoneMessageThreadsValidateBeforeCall(phoneNumberId, page, size, null);
        Type localVarReturnType = new TypeToken<PagePhoneMessageThreadProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneMessageThreadsAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, final ApiCallback<PagePhoneMessageThreadProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneMessageThreadsValidateBeforeCall(phoneNumberId, page, size, _callback);
        Type localVarReturnType = new TypeToken<PagePhoneMessageThreadProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneMessageThreadsRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;

        private APIgetPhoneMessageThreadsRequest(@javax.annotation.Nonnull UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
        }

        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return APIgetPhoneMessageThreadsRequest
         */
        public APIgetPhoneMessageThreadsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size  (optional, default to 20)
         * @return APIgetPhoneMessageThreadsRequest
         */
        public APIgetPhoneMessageThreadsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Build call for getPhoneMessageThreads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneMessageThreadsCall(phoneNumberId, page, size, _callback);
        }

        /**
         * Execute getPhoneMessageThreads request
         * @return PagePhoneMessageThreadProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PagePhoneMessageThreadProjection execute() throws ApiException {
            ApiResponse<PagePhoneMessageThreadProjection> localVarResp = getPhoneMessageThreadsWithHttpInfo(phoneNumberId, page, size);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneMessageThreads request with HTTP info returned
         * @return ApiResponse&lt;PagePhoneMessageThreadProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagePhoneMessageThreadProjection> executeWithHttpInfo() throws ApiException {
            return getPhoneMessageThreadsWithHttpInfo(phoneNumberId, page, size);
        }

        /**
         * Execute getPhoneMessageThreads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagePhoneMessageThreadProjection> _callback) throws ApiException {
            return getPhoneMessageThreadsAsync(phoneNumberId, page, size, _callback);
        }
    }

    /**
     * Get the latest message preview for a thread
     * List message threads for a phone
     * @param phoneNumberId  (required)
     * @return APIgetPhoneMessageThreadsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneMessageThreadsRequest getPhoneMessageThreads(@javax.annotation.Nonnull UUID phoneNumberId) {
        return new APIgetPhoneMessageThreadsRequest(phoneNumberId);
    }
    private okhttp3.Call getPhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling getPhoneNumber(Async)");
        }

        return getPhoneNumberCall(phoneNumberId, _callback);

    }


    private ApiResponse<PhoneNumberDto> getPhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberValidateBeforeCall(phoneNumberId, null);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, final ApiCallback<PhoneNumberDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberValidateBeforeCall(phoneNumberId, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;

        private APIgetPhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
        }

        /**
         * Build call for getPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneNumberCall(phoneNumberId, _callback);
        }

        /**
         * Execute getPhoneNumber request
         * @return PhoneNumberDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberDto execute() throws ApiException {
            ApiResponse<PhoneNumberDto> localVarResp = getPhoneNumberWithHttpInfo(phoneNumberId);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberDto> executeWithHttpInfo() throws ApiException {
            return getPhoneNumberWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute getPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberDto> _callback) throws ApiException {
            return getPhoneNumberAsync(phoneNumberId, _callback);
        }
    }

    /**
     * Get a phone number by ID
     * Get a phone number by ID
     * @param phoneNumberId  (required)
     * @return APIgetPhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneNumberRequest getPhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId) {
        return new APIgetPhoneNumberRequest(phoneNumberId);
    }
    private okhttp3.Call getPhoneNumberByNameCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/by-name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberByNameValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getPhoneNumberByName(Async)");
        }

        return getPhoneNumberByNameCall(name, _callback);

    }


    private ApiResponse<PhoneNumberDto> getPhoneNumberByNameWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneNumberByNameAsync(@javax.annotation.Nonnull String name, final ApiCallback<PhoneNumberDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneNumberByNameRequest {
        @javax.annotation.Nonnull
        private final String name;

        private APIgetPhoneNumberByNameRequest(@javax.annotation.Nonnull String name) {
            this.name = name;
        }

        /**
         * Build call for getPhoneNumberByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneNumberByNameCall(name, _callback);
        }

        /**
         * Execute getPhoneNumberByName request
         * @return PhoneNumberDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberDto execute() throws ApiException {
            ApiResponse<PhoneNumberDto> localVarResp = getPhoneNumberByNameWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneNumberByName request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberDto> executeWithHttpInfo() throws ApiException {
            return getPhoneNumberByNameWithHttpInfo(name);
        }

        /**
         * Execute getPhoneNumberByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberDto> _callback) throws ApiException {
            return getPhoneNumberByNameAsync(name, _callback);
        }
    }

    /**
     * Get a phone number by name
     * Get a phone number by name
     * @param name  (required)
     * @return APIgetPhoneNumberByNameRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneNumberByNameRequest getPhoneNumberByName(@javax.annotation.Nonnull String name) {
        return new APIgetPhoneNumberByNameRequest(name);
    }
    private okhttp3.Call getPhoneNumberByPhoneNumberCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/by-phone-number";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberByPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull String phoneNumber, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumber' is set
        if (phoneNumber == null) {
            throw new ApiException("Missing the required parameter 'phoneNumber' when calling getPhoneNumberByPhoneNumber(Async)");
        }

        return getPhoneNumberByPhoneNumberCall(phoneNumber, _callback);

    }


    private ApiResponse<PhoneNumberDto> getPhoneNumberByPhoneNumberWithHttpInfo(@javax.annotation.Nonnull String phoneNumber) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberByPhoneNumberValidateBeforeCall(phoneNumber, null);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneNumberByPhoneNumberAsync(@javax.annotation.Nonnull String phoneNumber, final ApiCallback<PhoneNumberDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberByPhoneNumberValidateBeforeCall(phoneNumber, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneNumberByPhoneNumberRequest {
        @javax.annotation.Nonnull
        private final String phoneNumber;

        private APIgetPhoneNumberByPhoneNumberRequest(@javax.annotation.Nonnull String phoneNumber) {
            this.phoneNumber = phoneNumber;
        }

        /**
         * Build call for getPhoneNumberByPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneNumberByPhoneNumberCall(phoneNumber, _callback);
        }

        /**
         * Execute getPhoneNumberByPhoneNumber request
         * @return PhoneNumberDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberDto execute() throws ApiException {
            ApiResponse<PhoneNumberDto> localVarResp = getPhoneNumberByPhoneNumberWithHttpInfo(phoneNumber);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneNumberByPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberDto> executeWithHttpInfo() throws ApiException {
            return getPhoneNumberByPhoneNumberWithHttpInfo(phoneNumber);
        }

        /**
         * Execute getPhoneNumberByPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberDto> _callback) throws ApiException {
            return getPhoneNumberByPhoneNumberAsync(phoneNumber, _callback);
        }
    }

    /**
     * Get a phone number by phone number
     * Get a phone number by phone number
     * @param phoneNumber  (required)
     * @return APIgetPhoneNumberByPhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneNumberByPhoneNumberRequest getPhoneNumberByPhoneNumber(@javax.annotation.Nonnull String phoneNumber) {
        return new APIgetPhoneNumberByPhoneNumberRequest(phoneNumber);
    }
    private okhttp3.Call getPhoneNumbersCall(@javax.annotation.Nullable String phoneCountry, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<UUID> include, @javax.annotation.Nullable Boolean favourite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneCountry", phoneCountry));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumbersValidateBeforeCall(@javax.annotation.Nullable String phoneCountry, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<UUID> include, @javax.annotation.Nullable Boolean favourite, final ApiCallback _callback) throws ApiException {
        return getPhoneNumbersCall(phoneCountry, page, size, sort, since, before, search, include, favourite, _callback);

    }


    private ApiResponse<PagePhoneNumberProjection> getPhoneNumbersWithHttpInfo(@javax.annotation.Nullable String phoneCountry, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<UUID> include, @javax.annotation.Nullable Boolean favourite) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumbersValidateBeforeCall(phoneCountry, page, size, sort, since, before, search, include, favourite, null);
        Type localVarReturnType = new TypeToken<PagePhoneNumberProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneNumbersAsync(@javax.annotation.Nullable String phoneCountry, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable List<UUID> include, @javax.annotation.Nullable Boolean favourite, final ApiCallback<PagePhoneNumberProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumbersValidateBeforeCall(phoneCountry, page, size, sort, since, before, search, include, favourite, _callback);
        Type localVarReturnType = new TypeToken<PagePhoneNumberProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneNumbersRequest {
        @javax.annotation.Nullable
        private String phoneCountry;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private List<UUID> include;
        @javax.annotation.Nullable
        private Boolean favourite;

        private APIgetPhoneNumbersRequest() {
        }

        /**
         * Set phoneCountry
         * @param phoneCountry Optional phone country (optional)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest phoneCountry(@javax.annotation.Nullable String phoneCountry) {
            this.phoneCountry = phoneCountry;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index for list pagination (optional, default to 0)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size for list pagination (optional, default to 20)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set search
         * @param search Optional search filter (optional)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set include
         * @param include Optional phoneIds to include in result (optional)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest include(@javax.annotation.Nullable List<UUID> include) {
            this.include = include;
            return this;
        }

        /**
         * Set favourite
         * @param favourite Optionally filter results for favourites only (optional, default to false)
         * @return APIgetPhoneNumbersRequest
         */
        public APIgetPhoneNumbersRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Build call for getPhoneNumbers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneNumbersCall(phoneCountry, page, size, sort, since, before, search, include, favourite, _callback);
        }

        /**
         * Execute getPhoneNumbers request
         * @return PagePhoneNumberProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PagePhoneNumberProjection execute() throws ApiException {
            ApiResponse<PagePhoneNumberProjection> localVarResp = getPhoneNumbersWithHttpInfo(phoneCountry, page, size, sort, since, before, search, include, favourite);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneNumbers request with HTTP info returned
         * @return ApiResponse&lt;PagePhoneNumberProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagePhoneNumberProjection> executeWithHttpInfo() throws ApiException {
            return getPhoneNumbersWithHttpInfo(phoneCountry, page, size, sort, since, before, search, include, favourite);
        }

        /**
         * Execute getPhoneNumbers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagePhoneNumberProjection> _callback) throws ApiException {
            return getPhoneNumbersAsync(phoneCountry, page, size, sort, since, before, search, include, favourite, _callback);
        }
    }

    /**
     * Get phone numbers
     * List phone numbers for account
     * @return APIgetPhoneNumbersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneNumbersRequest getPhoneNumbers() {
        return new APIgetPhoneNumbersRequest();
    }
    private okhttp3.Call getPhonePlansCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhonePlansValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPhonePlansCall(_callback);

    }


    private ApiResponse<List<PhonePlanDto>> getPhonePlansWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPhonePlansValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PhonePlanDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhonePlansAsync(final ApiCallback<List<PhonePlanDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhonePlansValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PhonePlanDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhonePlansRequest {

        private APIgetPhonePlansRequest() {
        }

        /**
         * Build call for getPhonePlans
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhonePlansCall(_callback);
        }

        /**
         * Execute getPhonePlans request
         * @return List&lt;PhonePlanDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<PhonePlanDto> execute() throws ApiException {
            ApiResponse<List<PhonePlanDto>> localVarResp = getPhonePlansWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getPhonePlans request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PhonePlanDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PhonePlanDto>> executeWithHttpInfo() throws ApiException {
            return getPhonePlansWithHttpInfo();
        }

        /**
         * Execute getPhonePlans request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PhonePlanDto>> _callback) throws ApiException {
            return getPhonePlansAsync(_callback);
        }
    }

    /**
     * Get phone plans
     * Get phone number plans
     * @return APIgetPhonePlansRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhonePlansRequest getPhonePlans() {
        return new APIgetPhonePlansRequest();
    }
    private okhttp3.Call getPhonePlansAvailabilityCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/plans/availability";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhonePlansAvailabilityValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPhonePlansAvailabilityCall(_callback);

    }


    private ApiResponse<PhonePlanAvailability> getPhonePlansAvailabilityWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPhonePlansAvailabilityValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PhonePlanAvailability>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhonePlansAvailabilityAsync(final ApiCallback<PhonePlanAvailability> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhonePlansAvailabilityValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PhonePlanAvailability>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhonePlansAvailabilityRequest {

        private APIgetPhonePlansAvailabilityRequest() {
        }

        /**
         * Build call for getPhonePlansAvailability
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhonePlansAvailabilityCall(_callback);
        }

        /**
         * Execute getPhonePlansAvailability request
         * @return PhonePlanAvailability
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhonePlanAvailability execute() throws ApiException {
            ApiResponse<PhonePlanAvailability> localVarResp = getPhonePlansAvailabilityWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getPhonePlansAvailability request with HTTP info returned
         * @return ApiResponse&lt;PhonePlanAvailability&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhonePlanAvailability> executeWithHttpInfo() throws ApiException {
            return getPhonePlansAvailabilityWithHttpInfo();
        }

        /**
         * Execute getPhonePlansAvailability request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhonePlanAvailability> _callback) throws ApiException {
            return getPhonePlansAvailabilityAsync(_callback);
        }
    }

    /**
     * Get phone plans availability
     * 
     * @return APIgetPhonePlansAvailabilityRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhonePlansAvailabilityRequest getPhonePlansAvailability() {
        return new APIgetPhonePlansAvailabilityRequest();
    }
    private okhttp3.Call getSentSmsByPhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/sms-sent"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentSmsByPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling getSentSmsByPhoneNumber(Async)");
        }

        return getSentSmsByPhoneNumberCall(phoneNumberId, page, size, sort, since, before, search, _callback);

    }


    private ApiResponse<PageSentSmsProjection> getSentSmsByPhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search) throws ApiException {
        okhttp3.Call localVarCall = getSentSmsByPhoneNumberValidateBeforeCall(phoneNumberId, page, size, sort, since, before, search, null);
        Type localVarReturnType = new TypeToken<PageSentSmsProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentSmsByPhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, final ApiCallback<PageSentSmsProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentSmsByPhoneNumberValidateBeforeCall(phoneNumberId, page, size, sort, since, before, search, _callback);
        Type localVarReturnType = new TypeToken<PageSentSmsProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentSmsByPhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String search;

        private APIgetSentSmsByPhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
        }

        /**
         * Set page
         * @param page Optional page index in SMS list pagination (optional, default to 0)
         * @return APIgetSentSmsByPhoneNumberRequest
         */
        public APIgetSentSmsByPhoneNumberRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetSentSmsByPhoneNumberRequest
         */
        public APIgetSentSmsByPhoneNumberRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentSmsByPhoneNumberRequest
         */
        public APIgetSentSmsByPhoneNumberRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter SMSs received after given date time (optional)
         * @return APIgetSentSmsByPhoneNumberRequest
         */
        public APIgetSentSmsByPhoneNumberRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter SMSs received before given date time (optional)
         * @return APIgetSentSmsByPhoneNumberRequest
         */
        public APIgetSentSmsByPhoneNumberRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set search
         * @param search Optional search filter (optional)
         * @return APIgetSentSmsByPhoneNumberRequest
         */
        public APIgetSentSmsByPhoneNumberRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Build call for getSentSmsByPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentSmsByPhoneNumberCall(phoneNumberId, page, size, sort, since, before, search, _callback);
        }

        /**
         * Execute getSentSmsByPhoneNumber request
         * @return PageSentSmsProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSentSmsProjection execute() throws ApiException {
            ApiResponse<PageSentSmsProjection> localVarResp = getSentSmsByPhoneNumberWithHttpInfo(phoneNumberId, page, size, sort, since, before, search);
            return localVarResp.getData();
        }

        /**
         * Execute getSentSmsByPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PageSentSmsProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSentSmsProjection> executeWithHttpInfo() throws ApiException {
            return getSentSmsByPhoneNumberWithHttpInfo(phoneNumberId, page, size, sort, since, before, search);
        }

        /**
         * Execute getSentSmsByPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSentSmsProjection> _callback) throws ApiException {
            return getSentSmsByPhoneNumberAsync(phoneNumberId, page, size, sort, since, before, search, _callback);
        }
    }

    /**
     * List sent TXT messages for a phone number
     * Get sent SMS messages for a phone number
     * @param phoneNumberId  (required)
     * @return APIgetSentSmsByPhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentSmsByPhoneNumberRequest getSentSmsByPhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId) {
        return new APIgetSentSmsByPhoneNumberRequest(phoneNumberId);
    }
    private okhttp3.Call getSmsByPhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/sms"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSmsByPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling getSmsByPhoneNumber(Async)");
        }

        return getSmsByPhoneNumberCall(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, _callback);

    }


    private ApiResponse<PageSmsProjection> getSmsByPhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite) throws ApiException {
        okhttp3.Call localVarCall = getSmsByPhoneNumberValidateBeforeCall(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, null);
        Type localVarReturnType = new TypeToken<PageSmsProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSmsByPhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite, final ApiCallback<PageSmsProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSmsByPhoneNumberValidateBeforeCall(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, _callback);
        Type localVarReturnType = new TypeToken<PageSmsProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSmsByPhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Boolean unreadOnly;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private Boolean favourite;

        private APIgetSmsByPhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
        }

        /**
         * Set page
         * @param page Optional page index in SMS list pagination (optional, default to 0)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly Optional filter for unread SMS only. All SMS are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter SMSs received after given date time (optional)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter SMSs received before given date time (optional)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set search
         * @param search Optional search filter (optional)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set favourite
         * @param favourite Optionally filter results for favourites only (optional, default to false)
         * @return APIgetSmsByPhoneNumberRequest
         */
        public APIgetSmsByPhoneNumberRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Build call for getSmsByPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSmsByPhoneNumberCall(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, _callback);
        }

        /**
         * Execute getSmsByPhoneNumber request
         * @return PageSmsProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSmsProjection execute() throws ApiException {
            ApiResponse<PageSmsProjection> localVarResp = getSmsByPhoneNumberWithHttpInfo(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
            return localVarResp.getData();
        }

        /**
         * Execute getSmsByPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PageSmsProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSmsProjection> executeWithHttpInfo() throws ApiException {
            return getSmsByPhoneNumberWithHttpInfo(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite);
        }

        /**
         * Execute getSmsByPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSmsProjection> _callback) throws ApiException {
            return getSmsByPhoneNumberAsync(phoneNumberId, page, size, sort, unreadOnly, since, before, search, favourite, _callback);
        }
    }

    /**
     * List SMS messages for a phone number
     * Get SMS messages for a phone number
     * @param phoneNumberId  (required)
     * @return APIgetSmsByPhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSmsByPhoneNumberRequest getSmsByPhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId) {
        return new APIgetSmsByPhoneNumberRequest(phoneNumberId);
    }
    private okhttp3.Call sendSmsFromPhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SmsSendOptions smsSendOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsSendOptions;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/sms"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSmsFromPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SmsSendOptions smsSendOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling sendSmsFromPhoneNumber(Async)");
        }

        // verify the required parameter 'smsSendOptions' is set
        if (smsSendOptions == null) {
            throw new ApiException("Missing the required parameter 'smsSendOptions' when calling sendSmsFromPhoneNumber(Async)");
        }

        return sendSmsFromPhoneNumberCall(phoneNumberId, smsSendOptions, _callback);

    }


    private ApiResponse<SentSmsDto> sendSmsFromPhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SmsSendOptions smsSendOptions) throws ApiException {
        okhttp3.Call localVarCall = sendSmsFromPhoneNumberValidateBeforeCall(phoneNumberId, smsSendOptions, null);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendSmsFromPhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SmsSendOptions smsSendOptions, final ApiCallback<SentSmsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSmsFromPhoneNumberValidateBeforeCall(phoneNumberId, smsSendOptions, _callback);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendSmsFromPhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nonnull
        private final SmsSendOptions smsSendOptions;

        private APIsendSmsFromPhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SmsSendOptions smsSendOptions) {
            this.phoneNumberId = phoneNumberId;
            this.smsSendOptions = smsSendOptions;
        }

        /**
         * Build call for sendSmsFromPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendSmsFromPhoneNumberCall(phoneNumberId, smsSendOptions, _callback);
        }

        /**
         * Execute sendSmsFromPhoneNumber request
         * @return SentSmsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentSmsDto execute() throws ApiException {
            ApiResponse<SentSmsDto> localVarResp = sendSmsFromPhoneNumberWithHttpInfo(phoneNumberId, smsSendOptions);
            return localVarResp.getData();
        }

        /**
         * Execute sendSmsFromPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;SentSmsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentSmsDto> executeWithHttpInfo() throws ApiException {
            return sendSmsFromPhoneNumberWithHttpInfo(phoneNumberId, smsSendOptions);
        }

        /**
         * Execute sendSmsFromPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentSmsDto> _callback) throws ApiException {
            return sendSmsFromPhoneNumberAsync(phoneNumberId, smsSendOptions, _callback);
        }
    }

    /**
     * Send TXT message from a phone number
     * Send SMS from a phone number
     * @param phoneNumberId  (required)
     * @param smsSendOptions  (required)
     * @return APIsendSmsFromPhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsendSmsFromPhoneNumberRequest sendSmsFromPhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SmsSendOptions smsSendOptions) {
        return new APIsendSmsFromPhoneNumberRequest(phoneNumberId, smsSendOptions);
    }
    private okhttp3.Call setConsentStatusCall(@javax.annotation.Nonnull Boolean agree, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/consent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (agree != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("agree", agree));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setConsentStatusValidateBeforeCall(@javax.annotation.Nonnull Boolean agree, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agree' is set
        if (agree == null) {
            throw new ApiException("Missing the required parameter 'agree' when calling setConsentStatus(Async)");
        }

        return setConsentStatusCall(agree, _callback);

    }


    private ApiResponse<ConsentStatusDto> setConsentStatusWithHttpInfo(@javax.annotation.Nonnull Boolean agree) throws ApiException {
        okhttp3.Call localVarCall = setConsentStatusValidateBeforeCall(agree, null);
        Type localVarReturnType = new TypeToken<ConsentStatusDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setConsentStatusAsync(@javax.annotation.Nonnull Boolean agree, final ApiCallback<ConsentStatusDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = setConsentStatusValidateBeforeCall(agree, _callback);
        Type localVarReturnType = new TypeToken<ConsentStatusDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetConsentStatusRequest {
        @javax.annotation.Nonnull
        private final Boolean agree;

        private APIsetConsentStatusRequest(@javax.annotation.Nonnull Boolean agree) {
            this.agree = agree;
        }

        /**
         * Build call for setConsentStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setConsentStatusCall(agree, _callback);
        }

        /**
         * Execute setConsentStatus request
         * @return ConsentStatusDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConsentStatusDto execute() throws ApiException {
            ApiResponse<ConsentStatusDto> localVarResp = setConsentStatusWithHttpInfo(agree);
            return localVarResp.getData();
        }

        /**
         * Execute setConsentStatus request with HTTP info returned
         * @return ApiResponse&lt;ConsentStatusDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConsentStatusDto> executeWithHttpInfo() throws ApiException {
            return setConsentStatusWithHttpInfo(agree);
        }

        /**
         * Execute setConsentStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConsentStatusDto> _callback) throws ApiException {
            return setConsentStatusAsync(agree, _callback);
        }
    }

    /**
     * Set consent status
     * Give or revoke consent for phone usage
     * @param agree  (required)
     * @return APIsetConsentStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsetConsentStatusRequest setConsentStatus(@javax.annotation.Nonnull Boolean agree) {
        return new APIsetConsentStatusRequest(agree);
    }
    private okhttp3.Call setPhoneFavouritedCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SetPhoneFavouritedOptions setPhoneFavouritedOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setPhoneFavouritedOptions;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/favourite"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setPhoneFavouritedValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SetPhoneFavouritedOptions setPhoneFavouritedOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling setPhoneFavourited(Async)");
        }

        // verify the required parameter 'setPhoneFavouritedOptions' is set
        if (setPhoneFavouritedOptions == null) {
            throw new ApiException("Missing the required parameter 'setPhoneFavouritedOptions' when calling setPhoneFavourited(Async)");
        }

        return setPhoneFavouritedCall(phoneNumberId, setPhoneFavouritedOptions, _callback);

    }


    private ApiResponse<PhoneNumberDto> setPhoneFavouritedWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SetPhoneFavouritedOptions setPhoneFavouritedOptions) throws ApiException {
        okhttp3.Call localVarCall = setPhoneFavouritedValidateBeforeCall(phoneNumberId, setPhoneFavouritedOptions, null);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setPhoneFavouritedAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SetPhoneFavouritedOptions setPhoneFavouritedOptions, final ApiCallback<PhoneNumberDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = setPhoneFavouritedValidateBeforeCall(phoneNumberId, setPhoneFavouritedOptions, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetPhoneFavouritedRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nonnull
        private final SetPhoneFavouritedOptions setPhoneFavouritedOptions;

        private APIsetPhoneFavouritedRequest(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SetPhoneFavouritedOptions setPhoneFavouritedOptions) {
            this.phoneNumberId = phoneNumberId;
            this.setPhoneFavouritedOptions = setPhoneFavouritedOptions;
        }

        /**
         * Build call for setPhoneFavourited
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setPhoneFavouritedCall(phoneNumberId, setPhoneFavouritedOptions, _callback);
        }

        /**
         * Execute setPhoneFavourited request
         * @return PhoneNumberDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberDto execute() throws ApiException {
            ApiResponse<PhoneNumberDto> localVarResp = setPhoneFavouritedWithHttpInfo(phoneNumberId, setPhoneFavouritedOptions);
            return localVarResp.getData();
        }

        /**
         * Execute setPhoneFavourited request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberDto> executeWithHttpInfo() throws ApiException {
            return setPhoneFavouritedWithHttpInfo(phoneNumberId, setPhoneFavouritedOptions);
        }

        /**
         * Execute setPhoneFavourited request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberDto> _callback) throws ApiException {
            return setPhoneFavouritedAsync(phoneNumberId, setPhoneFavouritedOptions, _callback);
        }
    }

    /**
     * Set phone favourited state
     * Set and return new favorite state for a phone
     * @param phoneNumberId ID of phone to set favourite state (required)
     * @param setPhoneFavouritedOptions  (required)
     * @return APIsetPhoneFavouritedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsetPhoneFavouritedRequest setPhoneFavourited(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull SetPhoneFavouritedOptions setPhoneFavouritedOptions) {
        return new APIsetPhoneFavouritedRequest(phoneNumberId, setPhoneFavouritedOptions);
    }
    private okhttp3.Call testPhoneNumberSendSmsCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull TestPhoneNumberOptions testPhoneNumberOptions, @javax.annotation.Nullable String xTestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testPhoneNumberOptions;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/test"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (xTestId != null) {
            localVarHeaderParams.put("x-test-id", localVarApiClient.parameterToString(xTestId));
        }


        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testPhoneNumberSendSmsValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull TestPhoneNumberOptions testPhoneNumberOptions, @javax.annotation.Nullable String xTestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling testPhoneNumberSendSms(Async)");
        }

        // verify the required parameter 'testPhoneNumberOptions' is set
        if (testPhoneNumberOptions == null) {
            throw new ApiException("Missing the required parameter 'testPhoneNumberOptions' when calling testPhoneNumberSendSms(Async)");
        }

        return testPhoneNumberSendSmsCall(phoneNumberId, testPhoneNumberOptions, xTestId, _callback);

    }


    private ApiResponse<Void> testPhoneNumberSendSmsWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull TestPhoneNumberOptions testPhoneNumberOptions, @javax.annotation.Nullable String xTestId) throws ApiException {
        okhttp3.Call localVarCall = testPhoneNumberSendSmsValidateBeforeCall(phoneNumberId, testPhoneNumberOptions, xTestId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call testPhoneNumberSendSmsAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull TestPhoneNumberOptions testPhoneNumberOptions, @javax.annotation.Nullable String xTestId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = testPhoneNumberSendSmsValidateBeforeCall(phoneNumberId, testPhoneNumberOptions, xTestId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APItestPhoneNumberSendSmsRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nonnull
        private final TestPhoneNumberOptions testPhoneNumberOptions;
        @javax.annotation.Nullable
        private String xTestId;

        private APItestPhoneNumberSendSmsRequest(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull TestPhoneNumberOptions testPhoneNumberOptions) {
            this.phoneNumberId = phoneNumberId;
            this.testPhoneNumberOptions = testPhoneNumberOptions;
        }

        /**
         * Set xTestId
         * @param xTestId  (optional)
         * @return APItestPhoneNumberSendSmsRequest
         */
        public APItestPhoneNumberSendSmsRequest xTestId(@javax.annotation.Nullable String xTestId) {
            this.xTestId = xTestId;
            return this;
        }

        /**
         * Build call for testPhoneNumberSendSms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testPhoneNumberSendSmsCall(phoneNumberId, testPhoneNumberOptions, xTestId, _callback);
        }

        /**
         * Execute testPhoneNumberSendSms request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            testPhoneNumberSendSmsWithHttpInfo(phoneNumberId, testPhoneNumberOptions, xTestId);
        }

        /**
         * Execute testPhoneNumberSendSms request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return testPhoneNumberSendSmsWithHttpInfo(phoneNumberId, testPhoneNumberOptions, xTestId);
        }

        /**
         * Execute testPhoneNumberSendSms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return testPhoneNumberSendSmsAsync(phoneNumberId, testPhoneNumberOptions, xTestId, _callback);
        }
    }

    /**
     * Test sending an SMS to a number
     * Test a phone number by sending an SMS to it
     * @param phoneNumberId  (required)
     * @param testPhoneNumberOptions  (required)
     * @return APItestPhoneNumberSendSmsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestPhoneNumberSendSmsRequest testPhoneNumberSendSms(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull TestPhoneNumberOptions testPhoneNumberOptions) {
        return new APItestPhoneNumberSendSmsRequest(phoneNumberId, testPhoneNumberOptions);
    }
    private okhttp3.Call updatePhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull UpdatePhoneNumberOptions updatePhoneNumberOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePhoneNumberOptions;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull UpdatePhoneNumberOptions updatePhoneNumberOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling updatePhoneNumber(Async)");
        }

        // verify the required parameter 'updatePhoneNumberOptions' is set
        if (updatePhoneNumberOptions == null) {
            throw new ApiException("Missing the required parameter 'updatePhoneNumberOptions' when calling updatePhoneNumber(Async)");
        }

        return updatePhoneNumberCall(phoneNumberId, updatePhoneNumberOptions, _callback);

    }


    private ApiResponse<PhoneNumberDto> updatePhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull UpdatePhoneNumberOptions updatePhoneNumberOptions) throws ApiException {
        okhttp3.Call localVarCall = updatePhoneNumberValidateBeforeCall(phoneNumberId, updatePhoneNumberOptions, null);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull UpdatePhoneNumberOptions updatePhoneNumberOptions, final ApiCallback<PhoneNumberDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePhoneNumberValidateBeforeCall(phoneNumberId, updatePhoneNumberOptions, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdatePhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nonnull
        private final UpdatePhoneNumberOptions updatePhoneNumberOptions;

        private APIupdatePhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull UpdatePhoneNumberOptions updatePhoneNumberOptions) {
            this.phoneNumberId = phoneNumberId;
            this.updatePhoneNumberOptions = updatePhoneNumberOptions;
        }

        /**
         * Build call for updatePhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updatePhoneNumberCall(phoneNumberId, updatePhoneNumberOptions, _callback);
        }

        /**
         * Execute updatePhoneNumber request
         * @return PhoneNumberDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberDto execute() throws ApiException {
            ApiResponse<PhoneNumberDto> localVarResp = updatePhoneNumberWithHttpInfo(phoneNumberId, updatePhoneNumberOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updatePhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberDto> executeWithHttpInfo() throws ApiException {
            return updatePhoneNumberWithHttpInfo(phoneNumberId, updatePhoneNumberOptions);
        }

        /**
         * Execute updatePhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberDto> _callback) throws ApiException {
            return updatePhoneNumberAsync(phoneNumberId, updatePhoneNumberOptions, _callback);
        }
    }

    /**
     * Update a phone number
     * Set field for phone number
     * @param phoneNumberId ID of phone to set favourite state (required)
     * @param updatePhoneNumberOptions  (required)
     * @return APIupdatePhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdatePhoneNumberRequest updatePhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull UpdatePhoneNumberOptions updatePhoneNumberOptions) {
        return new APIupdatePhoneNumberRequest(phoneNumberId, updatePhoneNumberOptions);
    }
    private okhttp3.Call validatePhoneNumberCall(@javax.annotation.Nonnull ValidatePhoneNumberOptions validatePhoneNumberOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = validatePhoneNumberOptions;

        // create path and map variables
        String localVarPath = "/phone/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validatePhoneNumberValidateBeforeCall(@javax.annotation.Nonnull ValidatePhoneNumberOptions validatePhoneNumberOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'validatePhoneNumberOptions' is set
        if (validatePhoneNumberOptions == null) {
            throw new ApiException("Missing the required parameter 'validatePhoneNumberOptions' when calling validatePhoneNumber(Async)");
        }

        return validatePhoneNumberCall(validatePhoneNumberOptions, _callback);

    }


    private ApiResponse<PhoneNumberValidationDto> validatePhoneNumberWithHttpInfo(@javax.annotation.Nonnull ValidatePhoneNumberOptions validatePhoneNumberOptions) throws ApiException {
        okhttp3.Call localVarCall = validatePhoneNumberValidateBeforeCall(validatePhoneNumberOptions, null);
        Type localVarReturnType = new TypeToken<PhoneNumberValidationDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validatePhoneNumberAsync(@javax.annotation.Nonnull ValidatePhoneNumberOptions validatePhoneNumberOptions, final ApiCallback<PhoneNumberValidationDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = validatePhoneNumberValidateBeforeCall(validatePhoneNumberOptions, _callback);
        Type localVarReturnType = new TypeToken<PhoneNumberValidationDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvalidatePhoneNumberRequest {
        @javax.annotation.Nonnull
        private final ValidatePhoneNumberOptions validatePhoneNumberOptions;

        private APIvalidatePhoneNumberRequest(@javax.annotation.Nonnull ValidatePhoneNumberOptions validatePhoneNumberOptions) {
            this.validatePhoneNumberOptions = validatePhoneNumberOptions;
        }

        /**
         * Build call for validatePhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validatePhoneNumberCall(validatePhoneNumberOptions, _callback);
        }

        /**
         * Execute validatePhoneNumber request
         * @return PhoneNumberValidationDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PhoneNumberValidationDto execute() throws ApiException {
            ApiResponse<PhoneNumberValidationDto> localVarResp = validatePhoneNumberWithHttpInfo(validatePhoneNumberOptions);
            return localVarResp.getData();
        }

        /**
         * Execute validatePhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;PhoneNumberValidationDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PhoneNumberValidationDto> executeWithHttpInfo() throws ApiException {
            return validatePhoneNumberWithHttpInfo(validatePhoneNumberOptions);
        }

        /**
         * Execute validatePhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PhoneNumberValidationDto> _callback) throws ApiException {
            return validatePhoneNumberAsync(validatePhoneNumberOptions, _callback);
        }
    }

    /**
     * Verify validity of a phone number
     * Validate a phone number
     * @param validatePhoneNumberOptions  (required)
     * @return APIvalidatePhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIvalidatePhoneNumberRequest validatePhoneNumber(@javax.annotation.Nonnull ValidatePhoneNumberOptions validatePhoneNumberOptions) {
        return new APIvalidatePhoneNumberRequest(validatePhoneNumberOptions);
    }
}
