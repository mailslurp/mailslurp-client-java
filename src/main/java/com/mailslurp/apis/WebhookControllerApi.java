/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.AbstractWebhookPayload;
import com.mailslurp.models.CountDto;
import com.mailslurp.models.CreateWebhookOptions;
import com.mailslurp.models.JSONSchemaDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageWebhookEndpointProjection;
import com.mailslurp.models.PageWebhookProjection;
import com.mailslurp.models.PageWebhookResult;
import java.util.UUID;
import com.mailslurp.models.UnseenErrorCountDto;
import com.mailslurp.models.VerifyWebhookSignatureOptions;
import com.mailslurp.models.VerifyWebhookSignatureResults;
import com.mailslurp.models.WebhookBouncePayload;
import com.mailslurp.models.WebhookBounceRecipientPayload;
import com.mailslurp.models.WebhookDeliveryStatusPayload;
import com.mailslurp.models.WebhookDto;
import com.mailslurp.models.WebhookEmailOpenedPayload;
import com.mailslurp.models.WebhookEmailReadPayload;
import com.mailslurp.models.WebhookHeaders;
import com.mailslurp.models.WebhookNewAITransformResultPayload;
import com.mailslurp.models.WebhookNewAttachmentPayload;
import com.mailslurp.models.WebhookNewContactPayload;
import com.mailslurp.models.WebhookNewEmailPayload;
import com.mailslurp.models.WebhookNewSmsPayload;
import com.mailslurp.models.WebhookProjection;
import com.mailslurp.models.WebhookRedriveAllResult;
import com.mailslurp.models.WebhookRedriveResult;
import com.mailslurp.models.WebhookResultDto;
import com.mailslurp.models.WebhookTestResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAccountWebhookCall(@javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebhookOptions;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAccountWebhookValidateBeforeCall(@javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createWebhookOptions' is set
        if (createWebhookOptions == null) {
            throw new ApiException("Missing the required parameter 'createWebhookOptions' when calling createAccountWebhook(Async)");
        }

        return createAccountWebhookCall(createWebhookOptions, _callback);

    }


    private ApiResponse<WebhookDto> createAccountWebhookWithHttpInfo(@javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) throws ApiException {
        okhttp3.Call localVarCall = createAccountWebhookValidateBeforeCall(createWebhookOptions, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAccountWebhookAsync(@javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAccountWebhookValidateBeforeCall(createWebhookOptions, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAccountWebhookRequest {
        @javax.annotation.Nonnull
        private final CreateWebhookOptions createWebhookOptions;

        private APIcreateAccountWebhookRequest(@javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
            this.createWebhookOptions = createWebhookOptions;
        }

        /**
         * Build call for createAccountWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAccountWebhookCall(createWebhookOptions, _callback);
        }

        /**
         * Execute createAccountWebhook request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = createAccountWebhookWithHttpInfo(createWebhookOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createAccountWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return createAccountWebhookWithHttpInfo(createWebhookOptions);
        }

        /**
         * Execute createAccountWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return createAccountWebhookAsync(createWebhookOptions, _callback);
        }
    }

    /**
     * Attach a WebHook URL to an inbox
     * Get notified of account level events such as bounce and bounce recipient.
     * @param createWebhookOptions  (required)
     * @return APIcreateAccountWebhookRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAccountWebhookRequest createAccountWebhook(@javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
        return new APIcreateAccountWebhookRequest(createWebhookOptions);
    }
    private okhttp3.Call createWebhookCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebhookOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/webhooks"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling createWebhook(Async)");
        }

        // verify the required parameter 'createWebhookOptions' is set
        if (createWebhookOptions == null) {
            throw new ApiException("Missing the required parameter 'createWebhookOptions' when calling createWebhook(Async)");
        }

        return createWebhookCall(inboxId, createWebhookOptions, _callback);

    }


    private ApiResponse<WebhookDto> createWebhookWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) throws ApiException {
        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(inboxId, createWebhookOptions, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebhookAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookValidateBeforeCall(inboxId, createWebhookOptions, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateWebhookRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final CreateWebhookOptions createWebhookOptions;

        private APIcreateWebhookRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
            this.inboxId = inboxId;
            this.createWebhookOptions = createWebhookOptions;
        }

        /**
         * Build call for createWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWebhookCall(inboxId, createWebhookOptions, _callback);
        }

        /**
         * Execute createWebhook request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = createWebhookWithHttpInfo(inboxId, createWebhookOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return createWebhookWithHttpInfo(inboxId, createWebhookOptions);
        }

        /**
         * Execute createWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return createWebhookAsync(inboxId, createWebhookOptions, _callback);
        }
    }

    /**
     * Attach a WebHook URL to an inbox
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     * @param inboxId  (required)
     * @param createWebhookOptions  (required)
     * @return APIcreateWebhookRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWebhookRequest createWebhook(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
        return new APIcreateWebhookRequest(inboxId, createWebhookOptions);
    }
    private okhttp3.Call createWebhookForAITransformerCall(@javax.annotation.Nonnull UUID transformerId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebhookOptions;

        // create path and map variables
        String localVarPath = "/ai-transformers/{transformerId}/webhooks"
            .replace("{" + "transformerId" + "}", localVarApiClient.escapeString(transformerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookForAITransformerValidateBeforeCall(@javax.annotation.Nonnull UUID transformerId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'transformerId' is set
        if (transformerId == null) {
            throw new ApiException("Missing the required parameter 'transformerId' when calling createWebhookForAITransformer(Async)");
        }

        // verify the required parameter 'createWebhookOptions' is set
        if (createWebhookOptions == null) {
            throw new ApiException("Missing the required parameter 'createWebhookOptions' when calling createWebhookForAITransformer(Async)");
        }

        return createWebhookForAITransformerCall(transformerId, createWebhookOptions, _callback);

    }


    private ApiResponse<WebhookDto> createWebhookForAITransformerWithHttpInfo(@javax.annotation.Nonnull UUID transformerId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) throws ApiException {
        okhttp3.Call localVarCall = createWebhookForAITransformerValidateBeforeCall(transformerId, createWebhookOptions, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebhookForAITransformerAsync(@javax.annotation.Nonnull UUID transformerId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookForAITransformerValidateBeforeCall(transformerId, createWebhookOptions, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateWebhookForAITransformerRequest {
        @javax.annotation.Nonnull
        private final UUID transformerId;
        @javax.annotation.Nonnull
        private final CreateWebhookOptions createWebhookOptions;

        private APIcreateWebhookForAITransformerRequest(@javax.annotation.Nonnull UUID transformerId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
            this.transformerId = transformerId;
            this.createWebhookOptions = createWebhookOptions;
        }

        /**
         * Build call for createWebhookForAITransformer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWebhookForAITransformerCall(transformerId, createWebhookOptions, _callback);
        }

        /**
         * Execute createWebhookForAITransformer request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = createWebhookForAITransformerWithHttpInfo(transformerId, createWebhookOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createWebhookForAITransformer request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return createWebhookForAITransformerWithHttpInfo(transformerId, createWebhookOptions);
        }

        /**
         * Execute createWebhookForAITransformer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return createWebhookForAITransformerAsync(transformerId, createWebhookOptions, _callback);
        }
    }

    /**
     * Attach a WebHook URL to an AI transformer
     * Get notified whenever AI transformation pipeline converts and email or SMS into structured data via a WebHook URL.
     * @param transformerId  (required)
     * @param createWebhookOptions  (required)
     * @return APIcreateWebhookForAITransformerRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWebhookForAITransformerRequest createWebhookForAITransformer(@javax.annotation.Nonnull UUID transformerId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
        return new APIcreateWebhookForAITransformerRequest(transformerId, createWebhookOptions);
    }
    private okhttp3.Call createWebhookForPhoneNumberCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebhookOptions;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneNumberId}/webhooks"
            .replace("{" + "phoneNumberId" + "}", localVarApiClient.escapeString(phoneNumberId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createWebhookForPhoneNumberValidateBeforeCall(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneNumberId' is set
        if (phoneNumberId == null) {
            throw new ApiException("Missing the required parameter 'phoneNumberId' when calling createWebhookForPhoneNumber(Async)");
        }

        // verify the required parameter 'createWebhookOptions' is set
        if (createWebhookOptions == null) {
            throw new ApiException("Missing the required parameter 'createWebhookOptions' when calling createWebhookForPhoneNumber(Async)");
        }

        return createWebhookForPhoneNumberCall(phoneNumberId, createWebhookOptions, _callback);

    }


    private ApiResponse<WebhookDto> createWebhookForPhoneNumberWithHttpInfo(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) throws ApiException {
        okhttp3.Call localVarCall = createWebhookForPhoneNumberValidateBeforeCall(phoneNumberId, createWebhookOptions, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createWebhookForPhoneNumberAsync(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createWebhookForPhoneNumberValidateBeforeCall(phoneNumberId, createWebhookOptions, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateWebhookForPhoneNumberRequest {
        @javax.annotation.Nonnull
        private final UUID phoneNumberId;
        @javax.annotation.Nonnull
        private final CreateWebhookOptions createWebhookOptions;

        private APIcreateWebhookForPhoneNumberRequest(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
            this.phoneNumberId = phoneNumberId;
            this.createWebhookOptions = createWebhookOptions;
        }

        /**
         * Build call for createWebhookForPhoneNumber
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createWebhookForPhoneNumberCall(phoneNumberId, createWebhookOptions, _callback);
        }

        /**
         * Execute createWebhookForPhoneNumber request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = createWebhookForPhoneNumberWithHttpInfo(phoneNumberId, createWebhookOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createWebhookForPhoneNumber request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return createWebhookForPhoneNumberWithHttpInfo(phoneNumberId, createWebhookOptions);
        }

        /**
         * Execute createWebhookForPhoneNumber request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return createWebhookForPhoneNumberAsync(phoneNumberId, createWebhookOptions, _callback);
        }
    }

    /**
     * Attach a WebHook URL to a phone number
     * Get notified whenever a phone number receives an SMS via a WebHook URL.
     * @param phoneNumberId  (required)
     * @param createWebhookOptions  (required)
     * @return APIcreateWebhookForPhoneNumberRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateWebhookForPhoneNumberRequest createWebhookForPhoneNumber(@javax.annotation.Nonnull UUID phoneNumberId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
        return new APIcreateWebhookForPhoneNumberRequest(phoneNumberId, createWebhookOptions);
    }
    private okhttp3.Call deleteAllWebhooksCall(@javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllWebhooksValidateBeforeCall(@javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return deleteAllWebhooksCall(before, _callback);

    }


    private ApiResponse<Void> deleteAllWebhooksWithHttpInfo(@javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = deleteAllWebhooksValidateBeforeCall(before, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllWebhooksAsync(@javax.annotation.Nullable OffsetDateTime before, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllWebhooksValidateBeforeCall(before, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllWebhooksRequest {
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIdeleteAllWebhooksRequest() {
        }

        /**
         * Set before
         * @param before before (optional)
         * @return APIdeleteAllWebhooksRequest
         */
        public APIdeleteAllWebhooksRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for deleteAllWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllWebhooksCall(before, _callback);
        }

        /**
         * Execute deleteAllWebhooks request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllWebhooksWithHttpInfo(before);
        }

        /**
         * Execute deleteAllWebhooks request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllWebhooksWithHttpInfo(before);
        }

        /**
         * Execute deleteAllWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllWebhooksAsync(before, _callback);
        }
    }

    /**
     * Delete all webhooks
     * 
     * @return APIdeleteAllWebhooksRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllWebhooksRequest deleteAllWebhooks() {
        return new APIdeleteAllWebhooksRequest();
    }
    private okhttp3.Call deleteWebhookCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/webhooks/{webhookId}"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()))
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling deleteWebhook(Async)");
        }

        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhook(Async)");
        }

        return deleteWebhookCall(inboxId, webhookId, _callback);

    }


    private ApiResponse<Void> deleteWebhookWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(inboxId, webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWebhookAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UUID webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookValidateBeforeCall(inboxId, webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWebhookRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIdeleteWebhookRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UUID webhookId) {
            this.inboxId = inboxId;
            this.webhookId = webhookId;
        }

        /**
         * Build call for deleteWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWebhookCall(inboxId, webhookId, _callback);
        }

        /**
         * Execute deleteWebhook request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWebhookWithHttpInfo(inboxId, webhookId);
        }

        /**
         * Execute deleteWebhook request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWebhookWithHttpInfo(inboxId, webhookId);
        }

        /**
         * Execute deleteWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWebhookAsync(inboxId, webhookId, _callback);
        }
    }

    /**
     * Delete and disable a Webhook for an Inbox
     * 
     * @param inboxId  (required)
     * @param webhookId  (required)
     * @return APIdeleteWebhookRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWebhookRequest deleteWebhook(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UUID webhookId) {
        return new APIdeleteWebhookRequest(inboxId, webhookId);
    }
    private okhttp3.Call deleteWebhookByIdCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteWebhookByIdValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling deleteWebhookById(Async)");
        }

        return deleteWebhookByIdCall(webhookId, _callback);

    }


    private ApiResponse<Void> deleteWebhookByIdWithHttpInfo(@javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = deleteWebhookByIdValidateBeforeCall(webhookId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteWebhookByIdAsync(@javax.annotation.Nonnull UUID webhookId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteWebhookByIdValidateBeforeCall(webhookId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteWebhookByIdRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIdeleteWebhookByIdRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for deleteWebhookById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteWebhookByIdCall(webhookId, _callback);
        }

        /**
         * Execute deleteWebhookById request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteWebhookByIdWithHttpInfo(webhookId);
        }

        /**
         * Execute deleteWebhookById request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteWebhookByIdWithHttpInfo(webhookId);
        }

        /**
         * Execute deleteWebhookById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteWebhookByIdAsync(webhookId, _callback);
        }
    }

    /**
     * Delete a webhook
     * 
     * @param webhookId  (required)
     * @return APIdeleteWebhookByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteWebhookByIdRequest deleteWebhookById(@javax.annotation.Nonnull UUID webhookId) {
        return new APIdeleteWebhookByIdRequest(webhookId);
    }
    private okhttp3.Call getAllAccountWebhooksCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String health, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/account/paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        if (health != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("health", health));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllAccountWebhooksValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String health, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        return getAllAccountWebhooksCall(page, size, sort, since, before, eventType, health, searchFilter, _callback);

    }


    private ApiResponse<PageWebhookProjection> getAllAccountWebhooksWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String health, @javax.annotation.Nullable String searchFilter) throws ApiException {
        okhttp3.Call localVarCall = getAllAccountWebhooksValidateBeforeCall(page, size, sort, since, before, eventType, health, searchFilter, null);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllAccountWebhooksAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String health, @javax.annotation.Nullable String searchFilter, final ApiCallback<PageWebhookProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllAccountWebhooksValidateBeforeCall(page, size, sort, since, before, eventType, health, searchFilter, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllAccountWebhooksRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String eventType;
        @javax.annotation.Nullable
        private String health;
        @javax.annotation.Nullable
        private String searchFilter;

        private APIgetAllAccountWebhooksRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size for paginated result list. (optional, default to 20)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to DESC)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Optional event type (optional)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Set health
         * @param health Filter by webhook health (optional)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest health(@javax.annotation.Nullable String health) {
            this.health = health;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllAccountWebhooksRequest
         */
        public APIgetAllAccountWebhooksRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Build call for getAllAccountWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllAccountWebhooksCall(page, size, sort, since, before, eventType, health, searchFilter, _callback);
        }

        /**
         * Execute getAllAccountWebhooks request
         * @return PageWebhookProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookProjection execute() throws ApiException {
            ApiResponse<PageWebhookProjection> localVarResp = getAllAccountWebhooksWithHttpInfo(page, size, sort, since, before, eventType, health, searchFilter);
            return localVarResp.getData();
        }

        /**
         * Execute getAllAccountWebhooks request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookProjection> executeWithHttpInfo() throws ApiException {
            return getAllAccountWebhooksWithHttpInfo(page, size, sort, since, before, eventType, health, searchFilter);
        }

        /**
         * Execute getAllAccountWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookProjection> _callback) throws ApiException {
            return getAllAccountWebhooksAsync(page, size, sort, since, before, eventType, health, searchFilter, _callback);
        }
    }

    /**
     * List account webhooks Paginated
     * List account webhooks in paginated form. Allows for page index, page size, and sort direction.
     * @return APIgetAllAccountWebhooksRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllAccountWebhooksRequest getAllAccountWebhooks() {
        return new APIgetAllAccountWebhooksRequest();
    }
    private okhttp3.Call getAllWebhookEndpointsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/endpoints";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (health != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("health", health));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllWebhookEndpointsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        return getAllWebhookEndpointsCall(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, _callback);

    }


    private ApiResponse<PageWebhookEndpointProjection> getAllWebhookEndpointsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType) throws ApiException {
        okhttp3.Call localVarCall = getAllWebhookEndpointsValidateBeforeCall(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, null);
        Type localVarReturnType = new TypeToken<PageWebhookEndpointProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllWebhookEndpointsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, final ApiCallback<PageWebhookEndpointProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllWebhookEndpointsValidateBeforeCall(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookEndpointProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllWebhookEndpointsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String health;
        @javax.annotation.Nullable
        private String eventType;

        private APIgetAllWebhookEndpointsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size for paginated result list. (optional, default to 20)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to DESC)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Filter by inboxId (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Filter by phoneId (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set health
         * @param health Filter by webhook health (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest health(@javax.annotation.Nullable String health) {
            this.health = health;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Optional event type (optional)
         * @return APIgetAllWebhookEndpointsRequest
         */
        public APIgetAllWebhookEndpointsRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Build call for getAllWebhookEndpoints
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllWebhookEndpointsCall(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, _callback);
        }

        /**
         * Execute getAllWebhookEndpoints request
         * @return PageWebhookEndpointProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookEndpointProjection execute() throws ApiException {
            ApiResponse<PageWebhookEndpointProjection> localVarResp = getAllWebhookEndpointsWithHttpInfo(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);
            return localVarResp.getData();
        }

        /**
         * Execute getAllWebhookEndpoints request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookEndpointProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookEndpointProjection> executeWithHttpInfo() throws ApiException {
            return getAllWebhookEndpointsWithHttpInfo(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType);
        }

        /**
         * Execute getAllWebhookEndpoints request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookEndpointProjection> _callback) throws ApiException {
            return getAllWebhookEndpointsAsync(page, size, sort, searchFilter, since, inboxId, phoneId, before, health, eventType, _callback);
        }
    }

    /**
     * List Webhooks endpoints Paginated
     * List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
     * @return APIgetAllWebhookEndpointsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllWebhookEndpointsRequest getAllWebhookEndpoints() {
        return new APIgetAllWebhookEndpointsRequest();
    }
    private okhttp3.Call getAllWebhookResultsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (unseenOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unseenOnly", unseenOnly));
        }

        if (resultType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultType", resultType));
        }

        if (eventName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventName", eventName));
        }

        if (minStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minStatusCode", minStatusCode));
        }

        if (maxStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxStatusCode", maxStatusCode));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (smsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smsId", smsId));
        }

        if (attachmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentId", attachmentId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (aiTransformerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformerId", aiTransformerId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllWebhookResultsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId, final ApiCallback _callback) throws ApiException {
        return getAllWebhookResultsCall(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);

    }


    private ApiResponse<PageWebhookResult> getAllWebhookResultsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId) throws ApiException {
        okhttp3.Call localVarCall = getAllWebhookResultsValidateBeforeCall(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, null);
        Type localVarReturnType = new TypeToken<PageWebhookResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllWebhookResultsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId, final ApiCallback<PageWebhookResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllWebhookResultsValidateBeforeCall(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllWebhookResultsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private Boolean unseenOnly;
        @javax.annotation.Nullable
        private String resultType;
        @javax.annotation.Nullable
        private String eventName;
        @javax.annotation.Nullable
        private Integer minStatusCode;
        @javax.annotation.Nullable
        private Integer maxStatusCode;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID smsId;
        @javax.annotation.Nullable
        private UUID attachmentId;
        @javax.annotation.Nullable
        private UUID emailId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private UUID aiTransformerId;

        private APIgetAllWebhookResultsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set unseenOnly
         * @param unseenOnly Filter for unseen exceptions only (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest unseenOnly(@javax.annotation.Nullable Boolean unseenOnly) {
            this.unseenOnly = unseenOnly;
            return this;
        }

        /**
         * Set resultType
         * @param resultType Filter by result type (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest resultType(@javax.annotation.Nullable String resultType) {
            this.resultType = resultType;
            return this;
        }

        /**
         * Set eventName
         * @param eventName Filter by event name (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest eventName(@javax.annotation.Nullable String eventName) {
            this.eventName = eventName;
            return this;
        }

        /**
         * Set minStatusCode
         * @param minStatusCode Minimum response status (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest minStatusCode(@javax.annotation.Nullable Integer minStatusCode) {
            this.minStatusCode = minStatusCode;
            return this;
        }

        /**
         * Set maxStatusCode
         * @param maxStatusCode Maximum response status (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest maxStatusCode(@javax.annotation.Nullable Integer maxStatusCode) {
            this.maxStatusCode = maxStatusCode;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set smsId
         * @param smsId Sms ID (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest smsId(@javax.annotation.Nullable UUID smsId) {
            this.smsId = smsId;
            return this;
        }

        /**
         * Set attachmentId
         * @param attachmentId Attachment ID (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest attachmentId(@javax.annotation.Nullable UUID attachmentId) {
            this.attachmentId = attachmentId;
            return this;
        }

        /**
         * Set emailId
         * @param emailId Email ID (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest emailId(@javax.annotation.Nullable UUID emailId) {
            this.emailId = emailId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Phone ID (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set aiTransformerId
         * @param aiTransformerId AI Transformer ID (optional)
         * @return APIgetAllWebhookResultsRequest
         */
        public APIgetAllWebhookResultsRequest aiTransformerId(@javax.annotation.Nullable UUID aiTransformerId) {
            this.aiTransformerId = aiTransformerId;
            return this;
        }

        /**
         * Build call for getAllWebhookResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllWebhookResultsCall(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);
        }

        /**
         * Execute getAllWebhookResults request
         * @return PageWebhookResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookResult execute() throws ApiException {
            ApiResponse<PageWebhookResult> localVarResp = getAllWebhookResultsWithHttpInfo(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllWebhookResults request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookResult> executeWithHttpInfo() throws ApiException {
            return getAllWebhookResultsWithHttpInfo(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId);
        }

        /**
         * Execute getAllWebhookResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookResult> _callback) throws ApiException {
            return getAllWebhookResultsAsync(page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);
        }
    }

    /**
     * Get results for all webhooks
     * 
     * @return APIgetAllWebhookResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllWebhookResultsRequest getAllWebhookResults() {
        return new APIgetAllWebhookResultsRequest();
    }
    private okhttp3.Call getAllWebhooksCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String url, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (aiTransformerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformerId", aiTransformerId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (health != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("health", health));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllWebhooksValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String url, final ApiCallback _callback) throws ApiException {
        return getAllWebhooksCall(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url, _callback);

    }


    private ApiResponse<PageWebhookProjection> getAllWebhooksWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String url) throws ApiException {
        okhttp3.Call localVarCall = getAllWebhooksValidateBeforeCall(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url, null);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllWebhooksAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String url, final ApiCallback<PageWebhookProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllWebhooksValidateBeforeCall(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllWebhooksRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID aiTransformerId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String health;
        @javax.annotation.Nullable
        private String eventType;
        @javax.annotation.Nullable
        private String url;

        private APIgetAllWebhooksRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size for paginated result list. (optional, default to 20)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to DESC)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Filter by inboxId (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set aiTransformerId
         * @param aiTransformerId Filter by aiTransformerId (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest aiTransformerId(@javax.annotation.Nullable UUID aiTransformerId) {
            this.aiTransformerId = aiTransformerId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Filter by phoneId (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set health
         * @param health Filter by webhook health (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest health(@javax.annotation.Nullable String health) {
            this.health = health;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Optional event type (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Set url
         * @param url Optional url endpoint filter (optional)
         * @return APIgetAllWebhooksRequest
         */
        public APIgetAllWebhooksRequest url(@javax.annotation.Nullable String url) {
            this.url = url;
            return this;
        }

        /**
         * Build call for getAllWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllWebhooksCall(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url, _callback);
        }

        /**
         * Execute getAllWebhooks request
         * @return PageWebhookProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookProjection execute() throws ApiException {
            ApiResponse<PageWebhookProjection> localVarResp = getAllWebhooksWithHttpInfo(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url);
            return localVarResp.getData();
        }

        /**
         * Execute getAllWebhooks request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookProjection> executeWithHttpInfo() throws ApiException {
            return getAllWebhooksWithHttpInfo(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url);
        }

        /**
         * Execute getAllWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookProjection> _callback) throws ApiException {
            return getAllWebhooksAsync(page, size, sort, searchFilter, since, inboxId, aiTransformerId, phoneId, before, health, eventType, url, _callback);
        }
    }

    /**
     * List Webhooks Paginated
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     * @return APIgetAllWebhooksRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllWebhooksRequest getAllWebhooks() {
        return new APIgetAllWebhooksRequest();
    }
    private okhttp3.Call getInboxWebhooksPaginatedCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/webhooks/paginated"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (health != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("health", health));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxWebhooksPaginatedValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxWebhooksPaginated(Async)");
        }

        return getInboxWebhooksPaginatedCall(inboxId, page, size, sort, searchFilter, since, before, health, eventType, _callback);

    }


    private ApiResponse<PageWebhookProjection> getInboxWebhooksPaginatedWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType) throws ApiException {
        okhttp3.Call localVarCall = getInboxWebhooksPaginatedValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, health, eventType, null);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxWebhooksPaginatedAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String health, @javax.annotation.Nullable String eventType, final ApiCallback<PageWebhookProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxWebhooksPaginatedValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, health, eventType, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxWebhooksPaginatedRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String health;
        @javax.annotation.Nullable
        private String eventType;

        private APIgetInboxWebhooksPaginatedRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set health
         * @param health Filter by webhook health (optional)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest health(@javax.annotation.Nullable String health) {
            this.health = health;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Optional event type (optional)
         * @return APIgetInboxWebhooksPaginatedRequest
         */
        public APIgetInboxWebhooksPaginatedRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Build call for getInboxWebhooksPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxWebhooksPaginatedCall(inboxId, page, size, sort, searchFilter, since, before, health, eventType, _callback);
        }

        /**
         * Execute getInboxWebhooksPaginated request
         * @return PageWebhookProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookProjection execute() throws ApiException {
            ApiResponse<PageWebhookProjection> localVarResp = getInboxWebhooksPaginatedWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before, health, eventType);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxWebhooksPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookProjection> executeWithHttpInfo() throws ApiException {
            return getInboxWebhooksPaginatedWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before, health, eventType);
        }

        /**
         * Execute getInboxWebhooksPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookProjection> _callback) throws ApiException {
            return getInboxWebhooksPaginatedAsync(inboxId, page, size, sort, searchFilter, since, before, health, eventType, _callback);
        }
    }

    /**
     * Get paginated webhooks for an Inbox
     * 
     * @param inboxId  (required)
     * @return APIgetInboxWebhooksPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxWebhooksPaginatedRequest getInboxWebhooksPaginated(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxWebhooksPaginatedRequest(inboxId);
    }
    private okhttp3.Call getJsonSchemaForWebhookEventCall(@javax.annotation.Nonnull String event, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/schema";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (event != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("event", event));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonSchemaForWebhookEventValidateBeforeCall(@javax.annotation.Nonnull String event, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'event' is set
        if (event == null) {
            throw new ApiException("Missing the required parameter 'event' when calling getJsonSchemaForWebhookEvent(Async)");
        }

        return getJsonSchemaForWebhookEventCall(event, _callback);

    }


    private ApiResponse<JSONSchemaDto> getJsonSchemaForWebhookEventWithHttpInfo(@javax.annotation.Nonnull String event) throws ApiException {
        okhttp3.Call localVarCall = getJsonSchemaForWebhookEventValidateBeforeCall(event, null);
        Type localVarReturnType = new TypeToken<JSONSchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJsonSchemaForWebhookEventAsync(@javax.annotation.Nonnull String event, final ApiCallback<JSONSchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonSchemaForWebhookEventValidateBeforeCall(event, _callback);
        Type localVarReturnType = new TypeToken<JSONSchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetJsonSchemaForWebhookEventRequest {
        @javax.annotation.Nonnull
        private final String event;

        private APIgetJsonSchemaForWebhookEventRequest(@javax.annotation.Nonnull String event) {
            this.event = event;
        }

        /**
         * Build call for getJsonSchemaForWebhookEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJsonSchemaForWebhookEventCall(event, _callback);
        }

        /**
         * Execute getJsonSchemaForWebhookEvent request
         * @return JSONSchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public JSONSchemaDto execute() throws ApiException {
            ApiResponse<JSONSchemaDto> localVarResp = getJsonSchemaForWebhookEventWithHttpInfo(event);
            return localVarResp.getData();
        }

        /**
         * Execute getJsonSchemaForWebhookEvent request with HTTP info returned
         * @return ApiResponse&lt;JSONSchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JSONSchemaDto> executeWithHttpInfo() throws ApiException {
            return getJsonSchemaForWebhookEventWithHttpInfo(event);
        }

        /**
         * Execute getJsonSchemaForWebhookEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JSONSchemaDto> _callback) throws ApiException {
            return getJsonSchemaForWebhookEventAsync(event, _callback);
        }
    }

    /**
     * 
     * Get JSON Schema definition for webhook payload by event
     * @param event  (required)
     * @return APIgetJsonSchemaForWebhookEventRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetJsonSchemaForWebhookEventRequest getJsonSchemaForWebhookEvent(@javax.annotation.Nonnull String event) {
        return new APIgetJsonSchemaForWebhookEventRequest(event);
    }
    private okhttp3.Call getJsonSchemaForWebhookPayloadCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/schema"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getJsonSchemaForWebhookPayloadValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getJsonSchemaForWebhookPayload(Async)");
        }

        return getJsonSchemaForWebhookPayloadCall(webhookId, _callback);

    }


    private ApiResponse<JSONSchemaDto> getJsonSchemaForWebhookPayloadWithHttpInfo(@javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = getJsonSchemaForWebhookPayloadValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<JSONSchemaDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getJsonSchemaForWebhookPayloadAsync(@javax.annotation.Nonnull UUID webhookId, final ApiCallback<JSONSchemaDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getJsonSchemaForWebhookPayloadValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<JSONSchemaDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetJsonSchemaForWebhookPayloadRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIgetJsonSchemaForWebhookPayloadRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for getJsonSchemaForWebhookPayload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getJsonSchemaForWebhookPayloadCall(webhookId, _callback);
        }

        /**
         * Execute getJsonSchemaForWebhookPayload request
         * @return JSONSchemaDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public JSONSchemaDto execute() throws ApiException {
            ApiResponse<JSONSchemaDto> localVarResp = getJsonSchemaForWebhookPayloadWithHttpInfo(webhookId);
            return localVarResp.getData();
        }

        /**
         * Execute getJsonSchemaForWebhookPayload request with HTTP info returned
         * @return ApiResponse&lt;JSONSchemaDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<JSONSchemaDto> executeWithHttpInfo() throws ApiException {
            return getJsonSchemaForWebhookPayloadWithHttpInfo(webhookId);
        }

        /**
         * Execute getJsonSchemaForWebhookPayload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<JSONSchemaDto> _callback) throws ApiException {
            return getJsonSchemaForWebhookPayloadAsync(webhookId, _callback);
        }
    }

    /**
     * 
     * Get JSON Schema definition for webhook payload
     * @param webhookId  (required)
     * @return APIgetJsonSchemaForWebhookPayloadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetJsonSchemaForWebhookPayloadRequest getJsonSchemaForWebhookPayload(@javax.annotation.Nonnull UUID webhookId) {
        return new APIgetJsonSchemaForWebhookPayloadRequest(webhookId);
    }
    private okhttp3.Call getPhoneNumberWebhooksPaginatedCall(@javax.annotation.Nonnull UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable String health, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/phone/numbers/{phoneId}/webhooks/paginated"
            .replace("{" + "phoneId" + "}", localVarApiClient.escapeString(phoneId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (health != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("health", health));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPhoneNumberWebhooksPaginatedValidateBeforeCall(@javax.annotation.Nonnull UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable String health, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'phoneId' is set
        if (phoneId == null) {
            throw new ApiException("Missing the required parameter 'phoneId' when calling getPhoneNumberWebhooksPaginated(Async)");
        }

        return getPhoneNumberWebhooksPaginatedCall(phoneId, page, size, sort, since, before, eventType, searchFilter, health, _callback);

    }


    private ApiResponse<PageWebhookProjection> getPhoneNumberWebhooksPaginatedWithHttpInfo(@javax.annotation.Nonnull UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable String health) throws ApiException {
        okhttp3.Call localVarCall = getPhoneNumberWebhooksPaginatedValidateBeforeCall(phoneId, page, size, sort, since, before, eventType, searchFilter, health, null);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPhoneNumberWebhooksPaginatedAsync(@javax.annotation.Nonnull UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable String health, final ApiCallback<PageWebhookProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPhoneNumberWebhooksPaginatedValidateBeforeCall(phoneId, page, size, sort, since, before, eventType, searchFilter, health, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetPhoneNumberWebhooksPaginatedRequest {
        @javax.annotation.Nonnull
        private final UUID phoneId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String eventType;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private String health;

        private APIgetPhoneNumberWebhooksPaginatedRequest(@javax.annotation.Nonnull UUID phoneId) {
            this.phoneId = phoneId;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Optional event type (optional)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set health
         * @param health Filter by webhook health (optional)
         * @return APIgetPhoneNumberWebhooksPaginatedRequest
         */
        public APIgetPhoneNumberWebhooksPaginatedRequest health(@javax.annotation.Nullable String health) {
            this.health = health;
            return this;
        }

        /**
         * Build call for getPhoneNumberWebhooksPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPhoneNumberWebhooksPaginatedCall(phoneId, page, size, sort, since, before, eventType, searchFilter, health, _callback);
        }

        /**
         * Execute getPhoneNumberWebhooksPaginated request
         * @return PageWebhookProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookProjection execute() throws ApiException {
            ApiResponse<PageWebhookProjection> localVarResp = getPhoneNumberWebhooksPaginatedWithHttpInfo(phoneId, page, size, sort, since, before, eventType, searchFilter, health);
            return localVarResp.getData();
        }

        /**
         * Execute getPhoneNumberWebhooksPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookProjection> executeWithHttpInfo() throws ApiException {
            return getPhoneNumberWebhooksPaginatedWithHttpInfo(phoneId, page, size, sort, since, before, eventType, searchFilter, health);
        }

        /**
         * Execute getPhoneNumberWebhooksPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookProjection> _callback) throws ApiException {
            return getPhoneNumberWebhooksPaginatedAsync(phoneId, page, size, sort, since, before, eventType, searchFilter, health, _callback);
        }
    }

    /**
     * Get paginated webhooks for a phone number
     * 
     * @param phoneId  (required)
     * @return APIgetPhoneNumberWebhooksPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetPhoneNumberWebhooksPaginatedRequest getPhoneNumberWebhooksPaginated(@javax.annotation.Nonnull UUID phoneId) {
        return new APIgetPhoneNumberWebhooksPaginatedRequest(phoneId);
    }
    private okhttp3.Call getTestWebhookPayloadCall(@javax.annotation.Nullable String eventName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventName", eventName));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadValidateBeforeCall(@javax.annotation.Nullable String eventName, final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadCall(eventName, _callback);

    }


    private ApiResponse<AbstractWebhookPayload> getTestWebhookPayloadWithHttpInfo(@javax.annotation.Nullable String eventName) throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadValidateBeforeCall(eventName, null);
        Type localVarReturnType = new TypeToken<AbstractWebhookPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadAsync(@javax.annotation.Nullable String eventName, final ApiCallback<AbstractWebhookPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadValidateBeforeCall(eventName, _callback);
        Type localVarReturnType = new TypeToken<AbstractWebhookPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadRequest {
        @javax.annotation.Nullable
        private String eventName;

        private APIgetTestWebhookPayloadRequest() {
        }

        /**
         * Set eventName
         * @param eventName  (optional)
         * @return APIgetTestWebhookPayloadRequest
         */
        public APIgetTestWebhookPayloadRequest eventName(@javax.annotation.Nullable String eventName) {
            this.eventName = eventName;
            return this;
        }

        /**
         * Build call for getTestWebhookPayload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadCall(eventName, _callback);
        }

        /**
         * Execute getTestWebhookPayload request
         * @return AbstractWebhookPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AbstractWebhookPayload execute() throws ApiException {
            ApiResponse<AbstractWebhookPayload> localVarResp = getTestWebhookPayloadWithHttpInfo(eventName);
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayload request with HTTP info returned
         * @return ApiResponse&lt;AbstractWebhookPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbstractWebhookPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadWithHttpInfo(eventName);
        }

        /**
         * Execute getTestWebhookPayload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbstractWebhookPayload> _callback) throws ApiException {
            return getTestWebhookPayloadAsync(eventName, _callback);
        }
    }

    /**
     * 
     * Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
     * @return APIgetTestWebhookPayloadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadRequest getTestWebhookPayload() {
        return new APIgetTestWebhookPayloadRequest();
    }
    private okhttp3.Call getTestWebhookPayloadBounceCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/email-bounce-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadBounceValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadBounceCall(_callback);

    }


    private ApiResponse<WebhookBouncePayload> getTestWebhookPayloadBounceWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadBounceValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookBouncePayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadBounceAsync(final ApiCallback<WebhookBouncePayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadBounceValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookBouncePayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadBounceRequest {

        private APIgetTestWebhookPayloadBounceRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadBounce
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadBounceCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadBounce request
         * @return WebhookBouncePayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookBouncePayload execute() throws ApiException {
            ApiResponse<WebhookBouncePayload> localVarResp = getTestWebhookPayloadBounceWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadBounce request with HTTP info returned
         * @return ApiResponse&lt;WebhookBouncePayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookBouncePayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadBounceWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadBounce request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookBouncePayload> _callback) throws ApiException {
            return getTestWebhookPayloadBounceAsync(_callback);
        }
    }

    /**
     * 
     * Get webhook test payload for bounce
     * @return APIgetTestWebhookPayloadBounceRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadBounceRequest getTestWebhookPayloadBounce() {
        return new APIgetTestWebhookPayloadBounceRequest();
    }
    private okhttp3.Call getTestWebhookPayloadBounceRecipientCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/email-bounce-recipient-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadBounceRecipientValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadBounceRecipientCall(_callback);

    }


    private ApiResponse<WebhookBounceRecipientPayload> getTestWebhookPayloadBounceRecipientWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadBounceRecipientValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookBounceRecipientPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadBounceRecipientAsync(final ApiCallback<WebhookBounceRecipientPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadBounceRecipientValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookBounceRecipientPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadBounceRecipientRequest {

        private APIgetTestWebhookPayloadBounceRecipientRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadBounceRecipient
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadBounceRecipientCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadBounceRecipient request
         * @return WebhookBounceRecipientPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookBounceRecipientPayload execute() throws ApiException {
            ApiResponse<WebhookBounceRecipientPayload> localVarResp = getTestWebhookPayloadBounceRecipientWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadBounceRecipient request with HTTP info returned
         * @return ApiResponse&lt;WebhookBounceRecipientPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookBounceRecipientPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadBounceRecipientWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadBounceRecipient request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookBounceRecipientPayload> _callback) throws ApiException {
            return getTestWebhookPayloadBounceRecipientAsync(_callback);
        }
    }

    /**
     * 
     * Get webhook test payload for bounce recipient
     * @return APIgetTestWebhookPayloadBounceRecipientRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadBounceRecipientRequest getTestWebhookPayloadBounceRecipient() {
        return new APIgetTestWebhookPayloadBounceRecipientRequest();
    }
    private okhttp3.Call getTestWebhookPayloadDeliveryStatusCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/delivery-status-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadDeliveryStatusValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadDeliveryStatusCall(_callback);

    }


    private ApiResponse<WebhookDeliveryStatusPayload> getTestWebhookPayloadDeliveryStatusWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadDeliveryStatusValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookDeliveryStatusPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadDeliveryStatusAsync(final ApiCallback<WebhookDeliveryStatusPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadDeliveryStatusValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookDeliveryStatusPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadDeliveryStatusRequest {

        private APIgetTestWebhookPayloadDeliveryStatusRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadDeliveryStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadDeliveryStatusCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadDeliveryStatus request
         * @return WebhookDeliveryStatusPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDeliveryStatusPayload execute() throws ApiException {
            ApiResponse<WebhookDeliveryStatusPayload> localVarResp = getTestWebhookPayloadDeliveryStatusWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadDeliveryStatus request with HTTP info returned
         * @return ApiResponse&lt;WebhookDeliveryStatusPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDeliveryStatusPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadDeliveryStatusWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadDeliveryStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDeliveryStatusPayload> _callback) throws ApiException {
            return getTestWebhookPayloadDeliveryStatusAsync(_callback);
        }
    }

    /**
     * Get webhook test payload for delivery status event
     * 
     * @return APIgetTestWebhookPayloadDeliveryStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadDeliveryStatusRequest getTestWebhookPayloadDeliveryStatus() {
        return new APIgetTestWebhookPayloadDeliveryStatusRequest();
    }
    private okhttp3.Call getTestWebhookPayloadEmailOpenedCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/email-opened-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadEmailOpenedValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadEmailOpenedCall(_callback);

    }


    private ApiResponse<WebhookEmailOpenedPayload> getTestWebhookPayloadEmailOpenedWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadEmailOpenedValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookEmailOpenedPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadEmailOpenedAsync(final ApiCallback<WebhookEmailOpenedPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadEmailOpenedValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookEmailOpenedPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadEmailOpenedRequest {

        private APIgetTestWebhookPayloadEmailOpenedRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadEmailOpened
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadEmailOpenedCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadEmailOpened request
         * @return WebhookEmailOpenedPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookEmailOpenedPayload execute() throws ApiException {
            ApiResponse<WebhookEmailOpenedPayload> localVarResp = getTestWebhookPayloadEmailOpenedWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadEmailOpened request with HTTP info returned
         * @return ApiResponse&lt;WebhookEmailOpenedPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookEmailOpenedPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadEmailOpenedWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadEmailOpened request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookEmailOpenedPayload> _callback) throws ApiException {
            return getTestWebhookPayloadEmailOpenedAsync(_callback);
        }
    }

    /**
     * 
     * Get webhook test payload for email opened event
     * @return APIgetTestWebhookPayloadEmailOpenedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadEmailOpenedRequest getTestWebhookPayloadEmailOpened() {
        return new APIgetTestWebhookPayloadEmailOpenedRequest();
    }
    private okhttp3.Call getTestWebhookPayloadEmailReadCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/email-read-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadEmailReadValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadEmailReadCall(_callback);

    }


    private ApiResponse<WebhookEmailReadPayload> getTestWebhookPayloadEmailReadWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadEmailReadValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookEmailReadPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadEmailReadAsync(final ApiCallback<WebhookEmailReadPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadEmailReadValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookEmailReadPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadEmailReadRequest {

        private APIgetTestWebhookPayloadEmailReadRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadEmailRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadEmailReadCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadEmailRead request
         * @return WebhookEmailReadPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookEmailReadPayload execute() throws ApiException {
            ApiResponse<WebhookEmailReadPayload> localVarResp = getTestWebhookPayloadEmailReadWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadEmailRead request with HTTP info returned
         * @return ApiResponse&lt;WebhookEmailReadPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookEmailReadPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadEmailReadWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadEmailRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookEmailReadPayload> _callback) throws ApiException {
            return getTestWebhookPayloadEmailReadAsync(_callback);
        }
    }

    /**
     * 
     * Get webhook test payload for email opened event
     * @return APIgetTestWebhookPayloadEmailReadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadEmailReadRequest getTestWebhookPayloadEmailRead() {
        return new APIgetTestWebhookPayloadEmailReadRequest();
    }
    private okhttp3.Call getTestWebhookPayloadForWebhookCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/example"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadForWebhookValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getTestWebhookPayloadForWebhook(Async)");
        }

        return getTestWebhookPayloadForWebhookCall(webhookId, _callback);

    }


    private ApiResponse<AbstractWebhookPayload> getTestWebhookPayloadForWebhookWithHttpInfo(@javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadForWebhookValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<AbstractWebhookPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadForWebhookAsync(@javax.annotation.Nonnull UUID webhookId, final ApiCallback<AbstractWebhookPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadForWebhookValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<AbstractWebhookPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadForWebhookRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIgetTestWebhookPayloadForWebhookRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for getTestWebhookPayloadForWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadForWebhookCall(webhookId, _callback);
        }

        /**
         * Execute getTestWebhookPayloadForWebhook request
         * @return AbstractWebhookPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AbstractWebhookPayload execute() throws ApiException {
            ApiResponse<AbstractWebhookPayload> localVarResp = getTestWebhookPayloadForWebhookWithHttpInfo(webhookId);
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadForWebhook request with HTTP info returned
         * @return ApiResponse&lt;AbstractWebhookPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AbstractWebhookPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadForWebhookWithHttpInfo(webhookId);
        }

        /**
         * Execute getTestWebhookPayloadForWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AbstractWebhookPayload> _callback) throws ApiException {
            return getTestWebhookPayloadForWebhookAsync(webhookId, _callback);
        }
    }

    /**
     * 
     * Get example payload for webhook
     * @param webhookId  (required)
     * @return APIgetTestWebhookPayloadForWebhookRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadForWebhookRequest getTestWebhookPayloadForWebhook(@javax.annotation.Nonnull UUID webhookId) {
        return new APIgetTestWebhookPayloadForWebhookRequest(webhookId);
    }
    private okhttp3.Call getTestWebhookPayloadNewAITransformResultCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/new-ai-transform-result-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadNewAITransformResultValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadNewAITransformResultCall(_callback);

    }


    private ApiResponse<WebhookNewAITransformResultPayload> getTestWebhookPayloadNewAITransformResultWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadNewAITransformResultValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookNewAITransformResultPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadNewAITransformResultAsync(final ApiCallback<WebhookNewAITransformResultPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadNewAITransformResultValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookNewAITransformResultPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadNewAITransformResultRequest {

        private APIgetTestWebhookPayloadNewAITransformResultRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadNewAITransformResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadNewAITransformResultCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadNewAITransformResult request
         * @return WebhookNewAITransformResultPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookNewAITransformResultPayload execute() throws ApiException {
            ApiResponse<WebhookNewAITransformResultPayload> localVarResp = getTestWebhookPayloadNewAITransformResultWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadNewAITransformResult request with HTTP info returned
         * @return ApiResponse&lt;WebhookNewAITransformResultPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookNewAITransformResultPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadNewAITransformResultWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadNewAITransformResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookNewAITransformResultPayload> _callback) throws ApiException {
            return getTestWebhookPayloadNewAITransformResultAsync(_callback);
        }
    }

    /**
     * Get webhook test payload for new ai transform result event
     * 
     * @return APIgetTestWebhookPayloadNewAITransformResultRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadNewAITransformResultRequest getTestWebhookPayloadNewAITransformResult() {
        return new APIgetTestWebhookPayloadNewAITransformResultRequest();
    }
    private okhttp3.Call getTestWebhookPayloadNewAttachmentCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/new-attachment-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadNewAttachmentValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadNewAttachmentCall(_callback);

    }


    private ApiResponse<WebhookNewAttachmentPayload> getTestWebhookPayloadNewAttachmentWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadNewAttachmentValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookNewAttachmentPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadNewAttachmentAsync(final ApiCallback<WebhookNewAttachmentPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadNewAttachmentValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookNewAttachmentPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadNewAttachmentRequest {

        private APIgetTestWebhookPayloadNewAttachmentRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadNewAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadNewAttachmentCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadNewAttachment request
         * @return WebhookNewAttachmentPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookNewAttachmentPayload execute() throws ApiException {
            ApiResponse<WebhookNewAttachmentPayload> localVarResp = getTestWebhookPayloadNewAttachmentWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadNewAttachment request with HTTP info returned
         * @return ApiResponse&lt;WebhookNewAttachmentPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookNewAttachmentPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadNewAttachmentWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadNewAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookNewAttachmentPayload> _callback) throws ApiException {
            return getTestWebhookPayloadNewAttachmentAsync(_callback);
        }
    }

    /**
     * Get webhook test payload for new attachment event
     * 
     * @return APIgetTestWebhookPayloadNewAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadNewAttachmentRequest getTestWebhookPayloadNewAttachment() {
        return new APIgetTestWebhookPayloadNewAttachmentRequest();
    }
    private okhttp3.Call getTestWebhookPayloadNewContactCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/new-contact-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadNewContactValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadNewContactCall(_callback);

    }


    private ApiResponse<WebhookNewContactPayload> getTestWebhookPayloadNewContactWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadNewContactValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookNewContactPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadNewContactAsync(final ApiCallback<WebhookNewContactPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadNewContactValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookNewContactPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadNewContactRequest {

        private APIgetTestWebhookPayloadNewContactRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadNewContact
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadNewContactCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadNewContact request
         * @return WebhookNewContactPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookNewContactPayload execute() throws ApiException {
            ApiResponse<WebhookNewContactPayload> localVarResp = getTestWebhookPayloadNewContactWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadNewContact request with HTTP info returned
         * @return ApiResponse&lt;WebhookNewContactPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookNewContactPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadNewContactWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadNewContact request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookNewContactPayload> _callback) throws ApiException {
            return getTestWebhookPayloadNewContactAsync(_callback);
        }
    }

    /**
     * Get webhook test payload for new contact event
     * 
     * @return APIgetTestWebhookPayloadNewContactRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadNewContactRequest getTestWebhookPayloadNewContact() {
        return new APIgetTestWebhookPayloadNewContactRequest();
    }
    private okhttp3.Call getTestWebhookPayloadNewEmailCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/new-email-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadNewEmailValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadNewEmailCall(_callback);

    }


    private ApiResponse<WebhookNewEmailPayload> getTestWebhookPayloadNewEmailWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadNewEmailValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookNewEmailPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadNewEmailAsync(final ApiCallback<WebhookNewEmailPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadNewEmailValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookNewEmailPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadNewEmailRequest {

        private APIgetTestWebhookPayloadNewEmailRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadNewEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadNewEmailCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadNewEmail request
         * @return WebhookNewEmailPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookNewEmailPayload execute() throws ApiException {
            ApiResponse<WebhookNewEmailPayload> localVarResp = getTestWebhookPayloadNewEmailWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadNewEmail request with HTTP info returned
         * @return ApiResponse&lt;WebhookNewEmailPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookNewEmailPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadNewEmailWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadNewEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookNewEmailPayload> _callback) throws ApiException {
            return getTestWebhookPayloadNewEmailAsync(_callback);
        }
    }

    /**
     * Get webhook test payload for new email event
     * 
     * @return APIgetTestWebhookPayloadNewEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadNewEmailRequest getTestWebhookPayloadNewEmail() {
        return new APIgetTestWebhookPayloadNewEmailRequest();
    }
    private okhttp3.Call getTestWebhookPayloadNewSmsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/test/new-sms-payload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTestWebhookPayloadNewSmsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getTestWebhookPayloadNewSmsCall(_callback);

    }


    private ApiResponse<WebhookNewSmsPayload> getTestWebhookPayloadNewSmsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getTestWebhookPayloadNewSmsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookNewSmsPayload>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTestWebhookPayloadNewSmsAsync(final ApiCallback<WebhookNewSmsPayload> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTestWebhookPayloadNewSmsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookNewSmsPayload>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTestWebhookPayloadNewSmsRequest {

        private APIgetTestWebhookPayloadNewSmsRequest() {
        }

        /**
         * Build call for getTestWebhookPayloadNewSms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTestWebhookPayloadNewSmsCall(_callback);
        }

        /**
         * Execute getTestWebhookPayloadNewSms request
         * @return WebhookNewSmsPayload
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookNewSmsPayload execute() throws ApiException {
            ApiResponse<WebhookNewSmsPayload> localVarResp = getTestWebhookPayloadNewSmsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getTestWebhookPayloadNewSms request with HTTP info returned
         * @return ApiResponse&lt;WebhookNewSmsPayload&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookNewSmsPayload> executeWithHttpInfo() throws ApiException {
            return getTestWebhookPayloadNewSmsWithHttpInfo();
        }

        /**
         * Execute getTestWebhookPayloadNewSms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookNewSmsPayload> _callback) throws ApiException {
            return getTestWebhookPayloadNewSmsAsync(_callback);
        }
    }

    /**
     * Get webhook test payload for new sms event
     * 
     * @return APIgetTestWebhookPayloadNewSmsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTestWebhookPayloadNewSmsRequest getTestWebhookPayloadNewSms() {
        return new APIgetTestWebhookPayloadNewSmsRequest();
    }
    private okhttp3.Call getWebhookCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhook(Async)");
        }

        return getWebhookCall(webhookId, _callback);

    }


    private ApiResponse<WebhookDto> getWebhookWithHttpInfo(@javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookAsync(@javax.annotation.Nonnull UUID webhookId, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebhookRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIgetWebhookRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for getWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookCall(webhookId, _callback);
        }

        /**
         * Execute getWebhook request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = getWebhookWithHttpInfo(webhookId);
            return localVarResp.getData();
        }

        /**
         * Execute getWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return getWebhookWithHttpInfo(webhookId);
        }

        /**
         * Execute getWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return getWebhookAsync(webhookId, _callback);
        }
    }

    /**
     * Get a webhook
     * 
     * @param webhookId  (required)
     * @return APIgetWebhookRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWebhookRequest getWebhook(@javax.annotation.Nonnull UUID webhookId) {
        return new APIgetWebhookRequest(webhookId);
    }
    private okhttp3.Call getWebhookResultCall(@javax.annotation.Nonnull UUID webhookResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/results/{webhookResultId}"
            .replace("{" + "webhookResultId" + "}", localVarApiClient.escapeString(webhookResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookResultValidateBeforeCall(@javax.annotation.Nonnull UUID webhookResultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookResultId' is set
        if (webhookResultId == null) {
            throw new ApiException("Missing the required parameter 'webhookResultId' when calling getWebhookResult(Async)");
        }

        return getWebhookResultCall(webhookResultId, _callback);

    }


    private ApiResponse<WebhookResultDto> getWebhookResultWithHttpInfo(@javax.annotation.Nonnull UUID webhookResultId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookResultValidateBeforeCall(webhookResultId, null);
        Type localVarReturnType = new TypeToken<WebhookResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookResultAsync(@javax.annotation.Nonnull UUID webhookResultId, final ApiCallback<WebhookResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookResultValidateBeforeCall(webhookResultId, _callback);
        Type localVarReturnType = new TypeToken<WebhookResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebhookResultRequest {
        @javax.annotation.Nonnull
        private final UUID webhookResultId;

        private APIgetWebhookResultRequest(@javax.annotation.Nonnull UUID webhookResultId) {
            this.webhookResultId = webhookResultId;
        }

        /**
         * Build call for getWebhookResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookResultCall(webhookResultId, _callback);
        }

        /**
         * Execute getWebhookResult request
         * @return WebhookResultDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookResultDto execute() throws ApiException {
            ApiResponse<WebhookResultDto> localVarResp = getWebhookResultWithHttpInfo(webhookResultId);
            return localVarResp.getData();
        }

        /**
         * Execute getWebhookResult request with HTTP info returned
         * @return ApiResponse&lt;WebhookResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookResultDto> executeWithHttpInfo() throws ApiException {
            return getWebhookResultWithHttpInfo(webhookResultId);
        }

        /**
         * Execute getWebhookResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookResultDto> _callback) throws ApiException {
            return getWebhookResultAsync(webhookResultId, _callback);
        }
    }

    /**
     * Get a webhook result for a webhook
     * 
     * @param webhookResultId Webhook Result ID (required)
     * @return APIgetWebhookResultRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWebhookResultRequest getWebhookResult(@javax.annotation.Nonnull UUID webhookResultId) {
        return new APIgetWebhookResultRequest(webhookResultId);
    }
    private okhttp3.Call getWebhookResultsCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/results"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (unseenOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unseenOnly", unseenOnly));
        }

        if (resultType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resultType", resultType));
        }

        if (eventName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventName", eventName));
        }

        if (minStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minStatusCode", minStatusCode));
        }

        if (maxStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxStatusCode", maxStatusCode));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (smsId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("smsId", smsId));
        }

        if (attachmentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("attachmentId", attachmentId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (aiTransformerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformerId", aiTransformerId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookResultsValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhookResults(Async)");
        }

        return getWebhookResultsCall(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);

    }


    private ApiResponse<PageWebhookResult> getWebhookResultsWithHttpInfo(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookResultsValidateBeforeCall(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, null);
        Type localVarReturnType = new TypeToken<PageWebhookResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookResultsAsync(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean unseenOnly, @javax.annotation.Nullable String resultType, @javax.annotation.Nullable String eventName, @javax.annotation.Nullable Integer minStatusCode, @javax.annotation.Nullable Integer maxStatusCode, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID smsId, @javax.annotation.Nullable UUID attachmentId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable UUID aiTransformerId, final ApiCallback<PageWebhookResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookResultsValidateBeforeCall(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);
        Type localVarReturnType = new TypeToken<PageWebhookResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebhookResultsRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private Boolean unseenOnly;
        @javax.annotation.Nullable
        private String resultType;
        @javax.annotation.Nullable
        private String eventName;
        @javax.annotation.Nullable
        private Integer minStatusCode;
        @javax.annotation.Nullable
        private Integer maxStatusCode;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID smsId;
        @javax.annotation.Nullable
        private UUID attachmentId;
        @javax.annotation.Nullable
        private UUID emailId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private UUID aiTransformerId;

        private APIgetWebhookResultsRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set unseenOnly
         * @param unseenOnly Filter for unseen exceptions only (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest unseenOnly(@javax.annotation.Nullable Boolean unseenOnly) {
            this.unseenOnly = unseenOnly;
            return this;
        }

        /**
         * Set resultType
         * @param resultType Filter by result type (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest resultType(@javax.annotation.Nullable String resultType) {
            this.resultType = resultType;
            return this;
        }

        /**
         * Set eventName
         * @param eventName Filter by event name (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest eventName(@javax.annotation.Nullable String eventName) {
            this.eventName = eventName;
            return this;
        }

        /**
         * Set minStatusCode
         * @param minStatusCode Minimum response status (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest minStatusCode(@javax.annotation.Nullable Integer minStatusCode) {
            this.minStatusCode = minStatusCode;
            return this;
        }

        /**
         * Set maxStatusCode
         * @param maxStatusCode Maximum response status (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest maxStatusCode(@javax.annotation.Nullable Integer maxStatusCode) {
            this.maxStatusCode = maxStatusCode;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set smsId
         * @param smsId Sms ID (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest smsId(@javax.annotation.Nullable UUID smsId) {
            this.smsId = smsId;
            return this;
        }

        /**
         * Set attachmentId
         * @param attachmentId Attachment ID (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest attachmentId(@javax.annotation.Nullable UUID attachmentId) {
            this.attachmentId = attachmentId;
            return this;
        }

        /**
         * Set emailId
         * @param emailId Email ID (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest emailId(@javax.annotation.Nullable UUID emailId) {
            this.emailId = emailId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Phone ID (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set aiTransformerId
         * @param aiTransformerId AI Transformer ID (optional)
         * @return APIgetWebhookResultsRequest
         */
        public APIgetWebhookResultsRequest aiTransformerId(@javax.annotation.Nullable UUID aiTransformerId) {
            this.aiTransformerId = aiTransformerId;
            return this;
        }

        /**
         * Build call for getWebhookResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookResultsCall(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);
        }

        /**
         * Execute getWebhookResults request
         * @return PageWebhookResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageWebhookResult execute() throws ApiException {
            ApiResponse<PageWebhookResult> localVarResp = getWebhookResultsWithHttpInfo(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId);
            return localVarResp.getData();
        }

        /**
         * Execute getWebhookResults request with HTTP info returned
         * @return ApiResponse&lt;PageWebhookResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageWebhookResult> executeWithHttpInfo() throws ApiException {
            return getWebhookResultsWithHttpInfo(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId);
        }

        /**
         * Execute getWebhookResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageWebhookResult> _callback) throws ApiException {
            return getWebhookResultsAsync(webhookId, page, size, sort, searchFilter, since, before, unseenOnly, resultType, eventName, minStatusCode, maxStatusCode, inboxId, smsId, attachmentId, emailId, phoneId, aiTransformerId, _callback);
        }
    }

    /**
     * Get a webhook results for a webhook
     * 
     * @param webhookId ID of webhook to get results for (required)
     * @return APIgetWebhookResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWebhookResultsRequest getWebhookResults(@javax.annotation.Nonnull UUID webhookId) {
        return new APIgetWebhookResultsRequest(webhookId);
    }
    private okhttp3.Call getWebhookResultsCountCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/results/count"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookResultsCountValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling getWebhookResultsCount(Async)");
        }

        return getWebhookResultsCountCall(webhookId, _callback);

    }


    private ApiResponse<CountDto> getWebhookResultsCountWithHttpInfo(@javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = getWebhookResultsCountValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookResultsCountAsync(@javax.annotation.Nonnull UUID webhookId, final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookResultsCountValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebhookResultsCountRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIgetWebhookResultsCountRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for getWebhookResultsCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookResultsCountCall(webhookId, _callback);
        }

        /**
         * Execute getWebhookResultsCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getWebhookResultsCountWithHttpInfo(webhookId);
            return localVarResp.getData();
        }

        /**
         * Execute getWebhookResultsCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getWebhookResultsCountWithHttpInfo(webhookId);
        }

        /**
         * Execute getWebhookResultsCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getWebhookResultsCountAsync(webhookId, _callback);
        }
    }

    /**
     * Get a webhook results count for a webhook
     * 
     * @param webhookId ID of webhook to get results for (required)
     * @return APIgetWebhookResultsCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWebhookResultsCountRequest getWebhookResultsCount(@javax.annotation.Nonnull UUID webhookId) {
        return new APIgetWebhookResultsCountRequest(webhookId);
    }
    private okhttp3.Call getWebhookResultsUnseenErrorCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/results/unseen-count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhookResultsUnseenErrorCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getWebhookResultsUnseenErrorCountCall(_callback);

    }


    private ApiResponse<UnseenErrorCountDto> getWebhookResultsUnseenErrorCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getWebhookResultsUnseenErrorCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UnseenErrorCountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhookResultsUnseenErrorCountAsync(final ApiCallback<UnseenErrorCountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhookResultsUnseenErrorCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UnseenErrorCountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebhookResultsUnseenErrorCountRequest {

        private APIgetWebhookResultsUnseenErrorCountRequest() {
        }

        /**
         * Build call for getWebhookResultsUnseenErrorCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhookResultsUnseenErrorCountCall(_callback);
        }

        /**
         * Execute getWebhookResultsUnseenErrorCount request
         * @return UnseenErrorCountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UnseenErrorCountDto execute() throws ApiException {
            ApiResponse<UnseenErrorCountDto> localVarResp = getWebhookResultsUnseenErrorCountWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getWebhookResultsUnseenErrorCount request with HTTP info returned
         * @return ApiResponse&lt;UnseenErrorCountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnseenErrorCountDto> executeWithHttpInfo() throws ApiException {
            return getWebhookResultsUnseenErrorCountWithHttpInfo();
        }

        /**
         * Execute getWebhookResultsUnseenErrorCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnseenErrorCountDto> _callback) throws ApiException {
            return getWebhookResultsUnseenErrorCountAsync(_callback);
        }
    }

    /**
     * Get count of unseen webhook results with error status
     * 
     * @return APIgetWebhookResultsUnseenErrorCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetWebhookResultsUnseenErrorCountRequest getWebhookResultsUnseenErrorCount() {
        return new APIgetWebhookResultsUnseenErrorCountRequest();
    }
    private okhttp3.Call getWebhooksCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/webhooks"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWebhooksValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getWebhooks(Async)");
        }

        return getWebhooksCall(inboxId, page, size, sort, _callback);

    }


    private ApiResponse<List<WebhookProjection>> getWebhooksWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getWebhooksValidateBeforeCall(inboxId, page, size, sort, null);
        Type localVarReturnType = new TypeToken<List<WebhookProjection>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWebhooksAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<List<WebhookProjection>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWebhooksValidateBeforeCall(inboxId, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<List<WebhookProjection>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetWebhooksRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetWebhooksRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetWebhooksRequest
         */
        public APIgetWebhooksRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetWebhooksRequest
         */
        public APIgetWebhooksRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetWebhooksRequest
         */
        public APIgetWebhooksRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getWebhooks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWebhooksCall(inboxId, page, size, sort, _callback);
        }

        /**
         * Execute getWebhooks request
         * @return List&lt;WebhookProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public List<WebhookProjection> execute() throws ApiException {
            ApiResponse<List<WebhookProjection>> localVarResp = getWebhooksWithHttpInfo(inboxId, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getWebhooks request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WebhookProjection&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<List<WebhookProjection>> executeWithHttpInfo() throws ApiException {
            return getWebhooksWithHttpInfo(inboxId, page, size, sort);
        }

        /**
         * Execute getWebhooks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<List<WebhookProjection>> _callback) throws ApiException {
            return getWebhooksAsync(inboxId, page, size, sort, _callback);
        }
    }

    /**
     * Get all webhooks for an Inbox
     * 
     * @param inboxId  (required)
     * @return APIgetWebhooksRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetWebhooksRequest getWebhooks(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetWebhooksRequest(inboxId);
    }
    private okhttp3.Call redriveAllWebhookResultsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/results/redrive";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redriveAllWebhookResultsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return redriveAllWebhookResultsCall(_callback);

    }


    private ApiResponse<WebhookRedriveAllResult> redriveAllWebhookResultsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = redriveAllWebhookResultsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<WebhookRedriveAllResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redriveAllWebhookResultsAsync(final ApiCallback<WebhookRedriveAllResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = redriveAllWebhookResultsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<WebhookRedriveAllResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIredriveAllWebhookResultsRequest {

        private APIredriveAllWebhookResultsRequest() {
        }

        /**
         * Build call for redriveAllWebhookResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return redriveAllWebhookResultsCall(_callback);
        }

        /**
         * Execute redriveAllWebhookResults request
         * @return WebhookRedriveAllResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookRedriveAllResult execute() throws ApiException {
            ApiResponse<WebhookRedriveAllResult> localVarResp = redriveAllWebhookResultsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute redriveAllWebhookResults request with HTTP info returned
         * @return ApiResponse&lt;WebhookRedriveAllResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookRedriveAllResult> executeWithHttpInfo() throws ApiException {
            return redriveAllWebhookResultsWithHttpInfo();
        }

        /**
         * Execute redriveAllWebhookResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookRedriveAllResult> _callback) throws ApiException {
            return redriveAllWebhookResultsAsync(_callback);
        }
    }

    /**
     * Redrive all webhook results that have failed status
     * Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
     * @return APIredriveAllWebhookResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIredriveAllWebhookResultsRequest redriveAllWebhookResults() {
        return new APIredriveAllWebhookResultsRequest();
    }
    private okhttp3.Call redriveWebhookResultCall(@javax.annotation.Nonnull UUID webhookResultId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/results/{webhookResultId}/redrive"
            .replace("{" + "webhookResultId" + "}", localVarApiClient.escapeString(webhookResultId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call redriveWebhookResultValidateBeforeCall(@javax.annotation.Nonnull UUID webhookResultId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookResultId' is set
        if (webhookResultId == null) {
            throw new ApiException("Missing the required parameter 'webhookResultId' when calling redriveWebhookResult(Async)");
        }

        return redriveWebhookResultCall(webhookResultId, _callback);

    }


    private ApiResponse<WebhookRedriveResult> redriveWebhookResultWithHttpInfo(@javax.annotation.Nonnull UUID webhookResultId) throws ApiException {
        okhttp3.Call localVarCall = redriveWebhookResultValidateBeforeCall(webhookResultId, null);
        Type localVarReturnType = new TypeToken<WebhookRedriveResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call redriveWebhookResultAsync(@javax.annotation.Nonnull UUID webhookResultId, final ApiCallback<WebhookRedriveResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = redriveWebhookResultValidateBeforeCall(webhookResultId, _callback);
        Type localVarReturnType = new TypeToken<WebhookRedriveResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIredriveWebhookResultRequest {
        @javax.annotation.Nonnull
        private final UUID webhookResultId;

        private APIredriveWebhookResultRequest(@javax.annotation.Nonnull UUID webhookResultId) {
            this.webhookResultId = webhookResultId;
        }

        /**
         * Build call for redriveWebhookResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return redriveWebhookResultCall(webhookResultId, _callback);
        }

        /**
         * Execute redriveWebhookResult request
         * @return WebhookRedriveResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookRedriveResult execute() throws ApiException {
            ApiResponse<WebhookRedriveResult> localVarResp = redriveWebhookResultWithHttpInfo(webhookResultId);
            return localVarResp.getData();
        }

        /**
         * Execute redriveWebhookResult request with HTTP info returned
         * @return ApiResponse&lt;WebhookRedriveResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookRedriveResult> executeWithHttpInfo() throws ApiException {
            return redriveWebhookResultWithHttpInfo(webhookResultId);
        }

        /**
         * Execute redriveWebhookResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookRedriveResult> _callback) throws ApiException {
            return redriveWebhookResultAsync(webhookResultId, _callback);
        }
    }

    /**
     * Get a webhook result and try to resend the original webhook payload
     * Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
     * @param webhookResultId Webhook Result ID (required)
     * @return APIredriveWebhookResultRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIredriveWebhookResultRequest redriveWebhookResult(@javax.annotation.Nonnull UUID webhookResultId) {
        return new APIredriveWebhookResultRequest(webhookResultId);
    }
    private okhttp3.Call sendTestDataCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/test"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTestDataValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling sendTestData(Async)");
        }

        return sendTestDataCall(webhookId, _callback);

    }


    private ApiResponse<WebhookTestResult> sendTestDataWithHttpInfo(@javax.annotation.Nonnull UUID webhookId) throws ApiException {
        okhttp3.Call localVarCall = sendTestDataValidateBeforeCall(webhookId, null);
        Type localVarReturnType = new TypeToken<WebhookTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendTestDataAsync(@javax.annotation.Nonnull UUID webhookId, final ApiCallback<WebhookTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTestDataValidateBeforeCall(webhookId, _callback);
        Type localVarReturnType = new TypeToken<WebhookTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendTestDataRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;

        private APIsendTestDataRequest(@javax.annotation.Nonnull UUID webhookId) {
            this.webhookId = webhookId;
        }

        /**
         * Build call for sendTestData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendTestDataCall(webhookId, _callback);
        }

        /**
         * Execute sendTestData request
         * @return WebhookTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public WebhookTestResult execute() throws ApiException {
            ApiResponse<WebhookTestResult> localVarResp = sendTestDataWithHttpInfo(webhookId);
            return localVarResp.getData();
        }

        /**
         * Execute sendTestData request with HTTP info returned
         * @return ApiResponse&lt;WebhookTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookTestResult> executeWithHttpInfo() throws ApiException {
            return sendTestDataWithHttpInfo(webhookId);
        }

        /**
         * Execute sendTestData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookTestResult> _callback) throws ApiException {
            return sendTestDataAsync(webhookId, _callback);
        }
    }

    /**
     * Send webhook test data
     * 
     * @param webhookId  (required)
     * @return APIsendTestDataRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendTestDataRequest sendTestData(@javax.annotation.Nonnull UUID webhookId) {
        return new APIsendTestDataRequest(webhookId);
    }
    private okhttp3.Call updateWebhookCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneNumberId, @javax.annotation.Nullable Boolean overrideAuth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createWebhookOptions;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (aiTransformerId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformerId", aiTransformerId));
        }

        if (phoneNumberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumberId", phoneNumberId));
        }

        if (overrideAuth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("overrideAuth", overrideAuth));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneNumberId, @javax.annotation.Nullable Boolean overrideAuth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateWebhook(Async)");
        }

        // verify the required parameter 'createWebhookOptions' is set
        if (createWebhookOptions == null) {
            throw new ApiException("Missing the required parameter 'createWebhookOptions' when calling updateWebhook(Async)");
        }

        return updateWebhookCall(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth, _callback);

    }


    private ApiResponse<WebhookDto> updateWebhookWithHttpInfo(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneNumberId, @javax.annotation.Nullable Boolean overrideAuth) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookAsync(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID aiTransformerId, @javax.annotation.Nullable UUID phoneNumberId, @javax.annotation.Nullable Boolean overrideAuth, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookValidateBeforeCall(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateWebhookRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;
        @javax.annotation.Nonnull
        private final CreateWebhookOptions createWebhookOptions;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID aiTransformerId;
        @javax.annotation.Nullable
        private UUID phoneNumberId;
        @javax.annotation.Nullable
        private Boolean overrideAuth;

        private APIupdateWebhookRequest(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
            this.webhookId = webhookId;
            this.createWebhookOptions = createWebhookOptions;
        }

        /**
         * Set inboxId
         * @param inboxId  (optional)
         * @return APIupdateWebhookRequest
         */
        public APIupdateWebhookRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set aiTransformerId
         * @param aiTransformerId  (optional)
         * @return APIupdateWebhookRequest
         */
        public APIupdateWebhookRequest aiTransformerId(@javax.annotation.Nullable UUID aiTransformerId) {
            this.aiTransformerId = aiTransformerId;
            return this;
        }

        /**
         * Set phoneNumberId
         * @param phoneNumberId  (optional)
         * @return APIupdateWebhookRequest
         */
        public APIupdateWebhookRequest phoneNumberId(@javax.annotation.Nullable UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * Set overrideAuth
         * @param overrideAuth  (optional)
         * @return APIupdateWebhookRequest
         */
        public APIupdateWebhookRequest overrideAuth(@javax.annotation.Nullable Boolean overrideAuth) {
            this.overrideAuth = overrideAuth;
            return this;
        }

        /**
         * Build call for updateWebhook
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateWebhookCall(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth, _callback);
        }

        /**
         * Execute updateWebhook request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = updateWebhookWithHttpInfo(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth);
            return localVarResp.getData();
        }

        /**
         * Execute updateWebhook request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return updateWebhookWithHttpInfo(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth);
        }

        /**
         * Execute updateWebhook request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return updateWebhookAsync(webhookId, createWebhookOptions, inboxId, aiTransformerId, phoneNumberId, overrideAuth, _callback);
        }
    }

    /**
     * Update a webhook
     * 
     * @param webhookId  (required)
     * @param createWebhookOptions  (required)
     * @return APIupdateWebhookRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateWebhookRequest updateWebhook(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull CreateWebhookOptions createWebhookOptions) {
        return new APIupdateWebhookRequest(webhookId, createWebhookOptions);
    }
    private okhttp3.Call updateWebhookHeadersCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull WebhookHeaders webhookHeaders, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = webhookHeaders;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/headers"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateWebhookHeadersValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull WebhookHeaders webhookHeaders, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling updateWebhookHeaders(Async)");
        }

        // verify the required parameter 'webhookHeaders' is set
        if (webhookHeaders == null) {
            throw new ApiException("Missing the required parameter 'webhookHeaders' when calling updateWebhookHeaders(Async)");
        }

        return updateWebhookHeadersCall(webhookId, webhookHeaders, _callback);

    }


    private ApiResponse<WebhookDto> updateWebhookHeadersWithHttpInfo(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull WebhookHeaders webhookHeaders) throws ApiException {
        okhttp3.Call localVarCall = updateWebhookHeadersValidateBeforeCall(webhookId, webhookHeaders, null);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateWebhookHeadersAsync(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull WebhookHeaders webhookHeaders, final ApiCallback<WebhookDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateWebhookHeadersValidateBeforeCall(webhookId, webhookHeaders, _callback);
        Type localVarReturnType = new TypeToken<WebhookDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateWebhookHeadersRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;
        @javax.annotation.Nonnull
        private final WebhookHeaders webhookHeaders;

        private APIupdateWebhookHeadersRequest(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull WebhookHeaders webhookHeaders) {
            this.webhookId = webhookId;
            this.webhookHeaders = webhookHeaders;
        }

        /**
         * Build call for updateWebhookHeaders
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateWebhookHeadersCall(webhookId, webhookHeaders, _callback);
        }

        /**
         * Execute updateWebhookHeaders request
         * @return WebhookDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public WebhookDto execute() throws ApiException {
            ApiResponse<WebhookDto> localVarResp = updateWebhookHeadersWithHttpInfo(webhookId, webhookHeaders);
            return localVarResp.getData();
        }

        /**
         * Execute updateWebhookHeaders request with HTTP info returned
         * @return ApiResponse&lt;WebhookDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WebhookDto> executeWithHttpInfo() throws ApiException {
            return updateWebhookHeadersWithHttpInfo(webhookId, webhookHeaders);
        }

        /**
         * Execute updateWebhookHeaders request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WebhookDto> _callback) throws ApiException {
            return updateWebhookHeadersAsync(webhookId, webhookHeaders, _callback);
        }
    }

    /**
     * Update a webhook request headers
     * 
     * @param webhookId  (required)
     * @param webhookHeaders  (required)
     * @return APIupdateWebhookHeadersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateWebhookHeadersRequest updateWebhookHeaders(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull WebhookHeaders webhookHeaders) {
        return new APIupdateWebhookHeadersRequest(webhookId, webhookHeaders);
    }
    private okhttp3.Call verifyWebhookSignatureCall(@javax.annotation.Nonnull VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyWebhookSignatureOptions;

        // create path and map variables
        String localVarPath = "/webhooks/verify";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyWebhookSignatureValidateBeforeCall(@javax.annotation.Nonnull VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyWebhookSignatureOptions' is set
        if (verifyWebhookSignatureOptions == null) {
            throw new ApiException("Missing the required parameter 'verifyWebhookSignatureOptions' when calling verifyWebhookSignature(Async)");
        }

        return verifyWebhookSignatureCall(verifyWebhookSignatureOptions, _callback);

    }


    private ApiResponse<VerifyWebhookSignatureResults> verifyWebhookSignatureWithHttpInfo(@javax.annotation.Nonnull VerifyWebhookSignatureOptions verifyWebhookSignatureOptions) throws ApiException {
        okhttp3.Call localVarCall = verifyWebhookSignatureValidateBeforeCall(verifyWebhookSignatureOptions, null);
        Type localVarReturnType = new TypeToken<VerifyWebhookSignatureResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyWebhookSignatureAsync(@javax.annotation.Nonnull VerifyWebhookSignatureOptions verifyWebhookSignatureOptions, final ApiCallback<VerifyWebhookSignatureResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyWebhookSignatureValidateBeforeCall(verifyWebhookSignatureOptions, _callback);
        Type localVarReturnType = new TypeToken<VerifyWebhookSignatureResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIverifyWebhookSignatureRequest {
        @javax.annotation.Nonnull
        private final VerifyWebhookSignatureOptions verifyWebhookSignatureOptions;

        private APIverifyWebhookSignatureRequest(@javax.annotation.Nonnull VerifyWebhookSignatureOptions verifyWebhookSignatureOptions) {
            this.verifyWebhookSignatureOptions = verifyWebhookSignatureOptions;
        }

        /**
         * Build call for verifyWebhookSignature
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyWebhookSignatureCall(verifyWebhookSignatureOptions, _callback);
        }

        /**
         * Execute verifyWebhookSignature request
         * @return VerifyWebhookSignatureResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public VerifyWebhookSignatureResults execute() throws ApiException {
            ApiResponse<VerifyWebhookSignatureResults> localVarResp = verifyWebhookSignatureWithHttpInfo(verifyWebhookSignatureOptions);
            return localVarResp.getData();
        }

        /**
         * Execute verifyWebhookSignature request with HTTP info returned
         * @return ApiResponse&lt;VerifyWebhookSignatureResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<VerifyWebhookSignatureResults> executeWithHttpInfo() throws ApiException {
            return verifyWebhookSignatureWithHttpInfo(verifyWebhookSignatureOptions);
        }

        /**
         * Execute verifyWebhookSignature request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<VerifyWebhookSignatureResults> _callback) throws ApiException {
            return verifyWebhookSignatureAsync(verifyWebhookSignatureOptions, _callback);
        }
    }

    /**
     * Verify a webhook payload signature
     * Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
     * @param verifyWebhookSignatureOptions  (required)
     * @return APIverifyWebhookSignatureRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIverifyWebhookSignatureRequest verifyWebhookSignature(@javax.annotation.Nonnull VerifyWebhookSignatureOptions verifyWebhookSignatureOptions) {
        return new APIverifyWebhookSignatureRequest(verifyWebhookSignatureOptions);
    }
    private okhttp3.Call waitForWebhookResultsCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull Integer expectedCount, @javax.annotation.Nonnull Integer timeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/webhooks/{webhookId}/wait"
            .replace("{" + "webhookId" + "}", localVarApiClient.escapeString(webhookId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (expectedCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expectedCount", expectedCount));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitForWebhookResultsValidateBeforeCall(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull Integer expectedCount, @javax.annotation.Nonnull Integer timeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'webhookId' is set
        if (webhookId == null) {
            throw new ApiException("Missing the required parameter 'webhookId' when calling waitForWebhookResults(Async)");
        }

        // verify the required parameter 'expectedCount' is set
        if (expectedCount == null) {
            throw new ApiException("Missing the required parameter 'expectedCount' when calling waitForWebhookResults(Async)");
        }

        // verify the required parameter 'timeout' is set
        if (timeout == null) {
            throw new ApiException("Missing the required parameter 'timeout' when calling waitForWebhookResults(Async)");
        }

        return waitForWebhookResultsCall(webhookId, expectedCount, timeout, _callback);

    }


    private ApiResponse<List<WebhookResultDto>> waitForWebhookResultsWithHttpInfo(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull Integer expectedCount, @javax.annotation.Nonnull Integer timeout) throws ApiException {
        okhttp3.Call localVarCall = waitForWebhookResultsValidateBeforeCall(webhookId, expectedCount, timeout, null);
        Type localVarReturnType = new TypeToken<List<WebhookResultDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call waitForWebhookResultsAsync(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull Integer expectedCount, @javax.annotation.Nonnull Integer timeout, final ApiCallback<List<WebhookResultDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitForWebhookResultsValidateBeforeCall(webhookId, expectedCount, timeout, _callback);
        Type localVarReturnType = new TypeToken<List<WebhookResultDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIwaitForWebhookResultsRequest {
        @javax.annotation.Nonnull
        private final UUID webhookId;
        @javax.annotation.Nonnull
        private final Integer expectedCount;
        @javax.annotation.Nonnull
        private final Integer timeout;

        private APIwaitForWebhookResultsRequest(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull Integer expectedCount, @javax.annotation.Nonnull Integer timeout) {
            this.webhookId = webhookId;
            this.expectedCount = expectedCount;
            this.timeout = timeout;
        }

        /**
         * Build call for waitForWebhookResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return waitForWebhookResultsCall(webhookId, expectedCount, timeout, _callback);
        }

        /**
         * Execute waitForWebhookResults request
         * @return List&lt;WebhookResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<WebhookResultDto> execute() throws ApiException {
            ApiResponse<List<WebhookResultDto>> localVarResp = waitForWebhookResultsWithHttpInfo(webhookId, expectedCount, timeout);
            return localVarResp.getData();
        }

        /**
         * Execute waitForWebhookResults request with HTTP info returned
         * @return ApiResponse&lt;List&lt;WebhookResultDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<WebhookResultDto>> executeWithHttpInfo() throws ApiException {
            return waitForWebhookResultsWithHttpInfo(webhookId, expectedCount, timeout);
        }

        /**
         * Execute waitForWebhookResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<WebhookResultDto>> _callback) throws ApiException {
            return waitForWebhookResultsAsync(webhookId, expectedCount, timeout, _callback);
        }
    }

    /**
     * Wait for webhook results for a webhook
     * 
     * @param webhookId ID of webhook to get results for (required)
     * @param expectedCount Expected result count (required)
     * @param timeout Max time to wait in milliseconds (required)
     * @return APIwaitForWebhookResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIwaitForWebhookResultsRequest waitForWebhookResults(@javax.annotation.Nonnull UUID webhookId, @javax.annotation.Nonnull Integer expectedCount, @javax.annotation.Nonnull Integer timeout) {
        return new APIwaitForWebhookResultsRequest(webhookId, expectedCount, timeout);
    }
}
