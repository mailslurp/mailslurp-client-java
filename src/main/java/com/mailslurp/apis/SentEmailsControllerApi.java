/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.DeliveryStatusDto;
import com.mailslurp.models.EmailPreviewUrls;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageDeliveryStatus;
import com.mailslurp.models.PageSentEmailProjection;
import com.mailslurp.models.PageSentEmailWithQueueProjection;
import com.mailslurp.models.PageTrackingPixelProjection;
import com.mailslurp.models.RawEmailJson;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SentEmailsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SentEmailsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SentEmailsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteAllSentEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllSentEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAllSentEmailsCall(_callback);

    }


    private ApiResponse<Void> deleteAllSentEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllSentEmailsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllSentEmailsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllSentEmailsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllSentEmailsRequest {

        private APIdeleteAllSentEmailsRequest() {
        }

        /**
         * Build call for deleteAllSentEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllSentEmailsCall(_callback);
        }

        /**
         * Execute deleteAllSentEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllSentEmailsWithHttpInfo();
        }

        /**
         * Execute deleteAllSentEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllSentEmailsWithHttpInfo();
        }

        /**
         * Execute deleteAllSentEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllSentEmailsAsync(_callback);
        }
    }

    /**
     * Delete all sent email receipts
     * 
     * @return APIdeleteAllSentEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllSentEmailsRequest deleteAllSentEmails() {
        return new APIdeleteAllSentEmailsRequest();
    }
    private okhttp3.Call deleteSentEmailCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSentEmailValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteSentEmail(Async)");
        }

        return deleteSentEmailCall(id, _callback);

    }


    private ApiResponse<Void> deleteSentEmailWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteSentEmailValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSentEmailAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSentEmailValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSentEmailRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteSentEmailRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteSentEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSentEmailCall(id, _callback);
        }

        /**
         * Execute deleteSentEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSentEmailWithHttpInfo(id);
        }

        /**
         * Execute deleteSentEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSentEmailWithHttpInfo(id);
        }

        /**
         * Execute deleteSentEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSentEmailAsync(id, _callback);
        }
    }

    /**
     * Delete sent email receipt
     * 
     * @param id  (required)
     * @return APIdeleteSentEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSentEmailRequest deleteSentEmail(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteSentEmailRequest(id);
    }
    private okhttp3.Call getAllSentTrackingPixelsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/tracking-pixels";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSentTrackingPixelsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getAllSentTrackingPixelsCall(page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageTrackingPixelProjection> getAllSentTrackingPixelsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getAllSentTrackingPixelsValidateBeforeCall(page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageTrackingPixelProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSentTrackingPixelsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageTrackingPixelProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSentTrackingPixelsValidateBeforeCall(page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageTrackingPixelProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllSentTrackingPixelsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetAllSentTrackingPixelsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in sent email tracking pixel list pagination (optional, default to 0)
         * @return APIgetAllSentTrackingPixelsRequest
         */
        public APIgetAllSentTrackingPixelsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in sent email tracking pixel list pagination (optional, default to 20)
         * @return APIgetAllSentTrackingPixelsRequest
         */
        public APIgetAllSentTrackingPixelsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllSentTrackingPixelsRequest
         */
        public APIgetAllSentTrackingPixelsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllSentTrackingPixelsRequest
         */
        public APIgetAllSentTrackingPixelsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllSentTrackingPixelsRequest
         */
        public APIgetAllSentTrackingPixelsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllSentTrackingPixelsRequest
         */
        public APIgetAllSentTrackingPixelsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getAllSentTrackingPixels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSentTrackingPixelsCall(page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getAllSentTrackingPixels request
         * @return PageTrackingPixelProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageTrackingPixelProjection execute() throws ApiException {
            ApiResponse<PageTrackingPixelProjection> localVarResp = getAllSentTrackingPixelsWithHttpInfo(page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getAllSentTrackingPixels request with HTTP info returned
         * @return ApiResponse&lt;PageTrackingPixelProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageTrackingPixelProjection> executeWithHttpInfo() throws ApiException {
            return getAllSentTrackingPixelsWithHttpInfo(page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getAllSentTrackingPixels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageTrackingPixelProjection> _callback) throws ApiException {
            return getAllSentTrackingPixelsAsync(page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * 
     * Get all sent email tracking pixels in paginated form
     * @return APIgetAllSentTrackingPixelsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllSentTrackingPixelsRequest getAllSentTrackingPixels() {
        return new APIgetAllSentTrackingPixelsRequest();
    }
    private okhttp3.Call getRawSentEmailContentsCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{emailId}/raw"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawSentEmailContentsValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getRawSentEmailContents(Async)");
        }

        return getRawSentEmailContentsCall(emailId, _callback);

    }


    private ApiResponse<Void> getRawSentEmailContentsWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getRawSentEmailContentsValidateBeforeCall(emailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getRawSentEmailContentsAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawSentEmailContentsValidateBeforeCall(emailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIgetRawSentEmailContentsRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetRawSentEmailContentsRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getRawSentEmailContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRawSentEmailContentsCall(emailId, _callback);
        }

        /**
         * Execute getRawSentEmailContents request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getRawSentEmailContentsWithHttpInfo(emailId);
        }

        /**
         * Execute getRawSentEmailContents request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getRawSentEmailContentsWithHttpInfo(emailId);
        }

        /**
         * Execute getRawSentEmailContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getRawSentEmailContentsAsync(emailId, _callback);
        }
    }

    /**
     * Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
     * Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
     * @param emailId ID of email (required)
     * @return APIgetRawSentEmailContentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRawSentEmailContentsRequest getRawSentEmailContents(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetRawSentEmailContentsRequest(emailId);
    }
    private okhttp3.Call getRawSentEmailJsonCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{emailId}/raw/json"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawSentEmailJsonValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getRawSentEmailJson(Async)");
        }

        return getRawSentEmailJsonCall(emailId, _callback);

    }


    private ApiResponse<RawEmailJson> getRawSentEmailJsonWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getRawSentEmailJsonValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<RawEmailJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRawSentEmailJsonAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<RawEmailJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawSentEmailJsonValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<RawEmailJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRawSentEmailJsonRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetRawSentEmailJsonRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getRawSentEmailJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRawSentEmailJsonCall(emailId, _callback);
        }

        /**
         * Execute getRawSentEmailJson request
         * @return RawEmailJson
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RawEmailJson execute() throws ApiException {
            ApiResponse<RawEmailJson> localVarResp = getRawSentEmailJsonWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute getRawSentEmailJson request with HTTP info returned
         * @return ApiResponse&lt;RawEmailJson&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RawEmailJson> executeWithHttpInfo() throws ApiException {
            return getRawSentEmailJsonWithHttpInfo(emailId);
        }

        /**
         * Execute getRawSentEmailJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RawEmailJson> _callback) throws ApiException {
            return getRawSentEmailJsonAsync(emailId, _callback);
        }
    }

    /**
     * Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
     * Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
     * @param emailId ID of email (required)
     * @return APIgetRawSentEmailJsonRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRawSentEmailJsonRequest getRawSentEmailJson(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetRawSentEmailJsonRequest(emailId);
    }
    private okhttp3.Call getSentDeliveryStatusCall(@javax.annotation.Nonnull UUID deliveryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/delivery-status/{deliveryId}"
            .replace("{" + "deliveryId" + "}", localVarApiClient.escapeString(deliveryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentDeliveryStatusValidateBeforeCall(@javax.annotation.Nonnull UUID deliveryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'deliveryId' is set
        if (deliveryId == null) {
            throw new ApiException("Missing the required parameter 'deliveryId' when calling getSentDeliveryStatus(Async)");
        }

        return getSentDeliveryStatusCall(deliveryId, _callback);

    }


    private ApiResponse<DeliveryStatusDto> getSentDeliveryStatusWithHttpInfo(@javax.annotation.Nonnull UUID deliveryId) throws ApiException {
        okhttp3.Call localVarCall = getSentDeliveryStatusValidateBeforeCall(deliveryId, null);
        Type localVarReturnType = new TypeToken<DeliveryStatusDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentDeliveryStatusAsync(@javax.annotation.Nonnull UUID deliveryId, final ApiCallback<DeliveryStatusDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentDeliveryStatusValidateBeforeCall(deliveryId, _callback);
        Type localVarReturnType = new TypeToken<DeliveryStatusDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentDeliveryStatusRequest {
        @javax.annotation.Nonnull
        private final UUID deliveryId;

        private APIgetSentDeliveryStatusRequest(@javax.annotation.Nonnull UUID deliveryId) {
            this.deliveryId = deliveryId;
        }

        /**
         * Build call for getSentDeliveryStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentDeliveryStatusCall(deliveryId, _callback);
        }

        /**
         * Execute getSentDeliveryStatus request
         * @return DeliveryStatusDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DeliveryStatusDto execute() throws ApiException {
            ApiResponse<DeliveryStatusDto> localVarResp = getSentDeliveryStatusWithHttpInfo(deliveryId);
            return localVarResp.getData();
        }

        /**
         * Execute getSentDeliveryStatus request with HTTP info returned
         * @return ApiResponse&lt;DeliveryStatusDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeliveryStatusDto> executeWithHttpInfo() throws ApiException {
            return getSentDeliveryStatusWithHttpInfo(deliveryId);
        }

        /**
         * Execute getSentDeliveryStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeliveryStatusDto> _callback) throws ApiException {
            return getSentDeliveryStatusAsync(deliveryId, _callback);
        }
    }

    /**
     * 
     * Get a sent email delivery status
     * @param deliveryId  (required)
     * @return APIgetSentDeliveryStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentDeliveryStatusRequest getSentDeliveryStatus(@javax.annotation.Nonnull UUID deliveryId) {
        return new APIgetSentDeliveryStatusRequest(deliveryId);
    }
    private okhttp3.Call getSentDeliveryStatusesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/delivery-status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentDeliveryStatusesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getSentDeliveryStatusesCall(page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageDeliveryStatus> getSentDeliveryStatusesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getSentDeliveryStatusesValidateBeforeCall(page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageDeliveryStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentDeliveryStatusesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageDeliveryStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentDeliveryStatusesValidateBeforeCall(page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageDeliveryStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentDeliveryStatusesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetSentDeliveryStatusesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in delivery status list pagination (optional, default to 0)
         * @return APIgetSentDeliveryStatusesRequest
         */
        public APIgetSentDeliveryStatusesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in delivery status list pagination (optional, default to 20)
         * @return APIgetSentDeliveryStatusesRequest
         */
        public APIgetSentDeliveryStatusesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentDeliveryStatusesRequest
         */
        public APIgetSentDeliveryStatusesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetSentDeliveryStatusesRequest
         */
        public APIgetSentDeliveryStatusesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetSentDeliveryStatusesRequest
         */
        public APIgetSentDeliveryStatusesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getSentDeliveryStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentDeliveryStatusesCall(page, size, sort, since, before, _callback);
        }

        /**
         * Execute getSentDeliveryStatuses request
         * @return PageDeliveryStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageDeliveryStatus execute() throws ApiException {
            ApiResponse<PageDeliveryStatus> localVarResp = getSentDeliveryStatusesWithHttpInfo(page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getSentDeliveryStatuses request with HTTP info returned
         * @return ApiResponse&lt;PageDeliveryStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageDeliveryStatus> executeWithHttpInfo() throws ApiException {
            return getSentDeliveryStatusesWithHttpInfo(page, size, sort, since, before);
        }

        /**
         * Execute getSentDeliveryStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageDeliveryStatus> _callback) throws ApiException {
            return getSentDeliveryStatusesAsync(page, size, sort, since, before, _callback);
        }
    }

    /**
     * 
     * Get all sent email delivery statuses
     * @return APIgetSentDeliveryStatusesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentDeliveryStatusesRequest getSentDeliveryStatuses() {
        return new APIgetSentDeliveryStatusesRequest();
    }
    private okhttp3.Call getSentDeliveryStatusesBySentIdCall(@javax.annotation.Nonnull UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{sentId}/delivery-status"
            .replace("{" + "sentId" + "}", localVarApiClient.escapeString(sentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentDeliveryStatusesBySentIdValidateBeforeCall(@javax.annotation.Nonnull UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sentId' is set
        if (sentId == null) {
            throw new ApiException("Missing the required parameter 'sentId' when calling getSentDeliveryStatusesBySentId(Async)");
        }

        return getSentDeliveryStatusesBySentIdCall(sentId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageDeliveryStatus> getSentDeliveryStatusesBySentIdWithHttpInfo(@javax.annotation.Nonnull UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getSentDeliveryStatusesBySentIdValidateBeforeCall(sentId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageDeliveryStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentDeliveryStatusesBySentIdAsync(@javax.annotation.Nonnull UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageDeliveryStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentDeliveryStatusesBySentIdValidateBeforeCall(sentId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageDeliveryStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentDeliveryStatusesBySentIdRequest {
        @javax.annotation.Nonnull
        private final UUID sentId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetSentDeliveryStatusesBySentIdRequest(@javax.annotation.Nonnull UUID sentId) {
            this.sentId = sentId;
        }

        /**
         * Set page
         * @param page Optional page index in delivery status list pagination (optional, default to 0)
         * @return APIgetSentDeliveryStatusesBySentIdRequest
         */
        public APIgetSentDeliveryStatusesBySentIdRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in delivery status list pagination (optional, default to 20)
         * @return APIgetSentDeliveryStatusesBySentIdRequest
         */
        public APIgetSentDeliveryStatusesBySentIdRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentDeliveryStatusesBySentIdRequest
         */
        public APIgetSentDeliveryStatusesBySentIdRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetSentDeliveryStatusesBySentIdRequest
         */
        public APIgetSentDeliveryStatusesBySentIdRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetSentDeliveryStatusesBySentIdRequest
         */
        public APIgetSentDeliveryStatusesBySentIdRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getSentDeliveryStatusesBySentId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentDeliveryStatusesBySentIdCall(sentId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getSentDeliveryStatusesBySentId request
         * @return PageDeliveryStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageDeliveryStatus execute() throws ApiException {
            ApiResponse<PageDeliveryStatus> localVarResp = getSentDeliveryStatusesBySentIdWithHttpInfo(sentId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getSentDeliveryStatusesBySentId request with HTTP info returned
         * @return ApiResponse&lt;PageDeliveryStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageDeliveryStatus> executeWithHttpInfo() throws ApiException {
            return getSentDeliveryStatusesBySentIdWithHttpInfo(sentId, page, size, sort, since, before);
        }

        /**
         * Execute getSentDeliveryStatusesBySentId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageDeliveryStatus> _callback) throws ApiException {
            return getSentDeliveryStatusesBySentIdAsync(sentId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * 
     * Get all sent email delivery statuses
     * @param sentId ID of the sent email that you want to get the delivery status of. Sent email object is returned when sending an email (required)
     * @return APIgetSentDeliveryStatusesBySentIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentDeliveryStatusesBySentIdRequest getSentDeliveryStatusesBySentId(@javax.annotation.Nonnull UUID sentId) {
        return new APIgetSentDeliveryStatusesBySentIdRequest(sentId);
    }
    private okhttp3.Call getSentEmailCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentEmailValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSentEmail(Async)");
        }

        return getSentEmailCall(id, _callback);

    }


    private ApiResponse<SentEmailDto> getSentEmailWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSentEmailValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentEmailAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentEmailValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentEmailRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetSentEmailRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getSentEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentEmailCall(id, _callback);
        }

        /**
         * Execute getSentEmail request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = getSentEmailWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getSentEmail request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return getSentEmailWithHttpInfo(id);
        }

        /**
         * Execute getSentEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return getSentEmailAsync(id, _callback);
        }
    }

    /**
     * Get sent email receipt
     * 
     * @param id  (required)
     * @return APIgetSentEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentEmailRequest getSentEmail(@javax.annotation.Nonnull UUID id) {
        return new APIgetSentEmailRequest(id);
    }
    private okhttp3.Call getSentEmailHTMLContentCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{id}/html"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentEmailHTMLContentValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSentEmailHTMLContent(Async)");
        }

        return getSentEmailHTMLContentCall(id, _callback);

    }


    private ApiResponse<String> getSentEmailHTMLContentWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSentEmailHTMLContentValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentEmailHTMLContentAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentEmailHTMLContentValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentEmailHTMLContentRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetSentEmailHTMLContentRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getSentEmailHTMLContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentEmailHTMLContentCall(id, _callback);
        }

        /**
         * Execute getSentEmailHTMLContent request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getSentEmailHTMLContentWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getSentEmailHTMLContent request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getSentEmailHTMLContentWithHttpInfo(id);
        }

        /**
         * Execute getSentEmailHTMLContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getSentEmailHTMLContentAsync(id, _callback);
        }
    }

    /**
     * Get sent email HTML content
     * 
     * @param id  (required)
     * @return APIgetSentEmailHTMLContentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentEmailHTMLContentRequest getSentEmailHTMLContent(@javax.annotation.Nonnull UUID id) {
        return new APIgetSentEmailHTMLContentRequest(id);
    }
    private okhttp3.Call getSentEmailPreviewURLsCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{id}/urls"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentEmailPreviewURLsValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSentEmailPreviewURLs(Async)");
        }

        return getSentEmailPreviewURLsCall(id, _callback);

    }


    private ApiResponse<EmailPreviewUrls> getSentEmailPreviewURLsWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getSentEmailPreviewURLsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<EmailPreviewUrls>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentEmailPreviewURLsAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<EmailPreviewUrls> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentEmailPreviewURLsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<EmailPreviewUrls>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentEmailPreviewURLsRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetSentEmailPreviewURLsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getSentEmailPreviewURLs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentEmailPreviewURLsCall(id, _callback);
        }

        /**
         * Execute getSentEmailPreviewURLs request
         * @return EmailPreviewUrls
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailPreviewUrls execute() throws ApiException {
            ApiResponse<EmailPreviewUrls> localVarResp = getSentEmailPreviewURLsWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getSentEmailPreviewURLs request with HTTP info returned
         * @return ApiResponse&lt;EmailPreviewUrls&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailPreviewUrls> executeWithHttpInfo() throws ApiException {
            return getSentEmailPreviewURLsWithHttpInfo(id);
        }

        /**
         * Execute getSentEmailPreviewURLs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailPreviewUrls> _callback) throws ApiException {
            return getSentEmailPreviewURLsAsync(id, _callback);
        }
    }

    /**
     * Get sent email URL for viewing in browser or downloading
     * Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
     * @param id  (required)
     * @return APIgetSentEmailPreviewURLsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentEmailPreviewURLsRequest getSentEmailPreviewURLs(@javax.annotation.Nonnull UUID id) {
        return new APIgetSentEmailPreviewURLsRequest(id);
    }
    private okhttp3.Call getSentEmailTrackingPixelsCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/{id}/tracking-pixels"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentEmailTrackingPixelsValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSentEmailTrackingPixels(Async)");
        }

        return getSentEmailTrackingPixelsCall(id, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageTrackingPixelProjection> getSentEmailTrackingPixelsWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getSentEmailTrackingPixelsValidateBeforeCall(id, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageTrackingPixelProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentEmailTrackingPixelsAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageTrackingPixelProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentEmailTrackingPixelsValidateBeforeCall(id, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageTrackingPixelProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentEmailTrackingPixelsRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetSentEmailTrackingPixelsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Optional page index in sent email tracking pixel list pagination (optional, default to 0)
         * @return APIgetSentEmailTrackingPixelsRequest
         */
        public APIgetSentEmailTrackingPixelsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in sent email tracking pixel list pagination (optional, default to 20)
         * @return APIgetSentEmailTrackingPixelsRequest
         */
        public APIgetSentEmailTrackingPixelsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentEmailTrackingPixelsRequest
         */
        public APIgetSentEmailTrackingPixelsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetSentEmailTrackingPixelsRequest
         */
        public APIgetSentEmailTrackingPixelsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetSentEmailTrackingPixelsRequest
         */
        public APIgetSentEmailTrackingPixelsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetSentEmailTrackingPixelsRequest
         */
        public APIgetSentEmailTrackingPixelsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getSentEmailTrackingPixels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentEmailTrackingPixelsCall(id, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getSentEmailTrackingPixels request
         * @return PageTrackingPixelProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageTrackingPixelProjection execute() throws ApiException {
            ApiResponse<PageTrackingPixelProjection> localVarResp = getSentEmailTrackingPixelsWithHttpInfo(id, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getSentEmailTrackingPixels request with HTTP info returned
         * @return ApiResponse&lt;PageTrackingPixelProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageTrackingPixelProjection> executeWithHttpInfo() throws ApiException {
            return getSentEmailTrackingPixelsWithHttpInfo(id, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getSentEmailTrackingPixels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageTrackingPixelProjection> _callback) throws ApiException {
            return getSentEmailTrackingPixelsAsync(id, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * 
     * Get all tracking pixels for a sent email in paginated form
     * @param id  (required)
     * @return APIgetSentEmailTrackingPixelsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentEmailTrackingPixelsRequest getSentEmailTrackingPixels(@javax.annotation.Nonnull UUID id) {
        return new APIgetSentEmailTrackingPixelsRequest(id);
    }
    private okhttp3.Call getSentEmailsCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentEmailsValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getSentEmailsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageSentEmailProjection> getSentEmailsWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getSentEmailsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageSentEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentEmailsAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageSentEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentEmailsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageSentEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentEmailsRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetSentEmailsRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inboxId to filter sender of sent emails by (optional)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in inbox sent email list pagination (optional, default to 0)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox sent email list pagination (optional, default to 20)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetSentEmailsRequest
         */
        public APIgetSentEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getSentEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentEmailsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getSentEmails request
         * @return PageSentEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSentEmailProjection execute() throws ApiException {
            ApiResponse<PageSentEmailProjection> localVarResp = getSentEmailsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getSentEmails request with HTTP info returned
         * @return ApiResponse&lt;PageSentEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSentEmailProjection> executeWithHttpInfo() throws ApiException {
            return getSentEmailsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getSentEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSentEmailProjection> _callback) throws ApiException {
            return getSentEmailsAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * Get all sent emails in paginated form
     * 
     * @return APIgetSentEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentEmailsRequest getSentEmails() {
        return new APIgetSentEmailsRequest();
    }
    private okhttp3.Call getSentEmailsWithQueueResultsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/queue-results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentEmailsWithQueueResultsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getSentEmailsWithQueueResultsCall(page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageSentEmailWithQueueProjection> getSentEmailsWithQueueResultsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getSentEmailsWithQueueResultsValidateBeforeCall(page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageSentEmailWithQueueProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentEmailsWithQueueResultsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageSentEmailWithQueueProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentEmailsWithQueueResultsValidateBeforeCall(page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageSentEmailWithQueueProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentEmailsWithQueueResultsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetSentEmailsWithQueueResultsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in inbox sent email list pagination (optional, default to 0)
         * @return APIgetSentEmailsWithQueueResultsRequest
         */
        public APIgetSentEmailsWithQueueResultsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox sent email list pagination (optional, default to 20)
         * @return APIgetSentEmailsWithQueueResultsRequest
         */
        public APIgetSentEmailsWithQueueResultsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentEmailsWithQueueResultsRequest
         */
        public APIgetSentEmailsWithQueueResultsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetSentEmailsWithQueueResultsRequest
         */
        public APIgetSentEmailsWithQueueResultsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetSentEmailsWithQueueResultsRequest
         */
        public APIgetSentEmailsWithQueueResultsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getSentEmailsWithQueueResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentEmailsWithQueueResultsCall(page, size, sort, since, before, _callback);
        }

        /**
         * Execute getSentEmailsWithQueueResults request
         * @return PageSentEmailWithQueueProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSentEmailWithQueueProjection execute() throws ApiException {
            ApiResponse<PageSentEmailWithQueueProjection> localVarResp = getSentEmailsWithQueueResultsWithHttpInfo(page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getSentEmailsWithQueueResults request with HTTP info returned
         * @return ApiResponse&lt;PageSentEmailWithQueueProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSentEmailWithQueueProjection> executeWithHttpInfo() throws ApiException {
            return getSentEmailsWithQueueResultsWithHttpInfo(page, size, sort, since, before);
        }

        /**
         * Execute getSentEmailsWithQueueResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSentEmailWithQueueProjection> _callback) throws ApiException {
            return getSentEmailsWithQueueResultsAsync(page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get results of email sent with queues in paginated form
     * 
     * @return APIgetSentEmailsWithQueueResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentEmailsWithQueueResultsRequest getSentEmailsWithQueueResults() {
        return new APIgetSentEmailsWithQueueResultsRequest();
    }
    private okhttp3.Call getSentOrganizationEmailsCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentOrganizationEmailsValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getSentOrganizationEmailsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageSentEmailProjection> getSentOrganizationEmailsWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getSentOrganizationEmailsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageSentEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentOrganizationEmailsAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageSentEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentOrganizationEmailsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageSentEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentOrganizationEmailsRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetSentOrganizationEmailsRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inboxId to filter sender of sent emails by (optional)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in sent email list pagination (optional, default to 0)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in sent email list pagination (optional, default to 20)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetSentOrganizationEmailsRequest
         */
        public APIgetSentOrganizationEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getSentOrganizationEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentOrganizationEmailsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getSentOrganizationEmails request
         * @return PageSentEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSentEmailProjection execute() throws ApiException {
            ApiResponse<PageSentEmailProjection> localVarResp = getSentOrganizationEmailsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getSentOrganizationEmails request with HTTP info returned
         * @return ApiResponse&lt;PageSentEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSentEmailProjection> executeWithHttpInfo() throws ApiException {
            return getSentOrganizationEmailsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getSentOrganizationEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSentEmailProjection> _callback) throws ApiException {
            return getSentOrganizationEmailsAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * 
     * Get all sent organization emails in paginated form
     * @return APIgetSentOrganizationEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentOrganizationEmailsRequest getSentOrganizationEmails() {
        return new APIgetSentOrganizationEmailsRequest();
    }
    private okhttp3.Call waitForDeliveryStatusesCall(@javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable Integer index, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sent/delivery-status/wait-for";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentId", sentId));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitForDeliveryStatusesValidateBeforeCall(@javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable Integer index, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return waitForDeliveryStatusesCall(sentId, inboxId, timeout, index, since, before, _callback);

    }


    private ApiResponse<DeliveryStatusDto> waitForDeliveryStatusesWithHttpInfo(@javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable Integer index, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = waitForDeliveryStatusesValidateBeforeCall(sentId, inboxId, timeout, index, since, before, null);
        Type localVarReturnType = new TypeToken<DeliveryStatusDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call waitForDeliveryStatusesAsync(@javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable Integer index, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<DeliveryStatusDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitForDeliveryStatusesValidateBeforeCall(sentId, inboxId, timeout, index, since, before, _callback);
        Type localVarReturnType = new TypeToken<DeliveryStatusDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIwaitForDeliveryStatusesRequest {
        @javax.annotation.Nullable
        private UUID sentId;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Long timeout;
        @javax.annotation.Nullable
        private Integer index;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIwaitForDeliveryStatusesRequest() {
        }

        /**
         * Set sentId
         * @param sentId Optional sent email ID filter (optional)
         * @return APIwaitForDeliveryStatusesRequest
         */
        public APIwaitForDeliveryStatusesRequest sentId(@javax.annotation.Nullable UUID sentId) {
            this.sentId = sentId;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID filter (optional)
         * @return APIwaitForDeliveryStatusesRequest
         */
        public APIwaitForDeliveryStatusesRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set timeout
         * @param timeout Optional timeout milliseconds (optional)
         * @return APIwaitForDeliveryStatusesRequest
         */
        public APIwaitForDeliveryStatusesRequest timeout(@javax.annotation.Nullable Long timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Set index
         * @param index Zero based index of the delivery status to wait for. If 1 delivery status already and you want to wait for the 2nd pass index&#x3D;1 (optional)
         * @return APIwaitForDeliveryStatusesRequest
         */
        public APIwaitForDeliveryStatusesRequest index(@javax.annotation.Nullable Integer index) {
            this.index = index;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIwaitForDeliveryStatusesRequest
         */
        public APIwaitForDeliveryStatusesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIwaitForDeliveryStatusesRequest
         */
        public APIwaitForDeliveryStatusesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for waitForDeliveryStatuses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return waitForDeliveryStatusesCall(sentId, inboxId, timeout, index, since, before, _callback);
        }

        /**
         * Execute waitForDeliveryStatuses request
         * @return DeliveryStatusDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DeliveryStatusDto execute() throws ApiException {
            ApiResponse<DeliveryStatusDto> localVarResp = waitForDeliveryStatusesWithHttpInfo(sentId, inboxId, timeout, index, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute waitForDeliveryStatuses request with HTTP info returned
         * @return ApiResponse&lt;DeliveryStatusDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DeliveryStatusDto> executeWithHttpInfo() throws ApiException {
            return waitForDeliveryStatusesWithHttpInfo(sentId, inboxId, timeout, index, since, before);
        }

        /**
         * Execute waitForDeliveryStatuses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DeliveryStatusDto> _callback) throws ApiException {
            return waitForDeliveryStatusesAsync(sentId, inboxId, timeout, index, since, before, _callback);
        }
    }

    /**
     * 
     * Wait for delivery statuses
     * @return APIwaitForDeliveryStatusesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIwaitForDeliveryStatusesRequest waitForDeliveryStatuses() {
        return new APIwaitForDeliveryStatusesRequest();
    }
}
