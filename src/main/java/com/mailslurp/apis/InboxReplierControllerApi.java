/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateInboxReplierOptions;
import com.mailslurp.models.InboxReplierDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageInboxReplierDto;
import com.mailslurp.models.PageInboxReplierEvents;
import java.util.UUID;
import com.mailslurp.models.UpdateInboxReplierOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboxReplierControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboxReplierControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboxReplierControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewInboxReplierCall(@javax.annotation.Nonnull CreateInboxReplierOptions createInboxReplierOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboxReplierOptions;

        // create path and map variables
        String localVarPath = "/repliers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewInboxReplierValidateBeforeCall(@javax.annotation.Nonnull CreateInboxReplierOptions createInboxReplierOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createInboxReplierOptions' is set
        if (createInboxReplierOptions == null) {
            throw new ApiException("Missing the required parameter 'createInboxReplierOptions' when calling createNewInboxReplier(Async)");
        }

        return createNewInboxReplierCall(createInboxReplierOptions, _callback);

    }


    private ApiResponse<InboxReplierDto> createNewInboxReplierWithHttpInfo(@javax.annotation.Nonnull CreateInboxReplierOptions createInboxReplierOptions) throws ApiException {
        okhttp3.Call localVarCall = createNewInboxReplierValidateBeforeCall(createInboxReplierOptions, null);
        Type localVarReturnType = new TypeToken<InboxReplierDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewInboxReplierAsync(@javax.annotation.Nonnull CreateInboxReplierOptions createInboxReplierOptions, final ApiCallback<InboxReplierDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewInboxReplierValidateBeforeCall(createInboxReplierOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxReplierDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNewInboxReplierRequest {
        @javax.annotation.Nonnull
        private final CreateInboxReplierOptions createInboxReplierOptions;

        private APIcreateNewInboxReplierRequest(@javax.annotation.Nonnull CreateInboxReplierOptions createInboxReplierOptions) {
            this.createInboxReplierOptions = createInboxReplierOptions;
        }

        /**
         * Build call for createNewInboxReplier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewInboxReplierCall(createInboxReplierOptions, _callback);
        }

        /**
         * Execute createNewInboxReplier request
         * @return InboxReplierDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxReplierDto execute() throws ApiException {
            ApiResponse<InboxReplierDto> localVarResp = createNewInboxReplierWithHttpInfo(createInboxReplierOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createNewInboxReplier request with HTTP info returned
         * @return ApiResponse&lt;InboxReplierDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxReplierDto> executeWithHttpInfo() throws ApiException {
            return createNewInboxReplierWithHttpInfo(createInboxReplierOptions);
        }

        /**
         * Execute createNewInboxReplier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxReplierDto> _callback) throws ApiException {
            return createNewInboxReplierAsync(createInboxReplierOptions, _callback);
        }
    }

    /**
     * Create an inbox replier
     * Create a new inbox rule for reply toing, blocking, and allowing emails when sending and receiving
     * @param createInboxReplierOptions  (required)
     * @return APIcreateNewInboxReplierRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNewInboxReplierRequest createNewInboxReplier(@javax.annotation.Nonnull CreateInboxReplierOptions createInboxReplierOptions) {
        return new APIcreateNewInboxReplierRequest(createInboxReplierOptions);
    }
    private okhttp3.Call deleteInboxReplierCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repliers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxReplierValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteInboxReplier(Async)");
        }

        return deleteInboxReplierCall(id, _callback);

    }


    private ApiResponse<Void> deleteInboxReplierWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxReplierValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxReplierAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxReplierValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxReplierRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteInboxReplierRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteInboxReplier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxReplierCall(id, _callback);
        }

        /**
         * Execute deleteInboxReplier request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxReplierWithHttpInfo(id);
        }

        /**
         * Execute deleteInboxReplier request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxReplierWithHttpInfo(id);
        }

        /**
         * Execute deleteInboxReplier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxReplierAsync(id, _callback);
        }
    }

    /**
     * Delete an inbox replier
     * Delete inbox replier
     * @param id ID of inbox replier (required)
     * @return APIdeleteInboxReplierRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxReplierRequest deleteInboxReplier(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteInboxReplierRequest(id);
    }
    private okhttp3.Call deleteInboxRepliersCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repliers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxRepliersValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return deleteInboxRepliersCall(inboxId, _callback);

    }


    private ApiResponse<Void> deleteInboxRepliersWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxRepliersValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxRepliersAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxRepliersValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxRepliersRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIdeleteInboxRepliersRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to attach replier to (optional)
         * @return APIdeleteInboxRepliersRequest
         */
        public APIdeleteInboxRepliersRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for deleteInboxRepliers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxRepliersCall(inboxId, _callback);
        }

        /**
         * Execute deleteInboxRepliers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxRepliersWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInboxRepliers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxRepliersWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInboxRepliers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxRepliersAsync(inboxId, _callback);
        }
    }

    /**
     * Delete inbox repliers
     * Delete inbox repliers. Accepts optional inboxId filter.
     * @return APIdeleteInboxRepliersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxRepliersRequest deleteInboxRepliers() {
        return new APIdeleteInboxRepliersRequest();
    }
    private okhttp3.Call getAllInboxReplierEventsCall(@javax.annotation.Nullable UUID inboxReplierId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repliers/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxReplierId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxReplierId", inboxReplierId));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (sentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentId", sentId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInboxReplierEventsValidateBeforeCall(@javax.annotation.Nullable UUID inboxReplierId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return getAllInboxReplierEventsCall(inboxReplierId, inboxId, emailId, sentId, page, size, sort, _callback);

    }


    private ApiResponse<PageInboxReplierEvents> getAllInboxReplierEventsWithHttpInfo(@javax.annotation.Nullable UUID inboxReplierId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getAllInboxReplierEventsValidateBeforeCall(inboxReplierId, inboxId, emailId, sentId, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageInboxReplierEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInboxReplierEventsAsync(@javax.annotation.Nullable UUID inboxReplierId, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PageInboxReplierEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInboxReplierEventsValidateBeforeCall(inboxReplierId, inboxId, emailId, sentId, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageInboxReplierEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllInboxReplierEventsRequest {
        @javax.annotation.Nullable
        private UUID inboxReplierId;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID emailId;
        @javax.annotation.Nullable
        private UUID sentId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetAllInboxReplierEventsRequest() {
        }

        /**
         * Set inboxReplierId
         * @param inboxReplierId ID of inbox replier (optional)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest inboxReplierId(@javax.annotation.Nullable UUID inboxReplierId) {
            this.inboxReplierId = inboxReplierId;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId ID of inbox (optional)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set emailId
         * @param emailId ID of email (optional)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest emailId(@javax.annotation.Nullable UUID emailId) {
            this.emailId = emailId;
            return this;
        }

        /**
         * Set sentId
         * @param sentId ID of sent (optional)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest sentId(@javax.annotation.Nullable UUID sentId) {
            this.sentId = sentId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in inbox replier event list pagination (optional, default to 0)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox replier event list pagination (optional, default to 20)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllInboxReplierEventsRequest
         */
        public APIgetAllInboxReplierEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getAllInboxReplierEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInboxReplierEventsCall(inboxReplierId, inboxId, emailId, sentId, page, size, sort, _callback);
        }

        /**
         * Execute getAllInboxReplierEvents request
         * @return PageInboxReplierEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxReplierEvents execute() throws ApiException {
            ApiResponse<PageInboxReplierEvents> localVarResp = getAllInboxReplierEventsWithHttpInfo(inboxReplierId, inboxId, emailId, sentId, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getAllInboxReplierEvents request with HTTP info returned
         * @return ApiResponse&lt;PageInboxReplierEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxReplierEvents> executeWithHttpInfo() throws ApiException {
            return getAllInboxReplierEventsWithHttpInfo(inboxReplierId, inboxId, emailId, sentId, page, size, sort);
        }

        /**
         * Execute getAllInboxReplierEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxReplierEvents> _callback) throws ApiException {
            return getAllInboxReplierEventsAsync(inboxReplierId, inboxId, emailId, sentId, page, size, sort, _callback);
        }
    }

    /**
     * Get inbox replier event list
     * Get all inbox ruleset events
     * @return APIgetAllInboxReplierEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllInboxReplierEventsRequest getAllInboxReplierEvents() {
        return new APIgetAllInboxReplierEventsRequest();
    }
    private okhttp3.Call getInboxReplierCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repliers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxReplierValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInboxReplier(Async)");
        }

        return getInboxReplierCall(id, _callback);

    }


    private ApiResponse<InboxReplierDto> getInboxReplierWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getInboxReplierValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InboxReplierDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxReplierAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<InboxReplierDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxReplierValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InboxReplierDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxReplierRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetInboxReplierRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getInboxReplier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxReplierCall(id, _callback);
        }

        /**
         * Execute getInboxReplier request
         * @return InboxReplierDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxReplierDto execute() throws ApiException {
            ApiResponse<InboxReplierDto> localVarResp = getInboxReplierWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxReplier request with HTTP info returned
         * @return ApiResponse&lt;InboxReplierDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxReplierDto> executeWithHttpInfo() throws ApiException {
            return getInboxReplierWithHttpInfo(id);
        }

        /**
         * Execute getInboxReplier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxReplierDto> _callback) throws ApiException {
            return getInboxReplierAsync(id, _callback);
        }
    }

    /**
     * Get an inbox replier
     * Get inbox ruleset
     * @param id ID of inbox replier (required)
     * @return APIgetInboxReplierRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxReplierRequest getInboxReplier(@javax.annotation.Nonnull UUID id) {
        return new APIgetInboxReplierRequest(id);
    }
    private okhttp3.Call getInboxReplierEventsCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repliers/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxReplierEventsValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInboxReplierEvents(Async)");
        }

        return getInboxReplierEventsCall(id, page, size, sort, _callback);

    }


    private ApiResponse<PageInboxReplierEvents> getInboxReplierEventsWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getInboxReplierEventsValidateBeforeCall(id, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageInboxReplierEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxReplierEventsAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PageInboxReplierEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxReplierEventsValidateBeforeCall(id, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageInboxReplierEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxReplierEventsRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetInboxReplierEventsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Optional page index in inbox replier event list pagination (optional, default to 0)
         * @return APIgetInboxReplierEventsRequest
         */
        public APIgetInboxReplierEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox replier event list pagination (optional, default to 20)
         * @return APIgetInboxReplierEventsRequest
         */
        public APIgetInboxReplierEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxReplierEventsRequest
         */
        public APIgetInboxReplierEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getInboxReplierEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxReplierEventsCall(id, page, size, sort, _callback);
        }

        /**
         * Execute getInboxReplierEvents request
         * @return PageInboxReplierEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxReplierEvents execute() throws ApiException {
            ApiResponse<PageInboxReplierEvents> localVarResp = getInboxReplierEventsWithHttpInfo(id, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxReplierEvents request with HTTP info returned
         * @return ApiResponse&lt;PageInboxReplierEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxReplierEvents> executeWithHttpInfo() throws ApiException {
            return getInboxReplierEventsWithHttpInfo(id, page, size, sort);
        }

        /**
         * Execute getInboxReplierEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxReplierEvents> _callback) throws ApiException {
            return getInboxReplierEventsAsync(id, page, size, sort, _callback);
        }
    }

    /**
     * Get an inbox replier event list
     * Get inbox ruleset events
     * @param id ID of inbox replier (required)
     * @return APIgetInboxReplierEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxReplierEventsRequest getInboxReplierEvents(@javax.annotation.Nonnull UUID id) {
        return new APIgetInboxReplierEventsRequest(id);
    }
    private okhttp3.Call getInboxRepliersCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/repliers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxRepliersValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getInboxRepliersCall(inboxId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageInboxReplierDto> getInboxRepliersWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getInboxRepliersValidateBeforeCall(inboxId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageInboxReplierDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxRepliersAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageInboxReplierDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxRepliersValidateBeforeCall(inboxId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageInboxReplierDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxRepliersRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetInboxRepliersRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to get repliers from (optional)
         * @return APIgetInboxRepliersRequest
         */
        public APIgetInboxRepliersRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in inbox replier list pagination (optional, default to 0)
         * @return APIgetInboxRepliersRequest
         */
        public APIgetInboxRepliersRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox replier list pagination (optional, default to 20)
         * @return APIgetInboxRepliersRequest
         */
        public APIgetInboxRepliersRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxRepliersRequest
         */
        public APIgetInboxRepliersRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetInboxRepliersRequest
         */
        public APIgetInboxRepliersRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetInboxRepliersRequest
         */
        public APIgetInboxRepliersRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getInboxRepliers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxRepliersCall(inboxId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getInboxRepliers request
         * @return PageInboxReplierDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxReplierDto execute() throws ApiException {
            ApiResponse<PageInboxReplierDto> localVarResp = getInboxRepliersWithHttpInfo(inboxId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxRepliers request with HTTP info returned
         * @return ApiResponse&lt;PageInboxReplierDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxReplierDto> executeWithHttpInfo() throws ApiException {
            return getInboxRepliersWithHttpInfo(inboxId, page, size, sort, since, before);
        }

        /**
         * Execute getInboxRepliers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxReplierDto> _callback) throws ApiException {
            return getInboxRepliersAsync(inboxId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * List inbox repliers
     * List all repliers attached to an inbox
     * @return APIgetInboxRepliersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxRepliersRequest getInboxRepliers() {
        return new APIgetInboxRepliersRequest();
    }
    private okhttp3.Call updateInboxReplierCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateInboxReplierOptions updateInboxReplierOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInboxReplierOptions;

        // create path and map variables
        String localVarPath = "/repliers/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboxReplierValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateInboxReplierOptions updateInboxReplierOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateInboxReplier(Async)");
        }

        // verify the required parameter 'updateInboxReplierOptions' is set
        if (updateInboxReplierOptions == null) {
            throw new ApiException("Missing the required parameter 'updateInboxReplierOptions' when calling updateInboxReplier(Async)");
        }

        return updateInboxReplierCall(id, updateInboxReplierOptions, _callback);

    }


    private ApiResponse<InboxReplierDto> updateInboxReplierWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateInboxReplierOptions updateInboxReplierOptions) throws ApiException {
        okhttp3.Call localVarCall = updateInboxReplierValidateBeforeCall(id, updateInboxReplierOptions, null);
        Type localVarReturnType = new TypeToken<InboxReplierDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInboxReplierAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateInboxReplierOptions updateInboxReplierOptions, final ApiCallback<InboxReplierDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInboxReplierValidateBeforeCall(id, updateInboxReplierOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxReplierDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateInboxReplierRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final UpdateInboxReplierOptions updateInboxReplierOptions;

        private APIupdateInboxReplierRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateInboxReplierOptions updateInboxReplierOptions) {
            this.id = id;
            this.updateInboxReplierOptions = updateInboxReplierOptions;
        }

        /**
         * Build call for updateInboxReplier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateInboxReplierCall(id, updateInboxReplierOptions, _callback);
        }

        /**
         * Execute updateInboxReplier request
         * @return InboxReplierDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxReplierDto execute() throws ApiException {
            ApiResponse<InboxReplierDto> localVarResp = updateInboxReplierWithHttpInfo(id, updateInboxReplierOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateInboxReplier request with HTTP info returned
         * @return ApiResponse&lt;InboxReplierDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxReplierDto> executeWithHttpInfo() throws ApiException {
            return updateInboxReplierWithHttpInfo(id, updateInboxReplierOptions);
        }

        /**
         * Execute updateInboxReplier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxReplierDto> _callback) throws ApiException {
            return updateInboxReplierAsync(id, updateInboxReplierOptions, _callback);
        }
    }

    /**
     * Update an inbox replier
     * Update inbox ruleset
     * @param id ID of inbox replier (required)
     * @param updateInboxReplierOptions  (required)
     * @return APIupdateInboxReplierRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateInboxReplierRequest updateInboxReplier(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateInboxReplierOptions updateInboxReplierOptions) {
        return new APIupdateInboxReplierRequest(id, updateInboxReplierOptions);
    }
}
