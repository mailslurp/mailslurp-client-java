/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.DNSLookupOptions;
import com.mailslurp.models.DNSLookupResults;
import com.mailslurp.models.DNSLookupsOptions;
import com.mailslurp.models.DescribeDomainOptions;
import com.mailslurp.models.DescribeMailServerDomainResult;
import com.mailslurp.models.EmailVerificationResult;
import com.mailslurp.models.IPAddressResult;
import com.mailslurp.models.VerifyEmailAddressOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MailServerControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MailServerControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MailServerControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call describeMailServerDomainCall(@javax.annotation.Nonnull DescribeDomainOptions describeDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = describeDomainOptions;

        // create path and map variables
        String localVarPath = "/mail-server/describe/domain";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call describeMailServerDomainValidateBeforeCall(@javax.annotation.Nonnull DescribeDomainOptions describeDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'describeDomainOptions' is set
        if (describeDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'describeDomainOptions' when calling describeMailServerDomain(Async)");
        }

        return describeMailServerDomainCall(describeDomainOptions, _callback);

    }


    private ApiResponse<DescribeMailServerDomainResult> describeMailServerDomainWithHttpInfo(@javax.annotation.Nonnull DescribeDomainOptions describeDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = describeMailServerDomainValidateBeforeCall(describeDomainOptions, null);
        Type localVarReturnType = new TypeToken<DescribeMailServerDomainResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call describeMailServerDomainAsync(@javax.annotation.Nonnull DescribeDomainOptions describeDomainOptions, final ApiCallback<DescribeMailServerDomainResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = describeMailServerDomainValidateBeforeCall(describeDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<DescribeMailServerDomainResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdescribeMailServerDomainRequest {
        @javax.annotation.Nonnull
        private final DescribeDomainOptions describeDomainOptions;

        private APIdescribeMailServerDomainRequest(@javax.annotation.Nonnull DescribeDomainOptions describeDomainOptions) {
            this.describeDomainOptions = describeDomainOptions;
        }

        /**
         * Build call for describeMailServerDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return describeMailServerDomainCall(describeDomainOptions, _callback);
        }

        /**
         * Execute describeMailServerDomain request
         * @return DescribeMailServerDomainResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DescribeMailServerDomainResult execute() throws ApiException {
            ApiResponse<DescribeMailServerDomainResult> localVarResp = describeMailServerDomainWithHttpInfo(describeDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute describeMailServerDomain request with HTTP info returned
         * @return ApiResponse&lt;DescribeMailServerDomainResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DescribeMailServerDomainResult> executeWithHttpInfo() throws ApiException {
            return describeMailServerDomainWithHttpInfo(describeDomainOptions);
        }

        /**
         * Execute describeMailServerDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DescribeMailServerDomainResult> _callback) throws ApiException {
            return describeMailServerDomainAsync(describeDomainOptions, _callback);
        }
    }

    /**
     * Get DNS Mail Server records for a domain
     * 
     * @param describeDomainOptions  (required)
     * @return APIdescribeMailServerDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdescribeMailServerDomainRequest describeMailServerDomain(@javax.annotation.Nonnull DescribeDomainOptions describeDomainOptions) {
        return new APIdescribeMailServerDomainRequest(describeDomainOptions);
    }
    private okhttp3.Call getDnsLookupCall(@javax.annotation.Nonnull DNSLookupOptions dnSLookupOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnSLookupOptions;

        // create path and map variables
        String localVarPath = "/mail-server/describe/dns-lookup";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDnsLookupValidateBeforeCall(@javax.annotation.Nonnull DNSLookupOptions dnSLookupOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnSLookupOptions' is set
        if (dnSLookupOptions == null) {
            throw new ApiException("Missing the required parameter 'dnSLookupOptions' when calling getDnsLookup(Async)");
        }

        return getDnsLookupCall(dnSLookupOptions, _callback);

    }


    private ApiResponse<DNSLookupResults> getDnsLookupWithHttpInfo(@javax.annotation.Nonnull DNSLookupOptions dnSLookupOptions) throws ApiException {
        okhttp3.Call localVarCall = getDnsLookupValidateBeforeCall(dnSLookupOptions, null);
        Type localVarReturnType = new TypeToken<DNSLookupResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDnsLookupAsync(@javax.annotation.Nonnull DNSLookupOptions dnSLookupOptions, final ApiCallback<DNSLookupResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDnsLookupValidateBeforeCall(dnSLookupOptions, _callback);
        Type localVarReturnType = new TypeToken<DNSLookupResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDnsLookupRequest {
        @javax.annotation.Nonnull
        private final DNSLookupOptions dnSLookupOptions;

        private APIgetDnsLookupRequest(@javax.annotation.Nonnull DNSLookupOptions dnSLookupOptions) {
            this.dnSLookupOptions = dnSLookupOptions;
        }

        /**
         * Build call for getDnsLookup
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDnsLookupCall(dnSLookupOptions, _callback);
        }

        /**
         * Execute getDnsLookup request
         * @return DNSLookupResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DNSLookupResults execute() throws ApiException {
            ApiResponse<DNSLookupResults> localVarResp = getDnsLookupWithHttpInfo(dnSLookupOptions);
            return localVarResp.getData();
        }

        /**
         * Execute getDnsLookup request with HTTP info returned
         * @return ApiResponse&lt;DNSLookupResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DNSLookupResults> executeWithHttpInfo() throws ApiException {
            return getDnsLookupWithHttpInfo(dnSLookupOptions);
        }

        /**
         * Execute getDnsLookup request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DNSLookupResults> _callback) throws ApiException {
            return getDnsLookupAsync(dnSLookupOptions, _callback);
        }
    }

    /**
     * Lookup DNS records for a domain
     * 
     * @param dnSLookupOptions  (required)
     * @return APIgetDnsLookupRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDnsLookupRequest getDnsLookup(@javax.annotation.Nonnull DNSLookupOptions dnSLookupOptions) {
        return new APIgetDnsLookupRequest(dnSLookupOptions);
    }
    private okhttp3.Call getDnsLookupsCall(@javax.annotation.Nonnull DNSLookupsOptions dnSLookupsOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dnSLookupsOptions;

        // create path and map variables
        String localVarPath = "/mail-server/describe/dns-lookups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDnsLookupsValidateBeforeCall(@javax.annotation.Nonnull DNSLookupsOptions dnSLookupsOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dnSLookupsOptions' is set
        if (dnSLookupsOptions == null) {
            throw new ApiException("Missing the required parameter 'dnSLookupsOptions' when calling getDnsLookups(Async)");
        }

        return getDnsLookupsCall(dnSLookupsOptions, _callback);

    }


    private ApiResponse<DNSLookupResults> getDnsLookupsWithHttpInfo(@javax.annotation.Nonnull DNSLookupsOptions dnSLookupsOptions) throws ApiException {
        okhttp3.Call localVarCall = getDnsLookupsValidateBeforeCall(dnSLookupsOptions, null);
        Type localVarReturnType = new TypeToken<DNSLookupResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDnsLookupsAsync(@javax.annotation.Nonnull DNSLookupsOptions dnSLookupsOptions, final ApiCallback<DNSLookupResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDnsLookupsValidateBeforeCall(dnSLookupsOptions, _callback);
        Type localVarReturnType = new TypeToken<DNSLookupResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDnsLookupsRequest {
        @javax.annotation.Nonnull
        private final DNSLookupsOptions dnSLookupsOptions;

        private APIgetDnsLookupsRequest(@javax.annotation.Nonnull DNSLookupsOptions dnSLookupsOptions) {
            this.dnSLookupsOptions = dnSLookupsOptions;
        }

        /**
         * Build call for getDnsLookups
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDnsLookupsCall(dnSLookupsOptions, _callback);
        }

        /**
         * Execute getDnsLookups request
         * @return DNSLookupResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DNSLookupResults execute() throws ApiException {
            ApiResponse<DNSLookupResults> localVarResp = getDnsLookupsWithHttpInfo(dnSLookupsOptions);
            return localVarResp.getData();
        }

        /**
         * Execute getDnsLookups request with HTTP info returned
         * @return ApiResponse&lt;DNSLookupResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DNSLookupResults> executeWithHttpInfo() throws ApiException {
            return getDnsLookupsWithHttpInfo(dnSLookupsOptions);
        }

        /**
         * Execute getDnsLookups request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DNSLookupResults> _callback) throws ApiException {
            return getDnsLookupsAsync(dnSLookupsOptions, _callback);
        }
    }

    /**
     * Lookup DNS records for multiple domains
     * 
     * @param dnSLookupsOptions  (required)
     * @return APIgetDnsLookupsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDnsLookupsRequest getDnsLookups(@javax.annotation.Nonnull DNSLookupsOptions dnSLookupsOptions) {
        return new APIgetDnsLookupsRequest(dnSLookupsOptions);
    }
    private okhttp3.Call getIpAddressCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mail-server/describe/ip-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getIpAddressValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getIpAddress(Async)");
        }

        return getIpAddressCall(name, _callback);

    }


    private ApiResponse<IPAddressResult> getIpAddressWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = getIpAddressValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<IPAddressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getIpAddressAsync(@javax.annotation.Nonnull String name, final ApiCallback<IPAddressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getIpAddressValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<IPAddressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetIpAddressRequest {
        @javax.annotation.Nonnull
        private final String name;

        private APIgetIpAddressRequest(@javax.annotation.Nonnull String name) {
            this.name = name;
        }

        /**
         * Build call for getIpAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getIpAddressCall(name, _callback);
        }

        /**
         * Execute getIpAddress request
         * @return IPAddressResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public IPAddressResult execute() throws ApiException {
            ApiResponse<IPAddressResult> localVarResp = getIpAddressWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute getIpAddress request with HTTP info returned
         * @return ApiResponse&lt;IPAddressResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<IPAddressResult> executeWithHttpInfo() throws ApiException {
            return getIpAddressWithHttpInfo(name);
        }

        /**
         * Execute getIpAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<IPAddressResult> _callback) throws ApiException {
            return getIpAddressAsync(name, _callback);
        }
    }

    /**
     * Get IP address for a domain
     * 
     * @param name  (required)
     * @return APIgetIpAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetIpAddressRequest getIpAddress(@javax.annotation.Nonnull String name) {
        return new APIgetIpAddressRequest(name);
    }
    private okhttp3.Call verifyEmailAddressCall(@javax.annotation.Nonnull VerifyEmailAddressOptions verifyEmailAddressOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = verifyEmailAddressOptions;

        // create path and map variables
        String localVarPath = "/mail-server/verify/email-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call verifyEmailAddressValidateBeforeCall(@javax.annotation.Nonnull VerifyEmailAddressOptions verifyEmailAddressOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'verifyEmailAddressOptions' is set
        if (verifyEmailAddressOptions == null) {
            throw new ApiException("Missing the required parameter 'verifyEmailAddressOptions' when calling verifyEmailAddress(Async)");
        }

        return verifyEmailAddressCall(verifyEmailAddressOptions, _callback);

    }


    private ApiResponse<EmailVerificationResult> verifyEmailAddressWithHttpInfo(@javax.annotation.Nonnull VerifyEmailAddressOptions verifyEmailAddressOptions) throws ApiException {
        okhttp3.Call localVarCall = verifyEmailAddressValidateBeforeCall(verifyEmailAddressOptions, null);
        Type localVarReturnType = new TypeToken<EmailVerificationResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call verifyEmailAddressAsync(@javax.annotation.Nonnull VerifyEmailAddressOptions verifyEmailAddressOptions, final ApiCallback<EmailVerificationResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = verifyEmailAddressValidateBeforeCall(verifyEmailAddressOptions, _callback);
        Type localVarReturnType = new TypeToken<EmailVerificationResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIverifyEmailAddressRequest {
        @javax.annotation.Nonnull
        private final VerifyEmailAddressOptions verifyEmailAddressOptions;

        private APIverifyEmailAddressRequest(@javax.annotation.Nonnull VerifyEmailAddressOptions verifyEmailAddressOptions) {
            this.verifyEmailAddressOptions = verifyEmailAddressOptions;
        }

        /**
         * Build call for verifyEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return verifyEmailAddressCall(verifyEmailAddressOptions, _callback);
        }

        /**
         * Execute verifyEmailAddress request
         * @return EmailVerificationResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public EmailVerificationResult execute() throws ApiException {
            ApiResponse<EmailVerificationResult> localVarResp = verifyEmailAddressWithHttpInfo(verifyEmailAddressOptions);
            return localVarResp.getData();
        }

        /**
         * Execute verifyEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;EmailVerificationResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<EmailVerificationResult> executeWithHttpInfo() throws ApiException {
            return verifyEmailAddressWithHttpInfo(verifyEmailAddressOptions);
        }

        /**
         * Execute verifyEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<EmailVerificationResult> _callback) throws ApiException {
            return verifyEmailAddressAsync(verifyEmailAddressOptions, _callback);
        }
    }

    /**
     * Deprecated. Use the EmailVerificationController methods for more accurate and reliable functionality. Verify the existence of an email address at a given mail server.
     * 
     * @param verifyEmailAddressOptions  (required)
     * @return APIverifyEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIverifyEmailAddressRequest verifyEmailAddress(@javax.annotation.Nonnull VerifyEmailAddressOptions verifyEmailAddressOptions) {
        return new APIverifyEmailAddressRequest(verifyEmailAddressOptions);
    }
}
