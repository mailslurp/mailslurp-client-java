/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.InboxDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.SimpleSendEmailOptions;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CommonActionsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CommonActionsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CommonActionsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewEmailAddressCall(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/newEmailAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowTeamAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowTeamAccess", allowTeamAccess));
        }

        if (useDomainPool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDomainPool", useDomainPool));
        }

        if (expiresAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresAt", expiresAt));
        }

        if (expiresIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresIn", expiresIn));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (virtualInbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtualInbox", virtualInbox));
        }

        if (useShortAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useShortAddress", useShortAddress));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (domainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainId", domainId));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewEmailAddressValidateBeforeCall(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix, final ApiCallback _callback) throws ApiException {
        return createNewEmailAddressCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);

    }


    private ApiResponse<InboxDto> createNewEmailAddressWithHttpInfo(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix) throws ApiException {
        okhttp3.Call localVarCall = createNewEmailAddressValidateBeforeCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewEmailAddressAsync(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewEmailAddressValidateBeforeCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNewEmailAddressRequest {
        @javax.annotation.Nullable
        private Boolean allowTeamAccess;
        @javax.annotation.Nullable
        private Boolean useDomainPool;
        @javax.annotation.Nullable
        private OffsetDateTime expiresAt;
        @javax.annotation.Nullable
        private Long expiresIn;
        @javax.annotation.Nullable
        private String emailAddress;
        @javax.annotation.Nullable
        private String inboxType;
        @javax.annotation.Nullable
        private String description;
        @javax.annotation.Nullable
        private String name;
        @javax.annotation.Nullable
        private List<String> tags;
        @javax.annotation.Nullable
        private Boolean favourite;
        @javax.annotation.Nullable
        private Boolean virtualInbox;
        @javax.annotation.Nullable
        private Boolean useShortAddress;
        @javax.annotation.Nullable
        private String domainName;
        @javax.annotation.Nullable
        private UUID domainId;
        @javax.annotation.Nullable
        private String prefix;

        private APIcreateNewEmailAddressRequest() {
        }

        /**
         * Set allowTeamAccess
         * @param allowTeamAccess  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest allowTeamAccess(@javax.annotation.Nullable Boolean allowTeamAccess) {
            this.allowTeamAccess = allowTeamAccess;
            return this;
        }

        /**
         * Set useDomainPool
         * @param useDomainPool  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest useDomainPool(@javax.annotation.Nullable Boolean useDomainPool) {
            this.useDomainPool = useDomainPool;
            return this;
        }

        /**
         * Set expiresAt
         * @param expiresAt  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Set expiresIn
         * @param expiresIn  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest expiresIn(@javax.annotation.Nullable Long expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * Set emailAddress
         * @param emailAddress  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest emailAddress(@javax.annotation.Nullable String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Set inboxType
         * @param inboxType  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest description(@javax.annotation.Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest name(@javax.annotation.Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest tags(@javax.annotation.Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Set favourite
         * @param favourite  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Set virtualInbox
         * @param virtualInbox  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest virtualInbox(@javax.annotation.Nullable Boolean virtualInbox) {
            this.virtualInbox = virtualInbox;
            return this;
        }

        /**
         * Set useShortAddress
         * @param useShortAddress  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest useShortAddress(@javax.annotation.Nullable Boolean useShortAddress) {
            this.useShortAddress = useShortAddress;
            return this;
        }

        /**
         * Set domainName
         * @param domainName  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest domainName(@javax.annotation.Nullable String domainName) {
            this.domainName = domainName;
            return this;
        }

        /**
         * Set domainId
         * @param domainId  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest domainId(@javax.annotation.Nullable UUID domainId) {
            this.domainId = domainId;
            return this;
        }

        /**
         * Set prefix
         * @param prefix  (optional)
         * @return APIcreateNewEmailAddressRequest
         */
        public APIcreateNewEmailAddressRequest prefix(@javax.annotation.Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }

        /**
         * Build call for createNewEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewEmailAddressCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);
        }

        /**
         * Execute createNewEmailAddress request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = createNewEmailAddressWithHttpInfo(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix);
            return localVarResp.getData();
        }

        /**
         * Execute createNewEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return createNewEmailAddressWithHttpInfo(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix);
        }

        /**
         * Execute createNewEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return createNewEmailAddressAsync(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);
        }
    }

    /**
     * Create new random inbox
     * Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
     * @return APIcreateNewEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNewEmailAddressRequest createNewEmailAddress() {
        return new APIcreateNewEmailAddressRequest();
    }
    private okhttp3.Call createRandomInboxCall(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/createInbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (allowTeamAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowTeamAccess", allowTeamAccess));
        }

        if (useDomainPool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDomainPool", useDomainPool));
        }

        if (expiresAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresAt", expiresAt));
        }

        if (expiresIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresIn", expiresIn));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (virtualInbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtualInbox", virtualInbox));
        }

        if (useShortAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useShortAddress", useShortAddress));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (domainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainId", domainId));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createRandomInboxValidateBeforeCall(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix, final ApiCallback _callback) throws ApiException {
        return createRandomInboxCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);

    }


    private ApiResponse<InboxDto> createRandomInboxWithHttpInfo(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix) throws ApiException {
        okhttp3.Call localVarCall = createRandomInboxValidateBeforeCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createRandomInboxAsync(@javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String description, @javax.annotation.Nullable String name, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String prefix, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createRandomInboxValidateBeforeCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateRandomInboxRequest {
        @javax.annotation.Nullable
        private Boolean allowTeamAccess;
        @javax.annotation.Nullable
        private Boolean useDomainPool;
        @javax.annotation.Nullable
        private OffsetDateTime expiresAt;
        @javax.annotation.Nullable
        private Long expiresIn;
        @javax.annotation.Nullable
        private String emailAddress;
        @javax.annotation.Nullable
        private String inboxType;
        @javax.annotation.Nullable
        private String description;
        @javax.annotation.Nullable
        private String name;
        @javax.annotation.Nullable
        private List<String> tags;
        @javax.annotation.Nullable
        private Boolean favourite;
        @javax.annotation.Nullable
        private Boolean virtualInbox;
        @javax.annotation.Nullable
        private Boolean useShortAddress;
        @javax.annotation.Nullable
        private String domainName;
        @javax.annotation.Nullable
        private UUID domainId;
        @javax.annotation.Nullable
        private String prefix;

        private APIcreateRandomInboxRequest() {
        }

        /**
         * Set allowTeamAccess
         * @param allowTeamAccess  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest allowTeamAccess(@javax.annotation.Nullable Boolean allowTeamAccess) {
            this.allowTeamAccess = allowTeamAccess;
            return this;
        }

        /**
         * Set useDomainPool
         * @param useDomainPool  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest useDomainPool(@javax.annotation.Nullable Boolean useDomainPool) {
            this.useDomainPool = useDomainPool;
            return this;
        }

        /**
         * Set expiresAt
         * @param expiresAt  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Set expiresIn
         * @param expiresIn  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest expiresIn(@javax.annotation.Nullable Long expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * Set emailAddress
         * @param emailAddress  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest emailAddress(@javax.annotation.Nullable String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Set inboxType
         * @param inboxType  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Set description
         * @param description  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest description(@javax.annotation.Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * Set name
         * @param name  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest name(@javax.annotation.Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Set tags
         * @param tags  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest tags(@javax.annotation.Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Set favourite
         * @param favourite  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Set virtualInbox
         * @param virtualInbox  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest virtualInbox(@javax.annotation.Nullable Boolean virtualInbox) {
            this.virtualInbox = virtualInbox;
            return this;
        }

        /**
         * Set useShortAddress
         * @param useShortAddress  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest useShortAddress(@javax.annotation.Nullable Boolean useShortAddress) {
            this.useShortAddress = useShortAddress;
            return this;
        }

        /**
         * Set domainName
         * @param domainName  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest domainName(@javax.annotation.Nullable String domainName) {
            this.domainName = domainName;
            return this;
        }

        /**
         * Set domainId
         * @param domainId  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest domainId(@javax.annotation.Nullable UUID domainId) {
            this.domainId = domainId;
            return this;
        }

        /**
         * Set prefix
         * @param prefix  (optional)
         * @return APIcreateRandomInboxRequest
         */
        public APIcreateRandomInboxRequest prefix(@javax.annotation.Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }

        /**
         * Build call for createRandomInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createRandomInboxCall(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);
        }

        /**
         * Execute createRandomInbox request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = createRandomInboxWithHttpInfo(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix);
            return localVarResp.getData();
        }

        /**
         * Execute createRandomInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return createRandomInboxWithHttpInfo(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix);
        }

        /**
         * Execute createRandomInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return createRandomInboxAsync(allowTeamAccess, useDomainPool, expiresAt, expiresIn, emailAddress, inboxType, description, name, tags, favourite, virtualInbox, useShortAddress, domainName, domainId, prefix, _callback);
        }
    }

    /**
     * Create new random inbox
     * Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
     * @return APIcreateRandomInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateRandomInboxRequest createRandomInbox() {
        return new APIcreateRandomInboxRequest();
    }
    private okhttp3.Call deleteEmailAddressCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/deleteEmailAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmailAddressValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling deleteEmailAddress(Async)");
        }

        return deleteEmailAddressCall(inboxId, _callback);

    }


    private ApiResponse<Void> deleteEmailAddressWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmailAddressValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmailAddressAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmailAddressValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteEmailAddressRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIdeleteEmailAddressRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for deleteEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmailAddressCall(inboxId, _callback);
        }

        /**
         * Execute deleteEmailAddress request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmailAddressWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmailAddressWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmailAddressAsync(inboxId, _callback);
        }
    }

    /**
     * Delete inbox email address by inbox id
     * Deletes inbox email address
     * @param inboxId ID of inbox to delete (required)
     * @return APIdeleteEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteEmailAddressRequest deleteEmailAddress(@javax.annotation.Nonnull UUID inboxId) {
        return new APIdeleteEmailAddressRequest(inboxId);
    }
    private okhttp3.Call emptyInboxCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emptyInbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call emptyInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling emptyInbox(Async)");
        }

        return emptyInboxCall(inboxId, _callback);

    }


    private ApiResponse<Void> emptyInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = emptyInboxValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call emptyInboxAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = emptyInboxValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIemptyInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIemptyInboxRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for emptyInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return emptyInboxCall(inboxId, _callback);
        }

        /**
         * Execute emptyInbox request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            emptyInboxWithHttpInfo(inboxId);
        }

        /**
         * Execute emptyInbox request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return emptyInboxWithHttpInfo(inboxId);
        }

        /**
         * Execute emptyInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return emptyInboxAsync(inboxId, _callback);
        }
    }

    /**
     * Delete all emails in an inbox
     * Deletes all emails
     * @param inboxId ID of inbox to empty (required)
     * @return APIemptyInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIemptyInboxRequest emptyInbox(@javax.annotation.Nonnull UUID inboxId) {
        return new APIemptyInboxRequest(inboxId);
    }
    private okhttp3.Call sendEmailQueryCall(@javax.annotation.Nonnull String to, @javax.annotation.Nullable UUID senderId, @javax.annotation.Nullable String body, @javax.annotation.Nullable String subject, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sendEmailQuery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (senderId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("senderId", senderId));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (body != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("body", body));
        }

        if (subject != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subject", subject));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailQueryValidateBeforeCall(@javax.annotation.Nonnull String to, @javax.annotation.Nullable UUID senderId, @javax.annotation.Nullable String body, @javax.annotation.Nullable String subject, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling sendEmailQuery(Async)");
        }

        return sendEmailQueryCall(to, senderId, body, subject, _callback);

    }


    private ApiResponse<Void> sendEmailQueryWithHttpInfo(@javax.annotation.Nonnull String to, @javax.annotation.Nullable UUID senderId, @javax.annotation.Nullable String body, @javax.annotation.Nullable String subject) throws ApiException {
        okhttp3.Call localVarCall = sendEmailQueryValidateBeforeCall(to, senderId, body, subject, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailQueryAsync(@javax.annotation.Nonnull String to, @javax.annotation.Nullable UUID senderId, @javax.annotation.Nullable String body, @javax.annotation.Nullable String subject, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailQueryValidateBeforeCall(to, senderId, body, subject, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsendEmailQueryRequest {
        @javax.annotation.Nonnull
        private final String to;
        @javax.annotation.Nullable
        private UUID senderId;
        @javax.annotation.Nullable
        private String body;
        @javax.annotation.Nullable
        private String subject;

        private APIsendEmailQueryRequest(@javax.annotation.Nonnull String to) {
            this.to = to;
        }

        /**
         * Set senderId
         * @param senderId ID of inbox to send from. If null an inbox will be created for sending (optional)
         * @return APIsendEmailQueryRequest
         */
        public APIsendEmailQueryRequest senderId(@javax.annotation.Nullable UUID senderId) {
            this.senderId = senderId;
            return this;
        }

        /**
         * Set body
         * @param body Body of the email message. Supports HTML (optional)
         * @return APIsendEmailQueryRequest
         */
        public APIsendEmailQueryRequest body(@javax.annotation.Nullable String body) {
            this.body = body;
            return this;
        }

        /**
         * Set subject
         * @param subject Subject line of the email (optional)
         * @return APIsendEmailQueryRequest
         */
        public APIsendEmailQueryRequest subject(@javax.annotation.Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * Build call for sendEmailQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailQueryCall(to, senderId, body, subject, _callback);
        }

        /**
         * Execute sendEmailQuery request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendEmailQueryWithHttpInfo(to, senderId, body, subject);
        }

        /**
         * Execute sendEmailQuery request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendEmailQueryWithHttpInfo(to, senderId, body, subject);
        }

        /**
         * Execute sendEmailQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendEmailQueryAsync(to, senderId, body, subject, _callback);
        }
    }

    /**
     * Send an email using query parameters
     * If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
     * @param to Email address to send to (required)
     * @return APIsendEmailQueryRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailQueryRequest sendEmailQuery(@javax.annotation.Nonnull String to) {
        return new APIsendEmailQueryRequest(to);
    }
    private okhttp3.Call sendEmailSimpleCall(@javax.annotation.Nonnull SimpleSendEmailOptions simpleSendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = simpleSendEmailOptions;

        // create path and map variables
        String localVarPath = "/sendEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailSimpleValidateBeforeCall(@javax.annotation.Nonnull SimpleSendEmailOptions simpleSendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'simpleSendEmailOptions' is set
        if (simpleSendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'simpleSendEmailOptions' when calling sendEmailSimple(Async)");
        }

        return sendEmailSimpleCall(simpleSendEmailOptions, _callback);

    }


    private ApiResponse<Void> sendEmailSimpleWithHttpInfo(@javax.annotation.Nonnull SimpleSendEmailOptions simpleSendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = sendEmailSimpleValidateBeforeCall(simpleSendEmailOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailSimpleAsync(@javax.annotation.Nonnull SimpleSendEmailOptions simpleSendEmailOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailSimpleValidateBeforeCall(simpleSendEmailOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsendEmailSimpleRequest {
        @javax.annotation.Nonnull
        private final SimpleSendEmailOptions simpleSendEmailOptions;

        private APIsendEmailSimpleRequest(@javax.annotation.Nonnull SimpleSendEmailOptions simpleSendEmailOptions) {
            this.simpleSendEmailOptions = simpleSendEmailOptions;
        }

        /**
         * Build call for sendEmailSimple
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailSimpleCall(simpleSendEmailOptions, _callback);
        }

        /**
         * Execute sendEmailSimple request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendEmailSimpleWithHttpInfo(simpleSendEmailOptions);
        }

        /**
         * Execute sendEmailSimple request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendEmailSimpleWithHttpInfo(simpleSendEmailOptions);
        }

        /**
         * Execute sendEmailSimple request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendEmailSimpleAsync(simpleSendEmailOptions, _callback);
        }
    }

    /**
     * Send an email
     * If no senderId or inboxId provided a random email address will be used to send from.
     * @param simpleSendEmailOptions  (required)
     * @return APIsendEmailSimpleRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailSimpleRequest sendEmailSimple(@javax.annotation.Nonnull SimpleSendEmailOptions simpleSendEmailOptions) {
        return new APIsendEmailSimpleRequest(simpleSendEmailOptions);
    }
}
