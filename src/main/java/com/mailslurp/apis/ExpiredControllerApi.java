/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.ExpirationDefaults;
import com.mailslurp.models.ExpiredInboxDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageExpiredInboxRecordProjection;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExpiredControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExpiredControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExpiredControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getExpirationDefaultsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expired/defaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpirationDefaultsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getExpirationDefaultsCall(_callback);

    }


    private ApiResponse<ExpirationDefaults> getExpirationDefaultsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getExpirationDefaultsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ExpirationDefaults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExpirationDefaultsAsync(final ApiCallback<ExpirationDefaults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpirationDefaultsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ExpirationDefaults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExpirationDefaultsRequest {

        private APIgetExpirationDefaultsRequest() {
        }

        /**
         * Build call for getExpirationDefaults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExpirationDefaultsCall(_callback);
        }

        /**
         * Execute getExpirationDefaults request
         * @return ExpirationDefaults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpirationDefaults execute() throws ApiException {
            ApiResponse<ExpirationDefaults> localVarResp = getExpirationDefaultsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getExpirationDefaults request with HTTP info returned
         * @return ApiResponse&lt;ExpirationDefaults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpirationDefaults> executeWithHttpInfo() throws ApiException {
            return getExpirationDefaultsWithHttpInfo();
        }

        /**
         * Execute getExpirationDefaults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpirationDefaults> _callback) throws ApiException {
            return getExpirationDefaultsAsync(_callback);
        }
    }

    /**
     * Get default expiration settings
     * Return default times used for inbox expiration
     * @return APIgetExpirationDefaultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExpirationDefaultsRequest getExpirationDefaults() {
        return new APIgetExpirationDefaultsRequest();
    }
    private okhttp3.Call getExpiredInboxByInboxIdCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expired/inbox/{inboxId}"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpiredInboxByInboxIdValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getExpiredInboxByInboxId(Async)");
        }

        return getExpiredInboxByInboxIdCall(inboxId, _callback);

    }


    private ApiResponse<ExpiredInboxDto> getExpiredInboxByInboxIdWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getExpiredInboxByInboxIdValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<ExpiredInboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExpiredInboxByInboxIdAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<ExpiredInboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpiredInboxByInboxIdValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<ExpiredInboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExpiredInboxByInboxIdRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetExpiredInboxByInboxIdRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getExpiredInboxByInboxId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExpiredInboxByInboxIdCall(inboxId, _callback);
        }

        /**
         * Execute getExpiredInboxByInboxId request
         * @return ExpiredInboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpiredInboxDto execute() throws ApiException {
            ApiResponse<ExpiredInboxDto> localVarResp = getExpiredInboxByInboxIdWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getExpiredInboxByInboxId request with HTTP info returned
         * @return ApiResponse&lt;ExpiredInboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpiredInboxDto> executeWithHttpInfo() throws ApiException {
            return getExpiredInboxByInboxIdWithHttpInfo(inboxId);
        }

        /**
         * Execute getExpiredInboxByInboxId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpiredInboxDto> _callback) throws ApiException {
            return getExpiredInboxByInboxIdAsync(inboxId, _callback);
        }
    }

    /**
     * Get expired inbox record for a previously existing inbox
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     * @param inboxId ID of inbox you want to retrieve (not the inbox ID) (required)
     * @return APIgetExpiredInboxByInboxIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExpiredInboxByInboxIdRequest getExpiredInboxByInboxId(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetExpiredInboxByInboxIdRequest(inboxId);
    }
    private okhttp3.Call getExpiredInboxRecordCall(@javax.annotation.Nonnull UUID expiredId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expired/{expiredId}"
            .replace("{" + "expiredId" + "}", localVarApiClient.escapeString(expiredId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpiredInboxRecordValidateBeforeCall(@javax.annotation.Nonnull UUID expiredId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'expiredId' is set
        if (expiredId == null) {
            throw new ApiException("Missing the required parameter 'expiredId' when calling getExpiredInboxRecord(Async)");
        }

        return getExpiredInboxRecordCall(expiredId, _callback);

    }


    private ApiResponse<ExpiredInboxDto> getExpiredInboxRecordWithHttpInfo(@javax.annotation.Nonnull UUID expiredId) throws ApiException {
        okhttp3.Call localVarCall = getExpiredInboxRecordValidateBeforeCall(expiredId, null);
        Type localVarReturnType = new TypeToken<ExpiredInboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExpiredInboxRecordAsync(@javax.annotation.Nonnull UUID expiredId, final ApiCallback<ExpiredInboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpiredInboxRecordValidateBeforeCall(expiredId, _callback);
        Type localVarReturnType = new TypeToken<ExpiredInboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExpiredInboxRecordRequest {
        @javax.annotation.Nonnull
        private final UUID expiredId;

        private APIgetExpiredInboxRecordRequest(@javax.annotation.Nonnull UUID expiredId) {
            this.expiredId = expiredId;
        }

        /**
         * Build call for getExpiredInboxRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExpiredInboxRecordCall(expiredId, _callback);
        }

        /**
         * Execute getExpiredInboxRecord request
         * @return ExpiredInboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExpiredInboxDto execute() throws ApiException {
            ApiResponse<ExpiredInboxDto> localVarResp = getExpiredInboxRecordWithHttpInfo(expiredId);
            return localVarResp.getData();
        }

        /**
         * Execute getExpiredInboxRecord request with HTTP info returned
         * @return ApiResponse&lt;ExpiredInboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExpiredInboxDto> executeWithHttpInfo() throws ApiException {
            return getExpiredInboxRecordWithHttpInfo(expiredId);
        }

        /**
         * Execute getExpiredInboxRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExpiredInboxDto> _callback) throws ApiException {
            return getExpiredInboxRecordAsync(expiredId, _callback);
        }
    }

    /**
     * Get an expired inbox record
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     * @param expiredId ID of the ExpiredInboxRecord you want to retrieve. This is different from the ID of the inbox you are interested in. See other methods for getting ExpiredInboxRecord for an inbox inboxId (required)
     * @return APIgetExpiredInboxRecordRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExpiredInboxRecordRequest getExpiredInboxRecord(@javax.annotation.Nonnull UUID expiredId) {
        return new APIgetExpiredInboxRecordRequest(expiredId);
    }
    private okhttp3.Call getExpiredInboxesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/expired";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExpiredInboxesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getExpiredInboxesCall(page, size, sort, since, before, inboxId, _callback);

    }


    private ApiResponse<PageExpiredInboxRecordProjection> getExpiredInboxesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getExpiredInboxesValidateBeforeCall(page, size, sort, since, before, inboxId, null);
        Type localVarReturnType = new TypeToken<PageExpiredInboxRecordProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExpiredInboxesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback<PageExpiredInboxRecordProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExpiredInboxesValidateBeforeCall(page, size, sort, since, before, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PageExpiredInboxRecordProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExpiredInboxesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetExpiredInboxesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in inbox sent email list pagination (optional, default to 0)
         * @return APIgetExpiredInboxesRequest
         */
        public APIgetExpiredInboxesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox sent email list pagination (optional, default to 20)
         * @return APIgetExpiredInboxesRequest
         */
        public APIgetExpiredInboxesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetExpiredInboxesRequest
         */
        public APIgetExpiredInboxesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetExpiredInboxesRequest
         */
        public APIgetExpiredInboxesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetExpiredInboxesRequest
         */
        public APIgetExpiredInboxesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optionally filter by inbox ID (optional)
         * @return APIgetExpiredInboxesRequest
         */
        public APIgetExpiredInboxesRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getExpiredInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExpiredInboxesCall(page, size, sort, since, before, inboxId, _callback);
        }

        /**
         * Execute getExpiredInboxes request
         * @return PageExpiredInboxRecordProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageExpiredInboxRecordProjection execute() throws ApiException {
            ApiResponse<PageExpiredInboxRecordProjection> localVarResp = getExpiredInboxesWithHttpInfo(page, size, sort, since, before, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getExpiredInboxes request with HTTP info returned
         * @return ApiResponse&lt;PageExpiredInboxRecordProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageExpiredInboxRecordProjection> executeWithHttpInfo() throws ApiException {
            return getExpiredInboxesWithHttpInfo(page, size, sort, since, before, inboxId);
        }

        /**
         * Execute getExpiredInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageExpiredInboxRecordProjection> _callback) throws ApiException {
            return getExpiredInboxesAsync(page, size, sort, since, before, inboxId, _callback);
        }
    }

    /**
     * List records of expired inboxes
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     * @return APIgetExpiredInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExpiredInboxesRequest getExpiredInboxes() {
        return new APIgetExpiredInboxesRequest();
    }
}
