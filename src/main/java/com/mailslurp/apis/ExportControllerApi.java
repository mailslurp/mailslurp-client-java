/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.ExportLink;
import com.mailslurp.models.ExportOptions;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ExportControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call exportEntitiesCall(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull String apiKey, @javax.annotation.Nonnull String outputFormat, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String listSeparatorToken, @javax.annotation.Nullable Boolean excludePreviouslyExported, @javax.annotation.Nullable OffsetDateTime createdEarliestTime, @javax.annotation.Nullable OffsetDateTime createdOldestTime, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportType", exportType));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (listSeparatorToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listSeparatorToken", listSeparatorToken));
        }

        if (excludePreviouslyExported != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludePreviouslyExported", excludePreviouslyExported));
        }

        if (createdEarliestTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdEarliestTime", createdEarliestTime));
        }

        if (createdOldestTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdOldestTime", createdOldestTime));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportEntitiesValidateBeforeCall(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull String apiKey, @javax.annotation.Nonnull String outputFormat, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String listSeparatorToken, @javax.annotation.Nullable Boolean excludePreviouslyExported, @javax.annotation.Nullable OffsetDateTime createdEarliestTime, @javax.annotation.Nullable OffsetDateTime createdOldestTime, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportType' is set
        if (exportType == null) {
            throw new ApiException("Missing the required parameter 'exportType' when calling exportEntities(Async)");
        }

        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling exportEntities(Async)");
        }

        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling exportEntities(Async)");
        }

        return exportEntitiesCall(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime, _callback);

    }


    private ApiResponse<byte[]> exportEntitiesWithHttpInfo(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull String apiKey, @javax.annotation.Nonnull String outputFormat, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String listSeparatorToken, @javax.annotation.Nullable Boolean excludePreviouslyExported, @javax.annotation.Nullable OffsetDateTime createdEarliestTime, @javax.annotation.Nullable OffsetDateTime createdOldestTime) throws ApiException {
        okhttp3.Call localVarCall = exportEntitiesValidateBeforeCall(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exportEntitiesAsync(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull String apiKey, @javax.annotation.Nonnull String outputFormat, @javax.annotation.Nullable String filter, @javax.annotation.Nullable String listSeparatorToken, @javax.annotation.Nullable Boolean excludePreviouslyExported, @javax.annotation.Nullable OffsetDateTime createdEarliestTime, @javax.annotation.Nullable OffsetDateTime createdOldestTime, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportEntitiesValidateBeforeCall(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIexportEntitiesRequest {
        @javax.annotation.Nonnull
        private final String exportType;
        @javax.annotation.Nonnull
        private final String apiKey;
        @javax.annotation.Nonnull
        private final String outputFormat;
        @javax.annotation.Nullable
        private String filter;
        @javax.annotation.Nullable
        private String listSeparatorToken;
        @javax.annotation.Nullable
        private Boolean excludePreviouslyExported;
        @javax.annotation.Nullable
        private OffsetDateTime createdEarliestTime;
        @javax.annotation.Nullable
        private OffsetDateTime createdOldestTime;

        private APIexportEntitiesRequest(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull String apiKey, @javax.annotation.Nonnull String outputFormat) {
            this.exportType = exportType;
            this.apiKey = apiKey;
            this.outputFormat = outputFormat;
        }

        /**
         * Set filter
         * @param filter  (optional)
         * @return APIexportEntitiesRequest
         */
        public APIexportEntitiesRequest filter(@javax.annotation.Nullable String filter) {
            this.filter = filter;
            return this;
        }

        /**
         * Set listSeparatorToken
         * @param listSeparatorToken  (optional)
         * @return APIexportEntitiesRequest
         */
        public APIexportEntitiesRequest listSeparatorToken(@javax.annotation.Nullable String listSeparatorToken) {
            this.listSeparatorToken = listSeparatorToken;
            return this;
        }

        /**
         * Set excludePreviouslyExported
         * @param excludePreviouslyExported  (optional)
         * @return APIexportEntitiesRequest
         */
        public APIexportEntitiesRequest excludePreviouslyExported(@javax.annotation.Nullable Boolean excludePreviouslyExported) {
            this.excludePreviouslyExported = excludePreviouslyExported;
            return this;
        }

        /**
         * Set createdEarliestTime
         * @param createdEarliestTime  (optional)
         * @return APIexportEntitiesRequest
         */
        public APIexportEntitiesRequest createdEarliestTime(@javax.annotation.Nullable OffsetDateTime createdEarliestTime) {
            this.createdEarliestTime = createdEarliestTime;
            return this;
        }

        /**
         * Set createdOldestTime
         * @param createdOldestTime  (optional)
         * @return APIexportEntitiesRequest
         */
        public APIexportEntitiesRequest createdOldestTime(@javax.annotation.Nullable OffsetDateTime createdOldestTime) {
            this.createdOldestTime = createdOldestTime;
            return this;
        }

        /**
         * Build call for exportEntities
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exportEntitiesCall(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime, _callback);
        }

        /**
         * Execute exportEntities request
         * @return byte[]
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public byte[] execute() throws ApiException {
            ApiResponse<byte[]> localVarResp = exportEntitiesWithHttpInfo(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime);
            return localVarResp.getData();
        }

        /**
         * Execute exportEntities request with HTTP info returned
         * @return ApiResponse&lt;byte[]&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<byte[]> executeWithHttpInfo() throws ApiException {
            return exportEntitiesWithHttpInfo(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime);
        }

        /**
         * Execute exportEntities request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<byte[]> _callback) throws ApiException {
            return exportEntitiesAsync(exportType, apiKey, outputFormat, filter, listSeparatorToken, excludePreviouslyExported, createdEarliestTime, createdOldestTime, _callback);
        }
    }

    /**
     * Export inboxes link callable via browser
     * 
     * @param exportType  (required)
     * @param apiKey  (required)
     * @param outputFormat  (required)
     * @return APIexportEntitiesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIexportEntitiesRequest exportEntities(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull String apiKey, @javax.annotation.Nonnull String outputFormat) {
        return new APIexportEntitiesRequest(exportType, apiKey, outputFormat);
    }
    private okhttp3.Call getExportLinkCall(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull ExportOptions exportOptions, @javax.annotation.Nullable String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = exportOptions;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportType", exportType));
        }

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportLinkValidateBeforeCall(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull ExportOptions exportOptions, @javax.annotation.Nullable String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'exportType' is set
        if (exportType == null) {
            throw new ApiException("Missing the required parameter 'exportType' when calling getExportLink(Async)");
        }

        // verify the required parameter 'exportOptions' is set
        if (exportOptions == null) {
            throw new ApiException("Missing the required parameter 'exportOptions' when calling getExportLink(Async)");
        }

        return getExportLinkCall(exportType, exportOptions, apiKey, _callback);

    }


    private ApiResponse<ExportLink> getExportLinkWithHttpInfo(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull ExportOptions exportOptions, @javax.annotation.Nullable String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getExportLinkValidateBeforeCall(exportType, exportOptions, apiKey, null);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getExportLinkAsync(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull ExportOptions exportOptions, @javax.annotation.Nullable String apiKey, final ApiCallback<ExportLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportLinkValidateBeforeCall(exportType, exportOptions, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetExportLinkRequest {
        @javax.annotation.Nonnull
        private final String exportType;
        @javax.annotation.Nonnull
        private final ExportOptions exportOptions;
        @javax.annotation.Nullable
        private String apiKey;

        private APIgetExportLinkRequest(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull ExportOptions exportOptions) {
            this.exportType = exportType;
            this.exportOptions = exportOptions;
        }

        /**
         * Set apiKey
         * @param apiKey  (optional)
         * @return APIgetExportLinkRequest
         */
        public APIgetExportLinkRequest apiKey(@javax.annotation.Nullable String apiKey) {
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Build call for getExportLink
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getExportLinkCall(exportType, exportOptions, apiKey, _callback);
        }

        /**
         * Execute getExportLink request
         * @return ExportLink
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ExportLink execute() throws ApiException {
            ApiResponse<ExportLink> localVarResp = getExportLinkWithHttpInfo(exportType, exportOptions, apiKey);
            return localVarResp.getData();
        }

        /**
         * Execute getExportLink request with HTTP info returned
         * @return ApiResponse&lt;ExportLink&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ExportLink> executeWithHttpInfo() throws ApiException {
            return getExportLinkWithHttpInfo(exportType, exportOptions, apiKey);
        }

        /**
         * Execute getExportLink request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ExportLink> _callback) throws ApiException {
            return getExportLinkAsync(exportType, exportOptions, apiKey, _callback);
        }
    }

    /**
     * Get export link
     * 
     * @param exportType  (required)
     * @param exportOptions  (required)
     * @return APIgetExportLinkRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetExportLinkRequest getExportLink(@javax.annotation.Nonnull String exportType, @javax.annotation.Nonnull ExportOptions exportOptions) {
        return new APIgetExportLinkRequest(exportType, exportOptions);
    }
}
