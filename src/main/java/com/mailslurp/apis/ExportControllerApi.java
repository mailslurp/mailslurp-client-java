/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.ExportLink;
import com.mailslurp.models.ExportOptions;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ExportControllerApi {
    private ApiClient localVarApiClient;

    public ExportControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ExportControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for exportEntities
     * @param apiKey apiKey (required)
     * @param exportType exportType (required)
     * @param outputFormat outputFormat (required)
     * @param createdEarliestTime createdEarliestTime (optional)
     * @param createdOldestTime createdOldestTime (optional)
     * @param excludePreviouslyExported excludePreviouslyExported (optional)
     * @param filter filter (optional)
     * @param listSeparatorToken listSeparatorToken (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportEntitiesCall(String apiKey, String exportType, String outputFormat, OffsetDateTime createdEarliestTime, OffsetDateTime createdOldestTime, Boolean excludePreviouslyExported, String filter, String listSeparatorToken, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        if (createdEarliestTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdEarliestTime", createdEarliestTime));
        }

        if (createdOldestTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("createdOldestTime", createdOldestTime));
        }

        if (excludePreviouslyExported != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludePreviouslyExported", excludePreviouslyExported));
        }

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportType", exportType));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (listSeparatorToken != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listSeparatorToken", listSeparatorToken));
        }

        if (outputFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("outputFormat", outputFormat));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exportEntitiesValidateBeforeCall(String apiKey, String exportType, String outputFormat, OffsetDateTime createdEarliestTime, OffsetDateTime createdOldestTime, Boolean excludePreviouslyExported, String filter, String listSeparatorToken, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKey' is set
        if (apiKey == null) {
            throw new ApiException("Missing the required parameter 'apiKey' when calling exportEntities(Async)");
        }
        
        // verify the required parameter 'exportType' is set
        if (exportType == null) {
            throw new ApiException("Missing the required parameter 'exportType' when calling exportEntities(Async)");
        }
        
        // verify the required parameter 'outputFormat' is set
        if (outputFormat == null) {
            throw new ApiException("Missing the required parameter 'outputFormat' when calling exportEntities(Async)");
        }
        

        okhttp3.Call localVarCall = exportEntitiesCall(apiKey, exportType, outputFormat, createdEarliestTime, createdOldestTime, excludePreviouslyExported, filter, listSeparatorToken, _callback);
        return localVarCall;

    }

    /**
     * Export inboxes link callable via browser
     * 
     * @param apiKey apiKey (required)
     * @param exportType exportType (required)
     * @param outputFormat outputFormat (required)
     * @param createdEarliestTime createdEarliestTime (optional)
     * @param createdOldestTime createdOldestTime (optional)
     * @param excludePreviouslyExported excludePreviouslyExported (optional)
     * @param filter filter (optional)
     * @param listSeparatorToken listSeparatorToken (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public byte[] exportEntities(String apiKey, String exportType, String outputFormat, OffsetDateTime createdEarliestTime, OffsetDateTime createdOldestTime, Boolean excludePreviouslyExported, String filter, String listSeparatorToken) throws ApiException {
        ApiResponse<byte[]> localVarResp = exportEntitiesWithHttpInfo(apiKey, exportType, outputFormat, createdEarliestTime, createdOldestTime, excludePreviouslyExported, filter, listSeparatorToken);
        return localVarResp.getData();
    }

    /**
     * Export inboxes link callable via browser
     * 
     * @param apiKey apiKey (required)
     * @param exportType exportType (required)
     * @param outputFormat outputFormat (required)
     * @param createdEarliestTime createdEarliestTime (optional)
     * @param createdOldestTime createdOldestTime (optional)
     * @param excludePreviouslyExported excludePreviouslyExported (optional)
     * @param filter filter (optional)
     * @param listSeparatorToken listSeparatorToken (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<byte[]> exportEntitiesWithHttpInfo(String apiKey, String exportType, String outputFormat, OffsetDateTime createdEarliestTime, OffsetDateTime createdOldestTime, Boolean excludePreviouslyExported, String filter, String listSeparatorToken) throws ApiException {
        okhttp3.Call localVarCall = exportEntitiesValidateBeforeCall(apiKey, exportType, outputFormat, createdEarliestTime, createdOldestTime, excludePreviouslyExported, filter, listSeparatorToken, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export inboxes link callable via browser (asynchronously)
     * 
     * @param apiKey apiKey (required)
     * @param exportType exportType (required)
     * @param outputFormat outputFormat (required)
     * @param createdEarliestTime createdEarliestTime (optional)
     * @param createdOldestTime createdOldestTime (optional)
     * @param excludePreviouslyExported excludePreviouslyExported (optional)
     * @param filter filter (optional)
     * @param listSeparatorToken listSeparatorToken (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call exportEntitiesAsync(String apiKey, String exportType, String outputFormat, OffsetDateTime createdEarliestTime, OffsetDateTime createdOldestTime, Boolean excludePreviouslyExported, String filter, String listSeparatorToken, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = exportEntitiesValidateBeforeCall(apiKey, exportType, outputFormat, createdEarliestTime, createdOldestTime, excludePreviouslyExported, filter, listSeparatorToken, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getExportLink
     * @param exportType exportType (required)
     * @param exportOptions exportOptions (required)
     * @param apiKey apiKey (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportLinkCall(String exportType, ExportOptions exportOptions, String apiKey, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = exportOptions;

        // create path and map variables
        String localVarPath = "/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        if (exportType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("exportType", exportType));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getExportLinkValidateBeforeCall(String exportType, ExportOptions exportOptions, String apiKey, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'exportType' is set
        if (exportType == null) {
            throw new ApiException("Missing the required parameter 'exportType' when calling getExportLink(Async)");
        }
        
        // verify the required parameter 'exportOptions' is set
        if (exportOptions == null) {
            throw new ApiException("Missing the required parameter 'exportOptions' when calling getExportLink(Async)");
        }
        

        okhttp3.Call localVarCall = getExportLinkCall(exportType, exportOptions, apiKey, _callback);
        return localVarCall;

    }

    /**
     * Get export link
     * 
     * @param exportType exportType (required)
     * @param exportOptions exportOptions (required)
     * @param apiKey apiKey (optional)
     * @return ExportLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ExportLink getExportLink(String exportType, ExportOptions exportOptions, String apiKey) throws ApiException {
        ApiResponse<ExportLink> localVarResp = getExportLinkWithHttpInfo(exportType, exportOptions, apiKey);
        return localVarResp.getData();
    }

    /**
     * Get export link
     * 
     * @param exportType exportType (required)
     * @param exportOptions exportOptions (required)
     * @param apiKey apiKey (optional)
     * @return ApiResponse&lt;ExportLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportLink> getExportLinkWithHttpInfo(String exportType, ExportOptions exportOptions, String apiKey) throws ApiException {
        okhttp3.Call localVarCall = getExportLinkValidateBeforeCall(exportType, exportOptions, apiKey, null);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get export link (asynchronously)
     * 
     * @param exportType exportType (required)
     * @param exportOptions exportOptions (required)
     * @param apiKey apiKey (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getExportLinkAsync(String exportType, ExportOptions exportOptions, String apiKey, final ApiCallback<ExportLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = getExportLinkValidateBeforeCall(exportType, exportOptions, apiKey, _callback);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
