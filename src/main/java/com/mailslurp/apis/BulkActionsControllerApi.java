/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.BulkSendEmailOptions;
import com.mailslurp.models.InboxDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BulkActionsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BulkActionsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BulkActionsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call bulkCreateInboxesCall(@javax.annotation.Nonnull Integer count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/bulk/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkCreateInboxesValidateBeforeCall(@javax.annotation.Nonnull Integer count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling bulkCreateInboxes(Async)");
        }

        return bulkCreateInboxesCall(count, _callback);

    }


    private ApiResponse<List<InboxDto>> bulkCreateInboxesWithHttpInfo(@javax.annotation.Nonnull Integer count) throws ApiException {
        okhttp3.Call localVarCall = bulkCreateInboxesValidateBeforeCall(count, null);
        Type localVarReturnType = new TypeToken<List<InboxDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call bulkCreateInboxesAsync(@javax.annotation.Nonnull Integer count, final ApiCallback<List<InboxDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkCreateInboxesValidateBeforeCall(count, _callback);
        Type localVarReturnType = new TypeToken<List<InboxDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIbulkCreateInboxesRequest {
        @javax.annotation.Nonnull
        private final Integer count;

        private APIbulkCreateInboxesRequest(@javax.annotation.Nonnull Integer count) {
            this.count = count;
        }

        /**
         * Build call for bulkCreateInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkCreateInboxesCall(count, _callback);
        }

        /**
         * Execute bulkCreateInboxes request
         * @return List&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public List<InboxDto> execute() throws ApiException {
            ApiResponse<List<InboxDto>> localVarResp = bulkCreateInboxesWithHttpInfo(count);
            return localVarResp.getData();
        }

        /**
         * Execute bulkCreateInboxes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InboxDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<InboxDto>> executeWithHttpInfo() throws ApiException {
            return bulkCreateInboxesWithHttpInfo(count);
        }

        /**
         * Execute bulkCreateInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<InboxDto>> _callback) throws ApiException {
            return bulkCreateInboxesAsync(count, _callback);
        }
    }

    /**
     * Bulk create Inboxes (email addresses)
     * 
     * @param count Number of inboxes to be created in bulk (required)
     * @return APIbulkCreateInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIbulkCreateInboxesRequest bulkCreateInboxes(@javax.annotation.Nonnull Integer count) {
        return new APIbulkCreateInboxesRequest(count);
    }
    private okhttp3.Call bulkDeleteInboxesCall(@javax.annotation.Nonnull List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = UUID;

        // create path and map variables
        String localVarPath = "/bulk/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkDeleteInboxesValidateBeforeCall(@javax.annotation.Nonnull List<UUID> UUID, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'UUID' is set
        if (UUID == null) {
            throw new ApiException("Missing the required parameter 'UUID' when calling bulkDeleteInboxes(Async)");
        }

        return bulkDeleteInboxesCall(UUID, _callback);

    }


    private ApiResponse<Void> bulkDeleteInboxesWithHttpInfo(@javax.annotation.Nonnull List<UUID> UUID) throws ApiException {
        okhttp3.Call localVarCall = bulkDeleteInboxesValidateBeforeCall(UUID, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkDeleteInboxesAsync(@javax.annotation.Nonnull List<UUID> UUID, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkDeleteInboxesValidateBeforeCall(UUID, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIbulkDeleteInboxesRequest {
        @javax.annotation.Nonnull
        private final List<UUID> UUID;

        private APIbulkDeleteInboxesRequest(@javax.annotation.Nonnull List<UUID> UUID) {
            this.UUID = UUID;
        }

        /**
         * Build call for bulkDeleteInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkDeleteInboxesCall(UUID, _callback);
        }

        /**
         * Execute bulkDeleteInboxes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            bulkDeleteInboxesWithHttpInfo(UUID);
        }

        /**
         * Execute bulkDeleteInboxes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return bulkDeleteInboxesWithHttpInfo(UUID);
        }

        /**
         * Execute bulkDeleteInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return bulkDeleteInboxesAsync(UUID, _callback);
        }
    }

    /**
     * Bulk Delete Inboxes
     * 
     * @param UUID  (required)
     * @return APIbulkDeleteInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIbulkDeleteInboxesRequest bulkDeleteInboxes(@javax.annotation.Nonnull List<UUID> UUID) {
        return new APIbulkDeleteInboxesRequest(UUID);
    }
    private okhttp3.Call bulkSendEmailsCall(@javax.annotation.Nonnull BulkSendEmailOptions bulkSendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = bulkSendEmailOptions;

        // create path and map variables
        String localVarPath = "/bulk/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSendEmailsValidateBeforeCall(@javax.annotation.Nonnull BulkSendEmailOptions bulkSendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'bulkSendEmailOptions' is set
        if (bulkSendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'bulkSendEmailOptions' when calling bulkSendEmails(Async)");
        }

        return bulkSendEmailsCall(bulkSendEmailOptions, _callback);

    }


    private ApiResponse<Void> bulkSendEmailsWithHttpInfo(@javax.annotation.Nonnull BulkSendEmailOptions bulkSendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = bulkSendEmailsValidateBeforeCall(bulkSendEmailOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call bulkSendEmailsAsync(@javax.annotation.Nonnull BulkSendEmailOptions bulkSendEmailOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSendEmailsValidateBeforeCall(bulkSendEmailOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIbulkSendEmailsRequest {
        @javax.annotation.Nonnull
        private final BulkSendEmailOptions bulkSendEmailOptions;

        private APIbulkSendEmailsRequest(@javax.annotation.Nonnull BulkSendEmailOptions bulkSendEmailOptions) {
            this.bulkSendEmailOptions = bulkSendEmailOptions;
        }

        /**
         * Build call for bulkSendEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return bulkSendEmailsCall(bulkSendEmailOptions, _callback);
        }

        /**
         * Execute bulkSendEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            bulkSendEmailsWithHttpInfo(bulkSendEmailOptions);
        }

        /**
         * Execute bulkSendEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return bulkSendEmailsWithHttpInfo(bulkSendEmailOptions);
        }

        /**
         * Execute bulkSendEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return bulkSendEmailsAsync(bulkSendEmailOptions, _callback);
        }
    }

    /**
     * Bulk Send Emails
     * 
     * @param bulkSendEmailOptions  (required)
     * @return APIbulkSendEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIbulkSendEmailsRequest bulkSendEmails(@javax.annotation.Nonnull BulkSendEmailOptions bulkSendEmailOptions) {
        return new APIbulkSendEmailsRequest(bulkSendEmailOptions);
    }
}
