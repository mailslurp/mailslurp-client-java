/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.AliasDto;
import com.mailslurp.models.AliasThreadProjection;
import com.mailslurp.models.CreateAliasOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageAlias;
import com.mailslurp.models.PageAliasThreadProjection;
import com.mailslurp.models.PageEmailProjection;
import com.mailslurp.models.ReplyToAliasEmailOptions;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;
import com.mailslurp.models.UpdateAliasOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AliasControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AliasControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AliasControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createAliasCall(@javax.annotation.Nonnull CreateAliasOptions createAliasOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAliasOptions;

        // create path and map variables
        String localVarPath = "/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAliasValidateBeforeCall(@javax.annotation.Nonnull CreateAliasOptions createAliasOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAliasOptions' is set
        if (createAliasOptions == null) {
            throw new ApiException("Missing the required parameter 'createAliasOptions' when calling createAlias(Async)");
        }

        return createAliasCall(createAliasOptions, _callback);

    }


    private ApiResponse<AliasDto> createAliasWithHttpInfo(@javax.annotation.Nonnull CreateAliasOptions createAliasOptions) throws ApiException {
        okhttp3.Call localVarCall = createAliasValidateBeforeCall(createAliasOptions, null);
        Type localVarReturnType = new TypeToken<AliasDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createAliasAsync(@javax.annotation.Nonnull CreateAliasOptions createAliasOptions, final ApiCallback<AliasDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAliasValidateBeforeCall(createAliasOptions, _callback);
        Type localVarReturnType = new TypeToken<AliasDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateAliasRequest {
        @javax.annotation.Nonnull
        private final CreateAliasOptions createAliasOptions;

        private APIcreateAliasRequest(@javax.annotation.Nonnull CreateAliasOptions createAliasOptions) {
            this.createAliasOptions = createAliasOptions;
        }

        /**
         * Build call for createAlias
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createAliasCall(createAliasOptions, _callback);
        }

        /**
         * Execute createAlias request
         * @return AliasDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public AliasDto execute() throws ApiException {
            ApiResponse<AliasDto> localVarResp = createAliasWithHttpInfo(createAliasOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createAlias request with HTTP info returned
         * @return ApiResponse&lt;AliasDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AliasDto> executeWithHttpInfo() throws ApiException {
            return createAliasWithHttpInfo(createAliasOptions);
        }

        /**
         * Execute createAlias request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AliasDto> _callback) throws ApiException {
            return createAliasAsync(createAliasOptions, _callback);
        }
    }

    /**
     * Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     * @param createAliasOptions  (required)
     * @return APIcreateAliasRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateAliasRequest createAlias(@javax.annotation.Nonnull CreateAliasOptions createAliasOptions) {
        return new APIcreateAliasRequest(createAliasOptions);
    }
    private okhttp3.Call deleteAliasCall(@javax.annotation.Nonnull UUID aliasId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAliasValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling deleteAlias(Async)");
        }

        return deleteAliasCall(aliasId, _callback);

    }


    private ApiResponse<Void> deleteAliasWithHttpInfo(@javax.annotation.Nonnull UUID aliasId) throws ApiException {
        okhttp3.Call localVarCall = deleteAliasValidateBeforeCall(aliasId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAliasAsync(@javax.annotation.Nonnull UUID aliasId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAliasValidateBeforeCall(aliasId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAliasRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;

        private APIdeleteAliasRequest(@javax.annotation.Nonnull UUID aliasId) {
            this.aliasId = aliasId;
        }

        /**
         * Build call for deleteAlias
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAliasCall(aliasId, _callback);
        }

        /**
         * Execute deleteAlias request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAliasWithHttpInfo(aliasId);
        }

        /**
         * Execute deleteAlias request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAliasWithHttpInfo(aliasId);
        }

        /**
         * Execute deleteAlias request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAliasAsync(aliasId, _callback);
        }
    }

    /**
     * Delete an email alias
     * 
     * @param aliasId  (required)
     * @return APIdeleteAliasRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAliasRequest deleteAlias(@javax.annotation.Nonnull UUID aliasId) {
        return new APIdeleteAliasRequest(aliasId);
    }
    private okhttp3.Call getAliasCall(@javax.annotation.Nonnull UUID aliasId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAliasValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling getAlias(Async)");
        }

        return getAliasCall(aliasId, _callback);

    }


    private ApiResponse<AliasDto> getAliasWithHttpInfo(@javax.annotation.Nonnull UUID aliasId) throws ApiException {
        okhttp3.Call localVarCall = getAliasValidateBeforeCall(aliasId, null);
        Type localVarReturnType = new TypeToken<AliasDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAliasAsync(@javax.annotation.Nonnull UUID aliasId, final ApiCallback<AliasDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAliasValidateBeforeCall(aliasId, _callback);
        Type localVarReturnType = new TypeToken<AliasDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAliasRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;

        private APIgetAliasRequest(@javax.annotation.Nonnull UUID aliasId) {
            this.aliasId = aliasId;
        }

        /**
         * Build call for getAlias
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAliasCall(aliasId, _callback);
        }

        /**
         * Execute getAlias request
         * @return AliasDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AliasDto execute() throws ApiException {
            ApiResponse<AliasDto> localVarResp = getAliasWithHttpInfo(aliasId);
            return localVarResp.getData();
        }

        /**
         * Execute getAlias request with HTTP info returned
         * @return ApiResponse&lt;AliasDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AliasDto> executeWithHttpInfo() throws ApiException {
            return getAliasWithHttpInfo(aliasId);
        }

        /**
         * Execute getAlias request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AliasDto> _callback) throws ApiException {
            return getAliasAsync(aliasId, _callback);
        }
    }

    /**
     * Get an email alias
     * Get an email alias by ID
     * @param aliasId  (required)
     * @return APIgetAliasRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAliasRequest getAlias(@javax.annotation.Nonnull UUID aliasId) {
        return new APIgetAliasRequest(aliasId);
    }
    private okhttp3.Call getAliasEmailsCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}/emails"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAliasEmailsValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling getAliasEmails(Async)");
        }

        return getAliasEmailsCall(aliasId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageEmailProjection> getAliasEmailsWithHttpInfo(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getAliasEmailsValidateBeforeCall(aliasId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAliasEmailsAsync(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAliasEmailsValidateBeforeCall(aliasId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAliasEmailsRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetAliasEmailsRequest(@javax.annotation.Nonnull UUID aliasId) {
            this.aliasId = aliasId;
        }

        /**
         * Set page
         * @param page Optional page index alias email list pagination (optional, default to 0)
         * @return APIgetAliasEmailsRequest
         */
        public APIgetAliasEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size alias email list pagination (optional, default to 20)
         * @return APIgetAliasEmailsRequest
         */
        public APIgetAliasEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAliasEmailsRequest
         */
        public APIgetAliasEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by sent after given date time (optional)
         * @return APIgetAliasEmailsRequest
         */
        public APIgetAliasEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by sent before given date time (optional)
         * @return APIgetAliasEmailsRequest
         */
        public APIgetAliasEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getAliasEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAliasEmailsCall(aliasId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getAliasEmails request
         * @return PageEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailProjection execute() throws ApiException {
            ApiResponse<PageEmailProjection> localVarResp = getAliasEmailsWithHttpInfo(aliasId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getAliasEmails request with HTTP info returned
         * @return ApiResponse&lt;PageEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailProjection> executeWithHttpInfo() throws ApiException {
            return getAliasEmailsWithHttpInfo(aliasId, page, size, sort, since, before);
        }

        /**
         * Execute getAliasEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailProjection> _callback) throws ApiException {
            return getAliasEmailsAsync(aliasId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get emails for an alias
     * Get paginated emails for an alias by ID
     * @param aliasId  (required)
     * @return APIgetAliasEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAliasEmailsRequest getAliasEmails(@javax.annotation.Nonnull UUID aliasId) {
        return new APIgetAliasEmailsRequest(aliasId);
    }
    private okhttp3.Call getAliasThreadsCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}/threads"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAliasThreadsValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling getAliasThreads(Async)");
        }

        return getAliasThreadsCall(aliasId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageAliasThreadProjection> getAliasThreadsWithHttpInfo(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getAliasThreadsValidateBeforeCall(aliasId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageAliasThreadProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAliasThreadsAsync(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageAliasThreadProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAliasThreadsValidateBeforeCall(aliasId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageAliasThreadProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAliasThreadsRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetAliasThreadsRequest(@javax.annotation.Nonnull UUID aliasId) {
            this.aliasId = aliasId;
        }

        /**
         * Set page
         * @param page Optional page index in thread list pagination (optional, default to 0)
         * @return APIgetAliasThreadsRequest
         */
        public APIgetAliasThreadsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in thread list pagination (optional, default to 20)
         * @return APIgetAliasThreadsRequest
         */
        public APIgetAliasThreadsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAliasThreadsRequest
         */
        public APIgetAliasThreadsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by sent after given date time (optional)
         * @return APIgetAliasThreadsRequest
         */
        public APIgetAliasThreadsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by sent before given date time (optional)
         * @return APIgetAliasThreadsRequest
         */
        public APIgetAliasThreadsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getAliasThreads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAliasThreadsCall(aliasId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getAliasThreads request
         * @return PageAliasThreadProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAliasThreadProjection execute() throws ApiException {
            ApiResponse<PageAliasThreadProjection> localVarResp = getAliasThreadsWithHttpInfo(aliasId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getAliasThreads request with HTTP info returned
         * @return ApiResponse&lt;PageAliasThreadProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAliasThreadProjection> executeWithHttpInfo() throws ApiException {
            return getAliasThreadsWithHttpInfo(aliasId, page, size, sort, since, before);
        }

        /**
         * Execute getAliasThreads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAliasThreadProjection> _callback) throws ApiException {
            return getAliasThreadsAsync(aliasId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get threads created for an alias
     * Returns threads created for an email alias in paginated form
     * @param aliasId  (required)
     * @return APIgetAliasThreadsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAliasThreadsRequest getAliasThreads(@javax.annotation.Nonnull UUID aliasId) {
        return new APIgetAliasThreadsRequest(aliasId);
    }
    private okhttp3.Call getAliasesCall(@javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAliasesValidateBeforeCall(@javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getAliasesCall(search, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageAlias> getAliasesWithHttpInfo(@javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getAliasesValidateBeforeCall(search, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageAlias>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAliasesAsync(@javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageAlias> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAliasesValidateBeforeCall(search, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageAlias>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAliasesRequest {
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetAliasesRequest() {
        }

        /**
         * Set search
         * @param search Optional search term (optional)
         * @return APIgetAliasesRequest
         */
        public APIgetAliasesRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in alias list pagination (optional, default to 0)
         * @return APIgetAliasesRequest
         */
        public APIgetAliasesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in alias list pagination (optional, default to 20)
         * @return APIgetAliasesRequest
         */
        public APIgetAliasesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAliasesRequest
         */
        public APIgetAliasesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAliasesRequest
         */
        public APIgetAliasesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAliasesRequest
         */
        public APIgetAliasesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getAliases
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAliasesCall(search, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getAliases request
         * @return PageAlias
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAlias execute() throws ApiException {
            ApiResponse<PageAlias> localVarResp = getAliasesWithHttpInfo(search, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getAliases request with HTTP info returned
         * @return ApiResponse&lt;PageAlias&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAlias> executeWithHttpInfo() throws ApiException {
            return getAliasesWithHttpInfo(search, page, size, sort, since, before);
        }

        /**
         * Execute getAliases request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAlias> _callback) throws ApiException {
            return getAliasesAsync(search, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get all email aliases you have created
     * Get all email aliases in paginated form
     * @return APIgetAliasesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAliasesRequest getAliases() {
        return new APIgetAliasesRequest();
    }
    private okhttp3.Call getThreadCall(@javax.annotation.Nonnull UUID threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/threads/{threadId}"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThreadValidateBeforeCall(@javax.annotation.Nonnull UUID threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling getThread(Async)");
        }

        return getThreadCall(threadId, _callback);

    }


    private ApiResponse<AliasThreadProjection> getThreadWithHttpInfo(@javax.annotation.Nonnull UUID threadId) throws ApiException {
        okhttp3.Call localVarCall = getThreadValidateBeforeCall(threadId, null);
        Type localVarReturnType = new TypeToken<AliasThreadProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThreadAsync(@javax.annotation.Nonnull UUID threadId, final ApiCallback<AliasThreadProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThreadValidateBeforeCall(threadId, _callback);
        Type localVarReturnType = new TypeToken<AliasThreadProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetThreadRequest {
        @javax.annotation.Nonnull
        private final UUID threadId;

        private APIgetThreadRequest(@javax.annotation.Nonnull UUID threadId) {
            this.threadId = threadId;
        }

        /**
         * Build call for getThread
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThreadCall(threadId, _callback);
        }

        /**
         * Execute getThread request
         * @return AliasThreadProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AliasThreadProjection execute() throws ApiException {
            ApiResponse<AliasThreadProjection> localVarResp = getThreadWithHttpInfo(threadId);
            return localVarResp.getData();
        }

        /**
         * Execute getThread request with HTTP info returned
         * @return ApiResponse&lt;AliasThreadProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AliasThreadProjection> executeWithHttpInfo() throws ApiException {
            return getThreadWithHttpInfo(threadId);
        }

        /**
         * Execute getThread request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AliasThreadProjection> _callback) throws ApiException {
            return getThreadAsync(threadId, _callback);
        }
    }

    /**
     * Get a thread
     * Return a thread associated with an alias
     * @param threadId  (required)
     * @return APIgetThreadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetThreadRequest getThread(@javax.annotation.Nonnull UUID threadId) {
        return new APIgetThreadRequest(threadId);
    }
    private okhttp3.Call getThreadsPaginatedCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/aliases/threads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getThreadsPaginatedValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getThreadsPaginatedCall(page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageAliasThreadProjection> getThreadsPaginatedWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getThreadsPaginatedValidateBeforeCall(page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageAliasThreadProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getThreadsPaginatedAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageAliasThreadProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getThreadsPaginatedValidateBeforeCall(page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageAliasThreadProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetThreadsPaginatedRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetThreadsPaginatedRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in thread list pagination (optional, default to 0)
         * @return APIgetThreadsPaginatedRequest
         */
        public APIgetThreadsPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in thread list pagination (optional, default to 20)
         * @return APIgetThreadsPaginatedRequest
         */
        public APIgetThreadsPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetThreadsPaginatedRequest
         */
        public APIgetThreadsPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by sent after given date time (optional)
         * @return APIgetThreadsPaginatedRequest
         */
        public APIgetThreadsPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by sent before given date time (optional)
         * @return APIgetThreadsPaginatedRequest
         */
        public APIgetThreadsPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getThreadsPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getThreadsPaginatedCall(page, size, sort, since, before, _callback);
        }

        /**
         * Execute getThreadsPaginated request
         * @return PageAliasThreadProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAliasThreadProjection execute() throws ApiException {
            ApiResponse<PageAliasThreadProjection> localVarResp = getThreadsPaginatedWithHttpInfo(page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getThreadsPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageAliasThreadProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAliasThreadProjection> executeWithHttpInfo() throws ApiException {
            return getThreadsPaginatedWithHttpInfo(page, size, sort, since, before);
        }

        /**
         * Execute getThreadsPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAliasThreadProjection> _callback) throws ApiException {
            return getThreadsPaginatedAsync(page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get all threads
     * Returns threads created for all aliases in paginated form
     * @return APIgetThreadsPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetThreadsPaginatedRequest getThreadsPaginated() {
        return new APIgetThreadsPaginatedRequest();
    }
    private okhttp3.Call replyToAliasEmailCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToAliasEmailOptions replyToAliasEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replyToAliasEmailOptions;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}/emails/{emailId}"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()))
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replyToAliasEmailValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToAliasEmailOptions replyToAliasEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling replyToAliasEmail(Async)");
        }

        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling replyToAliasEmail(Async)");
        }

        // verify the required parameter 'replyToAliasEmailOptions' is set
        if (replyToAliasEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'replyToAliasEmailOptions' when calling replyToAliasEmail(Async)");
        }

        return replyToAliasEmailCall(aliasId, emailId, replyToAliasEmailOptions, _callback);

    }


    private ApiResponse<SentEmailDto> replyToAliasEmailWithHttpInfo(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToAliasEmailOptions replyToAliasEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = replyToAliasEmailValidateBeforeCall(aliasId, emailId, replyToAliasEmailOptions, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replyToAliasEmailAsync(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToAliasEmailOptions replyToAliasEmailOptions, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = replyToAliasEmailValidateBeforeCall(aliasId, emailId, replyToAliasEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreplyToAliasEmailRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final ReplyToAliasEmailOptions replyToAliasEmailOptions;

        private APIreplyToAliasEmailRequest(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToAliasEmailOptions replyToAliasEmailOptions) {
            this.aliasId = aliasId;
            this.emailId = emailId;
            this.replyToAliasEmailOptions = replyToAliasEmailOptions;
        }

        /**
         * Build call for replyToAliasEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return replyToAliasEmailCall(aliasId, emailId, replyToAliasEmailOptions, _callback);
        }

        /**
         * Execute replyToAliasEmail request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = replyToAliasEmailWithHttpInfo(aliasId, emailId, replyToAliasEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute replyToAliasEmail request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return replyToAliasEmailWithHttpInfo(aliasId, emailId, replyToAliasEmailOptions);
        }

        /**
         * Execute replyToAliasEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return replyToAliasEmailAsync(aliasId, emailId, replyToAliasEmailOptions, _callback);
        }
    }

    /**
     * Reply to an email
     * Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
     * @param aliasId ID of the alias that email belongs to (required)
     * @param emailId ID of the email that should be replied to (required)
     * @param replyToAliasEmailOptions  (required)
     * @return APIreplyToAliasEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIreplyToAliasEmailRequest replyToAliasEmail(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToAliasEmailOptions replyToAliasEmailOptions) {
        return new APIreplyToAliasEmailRequest(aliasId, emailId, replyToAliasEmailOptions);
    }
    private okhttp3.Call sendAliasEmailCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}/emails"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendAliasEmailValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling sendAliasEmail(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendAliasEmail(Async)");
        }

        return sendAliasEmailCall(aliasId, sendEmailOptions, _callback);

    }


    private ApiResponse<SentEmailDto> sendAliasEmailWithHttpInfo(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = sendAliasEmailValidateBeforeCall(aliasId, sendEmailOptions, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendAliasEmailAsync(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendAliasEmailValidateBeforeCall(aliasId, sendEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendAliasEmailRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;

        private APIsendAliasEmailRequest(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.aliasId = aliasId;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Build call for sendAliasEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendAliasEmailCall(aliasId, sendEmailOptions, _callback);
        }

        /**
         * Execute sendAliasEmail request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = sendAliasEmailWithHttpInfo(aliasId, sendEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute sendAliasEmail request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return sendAliasEmailWithHttpInfo(aliasId, sendEmailOptions);
        }

        /**
         * Execute sendAliasEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return sendAliasEmailAsync(aliasId, sendEmailOptions, _callback);
        }
    }

    /**
     * Send an email from an alias inbox
     * Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
     * @param aliasId  (required)
     * @param sendEmailOptions  (required)
     * @return APIsendAliasEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsendAliasEmailRequest sendAliasEmail(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendAliasEmailRequest(aliasId, sendEmailOptions);
    }
    private okhttp3.Call updateAliasCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UpdateAliasOptions updateAliasOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateAliasOptions;

        // create path and map variables
        String localVarPath = "/aliases/{aliasId}"
            .replace("{" + "aliasId" + "}", localVarApiClient.escapeString(aliasId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAliasValidateBeforeCall(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UpdateAliasOptions updateAliasOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aliasId' is set
        if (aliasId == null) {
            throw new ApiException("Missing the required parameter 'aliasId' when calling updateAlias(Async)");
        }

        // verify the required parameter 'updateAliasOptions' is set
        if (updateAliasOptions == null) {
            throw new ApiException("Missing the required parameter 'updateAliasOptions' when calling updateAlias(Async)");
        }

        return updateAliasCall(aliasId, updateAliasOptions, _callback);

    }


    private ApiResponse<AliasDto> updateAliasWithHttpInfo(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UpdateAliasOptions updateAliasOptions) throws ApiException {
        okhttp3.Call localVarCall = updateAliasValidateBeforeCall(aliasId, updateAliasOptions, null);
        Type localVarReturnType = new TypeToken<AliasDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateAliasAsync(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UpdateAliasOptions updateAliasOptions, final ApiCallback<AliasDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAliasValidateBeforeCall(aliasId, updateAliasOptions, _callback);
        Type localVarReturnType = new TypeToken<AliasDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateAliasRequest {
        @javax.annotation.Nonnull
        private final UUID aliasId;
        @javax.annotation.Nonnull
        private final UpdateAliasOptions updateAliasOptions;

        private APIupdateAliasRequest(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UpdateAliasOptions updateAliasOptions) {
            this.aliasId = aliasId;
            this.updateAliasOptions = updateAliasOptions;
        }

        /**
         * Build call for updateAlias
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateAliasCall(aliasId, updateAliasOptions, _callback);
        }

        /**
         * Execute updateAlias request
         * @return AliasDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public AliasDto execute() throws ApiException {
            ApiResponse<AliasDto> localVarResp = updateAliasWithHttpInfo(aliasId, updateAliasOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateAlias request with HTTP info returned
         * @return ApiResponse&lt;AliasDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AliasDto> executeWithHttpInfo() throws ApiException {
            return updateAliasWithHttpInfo(aliasId, updateAliasOptions);
        }

        /**
         * Execute updateAlias request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AliasDto> _callback) throws ApiException {
            return updateAliasAsync(aliasId, updateAliasOptions, _callback);
        }
    }

    /**
     * Update an email alias
     * 
     * @param aliasId  (required)
     * @param updateAliasOptions  (required)
     * @return APIupdateAliasRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateAliasRequest updateAlias(@javax.annotation.Nonnull UUID aliasId, @javax.annotation.Nonnull UpdateAliasOptions updateAliasOptions) {
        return new APIupdateAliasRequest(aliasId, updateAliasOptions);
    }
}
