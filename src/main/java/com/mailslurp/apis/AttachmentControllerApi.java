/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.AttachmentEntityDto;
import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.DownloadAttachmentDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageAttachmentEntity;
import java.util.UUID;
import com.mailslurp.models.UploadAttachmentOptions;
import com.mailslurp.models.UploadMultipartFormRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AttachmentControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AttachmentControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AttachmentControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteAllAttachmentsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllAttachmentsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAllAttachmentsCall(_callback);

    }


    private ApiResponse<Void> deleteAllAttachmentsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllAttachmentsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllAttachmentsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllAttachmentsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllAttachmentsRequest {

        private APIdeleteAllAttachmentsRequest() {
        }

        /**
         * Build call for deleteAllAttachments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllAttachmentsCall(_callback);
        }

        /**
         * Execute deleteAllAttachments request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllAttachmentsWithHttpInfo();
        }

        /**
         * Execute deleteAllAttachments request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllAttachmentsWithHttpInfo();
        }

        /**
         * Execute deleteAllAttachments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllAttachmentsAsync(_callback);
        }
    }

    /**
     * Delete all attachments
     * Delete all attachments
     * @return APIdeleteAllAttachmentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllAttachmentsRequest deleteAllAttachments() {
        return new APIdeleteAllAttachmentsRequest();
    }
    private okhttp3.Call deleteAttachmentCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAttachmentValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling deleteAttachment(Async)");
        }

        return deleteAttachmentCall(attachmentId, _callback);

    }


    private ApiResponse<Void> deleteAttachmentWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = deleteAttachmentValidateBeforeCall(attachmentId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAttachmentAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAttachmentValidateBeforeCall(attachmentId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAttachmentRequest {
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIdeleteAttachmentRequest(@javax.annotation.Nonnull String attachmentId) {
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for deleteAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAttachmentCall(attachmentId, _callback);
        }

        /**
         * Execute deleteAttachment request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAttachmentWithHttpInfo(attachmentId);
        }

        /**
         * Execute deleteAttachment request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAttachmentWithHttpInfo(attachmentId);
        }

        /**
         * Execute deleteAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAttachmentAsync(attachmentId, _callback);
        }
    }

    /**
     * Delete an attachment
     * Delete an attachment
     * @param attachmentId ID of attachment (required)
     * @return APIdeleteAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAttachmentRequest deleteAttachment(@javax.annotation.Nonnull String attachmentId) {
        return new APIdeleteAttachmentRequest(attachmentId);
    }
    private okhttp3.Call downloadAttachmentAsBase64EncodedCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/base64"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentAsBase64EncodedValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachmentAsBase64Encoded(Async)");
        }

        return downloadAttachmentAsBase64EncodedCall(attachmentId, _callback);

    }


    private ApiResponse<DownloadAttachmentDto> downloadAttachmentAsBase64EncodedWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentAsBase64EncodedValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<DownloadAttachmentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadAttachmentAsBase64EncodedAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<DownloadAttachmentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentAsBase64EncodedValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<DownloadAttachmentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadAttachmentAsBase64EncodedRequest {
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIdownloadAttachmentAsBase64EncodedRequest(@javax.annotation.Nonnull String attachmentId) {
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for downloadAttachmentAsBase64Encoded
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadAttachmentAsBase64EncodedCall(attachmentId, _callback);
        }

        /**
         * Execute downloadAttachmentAsBase64Encoded request
         * @return DownloadAttachmentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DownloadAttachmentDto execute() throws ApiException {
            ApiResponse<DownloadAttachmentDto> localVarResp = downloadAttachmentAsBase64EncodedWithHttpInfo(attachmentId);
            return localVarResp.getData();
        }

        /**
         * Execute downloadAttachmentAsBase64Encoded request with HTTP info returned
         * @return ApiResponse&lt;DownloadAttachmentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadAttachmentDto> executeWithHttpInfo() throws ApiException {
            return downloadAttachmentAsBase64EncodedWithHttpInfo(attachmentId);
        }

        /**
         * Execute downloadAttachmentAsBase64Encoded request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadAttachmentDto> _callback) throws ApiException {
            return downloadAttachmentAsBase64EncodedAsync(attachmentId, _callback);
        }
    }

    /**
     * Get email attachment as base64 encoded string as alternative to binary responses. To read the content decode the Base64 encoded contents.
     * Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
     * @param attachmentId ID of attachment (required)
     * @return APIdownloadAttachmentAsBase64EncodedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadAttachmentAsBase64EncodedRequest downloadAttachmentAsBase64Encoded(@javax.annotation.Nonnull String attachmentId) {
        return new APIdownloadAttachmentAsBase64EncodedRequest(attachmentId);
    }
    private okhttp3.Call downloadAttachmentAsBytesCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/bytes"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentAsBytesValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachmentAsBytes(Async)");
        }

        return downloadAttachmentAsBytesCall(attachmentId, _callback);

    }


    private ApiResponse<byte[]> downloadAttachmentAsBytesWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentAsBytesValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadAttachmentAsBytesAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentAsBytesValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadAttachmentAsBytesRequest {
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIdownloadAttachmentAsBytesRequest(@javax.annotation.Nonnull String attachmentId) {
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for downloadAttachmentAsBytes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadAttachmentAsBytesCall(attachmentId, _callback);
        }

        /**
         * Execute downloadAttachmentAsBytes request
         * @return byte[]
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public byte[] execute() throws ApiException {
            ApiResponse<byte[]> localVarResp = downloadAttachmentAsBytesWithHttpInfo(attachmentId);
            return localVarResp.getData();
        }

        /**
         * Execute downloadAttachmentAsBytes request with HTTP info returned
         * @return ApiResponse&lt;byte[]&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<byte[]> executeWithHttpInfo() throws ApiException {
            return downloadAttachmentAsBytesWithHttpInfo(attachmentId);
        }

        /**
         * Execute downloadAttachmentAsBytes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<byte[]> _callback) throws ApiException {
            return downloadAttachmentAsBytesAsync(attachmentId, _callback);
        }
    }

    /**
     * Download attachments. Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
     * Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     * @param attachmentId ID of attachment (required)
     * @return APIdownloadAttachmentAsBytesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadAttachmentAsBytesRequest downloadAttachmentAsBytes(@javax.annotation.Nonnull String attachmentId) {
        return new APIdownloadAttachmentAsBytesRequest(attachmentId);
    }
    private okhttp3.Call getAttachmentCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachment(Async)");
        }

        return getAttachmentCall(attachmentId, _callback);

    }


    private ApiResponse<AttachmentEntityDto> getAttachmentWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<AttachmentEntityDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttachmentAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<AttachmentEntityDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<AttachmentEntityDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAttachmentRequest {
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIgetAttachmentRequest(@javax.annotation.Nonnull String attachmentId) {
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for getAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentCall(attachmentId, _callback);
        }

        /**
         * Execute getAttachment request
         * @return AttachmentEntityDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentEntityDto execute() throws ApiException {
            ApiResponse<AttachmentEntityDto> localVarResp = getAttachmentWithHttpInfo(attachmentId);
            return localVarResp.getData();
        }

        /**
         * Execute getAttachment request with HTTP info returned
         * @return ApiResponse&lt;AttachmentEntityDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentEntityDto> executeWithHttpInfo() throws ApiException {
            return getAttachmentWithHttpInfo(attachmentId);
        }

        /**
         * Execute getAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentEntityDto> _callback) throws ApiException {
            return getAttachmentAsync(attachmentId, _callback);
        }
    }

    /**
     * Get an attachment entity
     * 
     * @param attachmentId ID of attachment (required)
     * @return APIgetAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAttachmentRequest getAttachment(@javax.annotation.Nonnull String attachmentId) {
        return new APIgetAttachmentRequest(attachmentId);
    }
    private okhttp3.Call getAttachmentInfoCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/{attachmentId}/metadata"
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentInfoValidateBeforeCall(@javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachmentInfo(Async)");
        }

        return getAttachmentInfoCall(attachmentId, _callback);

    }


    private ApiResponse<AttachmentMetaData> getAttachmentInfoWithHttpInfo(@javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentInfoValidateBeforeCall(attachmentId, null);
        Type localVarReturnType = new TypeToken<AttachmentMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttachmentInfoAsync(@javax.annotation.Nonnull String attachmentId, final ApiCallback<AttachmentMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentInfoValidateBeforeCall(attachmentId, _callback);
        Type localVarReturnType = new TypeToken<AttachmentMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAttachmentInfoRequest {
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIgetAttachmentInfoRequest(@javax.annotation.Nonnull String attachmentId) {
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for getAttachmentInfo
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentInfoCall(attachmentId, _callback);
        }

        /**
         * Execute getAttachmentInfo request
         * @return AttachmentMetaData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentMetaData execute() throws ApiException {
            ApiResponse<AttachmentMetaData> localVarResp = getAttachmentInfoWithHttpInfo(attachmentId);
            return localVarResp.getData();
        }

        /**
         * Execute getAttachmentInfo request with HTTP info returned
         * @return ApiResponse&lt;AttachmentMetaData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentMetaData> executeWithHttpInfo() throws ApiException {
            return getAttachmentInfoWithHttpInfo(attachmentId);
        }

        /**
         * Execute getAttachmentInfo request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentMetaData> _callback) throws ApiException {
            return getAttachmentInfoAsync(attachmentId, _callback);
        }
    }

    /**
     * Get email attachment metadata information
     * Returns the metadata for an attachment. It is saved separately to the content of the attachment. Contains properties &#x60;name&#x60; and &#x60;content-type&#x60; and &#x60;content-length&#x60; in bytes for a given attachment.
     * @param attachmentId ID of attachment (required)
     * @return APIgetAttachmentInfoRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAttachmentInfoRequest getAttachmentInfo(@javax.annotation.Nonnull String attachmentId) {
        return new APIgetAttachmentInfoRequest(attachmentId);
    }
    private okhttp3.Call getAttachmentsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String fileNameFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentEmailId, @javax.annotation.Nullable List<String> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (fileNameFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileNameFilter", fileNameFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (sentEmailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sentEmailId", sentEmailId));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String fileNameFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentEmailId, @javax.annotation.Nullable List<String> include, final ApiCallback _callback) throws ApiException {
        return getAttachmentsCall(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include, _callback);

    }


    private ApiResponse<PageAttachmentEntity> getAttachmentsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String fileNameFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentEmailId, @javax.annotation.Nullable List<String> include) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentsValidateBeforeCall(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include, null);
        Type localVarReturnType = new TypeToken<PageAttachmentEntity>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttachmentsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String fileNameFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID emailId, @javax.annotation.Nullable UUID sentEmailId, @javax.annotation.Nullable List<String> include, final ApiCallback<PageAttachmentEntity> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentsValidateBeforeCall(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include, _callback);
        Type localVarReturnType = new TypeToken<PageAttachmentEntity>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAttachmentsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String fileNameFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID emailId;
        @javax.annotation.Nullable
        private UUID sentEmailId;
        @javax.annotation.Nullable
        private List<String> include;

        private APIgetAttachmentsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index for list pagination (optional, default to 0)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size for list pagination (optional, default to 20)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set fileNameFilter
         * @param fileNameFilter Optional file name and content type search filter (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest fileNameFilter(@javax.annotation.Nullable String fileNameFilter) {
            this.fileNameFilter = fileNameFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inboxId to filter attachments by (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set emailId
         * @param emailId Optional emailId to filter attachments by (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest emailId(@javax.annotation.Nullable UUID emailId) {
            this.emailId = emailId;
            return this;
        }

        /**
         * Set sentEmailId
         * @param sentEmailId Optional sentEmailId to filter attachments by (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest sentEmailId(@javax.annotation.Nullable UUID sentEmailId) {
            this.sentEmailId = sentEmailId;
            return this;
        }

        /**
         * Set include
         * @param include Optional list of IDs to include in result (optional)
         * @return APIgetAttachmentsRequest
         */
        public APIgetAttachmentsRequest include(@javax.annotation.Nullable List<String> include) {
            this.include = include;
            return this;
        }

        /**
         * Build call for getAttachments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentsCall(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include, _callback);
        }

        /**
         * Execute getAttachments request
         * @return PageAttachmentEntity
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAttachmentEntity execute() throws ApiException {
            ApiResponse<PageAttachmentEntity> localVarResp = getAttachmentsWithHttpInfo(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include);
            return localVarResp.getData();
        }

        /**
         * Execute getAttachments request with HTTP info returned
         * @return ApiResponse&lt;PageAttachmentEntity&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAttachmentEntity> executeWithHttpInfo() throws ApiException {
            return getAttachmentsWithHttpInfo(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include);
        }

        /**
         * Execute getAttachments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAttachmentEntity> _callback) throws ApiException {
            return getAttachmentsAsync(page, size, sort, fileNameFilter, since, before, inboxId, emailId, sentEmailId, include, _callback);
        }
    }

    /**
     * Get email attachments
     * Get all attachments in paginated response. Each entity contains meta data for the attachment such as &#x60;name&#x60; and &#x60;content-type&#x60;. Use the &#x60;attachmentId&#x60; and the download endpoints to get the file contents.
     * @return APIgetAttachmentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAttachmentsRequest getAttachments() {
        return new APIgetAttachmentsRequest();
    }
    private okhttp3.Call uploadAttachmentCall(@javax.annotation.Nonnull UploadAttachmentOptions uploadAttachmentOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadAttachmentOptions;

        // create path and map variables
        String localVarPath = "/attachments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAttachmentValidateBeforeCall(@javax.annotation.Nonnull UploadAttachmentOptions uploadAttachmentOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'uploadAttachmentOptions' is set
        if (uploadAttachmentOptions == null) {
            throw new ApiException("Missing the required parameter 'uploadAttachmentOptions' when calling uploadAttachment(Async)");
        }

        return uploadAttachmentCall(uploadAttachmentOptions, _callback);

    }


    private ApiResponse<List<String>> uploadAttachmentWithHttpInfo(@javax.annotation.Nonnull UploadAttachmentOptions uploadAttachmentOptions) throws ApiException {
        okhttp3.Call localVarCall = uploadAttachmentValidateBeforeCall(uploadAttachmentOptions, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAttachmentAsync(@javax.annotation.Nonnull UploadAttachmentOptions uploadAttachmentOptions, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAttachmentValidateBeforeCall(uploadAttachmentOptions, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuploadAttachmentRequest {
        @javax.annotation.Nonnull
        private final UploadAttachmentOptions uploadAttachmentOptions;

        private APIuploadAttachmentRequest(@javax.annotation.Nonnull UploadAttachmentOptions uploadAttachmentOptions) {
            this.uploadAttachmentOptions = uploadAttachmentOptions;
        }

        /**
         * Build call for uploadAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadAttachmentCall(uploadAttachmentOptions, _callback);
        }

        /**
         * Execute uploadAttachment request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = uploadAttachmentWithHttpInfo(uploadAttachmentOptions);
            return localVarResp.getData();
        }

        /**
         * Execute uploadAttachment request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return uploadAttachmentWithHttpInfo(uploadAttachmentOptions);
        }

        /**
         * Execute uploadAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return uploadAttachmentAsync(uploadAttachmentOptions, _callback);
        }
    }

    /**
     * Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
     * 
     * @param uploadAttachmentOptions  (required)
     * @return APIuploadAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIuploadAttachmentRequest uploadAttachment(@javax.annotation.Nonnull UploadAttachmentOptions uploadAttachmentOptions) {
        return new APIuploadAttachmentRequest(uploadAttachmentOptions);
    }
    private okhttp3.Call uploadAttachmentBytesCall(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String contentType2, @javax.annotation.Nullable String contentId, @javax.annotation.Nullable String filename, @javax.annotation.Nullable Long fileSize, @javax.annotation.Nullable String filename2, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/attachments/bytes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentType", contentType2));
        }

        if (contentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentId", contentId));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (fileSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileSize", fileSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        if (contentType != null) {
            localVarHeaderParams.put("contentType", localVarApiClient.parameterToString(contentType));
        }


        if (filename2 != null) {
            localVarHeaderParams.put("filename", localVarApiClient.parameterToString(filename2));
        }


        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadAttachmentBytesValidateBeforeCall(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String contentType2, @javax.annotation.Nullable String contentId, @javax.annotation.Nullable String filename, @javax.annotation.Nullable Long fileSize, @javax.annotation.Nullable String filename2, final ApiCallback _callback) throws ApiException {
        return uploadAttachmentBytesCall(contentType, contentType2, contentId, filename, fileSize, filename2, _callback);

    }


    private ApiResponse<List<String>> uploadAttachmentBytesWithHttpInfo(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String contentType2, @javax.annotation.Nullable String contentId, @javax.annotation.Nullable String filename, @javax.annotation.Nullable Long fileSize, @javax.annotation.Nullable String filename2) throws ApiException {
        okhttp3.Call localVarCall = uploadAttachmentBytesValidateBeforeCall(contentType, contentType2, contentId, filename, fileSize, filename2, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadAttachmentBytesAsync(@javax.annotation.Nullable String contentType, @javax.annotation.Nullable String contentType2, @javax.annotation.Nullable String contentId, @javax.annotation.Nullable String filename, @javax.annotation.Nullable Long fileSize, @javax.annotation.Nullable String filename2, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadAttachmentBytesValidateBeforeCall(contentType, contentType2, contentId, filename, fileSize, filename2, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuploadAttachmentBytesRequest {
        @javax.annotation.Nullable
        private String contentType;
        @javax.annotation.Nullable
        private String contentType2;
        @javax.annotation.Nullable
        private String contentId;
        @javax.annotation.Nullable
        private String filename;
        @javax.annotation.Nullable
        private Long fileSize;
        @javax.annotation.Nullable
        private String filename2;

        private APIuploadAttachmentBytesRequest() {
        }

        /**
         * Set contentType
         * @param contentType  (optional)
         * @return APIuploadAttachmentBytesRequest
         */
        public APIuploadAttachmentBytesRequest contentType(@javax.annotation.Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }

        /**
         * Set contentType2
         * @param contentType2 Optional contentType for file. For instance &#x60;application/pdf&#x60; (optional)
         * @return APIuploadAttachmentBytesRequest
         */
        public APIuploadAttachmentBytesRequest contentType2(@javax.annotation.Nullable String contentType2) {
            this.contentType2 = contentType2;
            return this;
        }

        /**
         * Set contentId
         * @param contentId Optional content ID (CID) to save upload with (optional)
         * @return APIuploadAttachmentBytesRequest
         */
        public APIuploadAttachmentBytesRequest contentId(@javax.annotation.Nullable String contentId) {
            this.contentId = contentId;
            return this;
        }

        /**
         * Set filename
         * @param filename Optional filename to save upload with (optional)
         * @return APIuploadAttachmentBytesRequest
         */
        public APIuploadAttachmentBytesRequest filename(@javax.annotation.Nullable String filename) {
            this.filename = filename;
            return this;
        }

        /**
         * Set fileSize
         * @param fileSize Optional byte length to save upload with (optional)
         * @return APIuploadAttachmentBytesRequest
         */
        public APIuploadAttachmentBytesRequest fileSize(@javax.annotation.Nullable Long fileSize) {
            this.fileSize = fileSize;
            return this;
        }

        /**
         * Set filename2
         * @param filename2  (optional)
         * @return APIuploadAttachmentBytesRequest
         */
        public APIuploadAttachmentBytesRequest filename2(@javax.annotation.Nullable String filename2) {
            this.filename2 = filename2;
            return this;
        }

        /**
         * Build call for uploadAttachmentBytes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadAttachmentBytesCall(contentType, contentType2, contentId, filename, fileSize, filename2, _callback);
        }

        /**
         * Execute uploadAttachmentBytes request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = uploadAttachmentBytesWithHttpInfo(contentType, contentType2, contentId, filename, fileSize, filename2);
            return localVarResp.getData();
        }

        /**
         * Execute uploadAttachmentBytes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return uploadAttachmentBytesWithHttpInfo(contentType, contentType2, contentId, filename, fileSize, filename2);
        }

        /**
         * Execute uploadAttachmentBytes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return uploadAttachmentBytesAsync(contentType, contentType2, contentId, filename, fileSize, filename2, _callback);
        }
    }

    /**
     * Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
     * 
     * @return APIuploadAttachmentBytesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIuploadAttachmentBytesRequest uploadAttachmentBytes() {
        return new APIuploadAttachmentBytesRequest();
    }
    private okhttp3.Call uploadMultipartFormCall(@javax.annotation.Nullable String contentId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String filename, @javax.annotation.Nullable String contentTypeHeader, @javax.annotation.Nullable String xFilename, @javax.annotation.Nullable String xFilenameRaw, @javax.annotation.Nullable Long xFilesize, @javax.annotation.Nullable UploadMultipartFormRequest uploadMultipartFormRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = uploadMultipartFormRequest;

        // create path and map variables
        String localVarPath = "/attachments/multipart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentId", contentId));
        }

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentType", contentType));
        }

        if (filename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filename", filename));
        }

        if (contentTypeHeader != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentTypeHeader", contentTypeHeader));
        }

        if (xFilename != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("x-filename", xFilename));
        }

        if (xFilenameRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("x-filename-raw", xFilenameRaw));
        }

        if (xFilesize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("x-filesize", xFilesize));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadMultipartFormValidateBeforeCall(@javax.annotation.Nullable String contentId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String filename, @javax.annotation.Nullable String contentTypeHeader, @javax.annotation.Nullable String xFilename, @javax.annotation.Nullable String xFilenameRaw, @javax.annotation.Nullable Long xFilesize, @javax.annotation.Nullable UploadMultipartFormRequest uploadMultipartFormRequest, final ApiCallback _callback) throws ApiException {
        return uploadMultipartFormCall(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest, _callback);

    }


    private ApiResponse<List<String>> uploadMultipartFormWithHttpInfo(@javax.annotation.Nullable String contentId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String filename, @javax.annotation.Nullable String contentTypeHeader, @javax.annotation.Nullable String xFilename, @javax.annotation.Nullable String xFilenameRaw, @javax.annotation.Nullable Long xFilesize, @javax.annotation.Nullable UploadMultipartFormRequest uploadMultipartFormRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadMultipartFormValidateBeforeCall(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call uploadMultipartFormAsync(@javax.annotation.Nullable String contentId, @javax.annotation.Nullable String contentType, @javax.annotation.Nullable String filename, @javax.annotation.Nullable String contentTypeHeader, @javax.annotation.Nullable String xFilename, @javax.annotation.Nullable String xFilenameRaw, @javax.annotation.Nullable Long xFilesize, @javax.annotation.Nullable UploadMultipartFormRequest uploadMultipartFormRequest, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadMultipartFormValidateBeforeCall(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIuploadMultipartFormRequest {
        @javax.annotation.Nullable
        private String contentId;
        @javax.annotation.Nullable
        private String contentType;
        @javax.annotation.Nullable
        private String filename;
        @javax.annotation.Nullable
        private String contentTypeHeader;
        @javax.annotation.Nullable
        private String xFilename;
        @javax.annotation.Nullable
        private String xFilenameRaw;
        @javax.annotation.Nullable
        private Long xFilesize;
        @javax.annotation.Nullable
        private UploadMultipartFormRequest uploadMultipartFormRequest;

        private APIuploadMultipartFormRequest() {
        }

        /**
         * Set contentId
         * @param contentId Optional content ID of attachment (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest contentId(@javax.annotation.Nullable String contentId) {
            this.contentId = contentId;
            return this;
        }

        /**
         * Set contentType
         * @param contentType Optional content type of attachment (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest contentType(@javax.annotation.Nullable String contentType) {
            this.contentType = contentType;
            return this;
        }

        /**
         * Set filename
         * @param filename Optional name of file (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest filename(@javax.annotation.Nullable String filename) {
            this.filename = filename;
            return this;
        }

        /**
         * Set contentTypeHeader
         * @param contentTypeHeader Optional content type header of attachment (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest contentTypeHeader(@javax.annotation.Nullable String contentTypeHeader) {
            this.contentTypeHeader = contentTypeHeader;
            return this;
        }

        /**
         * Set xFilename
         * @param xFilename Optional filename header of attachment (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest xFilename(@javax.annotation.Nullable String xFilename) {
            this.xFilename = xFilename;
            return this;
        }

        /**
         * Set xFilenameRaw
         * @param xFilenameRaw Optional raw filename header of attachment that will be converted to punycode (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest xFilenameRaw(@javax.annotation.Nullable String xFilenameRaw) {
            this.xFilenameRaw = xFilenameRaw;
            return this;
        }

        /**
         * Set xFilesize
         * @param xFilesize Optional content size of attachment (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest xFilesize(@javax.annotation.Nullable Long xFilesize) {
            this.xFilesize = xFilesize;
            return this;
        }

        /**
         * Set uploadMultipartFormRequest
         * @param uploadMultipartFormRequest  (optional)
         * @return APIuploadMultipartFormRequest
         */
        public APIuploadMultipartFormRequest uploadMultipartFormRequest(@javax.annotation.Nullable UploadMultipartFormRequest uploadMultipartFormRequest) {
            this.uploadMultipartFormRequest = uploadMultipartFormRequest;
            return this;
        }

        /**
         * Build call for uploadMultipartForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return uploadMultipartFormCall(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest, _callback);
        }

        /**
         * Execute uploadMultipartForm request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = uploadMultipartFormWithHttpInfo(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest);
            return localVarResp.getData();
        }

        /**
         * Execute uploadMultipartForm request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return uploadMultipartFormWithHttpInfo(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest);
        }

        /**
         * Execute uploadMultipartForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return uploadMultipartFormAsync(contentId, contentType, filename, contentTypeHeader, xFilename, xFilenameRaw, xFilesize, uploadMultipartFormRequest, _callback);
        }
    }

    /**
     * Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
     * 
     * @return APIuploadMultipartFormRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIuploadMultipartFormRequest uploadMultipartForm() {
        return new APIuploadMultipartFormRequest();
    }
}
