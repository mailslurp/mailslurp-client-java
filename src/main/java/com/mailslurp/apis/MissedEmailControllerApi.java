/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.MissedEmailDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageMissedEmailProjection;
import com.mailslurp.models.PageUnknownMissedEmailProjection;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MissedEmailControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MissedEmailControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MissedEmailControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllMissedEmailsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/missed-emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllMissedEmailsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getAllMissedEmailsCall(page, size, sort, searchFilter, since, before, inboxId, _callback);

    }


    private ApiResponse<PageMissedEmailProjection> getAllMissedEmailsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getAllMissedEmailsValidateBeforeCall(page, size, sort, searchFilter, since, before, inboxId, null);
        Type localVarReturnType = new TypeToken<PageMissedEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllMissedEmailsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback<PageMissedEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllMissedEmailsValidateBeforeCall(page, size, sort, searchFilter, since, before, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PageMissedEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllMissedEmailsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetAllMissedEmailsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID filter (optional)
         * @return APIgetAllMissedEmailsRequest
         */
        public APIgetAllMissedEmailsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getAllMissedEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllMissedEmailsCall(page, size, sort, searchFilter, since, before, inboxId, _callback);
        }

        /**
         * Execute getAllMissedEmails request
         * @return PageMissedEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageMissedEmailProjection execute() throws ApiException {
            ApiResponse<PageMissedEmailProjection> localVarResp = getAllMissedEmailsWithHttpInfo(page, size, sort, searchFilter, since, before, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllMissedEmails request with HTTP info returned
         * @return ApiResponse&lt;PageMissedEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageMissedEmailProjection> executeWithHttpInfo() throws ApiException {
            return getAllMissedEmailsWithHttpInfo(page, size, sort, searchFilter, since, before, inboxId);
        }

        /**
         * Execute getAllMissedEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageMissedEmailProjection> _callback) throws ApiException {
            return getAllMissedEmailsAsync(page, size, sort, searchFilter, since, before, inboxId, _callback);
        }
    }

    /**
     * Get all MissedEmails in paginated format
     * 
     * @return APIgetAllMissedEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllMissedEmailsRequest getAllMissedEmails() {
        return new APIgetAllMissedEmailsRequest();
    }
    private okhttp3.Call getAllUnknownMissedEmailsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/missed-emails/unknown";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllUnknownMissedEmailsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getAllUnknownMissedEmailsCall(page, size, sort, searchFilter, since, before, inboxId, _callback);

    }


    private ApiResponse<PageUnknownMissedEmailProjection> getAllUnknownMissedEmailsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getAllUnknownMissedEmailsValidateBeforeCall(page, size, sort, searchFilter, since, before, inboxId, null);
        Type localVarReturnType = new TypeToken<PageUnknownMissedEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllUnknownMissedEmailsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback<PageUnknownMissedEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllUnknownMissedEmailsValidateBeforeCall(page, size, sort, searchFilter, since, before, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PageUnknownMissedEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllUnknownMissedEmailsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetAllUnknownMissedEmailsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID filter (optional)
         * @return APIgetAllUnknownMissedEmailsRequest
         */
        public APIgetAllUnknownMissedEmailsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getAllUnknownMissedEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllUnknownMissedEmailsCall(page, size, sort, searchFilter, since, before, inboxId, _callback);
        }

        /**
         * Execute getAllUnknownMissedEmails request
         * @return PageUnknownMissedEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageUnknownMissedEmailProjection execute() throws ApiException {
            ApiResponse<PageUnknownMissedEmailProjection> localVarResp = getAllUnknownMissedEmailsWithHttpInfo(page, size, sort, searchFilter, since, before, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllUnknownMissedEmails request with HTTP info returned
         * @return ApiResponse&lt;PageUnknownMissedEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageUnknownMissedEmailProjection> executeWithHttpInfo() throws ApiException {
            return getAllUnknownMissedEmailsWithHttpInfo(page, size, sort, searchFilter, since, before, inboxId);
        }

        /**
         * Execute getAllUnknownMissedEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageUnknownMissedEmailProjection> _callback) throws ApiException {
            return getAllUnknownMissedEmailsAsync(page, size, sort, searchFilter, since, before, inboxId, _callback);
        }
    }

    /**
     * Get all unknown missed emails in paginated format
     * Unknown missed emails are emails that were sent to MailSlurp but could not be assigned to an existing inbox.
     * @return APIgetAllUnknownMissedEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllUnknownMissedEmailsRequest getAllUnknownMissedEmails() {
        return new APIgetAllUnknownMissedEmailsRequest();
    }
    private okhttp3.Call getMissedEmailCall(@javax.annotation.Nonnull UUID missedEmailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/missed-emails/{missedEmailId}"
            .replace("{" + "missedEmailId" + "}", localVarApiClient.escapeString(missedEmailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMissedEmailValidateBeforeCall(@javax.annotation.Nonnull UUID missedEmailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'missedEmailId' is set
        if (missedEmailId == null) {
            throw new ApiException("Missing the required parameter 'missedEmailId' when calling getMissedEmail(Async)");
        }

        return getMissedEmailCall(missedEmailId, _callback);

    }


    private ApiResponse<MissedEmailDto> getMissedEmailWithHttpInfo(@javax.annotation.Nonnull UUID missedEmailId) throws ApiException {
        okhttp3.Call localVarCall = getMissedEmailValidateBeforeCall(missedEmailId, null);
        Type localVarReturnType = new TypeToken<MissedEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMissedEmailAsync(@javax.annotation.Nonnull UUID missedEmailId, final ApiCallback<MissedEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMissedEmailValidateBeforeCall(missedEmailId, _callback);
        Type localVarReturnType = new TypeToken<MissedEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMissedEmailRequest {
        @javax.annotation.Nonnull
        private final UUID missedEmailId;

        private APIgetMissedEmailRequest(@javax.annotation.Nonnull UUID missedEmailId) {
            this.missedEmailId = missedEmailId;
        }

        /**
         * Build call for getMissedEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMissedEmailCall(missedEmailId, _callback);
        }

        /**
         * Execute getMissedEmail request
         * @return MissedEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public MissedEmailDto execute() throws ApiException {
            ApiResponse<MissedEmailDto> localVarResp = getMissedEmailWithHttpInfo(missedEmailId);
            return localVarResp.getData();
        }

        /**
         * Execute getMissedEmail request with HTTP info returned
         * @return ApiResponse&lt;MissedEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MissedEmailDto> executeWithHttpInfo() throws ApiException {
            return getMissedEmailWithHttpInfo(missedEmailId);
        }

        /**
         * Execute getMissedEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MissedEmailDto> _callback) throws ApiException {
            return getMissedEmailAsync(missedEmailId, _callback);
        }
    }

    /**
     * Get MissedEmail
     * List emails that were missed due to plan limits.
     * @param missedEmailId  (required)
     * @return APIgetMissedEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMissedEmailRequest getMissedEmail(@javax.annotation.Nonnull UUID missedEmailId) {
        return new APIgetMissedEmailRequest(missedEmailId);
    }
    private okhttp3.Call restoreMissedEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/missed-emails/restore";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call restoreMissedEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return restoreMissedEmailsCall(_callback);

    }


    private ApiResponse<Void> restoreMissedEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = restoreMissedEmailsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call restoreMissedEmailsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = restoreMissedEmailsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIrestoreMissedEmailsRequest {

        private APIrestoreMissedEmailsRequest() {
        }

        /**
         * Build call for restoreMissedEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return restoreMissedEmailsCall(_callback);
        }

        /**
         * Execute restoreMissedEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            restoreMissedEmailsWithHttpInfo();
        }

        /**
         * Execute restoreMissedEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return restoreMissedEmailsWithHttpInfo();
        }

        /**
         * Execute restoreMissedEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return restoreMissedEmailsAsync(_callback);
        }
    }

    /**
     * Restore missed emails
     * If emails were missed due to a plan limit they are saved as missed emails. If support team enables the canRestore flag these emails can be reload into your account using this method.
     * @return APIrestoreMissedEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIrestoreMissedEmailsRequest restoreMissedEmails() {
        return new APIrestoreMissedEmailsRequest();
    }
    private okhttp3.Call waitForNthMissedEmailCall(@javax.annotation.Nonnull Integer index, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/missed-emails/waitForNthMissedEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (timeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeout", timeout));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call waitForNthMissedEmailValidateBeforeCall(@javax.annotation.Nonnull Integer index, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'index' is set
        if (index == null) {
            throw new ApiException("Missing the required parameter 'index' when calling waitForNthMissedEmail(Async)");
        }

        return waitForNthMissedEmailCall(index, inboxId, timeout, since, before, _callback);

    }


    private ApiResponse<MissedEmailDto> waitForNthMissedEmailWithHttpInfo(@javax.annotation.Nonnull Integer index, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = waitForNthMissedEmailValidateBeforeCall(index, inboxId, timeout, since, before, null);
        Type localVarReturnType = new TypeToken<MissedEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call waitForNthMissedEmailAsync(@javax.annotation.Nonnull Integer index, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Long timeout, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<MissedEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = waitForNthMissedEmailValidateBeforeCall(index, inboxId, timeout, since, before, _callback);
        Type localVarReturnType = new TypeToken<MissedEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIwaitForNthMissedEmailRequest {
        @javax.annotation.Nonnull
        private final Integer index;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Long timeout;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIwaitForNthMissedEmailRequest(@javax.annotation.Nonnull Integer index) {
            this.index = index;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID filter (optional)
         * @return APIwaitForNthMissedEmailRequest
         */
        public APIwaitForNthMissedEmailRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set timeout
         * @param timeout Optional timeout milliseconds (optional)
         * @return APIwaitForNthMissedEmailRequest
         */
        public APIwaitForNthMissedEmailRequest timeout(@javax.annotation.Nullable Long timeout) {
            this.timeout = timeout;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIwaitForNthMissedEmailRequest
         */
        public APIwaitForNthMissedEmailRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIwaitForNthMissedEmailRequest
         */
        public APIwaitForNthMissedEmailRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for waitForNthMissedEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return waitForNthMissedEmailCall(index, inboxId, timeout, since, before, _callback);
        }

        /**
         * Execute waitForNthMissedEmail request
         * @return MissedEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public MissedEmailDto execute() throws ApiException {
            ApiResponse<MissedEmailDto> localVarResp = waitForNthMissedEmailWithHttpInfo(index, inboxId, timeout, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute waitForNthMissedEmail request with HTTP info returned
         * @return ApiResponse&lt;MissedEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MissedEmailDto> executeWithHttpInfo() throws ApiException {
            return waitForNthMissedEmailWithHttpInfo(index, inboxId, timeout, since, before);
        }

        /**
         * Execute waitForNthMissedEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MissedEmailDto> _callback) throws ApiException {
            return waitForNthMissedEmailAsync(index, inboxId, timeout, since, before, _callback);
        }
    }

    /**
     * Wait for Nth missed email
     * Wait for 0 based index missed email
     * @param index Zero based index of the email to wait for. If 1 missed email already and you want to wait for the 2nd email pass index&#x3D;1 (required)
     * @return APIwaitForNthMissedEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIwaitForNthMissedEmailRequest waitForNthMissedEmail(@javax.annotation.Nonnull Integer index) {
        return new APIwaitForNthMissedEmailRequest(index);
    }
}
