/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CountDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageSentSmsProjection;
import com.mailslurp.models.PageSmsProjection;
import com.mailslurp.models.ReplyForSms;
import com.mailslurp.models.SentSmsDto;
import com.mailslurp.models.SmsDto;
import com.mailslurp.models.SmsReplyOptions;
import com.mailslurp.models.SmsSendOptions;
import java.util.UUID;
import com.mailslurp.models.UnreadCount;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SmsControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SmsControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SmsControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call deleteSentSmsMessageCall(@javax.annotation.Nonnull UUID sentSmsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/sent/{sentSmsId}"
            .replace("{" + "sentSmsId" + "}", localVarApiClient.escapeString(sentSmsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSentSmsMessageValidateBeforeCall(@javax.annotation.Nonnull UUID sentSmsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sentSmsId' is set
        if (sentSmsId == null) {
            throw new ApiException("Missing the required parameter 'sentSmsId' when calling deleteSentSmsMessage(Async)");
        }

        return deleteSentSmsMessageCall(sentSmsId, _callback);

    }


    private ApiResponse<Void> deleteSentSmsMessageWithHttpInfo(@javax.annotation.Nonnull UUID sentSmsId) throws ApiException {
        okhttp3.Call localVarCall = deleteSentSmsMessageValidateBeforeCall(sentSmsId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSentSmsMessageAsync(@javax.annotation.Nonnull UUID sentSmsId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSentSmsMessageValidateBeforeCall(sentSmsId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSentSmsMessageRequest {
        @javax.annotation.Nonnull
        private final UUID sentSmsId;

        private APIdeleteSentSmsMessageRequest(@javax.annotation.Nonnull UUID sentSmsId) {
            this.sentSmsId = sentSmsId;
        }

        /**
         * Build call for deleteSentSmsMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSentSmsMessageCall(sentSmsId, _callback);
        }

        /**
         * Execute deleteSentSmsMessage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSentSmsMessageWithHttpInfo(sentSmsId);
        }

        /**
         * Execute deleteSentSmsMessage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSentSmsMessageWithHttpInfo(sentSmsId);
        }

        /**
         * Execute deleteSentSmsMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSentSmsMessageAsync(sentSmsId, _callback);
        }
    }

    /**
     * Delete sent SMS message.
     * Delete a sent SMS message
     * @param sentSmsId  (required)
     * @return APIdeleteSentSmsMessageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSentSmsMessageRequest deleteSentSmsMessage(@javax.annotation.Nonnull UUID sentSmsId) {
        return new APIdeleteSentSmsMessageRequest(sentSmsId);
    }
    private okhttp3.Call deleteSentSmsMessagesCall(@javax.annotation.Nullable UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/sent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumberId", phoneNumberId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSentSmsMessagesValidateBeforeCall(@javax.annotation.Nullable UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        return deleteSentSmsMessagesCall(phoneNumberId, _callback);

    }


    private ApiResponse<Void> deleteSentSmsMessagesWithHttpInfo(@javax.annotation.Nullable UUID phoneNumberId) throws ApiException {
        okhttp3.Call localVarCall = deleteSentSmsMessagesValidateBeforeCall(phoneNumberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSentSmsMessagesAsync(@javax.annotation.Nullable UUID phoneNumberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSentSmsMessagesValidateBeforeCall(phoneNumberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSentSmsMessagesRequest {
        @javax.annotation.Nullable
        private UUID phoneNumberId;

        private APIdeleteSentSmsMessagesRequest() {
        }

        /**
         * Set phoneNumberId
         * @param phoneNumberId  (optional)
         * @return APIdeleteSentSmsMessagesRequest
         */
        public APIdeleteSentSmsMessagesRequest phoneNumberId(@javax.annotation.Nullable UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * Build call for deleteSentSmsMessages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSentSmsMessagesCall(phoneNumberId, _callback);
        }

        /**
         * Execute deleteSentSmsMessages request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSentSmsMessagesWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute deleteSentSmsMessages request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSentSmsMessagesWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute deleteSentSmsMessages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSentSmsMessagesAsync(phoneNumberId, _callback);
        }
    }

    /**
     * Delete all sent SMS messages
     * Delete all sent SMS messages or all messages for a given phone number
     * @return APIdeleteSentSmsMessagesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSentSmsMessagesRequest deleteSentSmsMessages() {
        return new APIdeleteSentSmsMessagesRequest();
    }
    private okhttp3.Call deleteSmsMessageCall(@javax.annotation.Nonnull UUID smsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/{smsId}"
            .replace("{" + "smsId" + "}", localVarApiClient.escapeString(smsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSmsMessageValidateBeforeCall(@javax.annotation.Nonnull UUID smsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsId' is set
        if (smsId == null) {
            throw new ApiException("Missing the required parameter 'smsId' when calling deleteSmsMessage(Async)");
        }

        return deleteSmsMessageCall(smsId, _callback);

    }


    private ApiResponse<Void> deleteSmsMessageWithHttpInfo(@javax.annotation.Nonnull UUID smsId) throws ApiException {
        okhttp3.Call localVarCall = deleteSmsMessageValidateBeforeCall(smsId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSmsMessageAsync(@javax.annotation.Nonnull UUID smsId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSmsMessageValidateBeforeCall(smsId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSmsMessageRequest {
        @javax.annotation.Nonnull
        private final UUID smsId;

        private APIdeleteSmsMessageRequest(@javax.annotation.Nonnull UUID smsId) {
            this.smsId = smsId;
        }

        /**
         * Build call for deleteSmsMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSmsMessageCall(smsId, _callback);
        }

        /**
         * Execute deleteSmsMessage request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSmsMessageWithHttpInfo(smsId);
        }

        /**
         * Execute deleteSmsMessage request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSmsMessageWithHttpInfo(smsId);
        }

        /**
         * Execute deleteSmsMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSmsMessageAsync(smsId, _callback);
        }
    }

    /**
     * Delete SMS message.
     * Delete an SMS message
     * @param smsId  (required)
     * @return APIdeleteSmsMessageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSmsMessageRequest deleteSmsMessage(@javax.annotation.Nonnull UUID smsId) {
        return new APIdeleteSmsMessageRequest(smsId);
    }
    private okhttp3.Call deleteSmsMessagesCall(@javax.annotation.Nullable UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumberId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumberId", phoneNumberId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteSmsMessagesValidateBeforeCall(@javax.annotation.Nullable UUID phoneNumberId, final ApiCallback _callback) throws ApiException {
        return deleteSmsMessagesCall(phoneNumberId, _callback);

    }


    private ApiResponse<Void> deleteSmsMessagesWithHttpInfo(@javax.annotation.Nullable UUID phoneNumberId) throws ApiException {
        okhttp3.Call localVarCall = deleteSmsMessagesValidateBeforeCall(phoneNumberId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteSmsMessagesAsync(@javax.annotation.Nullable UUID phoneNumberId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteSmsMessagesValidateBeforeCall(phoneNumberId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteSmsMessagesRequest {
        @javax.annotation.Nullable
        private UUID phoneNumberId;

        private APIdeleteSmsMessagesRequest() {
        }

        /**
         * Set phoneNumberId
         * @param phoneNumberId  (optional)
         * @return APIdeleteSmsMessagesRequest
         */
        public APIdeleteSmsMessagesRequest phoneNumberId(@javax.annotation.Nullable UUID phoneNumberId) {
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        /**
         * Build call for deleteSmsMessages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteSmsMessagesCall(phoneNumberId, _callback);
        }

        /**
         * Execute deleteSmsMessages request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteSmsMessagesWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute deleteSmsMessages request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteSmsMessagesWithHttpInfo(phoneNumberId);
        }

        /**
         * Execute deleteSmsMessages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteSmsMessagesAsync(phoneNumberId, _callback);
        }
    }

    /**
     * Delete all SMS messages
     * Delete all SMS messages or all messages for a given phone number
     * @return APIdeleteSmsMessagesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteSmsMessagesRequest deleteSmsMessages() {
        return new APIdeleteSmsMessagesRequest();
    }
    private okhttp3.Call getAllSmsMessagesCall(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllSmsMessagesValidateBeforeCall(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite, final ApiCallback _callback) throws ApiException {
        return getAllSmsMessagesCall(phoneNumber, page, size, sort, since, before, search, favourite, _callback);

    }


    private ApiResponse<PageSmsProjection> getAllSmsMessagesWithHttpInfo(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite) throws ApiException {
        okhttp3.Call localVarCall = getAllSmsMessagesValidateBeforeCall(phoneNumber, page, size, sort, since, before, search, favourite, null);
        Type localVarReturnType = new TypeToken<PageSmsProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllSmsMessagesAsync(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, @javax.annotation.Nullable Boolean favourite, final ApiCallback<PageSmsProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllSmsMessagesValidateBeforeCall(phoneNumber, page, size, sort, since, before, search, favourite, _callback);
        Type localVarReturnType = new TypeToken<PageSmsProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllSmsMessagesRequest {
        @javax.annotation.Nullable
        private UUID phoneNumber;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private Boolean favourite;

        private APIgetAllSmsMessagesRequest() {
        }

        /**
         * Set phoneNumber
         * @param phoneNumber Optional receiving phone number to filter SMS messages for (optional)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest phoneNumber(@javax.annotation.Nullable UUID phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in SMS list pagination (optional, default to 0)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter SMSs received after given date time (optional)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter SMSs received before given date time (optional)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set search
         * @param search Optional search filter (optional)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set favourite
         * @param favourite Optionally filter results for favourites only (optional, default to false)
         * @return APIgetAllSmsMessagesRequest
         */
        public APIgetAllSmsMessagesRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Build call for getAllSmsMessages
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllSmsMessagesCall(phoneNumber, page, size, sort, since, before, search, favourite, _callback);
        }

        /**
         * Execute getAllSmsMessages request
         * @return PageSmsProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSmsProjection execute() throws ApiException {
            ApiResponse<PageSmsProjection> localVarResp = getAllSmsMessagesWithHttpInfo(phoneNumber, page, size, sort, since, before, search, favourite);
            return localVarResp.getData();
        }

        /**
         * Execute getAllSmsMessages request with HTTP info returned
         * @return ApiResponse&lt;PageSmsProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSmsProjection> executeWithHttpInfo() throws ApiException {
            return getAllSmsMessagesWithHttpInfo(phoneNumber, page, size, sort, since, before, search, favourite);
        }

        /**
         * Execute getAllSmsMessages request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSmsProjection> _callback) throws ApiException {
            return getAllSmsMessagesAsync(phoneNumber, page, size, sort, since, before, search, favourite, _callback);
        }
    }

    /**
     * 
     * 
     * @return APIgetAllSmsMessagesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllSmsMessagesRequest getAllSmsMessages() {
        return new APIgetAllSmsMessagesRequest();
    }
    private okhttp3.Call getReplyForSmsMessageCall(@javax.annotation.Nonnull UUID smsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/{smsId}/reply"
            .replace("{" + "smsId" + "}", localVarApiClient.escapeString(smsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getReplyForSmsMessageValidateBeforeCall(@javax.annotation.Nonnull UUID smsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsId' is set
        if (smsId == null) {
            throw new ApiException("Missing the required parameter 'smsId' when calling getReplyForSmsMessage(Async)");
        }

        return getReplyForSmsMessageCall(smsId, _callback);

    }


    private ApiResponse<ReplyForSms> getReplyForSmsMessageWithHttpInfo(@javax.annotation.Nonnull UUID smsId) throws ApiException {
        okhttp3.Call localVarCall = getReplyForSmsMessageValidateBeforeCall(smsId, null);
        Type localVarReturnType = new TypeToken<ReplyForSms>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getReplyForSmsMessageAsync(@javax.annotation.Nonnull UUID smsId, final ApiCallback<ReplyForSms> _callback) throws ApiException {

        okhttp3.Call localVarCall = getReplyForSmsMessageValidateBeforeCall(smsId, _callback);
        Type localVarReturnType = new TypeToken<ReplyForSms>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetReplyForSmsMessageRequest {
        @javax.annotation.Nonnull
        private final UUID smsId;

        private APIgetReplyForSmsMessageRequest(@javax.annotation.Nonnull UUID smsId) {
            this.smsId = smsId;
        }

        /**
         * Build call for getReplyForSmsMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getReplyForSmsMessageCall(smsId, _callback);
        }

        /**
         * Execute getReplyForSmsMessage request
         * @return ReplyForSms
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ReplyForSms execute() throws ApiException {
            ApiResponse<ReplyForSms> localVarResp = getReplyForSmsMessageWithHttpInfo(smsId);
            return localVarResp.getData();
        }

        /**
         * Execute getReplyForSmsMessage request with HTTP info returned
         * @return ApiResponse&lt;ReplyForSms&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ReplyForSms> executeWithHttpInfo() throws ApiException {
            return getReplyForSmsMessageWithHttpInfo(smsId);
        }

        /**
         * Execute getReplyForSmsMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ReplyForSms> _callback) throws ApiException {
            return getReplyForSmsMessageAsync(smsId, _callback);
        }
    }

    /**
     * Get reply for an SMS message
     * Get reply for an SMS message.
     * @param smsId  (required)
     * @return APIgetReplyForSmsMessageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetReplyForSmsMessageRequest getReplyForSmsMessage(@javax.annotation.Nonnull UUID smsId) {
        return new APIgetReplyForSmsMessageRequest(smsId);
    }
    private okhttp3.Call getSentSmsCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/sent/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentSmsCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSentSmsCountCall(_callback);

    }


    private ApiResponse<CountDto> getSentSmsCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSentSmsCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentSmsCountAsync(final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentSmsCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentSmsCountRequest {

        private APIgetSentSmsCountRequest() {
        }

        /**
         * Build call for getSentSmsCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentSmsCountCall(_callback);
        }

        /**
         * Execute getSentSmsCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getSentSmsCountWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getSentSmsCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getSentSmsCountWithHttpInfo();
        }

        /**
         * Execute getSentSmsCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getSentSmsCountAsync(_callback);
        }
    }

    /**
     * Get sent SMS count
     * Get number of sent SMS
     * @return APIgetSentSmsCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentSmsCountRequest getSentSmsCount() {
        return new APIgetSentSmsCountRequest();
    }
    private okhttp3.Call getSentSmsMessageCall(@javax.annotation.Nonnull UUID sentSmsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/sent/{sentSmsId}"
            .replace("{" + "sentSmsId" + "}", localVarApiClient.escapeString(sentSmsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentSmsMessageValidateBeforeCall(@javax.annotation.Nonnull UUID sentSmsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sentSmsId' is set
        if (sentSmsId == null) {
            throw new ApiException("Missing the required parameter 'sentSmsId' when calling getSentSmsMessage(Async)");
        }

        return getSentSmsMessageCall(sentSmsId, _callback);

    }


    private ApiResponse<SentSmsDto> getSentSmsMessageWithHttpInfo(@javax.annotation.Nonnull UUID sentSmsId) throws ApiException {
        okhttp3.Call localVarCall = getSentSmsMessageValidateBeforeCall(sentSmsId, null);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentSmsMessageAsync(@javax.annotation.Nonnull UUID sentSmsId, final ApiCallback<SentSmsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentSmsMessageValidateBeforeCall(sentSmsId, _callback);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentSmsMessageRequest {
        @javax.annotation.Nonnull
        private final UUID sentSmsId;

        private APIgetSentSmsMessageRequest(@javax.annotation.Nonnull UUID sentSmsId) {
            this.sentSmsId = sentSmsId;
        }

        /**
         * Build call for getSentSmsMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentSmsMessageCall(sentSmsId, _callback);
        }

        /**
         * Execute getSentSmsMessage request
         * @return SentSmsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentSmsDto execute() throws ApiException {
            ApiResponse<SentSmsDto> localVarResp = getSentSmsMessageWithHttpInfo(sentSmsId);
            return localVarResp.getData();
        }

        /**
         * Execute getSentSmsMessage request with HTTP info returned
         * @return ApiResponse&lt;SentSmsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentSmsDto> executeWithHttpInfo() throws ApiException {
            return getSentSmsMessageWithHttpInfo(sentSmsId);
        }

        /**
         * Execute getSentSmsMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentSmsDto> _callback) throws ApiException {
            return getSentSmsMessageAsync(sentSmsId, _callback);
        }
    }

    /**
     * Get sent SMS content including body. Expects sent SMS to exist by ID.
     * Returns an SMS summary object with content.
     * @param sentSmsId  (required)
     * @return APIgetSentSmsMessageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentSmsMessageRequest getSentSmsMessage(@javax.annotation.Nonnull UUID sentSmsId) {
        return new APIgetSentSmsMessageRequest(sentSmsId);
    }
    private okhttp3.Call getSentSmsMessagesPaginatedCall(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/sent";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (phoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneNumber", phoneNumber));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSentSmsMessagesPaginatedValidateBeforeCall(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, final ApiCallback _callback) throws ApiException {
        return getSentSmsMessagesPaginatedCall(phoneNumber, page, size, sort, since, before, search, _callback);

    }


    private ApiResponse<PageSentSmsProjection> getSentSmsMessagesPaginatedWithHttpInfo(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search) throws ApiException {
        okhttp3.Call localVarCall = getSentSmsMessagesPaginatedValidateBeforeCall(phoneNumber, page, size, sort, since, before, search, null);
        Type localVarReturnType = new TypeToken<PageSentSmsProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSentSmsMessagesPaginatedAsync(@javax.annotation.Nullable UUID phoneNumber, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String search, final ApiCallback<PageSentSmsProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSentSmsMessagesPaginatedValidateBeforeCall(phoneNumber, page, size, sort, since, before, search, _callback);
        Type localVarReturnType = new TypeToken<PageSentSmsProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSentSmsMessagesPaginatedRequest {
        @javax.annotation.Nullable
        private UUID phoneNumber;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String search;

        private APIgetSentSmsMessagesPaginatedRequest() {
        }

        /**
         * Set phoneNumber
         * @param phoneNumber Optional phone number to filter sent SMS messages for (optional)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest phoneNumber(@javax.annotation.Nullable UUID phoneNumber) {
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in SMS list pagination (optional, default to 0)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter SMSs received after given date time (optional)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter SMSs received before given date time (optional)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set search
         * @param search Optional search filter (optional)
         * @return APIgetSentSmsMessagesPaginatedRequest
         */
        public APIgetSentSmsMessagesPaginatedRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Build call for getSentSmsMessagesPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSentSmsMessagesPaginatedCall(phoneNumber, page, size, sort, since, before, search, _callback);
        }

        /**
         * Execute getSentSmsMessagesPaginated request
         * @return PageSentSmsProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageSentSmsProjection execute() throws ApiException {
            ApiResponse<PageSentSmsProjection> localVarResp = getSentSmsMessagesPaginatedWithHttpInfo(phoneNumber, page, size, sort, since, before, search);
            return localVarResp.getData();
        }

        /**
         * Execute getSentSmsMessagesPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageSentSmsProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageSentSmsProjection> executeWithHttpInfo() throws ApiException {
            return getSentSmsMessagesPaginatedWithHttpInfo(phoneNumber, page, size, sort, since, before, search);
        }

        /**
         * Execute getSentSmsMessagesPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageSentSmsProjection> _callback) throws ApiException {
            return getSentSmsMessagesPaginatedAsync(phoneNumber, page, size, sort, since, before, search, _callback);
        }
    }

    /**
     * Get all SMS messages in all phone numbers in paginated form. .
     * By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
     * @return APIgetSentSmsMessagesPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSentSmsMessagesPaginatedRequest getSentSmsMessagesPaginated() {
        return new APIgetSentSmsMessagesPaginatedRequest();
    }
    private okhttp3.Call getSmsCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSmsCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getSmsCountCall(_callback);

    }


    private ApiResponse<CountDto> getSmsCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getSmsCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSmsCountAsync(final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSmsCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSmsCountRequest {

        private APIgetSmsCountRequest() {
        }

        /**
         * Build call for getSmsCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSmsCountCall(_callback);
        }

        /**
         * Execute getSmsCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getSmsCountWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getSmsCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getSmsCountWithHttpInfo();
        }

        /**
         * Execute getSmsCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getSmsCountAsync(_callback);
        }
    }

    /**
     * Get SMS count
     * Get number of SMS
     * @return APIgetSmsCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSmsCountRequest getSmsCount() {
        return new APIgetSmsCountRequest();
    }
    private okhttp3.Call getSmsMessageCall(@javax.annotation.Nonnull UUID smsId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/{smsId}"
            .replace("{" + "smsId" + "}", localVarApiClient.escapeString(smsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSmsMessageValidateBeforeCall(@javax.annotation.Nonnull UUID smsId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsId' is set
        if (smsId == null) {
            throw new ApiException("Missing the required parameter 'smsId' when calling getSmsMessage(Async)");
        }

        return getSmsMessageCall(smsId, _callback);

    }


    private ApiResponse<SmsDto> getSmsMessageWithHttpInfo(@javax.annotation.Nonnull UUID smsId) throws ApiException {
        okhttp3.Call localVarCall = getSmsMessageValidateBeforeCall(smsId, null);
        Type localVarReturnType = new TypeToken<SmsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSmsMessageAsync(@javax.annotation.Nonnull UUID smsId, final ApiCallback<SmsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSmsMessageValidateBeforeCall(smsId, _callback);
        Type localVarReturnType = new TypeToken<SmsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSmsMessageRequest {
        @javax.annotation.Nonnull
        private final UUID smsId;

        private APIgetSmsMessageRequest(@javax.annotation.Nonnull UUID smsId) {
            this.smsId = smsId;
        }

        /**
         * Build call for getSmsMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSmsMessageCall(smsId, _callback);
        }

        /**
         * Execute getSmsMessage request
         * @return SmsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SmsDto execute() throws ApiException {
            ApiResponse<SmsDto> localVarResp = getSmsMessageWithHttpInfo(smsId);
            return localVarResp.getData();
        }

        /**
         * Execute getSmsMessage request with HTTP info returned
         * @return ApiResponse&lt;SmsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmsDto> executeWithHttpInfo() throws ApiException {
            return getSmsMessageWithHttpInfo(smsId);
        }

        /**
         * Execute getSmsMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmsDto> _callback) throws ApiException {
            return getSmsMessageAsync(smsId, _callback);
        }
    }

    /**
     * Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
     * Returns a SMS summary object with content.
     * @param smsId  (required)
     * @return APIgetSmsMessageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSmsMessageRequest getSmsMessage(@javax.annotation.Nonnull UUID smsId) {
        return new APIgetSmsMessageRequest(smsId);
    }
    private okhttp3.Call getUnreadSmsCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/unreadCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnreadSmsCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getUnreadSmsCountCall(_callback);

    }


    private ApiResponse<UnreadCount> getUnreadSmsCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getUnreadSmsCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<UnreadCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnreadSmsCountAsync(final ApiCallback<UnreadCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnreadSmsCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<UnreadCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUnreadSmsCountRequest {

        private APIgetUnreadSmsCountRequest() {
        }

        /**
         * Build call for getUnreadSmsCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnreadSmsCountCall(_callback);
        }

        /**
         * Execute getUnreadSmsCount request
         * @return UnreadCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UnreadCount execute() throws ApiException {
            ApiResponse<UnreadCount> localVarResp = getUnreadSmsCountWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getUnreadSmsCount request with HTTP info returned
         * @return ApiResponse&lt;UnreadCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnreadCount> executeWithHttpInfo() throws ApiException {
            return getUnreadSmsCountWithHttpInfo();
        }

        /**
         * Execute getUnreadSmsCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnreadCount> _callback) throws ApiException {
            return getUnreadSmsCountAsync(_callback);
        }
    }

    /**
     * Get unread SMS count
     * Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
     * @return APIgetUnreadSmsCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUnreadSmsCountRequest getUnreadSmsCount() {
        return new APIgetUnreadSmsCountRequest();
    }
    private okhttp3.Call replyToSmsMessageCall(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull SmsReplyOptions smsReplyOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsReplyOptions;

        // create path and map variables
        String localVarPath = "/sms/{smsId}/reply"
            .replace("{" + "smsId" + "}", localVarApiClient.escapeString(smsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replyToSmsMessageValidateBeforeCall(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull SmsReplyOptions smsReplyOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsId' is set
        if (smsId == null) {
            throw new ApiException("Missing the required parameter 'smsId' when calling replyToSmsMessage(Async)");
        }

        // verify the required parameter 'smsReplyOptions' is set
        if (smsReplyOptions == null) {
            throw new ApiException("Missing the required parameter 'smsReplyOptions' when calling replyToSmsMessage(Async)");
        }

        return replyToSmsMessageCall(smsId, smsReplyOptions, _callback);

    }


    private ApiResponse<SentSmsDto> replyToSmsMessageWithHttpInfo(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull SmsReplyOptions smsReplyOptions) throws ApiException {
        okhttp3.Call localVarCall = replyToSmsMessageValidateBeforeCall(smsId, smsReplyOptions, null);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replyToSmsMessageAsync(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull SmsReplyOptions smsReplyOptions, final ApiCallback<SentSmsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = replyToSmsMessageValidateBeforeCall(smsId, smsReplyOptions, _callback);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreplyToSmsMessageRequest {
        @javax.annotation.Nonnull
        private final UUID smsId;
        @javax.annotation.Nonnull
        private final SmsReplyOptions smsReplyOptions;

        private APIreplyToSmsMessageRequest(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull SmsReplyOptions smsReplyOptions) {
            this.smsId = smsId;
            this.smsReplyOptions = smsReplyOptions;
        }

        /**
         * Build call for replyToSmsMessage
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return replyToSmsMessageCall(smsId, smsReplyOptions, _callback);
        }

        /**
         * Execute replyToSmsMessage request
         * @return SentSmsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentSmsDto execute() throws ApiException {
            ApiResponse<SentSmsDto> localVarResp = replyToSmsMessageWithHttpInfo(smsId, smsReplyOptions);
            return localVarResp.getData();
        }

        /**
         * Execute replyToSmsMessage request with HTTP info returned
         * @return ApiResponse&lt;SentSmsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentSmsDto> executeWithHttpInfo() throws ApiException {
            return replyToSmsMessageWithHttpInfo(smsId, smsReplyOptions);
        }

        /**
         * Execute replyToSmsMessage request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentSmsDto> _callback) throws ApiException {
            return replyToSmsMessageAsync(smsId, smsReplyOptions, _callback);
        }
    }

    /**
     * Send a reply to a received SMS message. Replies are sent from the receiving number.
     * Reply to an SMS message.
     * @param smsId  (required)
     * @param smsReplyOptions  (required)
     * @return APIreplyToSmsMessageRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIreplyToSmsMessageRequest replyToSmsMessage(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull SmsReplyOptions smsReplyOptions) {
        return new APIreplyToSmsMessageRequest(smsId, smsReplyOptions);
    }
    private okhttp3.Call sendSmsCall(@javax.annotation.Nonnull SmsSendOptions smsSendOptions, @javax.annotation.Nullable String fromPhoneNumber, @javax.annotation.Nullable UUID fromPhoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smsSendOptions;

        // create path and map variables
        String localVarPath = "/sms/send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fromPhoneNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPhoneNumber", fromPhoneNumber));
        }

        if (fromPhoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fromPhoneId", fromPhoneId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSmsValidateBeforeCall(@javax.annotation.Nonnull SmsSendOptions smsSendOptions, @javax.annotation.Nullable String fromPhoneNumber, @javax.annotation.Nullable UUID fromPhoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsSendOptions' is set
        if (smsSendOptions == null) {
            throw new ApiException("Missing the required parameter 'smsSendOptions' when calling sendSms(Async)");
        }

        return sendSmsCall(smsSendOptions, fromPhoneNumber, fromPhoneId, _callback);

    }


    private ApiResponse<SentSmsDto> sendSmsWithHttpInfo(@javax.annotation.Nonnull SmsSendOptions smsSendOptions, @javax.annotation.Nullable String fromPhoneNumber, @javax.annotation.Nullable UUID fromPhoneId) throws ApiException {
        okhttp3.Call localVarCall = sendSmsValidateBeforeCall(smsSendOptions, fromPhoneNumber, fromPhoneId, null);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendSmsAsync(@javax.annotation.Nonnull SmsSendOptions smsSendOptions, @javax.annotation.Nullable String fromPhoneNumber, @javax.annotation.Nullable UUID fromPhoneId, final ApiCallback<SentSmsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSmsValidateBeforeCall(smsSendOptions, fromPhoneNumber, fromPhoneId, _callback);
        Type localVarReturnType = new TypeToken<SentSmsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendSmsRequest {
        @javax.annotation.Nonnull
        private final SmsSendOptions smsSendOptions;
        @javax.annotation.Nullable
        private String fromPhoneNumber;
        @javax.annotation.Nullable
        private UUID fromPhoneId;

        private APIsendSmsRequest(@javax.annotation.Nonnull SmsSendOptions smsSendOptions) {
            this.smsSendOptions = smsSendOptions;
        }

        /**
         * Set fromPhoneNumber
         * @param fromPhoneNumber Phone number to send from in E.164 format (optional)
         * @return APIsendSmsRequest
         */
        public APIsendSmsRequest fromPhoneNumber(@javax.annotation.Nullable String fromPhoneNumber) {
            this.fromPhoneNumber = fromPhoneNumber;
            return this;
        }

        /**
         * Set fromPhoneId
         * @param fromPhoneId Phone number ID to send from in UUID form (optional)
         * @return APIsendSmsRequest
         */
        public APIsendSmsRequest fromPhoneId(@javax.annotation.Nullable UUID fromPhoneId) {
            this.fromPhoneId = fromPhoneId;
            return this;
        }

        /**
         * Build call for sendSms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendSmsCall(smsSendOptions, fromPhoneNumber, fromPhoneId, _callback);
        }

        /**
         * Execute sendSms request
         * @return SentSmsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentSmsDto execute() throws ApiException {
            ApiResponse<SentSmsDto> localVarResp = sendSmsWithHttpInfo(smsSendOptions, fromPhoneNumber, fromPhoneId);
            return localVarResp.getData();
        }

        /**
         * Execute sendSms request with HTTP info returned
         * @return ApiResponse&lt;SentSmsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentSmsDto> executeWithHttpInfo() throws ApiException {
            return sendSmsWithHttpInfo(smsSendOptions, fromPhoneNumber, fromPhoneId);
        }

        /**
         * Execute sendSms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentSmsDto> _callback) throws ApiException {
            return sendSmsAsync(smsSendOptions, fromPhoneNumber, fromPhoneId, _callback);
        }
    }

    /**
     * 
     * 
     * @param smsSendOptions  (required)
     * @return APIsendSmsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsendSmsRequest sendSms(@javax.annotation.Nonnull SmsSendOptions smsSendOptions) {
        return new APIsendSmsRequest(smsSendOptions);
    }
    private okhttp3.Call setSmsFavouritedCall(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull Boolean favourited, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/sms/{smsId}/favourite"
            .replace("{" + "smsId" + "}", localVarApiClient.escapeString(smsId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (favourited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourited", favourited));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSmsFavouritedValidateBeforeCall(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull Boolean favourited, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'smsId' is set
        if (smsId == null) {
            throw new ApiException("Missing the required parameter 'smsId' when calling setSmsFavourited(Async)");
        }

        // verify the required parameter 'favourited' is set
        if (favourited == null) {
            throw new ApiException("Missing the required parameter 'favourited' when calling setSmsFavourited(Async)");
        }

        return setSmsFavouritedCall(smsId, favourited, _callback);

    }


    private ApiResponse<SmsDto> setSmsFavouritedWithHttpInfo(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull Boolean favourited) throws ApiException {
        okhttp3.Call localVarCall = setSmsFavouritedValidateBeforeCall(smsId, favourited, null);
        Type localVarReturnType = new TypeToken<SmsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setSmsFavouritedAsync(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull Boolean favourited, final ApiCallback<SmsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSmsFavouritedValidateBeforeCall(smsId, favourited, _callback);
        Type localVarReturnType = new TypeToken<SmsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetSmsFavouritedRequest {
        @javax.annotation.Nonnull
        private final UUID smsId;
        @javax.annotation.Nonnull
        private final Boolean favourited;

        private APIsetSmsFavouritedRequest(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull Boolean favourited) {
            this.smsId = smsId;
            this.favourited = favourited;
        }

        /**
         * Build call for setSmsFavourited
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setSmsFavouritedCall(smsId, favourited, _callback);
        }

        /**
         * Execute setSmsFavourited request
         * @return SmsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public SmsDto execute() throws ApiException {
            ApiResponse<SmsDto> localVarResp = setSmsFavouritedWithHttpInfo(smsId, favourited);
            return localVarResp.getData();
        }

        /**
         * Execute setSmsFavourited request with HTTP info returned
         * @return ApiResponse&lt;SmsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmsDto> executeWithHttpInfo() throws ApiException {
            return setSmsFavouritedWithHttpInfo(smsId, favourited);
        }

        /**
         * Execute setSmsFavourited request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmsDto> _callback) throws ApiException {
            return setSmsFavouritedAsync(smsId, favourited, _callback);
        }
    }

    /**
     * 
     * 
     * @param smsId ID of SMS to set favourite state (required)
     * @param favourited  (required)
     * @return APIsetSmsFavouritedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIsetSmsFavouritedRequest setSmsFavourited(@javax.annotation.Nonnull UUID smsId, @javax.annotation.Nonnull Boolean favourited) {
        return new APIsetSmsFavouritedRequest(smsId, favourited);
    }
}
