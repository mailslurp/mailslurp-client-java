/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.ImapServerFetchResult;
import com.mailslurp.models.ImapServerGetResult;
import com.mailslurp.models.ImapServerListOptions;
import com.mailslurp.models.ImapServerListResult;
import com.mailslurp.models.ImapServerMailboxResult;
import com.mailslurp.models.ImapServerSearchOptions;
import com.mailslurp.models.ImapServerSearchResult;
import com.mailslurp.models.ImapServerStatusOptions;
import com.mailslurp.models.ImapServerStatusResult;
import com.mailslurp.models.ImapUpdateFlagsOptions;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImapControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImapControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImapControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call imapServerFetchCall(@javax.annotation.Nonnull Long seqNum, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imap/server/fetch";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (seqNum != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seqNum", seqNum));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerFetchValidateBeforeCall(@javax.annotation.Nonnull Long seqNum, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seqNum' is set
        if (seqNum == null) {
            throw new ApiException("Missing the required parameter 'seqNum' when calling imapServerFetch(Async)");
        }

        return imapServerFetchCall(seqNum, inboxId, _callback);

    }


    private ApiResponse<ImapServerFetchResult> imapServerFetchWithHttpInfo(@javax.annotation.Nonnull Long seqNum, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = imapServerFetchValidateBeforeCall(seqNum, inboxId, null);
        Type localVarReturnType = new TypeToken<ImapServerFetchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call imapServerFetchAsync(@javax.annotation.Nonnull Long seqNum, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapServerFetchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerFetchValidateBeforeCall(seqNum, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapServerFetchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIimapServerFetchRequest {
        @javax.annotation.Nonnull
        private final Long seqNum;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIimapServerFetchRequest(@javax.annotation.Nonnull Long seqNum) {
            this.seqNum = seqNum;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID to search (optional)
         * @return APIimapServerFetchRequest
         */
        public APIimapServerFetchRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for imapServerFetch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerFetchCall(seqNum, inboxId, _callback);
        }

        /**
         * Execute imapServerFetch request
         * @return ImapServerFetchResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapServerFetchResult execute() throws ApiException {
            ApiResponse<ImapServerFetchResult> localVarResp = imapServerFetchWithHttpInfo(seqNum, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute imapServerFetch request with HTTP info returned
         * @return ApiResponse&lt;ImapServerFetchResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapServerFetchResult> executeWithHttpInfo() throws ApiException {
            return imapServerFetchWithHttpInfo(seqNum, inboxId);
        }

        /**
         * Execute imapServerFetch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapServerFetchResult> _callback) throws ApiException {
            return imapServerFetchAsync(seqNum, inboxId, _callback);
        }
    }

    /**
     * Fetch message in an inbox
     * 
     * @param seqNum  (required)
     * @return APIimapServerFetchRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerFetchRequest imapServerFetch(@javax.annotation.Nonnull Long seqNum) {
        return new APIimapServerFetchRequest(seqNum);
    }
    private okhttp3.Call imapServerGetCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imap/server/get";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailId", emailId));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerGetValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling imapServerGet(Async)");
        }

        return imapServerGetCall(emailId, inboxId, _callback);

    }


    private ApiResponse<ImapServerGetResult> imapServerGetWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = imapServerGetValidateBeforeCall(emailId, inboxId, null);
        Type localVarReturnType = new TypeToken<ImapServerGetResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call imapServerGetAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapServerGetResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerGetValidateBeforeCall(emailId, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapServerGetResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIimapServerGetRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIimapServerGetRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID to search (optional)
         * @return APIimapServerGetRequest
         */
        public APIimapServerGetRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for imapServerGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerGetCall(emailId, inboxId, _callback);
        }

        /**
         * Execute imapServerGet request
         * @return ImapServerGetResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapServerGetResult execute() throws ApiException {
            ApiResponse<ImapServerGetResult> localVarResp = imapServerGetWithHttpInfo(emailId, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute imapServerGet request with HTTP info returned
         * @return ApiResponse&lt;ImapServerGetResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapServerGetResult> executeWithHttpInfo() throws ApiException {
            return imapServerGetWithHttpInfo(emailId, inboxId);
        }

        /**
         * Execute imapServerGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapServerGetResult> _callback) throws ApiException {
            return imapServerGetAsync(emailId, inboxId, _callback);
        }
    }

    /**
     * Get a message by email ID
     * 
     * @param emailId Email ID to get (required)
     * @return APIimapServerGetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerGetRequest imapServerGet(@javax.annotation.Nonnull UUID emailId) {
        return new APIimapServerGetRequest(emailId);
    }
    private okhttp3.Call imapServerListCall(@javax.annotation.Nonnull ImapServerListOptions imapServerListOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imapServerListOptions;

        // create path and map variables
        String localVarPath = "/imap/server/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerListValidateBeforeCall(@javax.annotation.Nonnull ImapServerListOptions imapServerListOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imapServerListOptions' is set
        if (imapServerListOptions == null) {
            throw new ApiException("Missing the required parameter 'imapServerListOptions' when calling imapServerList(Async)");
        }

        return imapServerListCall(imapServerListOptions, inboxId, _callback);

    }


    private ApiResponse<ImapServerListResult> imapServerListWithHttpInfo(@javax.annotation.Nonnull ImapServerListOptions imapServerListOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = imapServerListValidateBeforeCall(imapServerListOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<ImapServerListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call imapServerListAsync(@javax.annotation.Nonnull ImapServerListOptions imapServerListOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapServerListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerListValidateBeforeCall(imapServerListOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapServerListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIimapServerListRequest {
        @javax.annotation.Nonnull
        private final ImapServerListOptions imapServerListOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIimapServerListRequest(@javax.annotation.Nonnull ImapServerListOptions imapServerListOptions) {
            this.imapServerListOptions = imapServerListOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID to list (optional)
         * @return APIimapServerListRequest
         */
        public APIimapServerListRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for imapServerList
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerListCall(imapServerListOptions, inboxId, _callback);
        }

        /**
         * Execute imapServerList request
         * @return ImapServerListResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapServerListResult execute() throws ApiException {
            ApiResponse<ImapServerListResult> localVarResp = imapServerListWithHttpInfo(imapServerListOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute imapServerList request with HTTP info returned
         * @return ApiResponse&lt;ImapServerListResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapServerListResult> executeWithHttpInfo() throws ApiException {
            return imapServerListWithHttpInfo(imapServerListOptions, inboxId);
        }

        /**
         * Execute imapServerList request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapServerListResult> _callback) throws ApiException {
            return imapServerListAsync(imapServerListOptions, inboxId, _callback);
        }
    }

    /**
     * List messages in an inbox
     * 
     * @param imapServerListOptions  (required)
     * @return APIimapServerListRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerListRequest imapServerList(@javax.annotation.Nonnull ImapServerListOptions imapServerListOptions) {
        return new APIimapServerListRequest(imapServerListOptions);
    }
    private okhttp3.Call imapServerMailboxCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/imap/server/mailbox";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerMailboxValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling imapServerMailbox(Async)");
        }

        return imapServerMailboxCall(name, _callback);

    }


    private ApiResponse<ImapServerMailboxResult> imapServerMailboxWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = imapServerMailboxValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<ImapServerMailboxResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call imapServerMailboxAsync(@javax.annotation.Nonnull String name, final ApiCallback<ImapServerMailboxResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerMailboxValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<ImapServerMailboxResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIimapServerMailboxRequest {
        @javax.annotation.Nonnull
        private final String name;

        private APIimapServerMailboxRequest(@javax.annotation.Nonnull String name) {
            this.name = name;
        }

        /**
         * Build call for imapServerMailbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerMailboxCall(name, _callback);
        }

        /**
         * Execute imapServerMailbox request
         * @return ImapServerMailboxResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapServerMailboxResult execute() throws ApiException {
            ApiResponse<ImapServerMailboxResult> localVarResp = imapServerMailboxWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute imapServerMailbox request with HTTP info returned
         * @return ApiResponse&lt;ImapServerMailboxResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapServerMailboxResult> executeWithHttpInfo() throws ApiException {
            return imapServerMailboxWithHttpInfo(name);
        }

        /**
         * Execute imapServerMailbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapServerMailboxResult> _callback) throws ApiException {
            return imapServerMailboxAsync(name, _callback);
        }
    }

    /**
     * Create a new mailbox if possible
     * 
     * @param name Inbox email address to create (required)
     * @return APIimapServerMailboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerMailboxRequest imapServerMailbox(@javax.annotation.Nonnull String name) {
        return new APIimapServerMailboxRequest(name);
    }
    private okhttp3.Call imapServerSearchCall(@javax.annotation.Nonnull ImapServerSearchOptions imapServerSearchOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imapServerSearchOptions;

        // create path and map variables
        String localVarPath = "/imap/server/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerSearchValidateBeforeCall(@javax.annotation.Nonnull ImapServerSearchOptions imapServerSearchOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imapServerSearchOptions' is set
        if (imapServerSearchOptions == null) {
            throw new ApiException("Missing the required parameter 'imapServerSearchOptions' when calling imapServerSearch(Async)");
        }

        return imapServerSearchCall(imapServerSearchOptions, inboxId, _callback);

    }


    private ApiResponse<ImapServerSearchResult> imapServerSearchWithHttpInfo(@javax.annotation.Nonnull ImapServerSearchOptions imapServerSearchOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = imapServerSearchValidateBeforeCall(imapServerSearchOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<ImapServerSearchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call imapServerSearchAsync(@javax.annotation.Nonnull ImapServerSearchOptions imapServerSearchOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapServerSearchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerSearchValidateBeforeCall(imapServerSearchOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapServerSearchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIimapServerSearchRequest {
        @javax.annotation.Nonnull
        private final ImapServerSearchOptions imapServerSearchOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIimapServerSearchRequest(@javax.annotation.Nonnull ImapServerSearchOptions imapServerSearchOptions) {
            this.imapServerSearchOptions = imapServerSearchOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID to search (optional)
         * @return APIimapServerSearchRequest
         */
        public APIimapServerSearchRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for imapServerSearch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerSearchCall(imapServerSearchOptions, inboxId, _callback);
        }

        /**
         * Execute imapServerSearch request
         * @return ImapServerSearchResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapServerSearchResult execute() throws ApiException {
            ApiResponse<ImapServerSearchResult> localVarResp = imapServerSearchWithHttpInfo(imapServerSearchOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute imapServerSearch request with HTTP info returned
         * @return ApiResponse&lt;ImapServerSearchResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapServerSearchResult> executeWithHttpInfo() throws ApiException {
            return imapServerSearchWithHttpInfo(imapServerSearchOptions, inboxId);
        }

        /**
         * Execute imapServerSearch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapServerSearchResult> _callback) throws ApiException {
            return imapServerSearchAsync(imapServerSearchOptions, inboxId, _callback);
        }
    }

    /**
     * Search messages in an inbox
     * 
     * @param imapServerSearchOptions  (required)
     * @return APIimapServerSearchRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerSearchRequest imapServerSearch(@javax.annotation.Nonnull ImapServerSearchOptions imapServerSearchOptions) {
        return new APIimapServerSearchRequest(imapServerSearchOptions);
    }
    private okhttp3.Call imapServerStatusCall(@javax.annotation.Nonnull ImapServerStatusOptions imapServerStatusOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imapServerStatusOptions;

        // create path and map variables
        String localVarPath = "/imap/server/status";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerStatusValidateBeforeCall(@javax.annotation.Nonnull ImapServerStatusOptions imapServerStatusOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imapServerStatusOptions' is set
        if (imapServerStatusOptions == null) {
            throw new ApiException("Missing the required parameter 'imapServerStatusOptions' when calling imapServerStatus(Async)");
        }

        return imapServerStatusCall(imapServerStatusOptions, inboxId, _callback);

    }


    private ApiResponse<ImapServerStatusResult> imapServerStatusWithHttpInfo(@javax.annotation.Nonnull ImapServerStatusOptions imapServerStatusOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = imapServerStatusValidateBeforeCall(imapServerStatusOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<ImapServerStatusResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call imapServerStatusAsync(@javax.annotation.Nonnull ImapServerStatusOptions imapServerStatusOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapServerStatusResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerStatusValidateBeforeCall(imapServerStatusOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapServerStatusResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIimapServerStatusRequest {
        @javax.annotation.Nonnull
        private final ImapServerStatusOptions imapServerStatusOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIimapServerStatusRequest(@javax.annotation.Nonnull ImapServerStatusOptions imapServerStatusOptions) {
            this.imapServerStatusOptions = imapServerStatusOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID to list (optional)
         * @return APIimapServerStatusRequest
         */
        public APIimapServerStatusRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for imapServerStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerStatusCall(imapServerStatusOptions, inboxId, _callback);
        }

        /**
         * Execute imapServerStatus request
         * @return ImapServerStatusResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapServerStatusResult execute() throws ApiException {
            ApiResponse<ImapServerStatusResult> localVarResp = imapServerStatusWithHttpInfo(imapServerStatusOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute imapServerStatus request with HTTP info returned
         * @return ApiResponse&lt;ImapServerStatusResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapServerStatusResult> executeWithHttpInfo() throws ApiException {
            return imapServerStatusWithHttpInfo(imapServerStatusOptions, inboxId);
        }

        /**
         * Execute imapServerStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapServerStatusResult> _callback) throws ApiException {
            return imapServerStatusAsync(imapServerStatusOptions, inboxId, _callback);
        }
    }

    /**
     * Get status for mailbox
     * 
     * @param imapServerStatusOptions  (required)
     * @return APIimapServerStatusRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerStatusRequest imapServerStatus(@javax.annotation.Nonnull ImapServerStatusOptions imapServerStatusOptions) {
        return new APIimapServerStatusRequest(imapServerStatusOptions);
    }
    private okhttp3.Call imapServerUpdateFlagsCall(@javax.annotation.Nonnull ImapUpdateFlagsOptions imapUpdateFlagsOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imapUpdateFlagsOptions;

        // create path and map variables
        String localVarPath = "/imap/server/update-flags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imapServerUpdateFlagsValidateBeforeCall(@javax.annotation.Nonnull ImapUpdateFlagsOptions imapUpdateFlagsOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imapUpdateFlagsOptions' is set
        if (imapUpdateFlagsOptions == null) {
            throw new ApiException("Missing the required parameter 'imapUpdateFlagsOptions' when calling imapServerUpdateFlags(Async)");
        }

        return imapServerUpdateFlagsCall(imapUpdateFlagsOptions, inboxId, _callback);

    }


    private ApiResponse<Void> imapServerUpdateFlagsWithHttpInfo(@javax.annotation.Nonnull ImapUpdateFlagsOptions imapUpdateFlagsOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = imapServerUpdateFlagsValidateBeforeCall(imapUpdateFlagsOptions, inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call imapServerUpdateFlagsAsync(@javax.annotation.Nonnull ImapUpdateFlagsOptions imapUpdateFlagsOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imapServerUpdateFlagsValidateBeforeCall(imapUpdateFlagsOptions, inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIimapServerUpdateFlagsRequest {
        @javax.annotation.Nonnull
        private final ImapUpdateFlagsOptions imapUpdateFlagsOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIimapServerUpdateFlagsRequest(@javax.annotation.Nonnull ImapUpdateFlagsOptions imapUpdateFlagsOptions) {
            this.imapUpdateFlagsOptions = imapUpdateFlagsOptions;
        }

        /**
         * Set inboxId
         * @param inboxId  (optional)
         * @return APIimapServerUpdateFlagsRequest
         */
        public APIimapServerUpdateFlagsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for imapServerUpdateFlags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return imapServerUpdateFlagsCall(imapUpdateFlagsOptions, inboxId, _callback);
        }

        /**
         * Execute imapServerUpdateFlags request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            imapServerUpdateFlagsWithHttpInfo(imapUpdateFlagsOptions, inboxId);
        }

        /**
         * Execute imapServerUpdateFlags request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return imapServerUpdateFlagsWithHttpInfo(imapUpdateFlagsOptions, inboxId);
        }

        /**
         * Execute imapServerUpdateFlags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return imapServerUpdateFlagsAsync(imapUpdateFlagsOptions, inboxId, _callback);
        }
    }

    /**
     * 
     * Update message flags
     * @param imapUpdateFlagsOptions  (required)
     * @return APIimapServerUpdateFlagsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIimapServerUpdateFlagsRequest imapServerUpdateFlags(@javax.annotation.Nonnull ImapUpdateFlagsOptions imapUpdateFlagsOptions) {
        return new APIimapServerUpdateFlagsRequest(imapUpdateFlagsOptions);
    }
}
