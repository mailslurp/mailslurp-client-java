/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.ConnectorDto;
import com.mailslurp.models.ConnectorEventDto;
import com.mailslurp.models.ConnectorImapConnectionDto;
import com.mailslurp.models.ConnectorImapConnectionTestResult;
import com.mailslurp.models.ConnectorProviderSettingsDto;
import com.mailslurp.models.ConnectorSmtpConnectionDto;
import com.mailslurp.models.ConnectorSmtpConnectionTestResult;
import com.mailslurp.models.ConnectorSyncRequestResult;
import com.mailslurp.models.ConnectorSyncSettingsDto;
import com.mailslurp.models.CreateConnectorImapConnectionOptions;
import com.mailslurp.models.CreateConnectorOptions;
import com.mailslurp.models.CreateConnectorSmtpConnectionOptions;
import com.mailslurp.models.CreateConnectorSyncSettingsOptions;
import com.mailslurp.models.CreateConnectorWithOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.OptionalConnectorDto;
import com.mailslurp.models.OptionalConnectorImapConnectionDto;
import com.mailslurp.models.OptionalConnectorSmtpConnectionDto;
import com.mailslurp.models.OptionalConnectorSyncSettingsDto;
import com.mailslurp.models.PageConnector;
import com.mailslurp.models.PageConnectorEvents;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ConnectorControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ConnectorControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ConnectorControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createConnectorCall(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorOptions;

        // create path and map variables
        String localVarPath = "/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectorValidateBeforeCall(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createConnectorOptions' is set
        if (createConnectorOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorOptions' when calling createConnector(Async)");
        }

        return createConnectorCall(createConnectorOptions, inboxId, _callback);

    }


    private ApiResponse<ConnectorDto> createConnectorWithHttpInfo(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = createConnectorValidateBeforeCall(createConnectorOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConnectorAsync(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectorValidateBeforeCall(createConnectorOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConnectorRequest {
        @javax.annotation.Nonnull
        private final CreateConnectorOptions createConnectorOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIcreateConnectorRequest(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) {
            this.createConnectorOptions = createConnectorOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID to associate with the connector (optional)
         * @return APIcreateConnectorRequest
         */
        public APIcreateConnectorRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for createConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConnectorCall(createConnectorOptions, inboxId, _callback);
        }

        /**
         * Execute createConnector request
         * @return ConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorDto execute() throws ApiException {
            ApiResponse<ConnectorDto> localVarResp = createConnectorWithHttpInfo(createConnectorOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute createConnector request with HTTP info returned
         * @return ApiResponse&lt;ConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorDto> executeWithHttpInfo() throws ApiException {
            return createConnectorWithHttpInfo(createConnectorOptions, inboxId);
        }

        /**
         * Execute createConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorDto> _callback) throws ApiException {
            return createConnectorAsync(createConnectorOptions, inboxId, _callback);
        }
    }

    /**
     * Create an inbox connector
     * Sync emails between external mailboxes and MailSlurp inboxes
     * @param createConnectorOptions  (required)
     * @return APIcreateConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConnectorRequest createConnector(@javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) {
        return new APIcreateConnectorRequest(createConnectorOptions);
    }
    private okhttp3.Call createConnectorImapConnectionCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorImapConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/imap"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectorImapConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createConnectorImapConnection(Async)");
        }

        // verify the required parameter 'createConnectorImapConnectionOptions' is set
        if (createConnectorImapConnectionOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorImapConnectionOptions' when calling createConnectorImapConnection(Async)");
        }

        return createConnectorImapConnectionCall(id, createConnectorImapConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorImapConnectionDto> createConnectorImapConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = createConnectorImapConnectionValidateBeforeCall(id, createConnectorImapConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConnectorImapConnectionAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback<ConnectorImapConnectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectorImapConnectionValidateBeforeCall(id, createConnectorImapConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConnectorImapConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions;

        private APIcreateConnectorImapConnectionRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
            this.id = id;
            this.createConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
        }

        /**
         * Build call for createConnectorImapConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConnectorImapConnectionCall(id, createConnectorImapConnectionOptions, _callback);
        }

        /**
         * Execute createConnectorImapConnection request
         * @return ConnectorImapConnectionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorImapConnectionDto execute() throws ApiException {
            ApiResponse<ConnectorImapConnectionDto> localVarResp = createConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createConnectorImapConnection request with HTTP info returned
         * @return ApiResponse&lt;ConnectorImapConnectionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorImapConnectionDto> executeWithHttpInfo() throws ApiException {
            return createConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
        }

        /**
         * Execute createConnectorImapConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorImapConnectionDto> _callback) throws ApiException {
            return createConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions, _callback);
        }
    }

    /**
     * Create an inbox connector IMAP connection
     * Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
     * @param id  (required)
     * @param createConnectorImapConnectionOptions  (required)
     * @return APIcreateConnectorImapConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConnectorImapConnectionRequest createConnectorImapConnection(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
        return new APIcreateConnectorImapConnectionRequest(id, createConnectorImapConnectionOptions);
    }
    private okhttp3.Call createConnectorSmtpConnectionCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorSmtpConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/smtp"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectorSmtpConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createConnectorSmtpConnection(Async)");
        }

        // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
        if (createConnectorSmtpConnectionOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorSmtpConnectionOptions' when calling createConnectorSmtpConnection(Async)");
        }

        return createConnectorSmtpConnectionCall(id, createConnectorSmtpConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorSmtpConnectionDto> createConnectorSmtpConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = createConnectorSmtpConnectionValidateBeforeCall(id, createConnectorSmtpConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConnectorSmtpConnectionAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback<ConnectorSmtpConnectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectorSmtpConnectionValidateBeforeCall(id, createConnectorSmtpConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConnectorSmtpConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions;

        private APIcreateConnectorSmtpConnectionRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
            this.id = id;
            this.createConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
        }

        /**
         * Build call for createConnectorSmtpConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConnectorSmtpConnectionCall(id, createConnectorSmtpConnectionOptions, _callback);
        }

        /**
         * Execute createConnectorSmtpConnection request
         * @return ConnectorSmtpConnectionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorSmtpConnectionDto execute() throws ApiException {
            ApiResponse<ConnectorSmtpConnectionDto> localVarResp = createConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createConnectorSmtpConnection request with HTTP info returned
         * @return ApiResponse&lt;ConnectorSmtpConnectionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorSmtpConnectionDto> executeWithHttpInfo() throws ApiException {
            return createConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
        }

        /**
         * Execute createConnectorSmtpConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorSmtpConnectionDto> _callback) throws ApiException {
            return createConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions, _callback);
        }
    }

    /**
     * Create an inbox connector SMTP connection
     * Allows sending via connector and email is routed to connected inbox and sent via SMTP
     * @param id  (required)
     * @param createConnectorSmtpConnectionOptions  (required)
     * @return APIcreateConnectorSmtpConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConnectorSmtpConnectionRequest createConnectorSmtpConnection(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
        return new APIcreateConnectorSmtpConnectionRequest(id, createConnectorSmtpConnectionOptions);
    }
    private okhttp3.Call createConnectorSyncSettingsCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorSyncSettingsOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/sync-settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectorSyncSettingsValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling createConnectorSyncSettings(Async)");
        }

        // verify the required parameter 'createConnectorSyncSettingsOptions' is set
        if (createConnectorSyncSettingsOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorSyncSettingsOptions' when calling createConnectorSyncSettings(Async)");
        }

        return createConnectorSyncSettingsCall(id, createConnectorSyncSettingsOptions, _callback);

    }


    private ApiResponse<ConnectorSyncSettingsDto> createConnectorSyncSettingsWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions) throws ApiException {
        okhttp3.Call localVarCall = createConnectorSyncSettingsValidateBeforeCall(id, createConnectorSyncSettingsOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorSyncSettingsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConnectorSyncSettingsAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions, final ApiCallback<ConnectorSyncSettingsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectorSyncSettingsValidateBeforeCall(id, createConnectorSyncSettingsOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorSyncSettingsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConnectorSyncSettingsRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions;

        private APIcreateConnectorSyncSettingsRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions) {
            this.id = id;
            this.createConnectorSyncSettingsOptions = createConnectorSyncSettingsOptions;
        }

        /**
         * Build call for createConnectorSyncSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConnectorSyncSettingsCall(id, createConnectorSyncSettingsOptions, _callback);
        }

        /**
         * Execute createConnectorSyncSettings request
         * @return ConnectorSyncSettingsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorSyncSettingsDto execute() throws ApiException {
            ApiResponse<ConnectorSyncSettingsDto> localVarResp = createConnectorSyncSettingsWithHttpInfo(id, createConnectorSyncSettingsOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createConnectorSyncSettings request with HTTP info returned
         * @return ApiResponse&lt;ConnectorSyncSettingsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorSyncSettingsDto> executeWithHttpInfo() throws ApiException {
            return createConnectorSyncSettingsWithHttpInfo(id, createConnectorSyncSettingsOptions);
        }

        /**
         * Execute createConnectorSyncSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorSyncSettingsDto> _callback) throws ApiException {
            return createConnectorSyncSettingsAsync(id, createConnectorSyncSettingsOptions, _callback);
        }
    }

    /**
     * Create an inbox connector sync settings
     * Configure automatic pull or emails from external inboxes using an interval or schedule
     * @param id  (required)
     * @param createConnectorSyncSettingsOptions  (required)
     * @return APIcreateConnectorSyncSettingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConnectorSyncSettingsRequest createConnectorSyncSettings(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions) {
        return new APIcreateConnectorSyncSettingsRequest(id, createConnectorSyncSettingsOptions);
    }
    private okhttp3.Call createConnectorWithOptionsCall(@javax.annotation.Nonnull CreateConnectorWithOptions createConnectorWithOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorWithOptions;

        // create path and map variables
        String localVarPath = "/connectors/withOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createConnectorWithOptionsValidateBeforeCall(@javax.annotation.Nonnull CreateConnectorWithOptions createConnectorWithOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createConnectorWithOptions' is set
        if (createConnectorWithOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorWithOptions' when calling createConnectorWithOptions(Async)");
        }

        return createConnectorWithOptionsCall(createConnectorWithOptions, inboxId, _callback);

    }


    private ApiResponse<ConnectorDto> createConnectorWithOptionsWithHttpInfo(@javax.annotation.Nonnull CreateConnectorWithOptions createConnectorWithOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = createConnectorWithOptionsValidateBeforeCall(createConnectorWithOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createConnectorWithOptionsAsync(@javax.annotation.Nonnull CreateConnectorWithOptions createConnectorWithOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<ConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createConnectorWithOptionsValidateBeforeCall(createConnectorWithOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateConnectorWithOptionsRequest {
        @javax.annotation.Nonnull
        private final CreateConnectorWithOptions createConnectorWithOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIcreateConnectorWithOptionsRequest(@javax.annotation.Nonnull CreateConnectorWithOptions createConnectorWithOptions) {
            this.createConnectorWithOptions = createConnectorWithOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID to associate with the connector (optional)
         * @return APIcreateConnectorWithOptionsRequest
         */
        public APIcreateConnectorWithOptionsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for createConnectorWithOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createConnectorWithOptionsCall(createConnectorWithOptions, inboxId, _callback);
        }

        /**
         * Execute createConnectorWithOptions request
         * @return ConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorDto execute() throws ApiException {
            ApiResponse<ConnectorDto> localVarResp = createConnectorWithOptionsWithHttpInfo(createConnectorWithOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute createConnectorWithOptions request with HTTP info returned
         * @return ApiResponse&lt;ConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorDto> executeWithHttpInfo() throws ApiException {
            return createConnectorWithOptionsWithHttpInfo(createConnectorWithOptions, inboxId);
        }

        /**
         * Execute createConnectorWithOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorDto> _callback) throws ApiException {
            return createConnectorWithOptionsAsync(createConnectorWithOptions, inboxId, _callback);
        }
    }

    /**
     * Create an inbox connector with options
     * Sync emails between external mailboxes and MailSlurp inboxes
     * @param createConnectorWithOptions  (required)
     * @return APIcreateConnectorWithOptionsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateConnectorWithOptionsRequest createConnectorWithOptions(@javax.annotation.Nonnull CreateConnectorWithOptions createConnectorWithOptions) {
        return new APIcreateConnectorWithOptionsRequest(createConnectorWithOptions);
    }
    private okhttp3.Call deleteAllConnectorCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllConnectorValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAllConnectorCall(_callback);

    }


    private ApiResponse<Void> deleteAllConnectorWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllConnectorValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllConnectorAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllConnectorValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllConnectorRequest {

        private APIdeleteAllConnectorRequest() {
        }

        /**
         * Build call for deleteAllConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllConnectorCall(_callback);
        }

        /**
         * Execute deleteAllConnector request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllConnectorWithHttpInfo();
        }

        /**
         * Execute deleteAllConnector request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllConnectorWithHttpInfo();
        }

        /**
         * Execute deleteAllConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllConnectorAsync(_callback);
        }
    }

    /**
     * Delete all inbox connectors
     * 
     * @return APIdeleteAllConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllConnectorRequest deleteAllConnector() {
        return new APIdeleteAllConnectorRequest();
    }
    private okhttp3.Call deleteConnectorCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectorValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConnector(Async)");
        }

        return deleteConnectorCall(id, _callback);

    }


    private ApiResponse<Void> deleteConnectorWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectorValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteConnectorAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectorValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteConnectorRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteConnectorRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConnectorCall(id, _callback);
        }

        /**
         * Execute deleteConnector request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteConnectorWithHttpInfo(id);
        }

        /**
         * Execute deleteConnector request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteConnectorWithHttpInfo(id);
        }

        /**
         * Execute deleteConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteConnectorAsync(id, _callback);
        }
    }

    /**
     * Delete an inbox connector
     * 
     * @param id  (required)
     * @return APIdeleteConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConnectorRequest deleteConnector(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteConnectorRequest(id);
    }
    private okhttp3.Call deleteConnectorImapConnectionCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/imap"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectorImapConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConnectorImapConnection(Async)");
        }

        return deleteConnectorImapConnectionCall(id, _callback);

    }


    private ApiResponse<Void> deleteConnectorImapConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectorImapConnectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteConnectorImapConnectionAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectorImapConnectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteConnectorImapConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteConnectorImapConnectionRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteConnectorImapConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConnectorImapConnectionCall(id, _callback);
        }

        /**
         * Execute deleteConnectorImapConnection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteConnectorImapConnectionWithHttpInfo(id);
        }

        /**
         * Execute deleteConnectorImapConnection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteConnectorImapConnectionWithHttpInfo(id);
        }

        /**
         * Execute deleteConnectorImapConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteConnectorImapConnectionAsync(id, _callback);
        }
    }

    /**
     * Delete an inbox connector IMAP connection
     * Delete IMAP connection for external inbox
     * @param id  (required)
     * @return APIdeleteConnectorImapConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConnectorImapConnectionRequest deleteConnectorImapConnection(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteConnectorImapConnectionRequest(id);
    }
    private okhttp3.Call deleteConnectorSmtpConnectionCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/smtp"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectorSmtpConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConnectorSmtpConnection(Async)");
        }

        return deleteConnectorSmtpConnectionCall(id, _callback);

    }


    private ApiResponse<Void> deleteConnectorSmtpConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectorSmtpConnectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteConnectorSmtpConnectionAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectorSmtpConnectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteConnectorSmtpConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteConnectorSmtpConnectionRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteConnectorSmtpConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConnectorSmtpConnectionCall(id, _callback);
        }

        /**
         * Execute deleteConnectorSmtpConnection request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteConnectorSmtpConnectionWithHttpInfo(id);
        }

        /**
         * Execute deleteConnectorSmtpConnection request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteConnectorSmtpConnectionWithHttpInfo(id);
        }

        /**
         * Execute deleteConnectorSmtpConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteConnectorSmtpConnectionAsync(id, _callback);
        }
    }

    /**
     * Delete an inbox connector SMTP connection
     * Delete SMTP connection for external inbox
     * @param id  (required)
     * @return APIdeleteConnectorSmtpConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConnectorSmtpConnectionRequest deleteConnectorSmtpConnection(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteConnectorSmtpConnectionRequest(id);
    }
    private okhttp3.Call deleteConnectorSyncSettingsCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/sync-settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteConnectorSyncSettingsValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteConnectorSyncSettings(Async)");
        }

        return deleteConnectorSyncSettingsCall(id, _callback);

    }


    private ApiResponse<Void> deleteConnectorSyncSettingsWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteConnectorSyncSettingsValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteConnectorSyncSettingsAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteConnectorSyncSettingsValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteConnectorSyncSettingsRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteConnectorSyncSettingsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteConnectorSyncSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteConnectorSyncSettingsCall(id, _callback);
        }

        /**
         * Execute deleteConnectorSyncSettings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteConnectorSyncSettingsWithHttpInfo(id);
        }

        /**
         * Execute deleteConnectorSyncSettings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteConnectorSyncSettingsWithHttpInfo(id);
        }

        /**
         * Execute deleteConnectorSyncSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteConnectorSyncSettingsAsync(id, _callback);
        }
    }

    /**
     * Create an inbox connector sync settings
     * Configure automatic pull or emails from external inboxes using an interval or schedule
     * @param id  (required)
     * @return APIdeleteConnectorSyncSettingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteConnectorSyncSettingsRequest deleteConnectorSyncSettings(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteConnectorSyncSettingsRequest(id);
    }
    private okhttp3.Call getAllConnectorEventsCall(@javax.annotation.Nullable UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllConnectorEventsValidateBeforeCall(@javax.annotation.Nullable UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        return getAllConnectorEventsCall(id, page, size, sort, since, before, eventType, _callback);

    }


    private ApiResponse<PageConnectorEvents> getAllConnectorEventsWithHttpInfo(@javax.annotation.Nullable UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType) throws ApiException {
        okhttp3.Call localVarCall = getAllConnectorEventsValidateBeforeCall(id, page, size, sort, since, before, eventType, null);
        Type localVarReturnType = new TypeToken<PageConnectorEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllConnectorEventsAsync(@javax.annotation.Nullable UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, final ApiCallback<PageConnectorEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllConnectorEventsValidateBeforeCall(id, page, size, sort, since, before, eventType, _callback);
        Type localVarReturnType = new TypeToken<PageConnectorEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllConnectorEventsRequest {
        @javax.annotation.Nullable
        private UUID id;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String eventType;

        private APIgetAllConnectorEventsRequest() {
        }

        /**
         * Set id
         * @param id Optional connector ID (optional)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest id(@javax.annotation.Nullable UUID id) {
            this.id = id;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in connector list pagination (optional, default to 0)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in connector list pagination (optional, default to 20)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Filter by event type (optional)
         * @return APIgetAllConnectorEventsRequest
         */
        public APIgetAllConnectorEventsRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Build call for getAllConnectorEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllConnectorEventsCall(id, page, size, sort, since, before, eventType, _callback);
        }

        /**
         * Execute getAllConnectorEvents request
         * @return PageConnectorEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageConnectorEvents execute() throws ApiException {
            ApiResponse<PageConnectorEvents> localVarResp = getAllConnectorEventsWithHttpInfo(id, page, size, sort, since, before, eventType);
            return localVarResp.getData();
        }

        /**
         * Execute getAllConnectorEvents request with HTTP info returned
         * @return ApiResponse&lt;PageConnectorEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageConnectorEvents> executeWithHttpInfo() throws ApiException {
            return getAllConnectorEventsWithHttpInfo(id, page, size, sort, since, before, eventType);
        }

        /**
         * Execute getAllConnectorEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageConnectorEvents> _callback) throws ApiException {
            return getAllConnectorEventsAsync(id, page, size, sort, since, before, eventType, _callback);
        }
    }

    /**
     * Get all inbox connector events
     * 
     * @return APIgetAllConnectorEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllConnectorEventsRequest getAllConnectorEvents() {
        return new APIgetAllConnectorEventsRequest();
    }
    private okhttp3.Call getConnectorCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnector(Async)");
        }

        return getConnectorCall(id, _callback);

    }


    private ApiResponse<ConnectorDto> getConnectorWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getConnectorValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<ConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetConnectorRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorCall(id, _callback);
        }

        /**
         * Execute getConnector request
         * @return ConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorDto execute() throws ApiException {
            ApiResponse<ConnectorDto> localVarResp = getConnectorWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getConnector request with HTTP info returned
         * @return ApiResponse&lt;ConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorDto> executeWithHttpInfo() throws ApiException {
            return getConnectorWithHttpInfo(id);
        }

        /**
         * Execute getConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorDto> _callback) throws ApiException {
            return getConnectorAsync(id, _callback);
        }
    }

    /**
     * Get an inbox connector
     * 
     * @param id  (required)
     * @return APIgetConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorRequest getConnector(@javax.annotation.Nonnull UUID id) {
        return new APIgetConnectorRequest(id);
    }
    private okhttp3.Call getConnectorByEmailAddressCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/by-email-address";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorByEmailAddressValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getConnectorByEmailAddress(Async)");
        }

        return getConnectorByEmailAddressCall(emailAddress, _callback);

    }


    private ApiResponse<OptionalConnectorDto> getConnectorByEmailAddressWithHttpInfo(@javax.annotation.Nonnull String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = getConnectorByEmailAddressValidateBeforeCall(emailAddress, null);
        Type localVarReturnType = new TypeToken<OptionalConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorByEmailAddressAsync(@javax.annotation.Nonnull String emailAddress, final ApiCallback<OptionalConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorByEmailAddressValidateBeforeCall(emailAddress, _callback);
        Type localVarReturnType = new TypeToken<OptionalConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorByEmailAddressRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;

        private APIgetConnectorByEmailAddressRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Build call for getConnectorByEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorByEmailAddressCall(emailAddress, _callback);
        }

        /**
         * Execute getConnectorByEmailAddress request
         * @return OptionalConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OptionalConnectorDto execute() throws ApiException {
            ApiResponse<OptionalConnectorDto> localVarResp = getConnectorByEmailAddressWithHttpInfo(emailAddress);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorByEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;OptionalConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptionalConnectorDto> executeWithHttpInfo() throws ApiException {
            return getConnectorByEmailAddressWithHttpInfo(emailAddress);
        }

        /**
         * Execute getConnectorByEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptionalConnectorDto> _callback) throws ApiException {
            return getConnectorByEmailAddressAsync(emailAddress, _callback);
        }
    }

    /**
     * Get connector by email address
     * Find an inbox connector by email address
     * @param emailAddress Email address to search for connector by (required)
     * @return APIgetConnectorByEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorByEmailAddressRequest getConnectorByEmailAddress(@javax.annotation.Nonnull String emailAddress) {
        return new APIgetConnectorByEmailAddressRequest(emailAddress);
    }
    private okhttp3.Call getConnectorByInboxIdCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/by-inbox-id";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorByInboxIdValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getConnectorByInboxId(Async)");
        }

        return getConnectorByInboxIdCall(inboxId, _callback);

    }


    private ApiResponse<OptionalConnectorDto> getConnectorByInboxIdWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getConnectorByInboxIdValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<OptionalConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorByInboxIdAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<OptionalConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorByInboxIdValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<OptionalConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorByInboxIdRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetConnectorByInboxIdRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getConnectorByInboxId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorByInboxIdCall(inboxId, _callback);
        }

        /**
         * Execute getConnectorByInboxId request
         * @return OptionalConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OptionalConnectorDto execute() throws ApiException {
            ApiResponse<OptionalConnectorDto> localVarResp = getConnectorByInboxIdWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorByInboxId request with HTTP info returned
         * @return ApiResponse&lt;OptionalConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptionalConnectorDto> executeWithHttpInfo() throws ApiException {
            return getConnectorByInboxIdWithHttpInfo(inboxId);
        }

        /**
         * Execute getConnectorByInboxId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptionalConnectorDto> _callback) throws ApiException {
            return getConnectorByInboxIdAsync(inboxId, _callback);
        }
    }

    /**
     * Get connector by inbox ID
     * Find an inbox connector by inbox ID
     * @param inboxId Inbox ID to search for connector by (required)
     * @return APIgetConnectorByInboxIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorByInboxIdRequest getConnectorByInboxId(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetConnectorByInboxIdRequest(inboxId);
    }
    private okhttp3.Call getConnectorByNameCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/by-name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorByNameValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getConnectorByName(Async)");
        }

        return getConnectorByNameCall(name, _callback);

    }


    private ApiResponse<OptionalConnectorDto> getConnectorByNameWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = getConnectorByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<OptionalConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorByNameAsync(@javax.annotation.Nonnull String name, final ApiCallback<OptionalConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<OptionalConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorByNameRequest {
        @javax.annotation.Nonnull
        private final String name;

        private APIgetConnectorByNameRequest(@javax.annotation.Nonnull String name) {
            this.name = name;
        }

        /**
         * Build call for getConnectorByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorByNameCall(name, _callback);
        }

        /**
         * Execute getConnectorByName request
         * @return OptionalConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OptionalConnectorDto execute() throws ApiException {
            ApiResponse<OptionalConnectorDto> localVarResp = getConnectorByNameWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorByName request with HTTP info returned
         * @return ApiResponse&lt;OptionalConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptionalConnectorDto> executeWithHttpInfo() throws ApiException {
            return getConnectorByNameWithHttpInfo(name);
        }

        /**
         * Execute getConnectorByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptionalConnectorDto> _callback) throws ApiException {
            return getConnectorByNameAsync(name, _callback);
        }
    }

    /**
     * Get connector by name
     * Find an inbox connector by name
     * @param name Name to search for connector by (required)
     * @return APIgetConnectorByNameRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorByNameRequest getConnectorByName(@javax.annotation.Nonnull String name) {
        return new APIgetConnectorByNameRequest(name);
    }
    private okhttp3.Call getConnectorEventCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/events/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorEventValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectorEvent(Async)");
        }

        return getConnectorEventCall(id, _callback);

    }


    private ApiResponse<ConnectorEventDto> getConnectorEventWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getConnectorEventValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ConnectorEventDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorEventAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<ConnectorEventDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorEventValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ConnectorEventDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorEventRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetConnectorEventRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getConnectorEvent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorEventCall(id, _callback);
        }

        /**
         * Execute getConnectorEvent request
         * @return ConnectorEventDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorEventDto execute() throws ApiException {
            ApiResponse<ConnectorEventDto> localVarResp = getConnectorEventWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorEvent request with HTTP info returned
         * @return ApiResponse&lt;ConnectorEventDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorEventDto> executeWithHttpInfo() throws ApiException {
            return getConnectorEventWithHttpInfo(id);
        }

        /**
         * Execute getConnectorEvent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorEventDto> _callback) throws ApiException {
            return getConnectorEventAsync(id, _callback);
        }
    }

    /**
     * Get an inbox connector event
     * 
     * @param id  (required)
     * @return APIgetConnectorEventRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorEventRequest getConnectorEvent(@javax.annotation.Nonnull UUID id) {
        return new APIgetConnectorEventRequest(id);
    }
    private okhttp3.Call getConnectorEventsCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/events"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (eventType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eventType", eventType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorEventsValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectorEvents(Async)");
        }

        return getConnectorEventsCall(id, page, size, sort, since, before, eventType, _callback);

    }


    private ApiResponse<PageConnectorEvents> getConnectorEventsWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType) throws ApiException {
        okhttp3.Call localVarCall = getConnectorEventsValidateBeforeCall(id, page, size, sort, since, before, eventType, null);
        Type localVarReturnType = new TypeToken<PageConnectorEvents>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorEventsAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String eventType, final ApiCallback<PageConnectorEvents> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorEventsValidateBeforeCall(id, page, size, sort, since, before, eventType, _callback);
        Type localVarReturnType = new TypeToken<PageConnectorEvents>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorEventsRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String eventType;

        private APIgetConnectorEventsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set page
         * @param page Optional page index in connector list pagination (optional, default to 0)
         * @return APIgetConnectorEventsRequest
         */
        public APIgetConnectorEventsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in connector list pagination (optional, default to 20)
         * @return APIgetConnectorEventsRequest
         */
        public APIgetConnectorEventsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetConnectorEventsRequest
         */
        public APIgetConnectorEventsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetConnectorEventsRequest
         */
        public APIgetConnectorEventsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetConnectorEventsRequest
         */
        public APIgetConnectorEventsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set eventType
         * @param eventType Filter by event type (optional)
         * @return APIgetConnectorEventsRequest
         */
        public APIgetConnectorEventsRequest eventType(@javax.annotation.Nullable String eventType) {
            this.eventType = eventType;
            return this;
        }

        /**
         * Build call for getConnectorEvents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorEventsCall(id, page, size, sort, since, before, eventType, _callback);
        }

        /**
         * Execute getConnectorEvents request
         * @return PageConnectorEvents
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageConnectorEvents execute() throws ApiException {
            ApiResponse<PageConnectorEvents> localVarResp = getConnectorEventsWithHttpInfo(id, page, size, sort, since, before, eventType);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorEvents request with HTTP info returned
         * @return ApiResponse&lt;PageConnectorEvents&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageConnectorEvents> executeWithHttpInfo() throws ApiException {
            return getConnectorEventsWithHttpInfo(id, page, size, sort, since, before, eventType);
        }

        /**
         * Execute getConnectorEvents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageConnectorEvents> _callback) throws ApiException {
            return getConnectorEventsAsync(id, page, size, sort, since, before, eventType, _callback);
        }
    }

    /**
     * Get an inbox connector events
     * 
     * @param id  (required)
     * @return APIgetConnectorEventsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorEventsRequest getConnectorEvents(@javax.annotation.Nonnull UUID id) {
        return new APIgetConnectorEventsRequest(id);
    }
    private okhttp3.Call getConnectorImapConnectionCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/imap"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorImapConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectorImapConnection(Async)");
        }

        return getConnectorImapConnectionCall(id, _callback);

    }


    private ApiResponse<OptionalConnectorImapConnectionDto> getConnectorImapConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getConnectorImapConnectionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OptionalConnectorImapConnectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorImapConnectionAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<OptionalConnectorImapConnectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorImapConnectionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OptionalConnectorImapConnectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorImapConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetConnectorImapConnectionRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getConnectorImapConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorImapConnectionCall(id, _callback);
        }

        /**
         * Execute getConnectorImapConnection request
         * @return OptionalConnectorImapConnectionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OptionalConnectorImapConnectionDto execute() throws ApiException {
            ApiResponse<OptionalConnectorImapConnectionDto> localVarResp = getConnectorImapConnectionWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorImapConnection request with HTTP info returned
         * @return ApiResponse&lt;OptionalConnectorImapConnectionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptionalConnectorImapConnectionDto> executeWithHttpInfo() throws ApiException {
            return getConnectorImapConnectionWithHttpInfo(id);
        }

        /**
         * Execute getConnectorImapConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptionalConnectorImapConnectionDto> _callback) throws ApiException {
            return getConnectorImapConnectionAsync(id, _callback);
        }
    }

    /**
     * Get an inbox connector IMAP connection
     * Get IMAP connection for external inbox
     * @param id  (required)
     * @return APIgetConnectorImapConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorImapConnectionRequest getConnectorImapConnection(@javax.annotation.Nonnull UUID id) {
        return new APIgetConnectorImapConnectionRequest(id);
    }
    private okhttp3.Call getConnectorProviderSettingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/provider-settings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorProviderSettingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getConnectorProviderSettingsCall(_callback);

    }


    private ApiResponse<ConnectorProviderSettingsDto> getConnectorProviderSettingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getConnectorProviderSettingsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ConnectorProviderSettingsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorProviderSettingsAsync(final ApiCallback<ConnectorProviderSettingsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorProviderSettingsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ConnectorProviderSettingsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorProviderSettingsRequest {

        private APIgetConnectorProviderSettingsRequest() {
        }

        /**
         * Build call for getConnectorProviderSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorProviderSettingsCall(_callback);
        }

        /**
         * Execute getConnectorProviderSettings request
         * @return ConnectorProviderSettingsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorProviderSettingsDto execute() throws ApiException {
            ApiResponse<ConnectorProviderSettingsDto> localVarResp = getConnectorProviderSettingsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorProviderSettings request with HTTP info returned
         * @return ApiResponse&lt;ConnectorProviderSettingsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorProviderSettingsDto> executeWithHttpInfo() throws ApiException {
            return getConnectorProviderSettingsWithHttpInfo();
        }

        /**
         * Execute getConnectorProviderSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorProviderSettingsDto> _callback) throws ApiException {
            return getConnectorProviderSettingsAsync(_callback);
        }
    }

    /**
     * Get SMTP and IMAP connection settings for common mail providers
     * Get common mail provider SMTP and IMAP connection settings
     * @return APIgetConnectorProviderSettingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorProviderSettingsRequest getConnectorProviderSettings() {
        return new APIgetConnectorProviderSettingsRequest();
    }
    private okhttp3.Call getConnectorSmtpConnectionCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/smtp"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorSmtpConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectorSmtpConnection(Async)");
        }

        return getConnectorSmtpConnectionCall(id, _callback);

    }


    private ApiResponse<OptionalConnectorSmtpConnectionDto> getConnectorSmtpConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getConnectorSmtpConnectionValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OptionalConnectorSmtpConnectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorSmtpConnectionAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<OptionalConnectorSmtpConnectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorSmtpConnectionValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OptionalConnectorSmtpConnectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorSmtpConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetConnectorSmtpConnectionRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getConnectorSmtpConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorSmtpConnectionCall(id, _callback);
        }

        /**
         * Execute getConnectorSmtpConnection request
         * @return OptionalConnectorSmtpConnectionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OptionalConnectorSmtpConnectionDto execute() throws ApiException {
            ApiResponse<OptionalConnectorSmtpConnectionDto> localVarResp = getConnectorSmtpConnectionWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorSmtpConnection request with HTTP info returned
         * @return ApiResponse&lt;OptionalConnectorSmtpConnectionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptionalConnectorSmtpConnectionDto> executeWithHttpInfo() throws ApiException {
            return getConnectorSmtpConnectionWithHttpInfo(id);
        }

        /**
         * Execute getConnectorSmtpConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptionalConnectorSmtpConnectionDto> _callback) throws ApiException {
            return getConnectorSmtpConnectionAsync(id, _callback);
        }
    }

    /**
     * Get an inbox connector SMTP connection
     * Get SMTP connection for external inbox
     * @param id  (required)
     * @return APIgetConnectorSmtpConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorSmtpConnectionRequest getConnectorSmtpConnection(@javax.annotation.Nonnull UUID id) {
        return new APIgetConnectorSmtpConnectionRequest(id);
    }
    private okhttp3.Call getConnectorSyncSettingsCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/sync-settings"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorSyncSettingsValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getConnectorSyncSettings(Async)");
        }

        return getConnectorSyncSettingsCall(id, _callback);

    }


    private ApiResponse<OptionalConnectorSyncSettingsDto> getConnectorSyncSettingsWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getConnectorSyncSettingsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<OptionalConnectorSyncSettingsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorSyncSettingsAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<OptionalConnectorSyncSettingsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorSyncSettingsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<OptionalConnectorSyncSettingsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorSyncSettingsRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetConnectorSyncSettingsRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getConnectorSyncSettings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorSyncSettingsCall(id, _callback);
        }

        /**
         * Execute getConnectorSyncSettings request
         * @return OptionalConnectorSyncSettingsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public OptionalConnectorSyncSettingsDto execute() throws ApiException {
            ApiResponse<OptionalConnectorSyncSettingsDto> localVarResp = getConnectorSyncSettingsWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectorSyncSettings request with HTTP info returned
         * @return ApiResponse&lt;OptionalConnectorSyncSettingsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OptionalConnectorSyncSettingsDto> executeWithHttpInfo() throws ApiException {
            return getConnectorSyncSettingsWithHttpInfo(id);
        }

        /**
         * Execute getConnectorSyncSettings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OptionalConnectorSyncSettingsDto> _callback) throws ApiException {
            return getConnectorSyncSettingsAsync(id, _callback);
        }
    }

    /**
     * Get an inbox connector sync settings
     * Get sync settings for connection with external inbox
     * @param id  (required)
     * @return APIgetConnectorSyncSettingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorSyncSettingsRequest getConnectorSyncSettings(@javax.annotation.Nonnull UUID id) {
        return new APIgetConnectorSyncSettingsRequest(id);
    }
    private okhttp3.Call getConnectorsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConnectorsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getConnectorsCall(page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageConnector> getConnectorsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getConnectorsValidateBeforeCall(page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageConnector>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConnectorsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageConnector> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConnectorsValidateBeforeCall(page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageConnector>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetConnectorsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetConnectorsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in connector list pagination (optional, default to 0)
         * @return APIgetConnectorsRequest
         */
        public APIgetConnectorsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in connector list pagination (optional, default to 20)
         * @return APIgetConnectorsRequest
         */
        public APIgetConnectorsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetConnectorsRequest
         */
        public APIgetConnectorsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetConnectorsRequest
         */
        public APIgetConnectorsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetConnectorsRequest
         */
        public APIgetConnectorsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getConnectors
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConnectorsCall(page, size, sort, since, before, _callback);
        }

        /**
         * Execute getConnectors request
         * @return PageConnector
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageConnector execute() throws ApiException {
            ApiResponse<PageConnector> localVarResp = getConnectorsWithHttpInfo(page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getConnectors request with HTTP info returned
         * @return ApiResponse&lt;PageConnector&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageConnector> executeWithHttpInfo() throws ApiException {
            return getConnectorsWithHttpInfo(page, size, sort, since, before);
        }

        /**
         * Execute getConnectors request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageConnector> _callback) throws ApiException {
            return getConnectorsAsync(page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get inbox connectors
     * List inbox connectors that sync external emails to MailSlurp inboxes
     * @return APIgetConnectorsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetConnectorsRequest getConnectors() {
        return new APIgetConnectorsRequest();
    }
    private okhttp3.Call sendEmailFromConnectorCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable Boolean useFallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/send"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (useFallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useFallback", useFallback));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailFromConnectorValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable Boolean useFallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling sendEmailFromConnector(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendEmailFromConnector(Async)");
        }

        return sendEmailFromConnectorCall(id, sendEmailOptions, useFallback, _callback);

    }


    private ApiResponse<SentEmailDto> sendEmailFromConnectorWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable Boolean useFallback) throws ApiException {
        okhttp3.Call localVarCall = sendEmailFromConnectorValidateBeforeCall(id, sendEmailOptions, useFallback, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailFromConnectorAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable Boolean useFallback, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailFromConnectorValidateBeforeCall(id, sendEmailOptions, useFallback, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendEmailFromConnectorRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;
        @javax.annotation.Nullable
        private Boolean useFallback;

        private APIsendEmailFromConnectorRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.id = id;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Set useFallback
         * @param useFallback  (optional)
         * @return APIsendEmailFromConnectorRequest
         */
        public APIsendEmailFromConnectorRequest useFallback(@javax.annotation.Nullable Boolean useFallback) {
            this.useFallback = useFallback;
            return this;
        }

        /**
         * Build call for sendEmailFromConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailFromConnectorCall(id, sendEmailOptions, useFallback, _callback);
        }

        /**
         * Execute sendEmailFromConnector request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = sendEmailFromConnectorWithHttpInfo(id, sendEmailOptions, useFallback);
            return localVarResp.getData();
        }

        /**
         * Execute sendEmailFromConnector request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return sendEmailFromConnectorWithHttpInfo(id, sendEmailOptions, useFallback);
        }

        /**
         * Execute sendEmailFromConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return sendEmailFromConnectorAsync(id, sendEmailOptions, useFallback, _callback);
        }
    }

    /**
     * Send from an inbox connector
     * 
     * @param id  (required)
     * @param sendEmailOptions  (required)
     * @return APIsendEmailFromConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailFromConnectorRequest sendEmailFromConnector(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendEmailFromConnectorRequest(id, sendEmailOptions);
    }
    private okhttp3.Call syncConnectorCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable String folder, @javax.annotation.Nullable Boolean logging, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/connectors/{id}/sync"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (folder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("folder", folder));
        }

        if (logging != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("logging", logging));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncConnectorValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable String folder, @javax.annotation.Nullable Boolean logging, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling syncConnector(Async)");
        }

        return syncConnectorCall(id, since, folder, logging, _callback);

    }


    private ApiResponse<ConnectorSyncRequestResult> syncConnectorWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable String folder, @javax.annotation.Nullable Boolean logging) throws ApiException {
        okhttp3.Call localVarCall = syncConnectorValidateBeforeCall(id, since, folder, logging, null);
        Type localVarReturnType = new TypeToken<ConnectorSyncRequestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call syncConnectorAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable String folder, @javax.annotation.Nullable Boolean logging, final ApiCallback<ConnectorSyncRequestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncConnectorValidateBeforeCall(id, since, folder, logging, _callback);
        Type localVarReturnType = new TypeToken<ConnectorSyncRequestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsyncConnectorRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private String folder;
        @javax.annotation.Nullable
        private Boolean logging;

        private APIsyncConnectorRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set since
         * @param since Date to request emails since (optional)
         * @return APIsyncConnectorRequest
         */
        public APIsyncConnectorRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set folder
         * @param folder Which folder to sync emails with (optional)
         * @return APIsyncConnectorRequest
         */
        public APIsyncConnectorRequest folder(@javax.annotation.Nullable String folder) {
            this.folder = folder;
            return this;
        }

        /**
         * Set logging
         * @param logging Enable or disable logging for the sync operation (optional)
         * @return APIsyncConnectorRequest
         */
        public APIsyncConnectorRequest logging(@javax.annotation.Nullable Boolean logging) {
            this.logging = logging;
            return this;
        }

        /**
         * Build call for syncConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return syncConnectorCall(id, since, folder, logging, _callback);
        }

        /**
         * Execute syncConnector request
         * @return ConnectorSyncRequestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorSyncRequestResult execute() throws ApiException {
            ApiResponse<ConnectorSyncRequestResult> localVarResp = syncConnectorWithHttpInfo(id, since, folder, logging);
            return localVarResp.getData();
        }

        /**
         * Execute syncConnector request with HTTP info returned
         * @return ApiResponse&lt;ConnectorSyncRequestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorSyncRequestResult> executeWithHttpInfo() throws ApiException {
            return syncConnectorWithHttpInfo(id, since, folder, logging);
        }

        /**
         * Execute syncConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorSyncRequestResult> _callback) throws ApiException {
            return syncConnectorAsync(id, since, folder, logging, _callback);
        }
    }

    /**
     * Sync an inbox connector
     * 
     * @param id  (required)
     * @return APIsyncConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsyncConnectorRequest syncConnector(@javax.annotation.Nonnull UUID id) {
        return new APIsyncConnectorRequest(id);
    }
    private okhttp3.Call testConnectorImapConnectionCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorImapConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/imap/test"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testConnectorImapConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testConnectorImapConnection(Async)");
        }

        return testConnectorImapConnectionCall(id, createConnectorImapConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorImapConnectionTestResult> testConnectorImapConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = testConnectorImapConnectionValidateBeforeCall(id, createConnectorImapConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testConnectorImapConnectionAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback<ConnectorImapConnectionTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testConnectorImapConnectionValidateBeforeCall(id, createConnectorImapConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestConnectorImapConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions;

        private APItestConnectorImapConnectionRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set createConnectorImapConnectionOptions
         * @param createConnectorImapConnectionOptions  (optional)
         * @return APItestConnectorImapConnectionRequest
         */
        public APItestConnectorImapConnectionRequest createConnectorImapConnectionOptions(@javax.annotation.Nullable CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
            this.createConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
            return this;
        }

        /**
         * Build call for testConnectorImapConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testConnectorImapConnectionCall(id, createConnectorImapConnectionOptions, _callback);
        }

        /**
         * Execute testConnectorImapConnection request
         * @return ConnectorImapConnectionTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorImapConnectionTestResult execute() throws ApiException {
            ApiResponse<ConnectorImapConnectionTestResult> localVarResp = testConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testConnectorImapConnection request with HTTP info returned
         * @return ApiResponse&lt;ConnectorImapConnectionTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorImapConnectionTestResult> executeWithHttpInfo() throws ApiException {
            return testConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
        }

        /**
         * Execute testConnectorImapConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorImapConnectionTestResult> _callback) throws ApiException {
            return testConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions, _callback);
        }
    }

    /**
     * Test an inbox connector IMAP connection
     * Test the IMAP connection for a connector
     * @param id  (required)
     * @return APItestConnectorImapConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestConnectorImapConnectionRequest testConnectorImapConnection(@javax.annotation.Nonnull UUID id) {
        return new APItestConnectorImapConnectionRequest(id);
    }
    private okhttp3.Call testConnectorImapConnectionOptionsCall(@javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorImapConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/connections/imap/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testConnectorImapConnectionOptionsValidateBeforeCall(@javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createConnectorImapConnectionOptions' is set
        if (createConnectorImapConnectionOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorImapConnectionOptions' when calling testConnectorImapConnectionOptions(Async)");
        }

        return testConnectorImapConnectionOptionsCall(createConnectorImapConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorImapConnectionTestResult> testConnectorImapConnectionOptionsWithHttpInfo(@javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = testConnectorImapConnectionOptionsValidateBeforeCall(createConnectorImapConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testConnectorImapConnectionOptionsAsync(@javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback<ConnectorImapConnectionTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testConnectorImapConnectionOptionsValidateBeforeCall(createConnectorImapConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestConnectorImapConnectionOptionsRequest {
        @javax.annotation.Nonnull
        private final CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions;

        private APItestConnectorImapConnectionOptionsRequest(@javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
            this.createConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
        }

        /**
         * Build call for testConnectorImapConnectionOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testConnectorImapConnectionOptionsCall(createConnectorImapConnectionOptions, _callback);
        }

        /**
         * Execute testConnectorImapConnectionOptions request
         * @return ConnectorImapConnectionTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorImapConnectionTestResult execute() throws ApiException {
            ApiResponse<ConnectorImapConnectionTestResult> localVarResp = testConnectorImapConnectionOptionsWithHttpInfo(createConnectorImapConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testConnectorImapConnectionOptions request with HTTP info returned
         * @return ApiResponse&lt;ConnectorImapConnectionTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorImapConnectionTestResult> executeWithHttpInfo() throws ApiException {
            return testConnectorImapConnectionOptionsWithHttpInfo(createConnectorImapConnectionOptions);
        }

        /**
         * Execute testConnectorImapConnectionOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorImapConnectionTestResult> _callback) throws ApiException {
            return testConnectorImapConnectionOptionsAsync(createConnectorImapConnectionOptions, _callback);
        }
    }

    /**
     * Test an inbox connector IMAP connection options
     * Test the IMAP connection options for a connector
     * @param createConnectorImapConnectionOptions  (required)
     * @return APItestConnectorImapConnectionOptionsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestConnectorImapConnectionOptionsRequest testConnectorImapConnectionOptions(@javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
        return new APItestConnectorImapConnectionOptionsRequest(createConnectorImapConnectionOptions);
    }
    private okhttp3.Call testConnectorSmtpConnectionCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorSmtpConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/smtp/test"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testConnectorSmtpConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testConnectorSmtpConnection(Async)");
        }

        return testConnectorSmtpConnectionCall(id, createConnectorSmtpConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorSmtpConnectionTestResult> testConnectorSmtpConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = testConnectorSmtpConnectionValidateBeforeCall(id, createConnectorSmtpConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testConnectorSmtpConnectionAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback<ConnectorSmtpConnectionTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testConnectorSmtpConnectionValidateBeforeCall(id, createConnectorSmtpConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestConnectorSmtpConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions;

        private APItestConnectorSmtpConnectionRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set createConnectorSmtpConnectionOptions
         * @param createConnectorSmtpConnectionOptions  (optional)
         * @return APItestConnectorSmtpConnectionRequest
         */
        public APItestConnectorSmtpConnectionRequest createConnectorSmtpConnectionOptions(@javax.annotation.Nullable CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
            this.createConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
            return this;
        }

        /**
         * Build call for testConnectorSmtpConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testConnectorSmtpConnectionCall(id, createConnectorSmtpConnectionOptions, _callback);
        }

        /**
         * Execute testConnectorSmtpConnection request
         * @return ConnectorSmtpConnectionTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorSmtpConnectionTestResult execute() throws ApiException {
            ApiResponse<ConnectorSmtpConnectionTestResult> localVarResp = testConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testConnectorSmtpConnection request with HTTP info returned
         * @return ApiResponse&lt;ConnectorSmtpConnectionTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorSmtpConnectionTestResult> executeWithHttpInfo() throws ApiException {
            return testConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
        }

        /**
         * Execute testConnectorSmtpConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorSmtpConnectionTestResult> _callback) throws ApiException {
            return testConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions, _callback);
        }
    }

    /**
     * Test an inbox connector SMTP connection
     * Test the SMTP connection for a connector
     * @param id  (required)
     * @return APItestConnectorSmtpConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestConnectorSmtpConnectionRequest testConnectorSmtpConnection(@javax.annotation.Nonnull UUID id) {
        return new APItestConnectorSmtpConnectionRequest(id);
    }
    private okhttp3.Call testConnectorSmtpConnectionOptionsCall(@javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorSmtpConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/connections/smtp/test";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testConnectorSmtpConnectionOptionsValidateBeforeCall(@javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
        if (createConnectorSmtpConnectionOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorSmtpConnectionOptions' when calling testConnectorSmtpConnectionOptions(Async)");
        }

        return testConnectorSmtpConnectionOptionsCall(createConnectorSmtpConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorSmtpConnectionTestResult> testConnectorSmtpConnectionOptionsWithHttpInfo(@javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = testConnectorSmtpConnectionOptionsValidateBeforeCall(createConnectorSmtpConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testConnectorSmtpConnectionOptionsAsync(@javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback<ConnectorSmtpConnectionTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testConnectorSmtpConnectionOptionsValidateBeforeCall(createConnectorSmtpConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestConnectorSmtpConnectionOptionsRequest {
        @javax.annotation.Nonnull
        private final CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions;

        private APItestConnectorSmtpConnectionOptionsRequest(@javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
            this.createConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
        }

        /**
         * Build call for testConnectorSmtpConnectionOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testConnectorSmtpConnectionOptionsCall(createConnectorSmtpConnectionOptions, _callback);
        }

        /**
         * Execute testConnectorSmtpConnectionOptions request
         * @return ConnectorSmtpConnectionTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorSmtpConnectionTestResult execute() throws ApiException {
            ApiResponse<ConnectorSmtpConnectionTestResult> localVarResp = testConnectorSmtpConnectionOptionsWithHttpInfo(createConnectorSmtpConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testConnectorSmtpConnectionOptions request with HTTP info returned
         * @return ApiResponse&lt;ConnectorSmtpConnectionTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorSmtpConnectionTestResult> executeWithHttpInfo() throws ApiException {
            return testConnectorSmtpConnectionOptionsWithHttpInfo(createConnectorSmtpConnectionOptions);
        }

        /**
         * Execute testConnectorSmtpConnectionOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorSmtpConnectionTestResult> _callback) throws ApiException {
            return testConnectorSmtpConnectionOptionsAsync(createConnectorSmtpConnectionOptions, _callback);
        }
    }

    /**
     * Test an inbox connector SMTP connection options
     * Test the SMTP connection options for a connector
     * @param createConnectorSmtpConnectionOptions  (required)
     * @return APItestConnectorSmtpConnectionOptionsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestConnectorSmtpConnectionOptionsRequest testConnectorSmtpConnectionOptions(@javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
        return new APItestConnectorSmtpConnectionOptionsRequest(createConnectorSmtpConnectionOptions);
    }
    private okhttp3.Call updateConnectorCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConnectorValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateConnector(Async)");
        }

        // verify the required parameter 'createConnectorOptions' is set
        if (createConnectorOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorOptions' when calling updateConnector(Async)");
        }

        return updateConnectorCall(id, createConnectorOptions, _callback);

    }


    private ApiResponse<ConnectorDto> updateConnectorWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) throws ApiException {
        okhttp3.Call localVarCall = updateConnectorValidateBeforeCall(id, createConnectorOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConnectorAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions, final ApiCallback<ConnectorDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConnectorValidateBeforeCall(id, createConnectorOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateConnectorRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateConnectorOptions createConnectorOptions;

        private APIupdateConnectorRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) {
            this.id = id;
            this.createConnectorOptions = createConnectorOptions;
        }

        /**
         * Build call for updateConnector
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateConnectorCall(id, createConnectorOptions, _callback);
        }

        /**
         * Execute updateConnector request
         * @return ConnectorDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorDto execute() throws ApiException {
            ApiResponse<ConnectorDto> localVarResp = updateConnectorWithHttpInfo(id, createConnectorOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateConnector request with HTTP info returned
         * @return ApiResponse&lt;ConnectorDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorDto> executeWithHttpInfo() throws ApiException {
            return updateConnectorWithHttpInfo(id, createConnectorOptions);
        }

        /**
         * Execute updateConnector request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorDto> _callback) throws ApiException {
            return updateConnectorAsync(id, createConnectorOptions, _callback);
        }
    }

    /**
     * Update an inbox connector
     * 
     * @param id  (required)
     * @param createConnectorOptions  (required)
     * @return APIupdateConnectorRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateConnectorRequest updateConnector(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorOptions createConnectorOptions) {
        return new APIupdateConnectorRequest(id, createConnectorOptions);
    }
    private okhttp3.Call updateConnectorImapConnectionCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorImapConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/imap"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConnectorImapConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateConnectorImapConnection(Async)");
        }

        // verify the required parameter 'createConnectorImapConnectionOptions' is set
        if (createConnectorImapConnectionOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorImapConnectionOptions' when calling updateConnectorImapConnection(Async)");
        }

        return updateConnectorImapConnectionCall(id, createConnectorImapConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorImapConnectionDto> updateConnectorImapConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = updateConnectorImapConnectionValidateBeforeCall(id, createConnectorImapConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConnectorImapConnectionAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions, final ApiCallback<ConnectorImapConnectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConnectorImapConnectionValidateBeforeCall(id, createConnectorImapConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorImapConnectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateConnectorImapConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions;

        private APIupdateConnectorImapConnectionRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
            this.id = id;
            this.createConnectorImapConnectionOptions = createConnectorImapConnectionOptions;
        }

        /**
         * Build call for updateConnectorImapConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateConnectorImapConnectionCall(id, createConnectorImapConnectionOptions, _callback);
        }

        /**
         * Execute updateConnectorImapConnection request
         * @return ConnectorImapConnectionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorImapConnectionDto execute() throws ApiException {
            ApiResponse<ConnectorImapConnectionDto> localVarResp = updateConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateConnectorImapConnection request with HTTP info returned
         * @return ApiResponse&lt;ConnectorImapConnectionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorImapConnectionDto> executeWithHttpInfo() throws ApiException {
            return updateConnectorImapConnectionWithHttpInfo(id, createConnectorImapConnectionOptions);
        }

        /**
         * Execute updateConnectorImapConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorImapConnectionDto> _callback) throws ApiException {
            return updateConnectorImapConnectionAsync(id, createConnectorImapConnectionOptions, _callback);
        }
    }

    /**
     * Update an inbox connector IMAP connection
     * Update IMAP connection for external inbox
     * @param id  (required)
     * @param createConnectorImapConnectionOptions  (required)
     * @return APIupdateConnectorImapConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateConnectorImapConnectionRequest updateConnectorImapConnection(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions) {
        return new APIupdateConnectorImapConnectionRequest(id, createConnectorImapConnectionOptions);
    }
    private okhttp3.Call updateConnectorSmtpConnectionCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createConnectorSmtpConnectionOptions;

        // create path and map variables
        String localVarPath = "/connectors/{id}/smtp"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateConnectorSmtpConnectionValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateConnectorSmtpConnection(Async)");
        }

        // verify the required parameter 'createConnectorSmtpConnectionOptions' is set
        if (createConnectorSmtpConnectionOptions == null) {
            throw new ApiException("Missing the required parameter 'createConnectorSmtpConnectionOptions' when calling updateConnectorSmtpConnection(Async)");
        }

        return updateConnectorSmtpConnectionCall(id, createConnectorSmtpConnectionOptions, _callback);

    }


    private ApiResponse<ConnectorSmtpConnectionDto> updateConnectorSmtpConnectionWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) throws ApiException {
        okhttp3.Call localVarCall = updateConnectorSmtpConnectionValidateBeforeCall(id, createConnectorSmtpConnectionOptions, null);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateConnectorSmtpConnectionAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions, final ApiCallback<ConnectorSmtpConnectionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateConnectorSmtpConnectionValidateBeforeCall(id, createConnectorSmtpConnectionOptions, _callback);
        Type localVarReturnType = new TypeToken<ConnectorSmtpConnectionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateConnectorSmtpConnectionRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions;

        private APIupdateConnectorSmtpConnectionRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
            this.id = id;
            this.createConnectorSmtpConnectionOptions = createConnectorSmtpConnectionOptions;
        }

        /**
         * Build call for updateConnectorSmtpConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateConnectorSmtpConnectionCall(id, createConnectorSmtpConnectionOptions, _callback);
        }

        /**
         * Execute updateConnectorSmtpConnection request
         * @return ConnectorSmtpConnectionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConnectorSmtpConnectionDto execute() throws ApiException {
            ApiResponse<ConnectorSmtpConnectionDto> localVarResp = updateConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateConnectorSmtpConnection request with HTTP info returned
         * @return ApiResponse&lt;ConnectorSmtpConnectionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConnectorSmtpConnectionDto> executeWithHttpInfo() throws ApiException {
            return updateConnectorSmtpConnectionWithHttpInfo(id, createConnectorSmtpConnectionOptions);
        }

        /**
         * Execute updateConnectorSmtpConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConnectorSmtpConnectionDto> _callback) throws ApiException {
            return updateConnectorSmtpConnectionAsync(id, createConnectorSmtpConnectionOptions, _callback);
        }
    }

    /**
     * Update an inbox connector SMTP connection
     * Update SMTP connection for external inbox
     * @param id  (required)
     * @param createConnectorSmtpConnectionOptions  (required)
     * @return APIupdateConnectorSmtpConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateConnectorSmtpConnectionRequest updateConnectorSmtpConnection(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions) {
        return new APIupdateConnectorSmtpConnectionRequest(id, createConnectorSmtpConnectionOptions);
    }
}
