/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateDomainOptions;
import com.mailslurp.models.DomainDto;
import com.mailslurp.models.DomainGroupsDto;
import com.mailslurp.models.DomainIssuesDto;
import com.mailslurp.models.DomainPreview;
import com.mailslurp.models.InboxDto;
import java.util.UUID;
import com.mailslurp.models.UpdateDomainOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DomainControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DomainControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DomainControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addDomainWildcardCatchAllCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{id}/wildcard"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addDomainWildcardCatchAllValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addDomainWildcardCatchAll(Async)");
        }

        return addDomainWildcardCatchAllCall(id, _callback);

    }


    private ApiResponse<DomainDto> addDomainWildcardCatchAllWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = addDomainWildcardCatchAllValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addDomainWildcardCatchAllAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<DomainDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = addDomainWildcardCatchAllValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIaddDomainWildcardCatchAllRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIaddDomainWildcardCatchAllRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for addDomainWildcardCatchAll
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return addDomainWildcardCatchAllCall(id, _callback);
        }

        /**
         * Execute addDomainWildcardCatchAll request
         * @return DomainDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DomainDto execute() throws ApiException {
            ApiResponse<DomainDto> localVarResp = addDomainWildcardCatchAllWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute addDomainWildcardCatchAll request with HTTP info returned
         * @return ApiResponse&lt;DomainDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainDto> executeWithHttpInfo() throws ApiException {
            return addDomainWildcardCatchAllWithHttpInfo(id);
        }

        /**
         * Execute addDomainWildcardCatchAll request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainDto> _callback) throws ApiException {
            return addDomainWildcardCatchAllAsync(id, _callback);
        }
    }

    /**
     * Add catch all wild card inbox to domain
     * Add a catch all inbox to a domain so that any emails sent to it that cannot be matched will be sent to the catch all inbox generated
     * @param id  (required)
     * @return APIaddDomainWildcardCatchAllRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIaddDomainWildcardCatchAllRequest addDomainWildcardCatchAll(@javax.annotation.Nonnull UUID id) {
        return new APIaddDomainWildcardCatchAllRequest(id);
    }
    private okhttp3.Call createDomainCall(@javax.annotation.Nonnull CreateDomainOptions createDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createDomainOptions;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDomainValidateBeforeCall(@javax.annotation.Nonnull CreateDomainOptions createDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createDomainOptions' is set
        if (createDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'createDomainOptions' when calling createDomain(Async)");
        }

        return createDomainCall(createDomainOptions, _callback);

    }


    private ApiResponse<DomainDto> createDomainWithHttpInfo(@javax.annotation.Nonnull CreateDomainOptions createDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = createDomainValidateBeforeCall(createDomainOptions, null);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createDomainAsync(@javax.annotation.Nonnull CreateDomainOptions createDomainOptions, final ApiCallback<DomainDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDomainValidateBeforeCall(createDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateDomainRequest {
        @javax.annotation.Nonnull
        private final CreateDomainOptions createDomainOptions;

        private APIcreateDomainRequest(@javax.annotation.Nonnull CreateDomainOptions createDomainOptions) {
            this.createDomainOptions = createDomainOptions;
        }

        /**
         * Build call for createDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createDomainCall(createDomainOptions, _callback);
        }

        /**
         * Execute createDomain request
         * @return DomainDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public DomainDto execute() throws ApiException {
            ApiResponse<DomainDto> localVarResp = createDomainWithHttpInfo(createDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainDto> executeWithHttpInfo() throws ApiException {
            return createDomainWithHttpInfo(createDomainOptions);
        }

        /**
         * Execute createDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainDto> _callback) throws ApiException {
            return createDomainAsync(createDomainOptions, _callback);
        }
    }

    /**
     * Create Domain
     * Link a domain that you own with MailSlurp so you can create email addresses using it. Endpoint returns DNS records used for validation. You must add these verification records to your host provider&#39;s DNS setup to verify the domain.
     * @param createDomainOptions  (required)
     * @return APIcreateDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateDomainRequest createDomain(@javax.annotation.Nonnull CreateDomainOptions createDomainOptions) {
        return new APIcreateDomainRequest(createDomainOptions);
    }
    private okhttp3.Call deleteDomainCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteDomainValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteDomain(Async)");
        }

        return deleteDomainCall(id, _callback);

    }


    private ApiResponse<List<String>> deleteDomainWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call deleteDomainAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteDomainValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdeleteDomainRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteDomainRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteDomainCall(id, _callback);
        }

        /**
         * Execute deleteDomain request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = deleteDomainWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute deleteDomain request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return deleteDomainWithHttpInfo(id);
        }

        /**
         * Execute deleteDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return deleteDomainAsync(id, _callback);
        }
    }

    /**
     * Delete a domain
     * Delete a domain. This will disable any existing inboxes that use this domain.
     * @param id  (required)
     * @return APIdeleteDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteDomainRequest deleteDomain(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteDomainRequest(id);
    }
    private okhttp3.Call getAvailableDomainsCall(@javax.annotation.Nullable String inboxType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/available-domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAvailableDomainsValidateBeforeCall(@javax.annotation.Nullable String inboxType, final ApiCallback _callback) throws ApiException {
        return getAvailableDomainsCall(inboxType, _callback);

    }


    private ApiResponse<DomainGroupsDto> getAvailableDomainsWithHttpInfo(@javax.annotation.Nullable String inboxType) throws ApiException {
        okhttp3.Call localVarCall = getAvailableDomainsValidateBeforeCall(inboxType, null);
        Type localVarReturnType = new TypeToken<DomainGroupsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAvailableDomainsAsync(@javax.annotation.Nullable String inboxType, final ApiCallback<DomainGroupsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAvailableDomainsValidateBeforeCall(inboxType, _callback);
        Type localVarReturnType = new TypeToken<DomainGroupsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAvailableDomainsRequest {
        @javax.annotation.Nullable
        private String inboxType;

        private APIgetAvailableDomainsRequest() {
        }

        /**
         * Set inboxType
         * @param inboxType  (optional)
         * @return APIgetAvailableDomainsRequest
         */
        public APIgetAvailableDomainsRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Build call for getAvailableDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAvailableDomainsCall(inboxType, _callback);
        }

        /**
         * Execute getAvailableDomains request
         * @return DomainGroupsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DomainGroupsDto execute() throws ApiException {
            ApiResponse<DomainGroupsDto> localVarResp = getAvailableDomainsWithHttpInfo(inboxType);
            return localVarResp.getData();
        }

        /**
         * Execute getAvailableDomains request with HTTP info returned
         * @return ApiResponse&lt;DomainGroupsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainGroupsDto> executeWithHttpInfo() throws ApiException {
            return getAvailableDomainsWithHttpInfo(inboxType);
        }

        /**
         * Execute getAvailableDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainGroupsDto> _callback) throws ApiException {
            return getAvailableDomainsAsync(inboxType, _callback);
        }
    }

    /**
     * Get all usable domains
     * List all domains available for use with email address creation
     * @return APIgetAvailableDomainsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAvailableDomainsRequest getAvailableDomains() {
        return new APIgetAvailableDomainsRequest();
    }
    private okhttp3.Call getDomainCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Boolean checkForErrors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (checkForErrors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkForErrors", checkForErrors));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Boolean checkForErrors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDomain(Async)");
        }

        return getDomainCall(id, checkForErrors, _callback);

    }


    private ApiResponse<DomainDto> getDomainWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Boolean checkForErrors) throws ApiException {
        okhttp3.Call localVarCall = getDomainValidateBeforeCall(id, checkForErrors, null);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable Boolean checkForErrors, final ApiCallback<DomainDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainValidateBeforeCall(id, checkForErrors, _callback);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDomainRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private Boolean checkForErrors;

        private APIgetDomainRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set checkForErrors
         * @param checkForErrors  (optional)
         * @return APIgetDomainRequest
         */
        public APIgetDomainRequest checkForErrors(@javax.annotation.Nullable Boolean checkForErrors) {
            this.checkForErrors = checkForErrors;
            return this;
        }

        /**
         * Build call for getDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainCall(id, checkForErrors, _callback);
        }

        /**
         * Execute getDomain request
         * @return DomainDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DomainDto execute() throws ApiException {
            ApiResponse<DomainDto> localVarResp = getDomainWithHttpInfo(id, checkForErrors);
            return localVarResp.getData();
        }

        /**
         * Execute getDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainDto> executeWithHttpInfo() throws ApiException {
            return getDomainWithHttpInfo(id, checkForErrors);
        }

        /**
         * Execute getDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainDto> _callback) throws ApiException {
            return getDomainAsync(id, checkForErrors, _callback);
        }
    }

    /**
     * Get a domain
     * Returns domain verification status and tokens for a given domain
     * @param id  (required)
     * @return APIgetDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDomainRequest getDomain(@javax.annotation.Nonnull UUID id) {
        return new APIgetDomainRequest(id);
    }
    private okhttp3.Call getDomainIssuesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/issues";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainIssuesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDomainIssuesCall(_callback);

    }


    private ApiResponse<DomainIssuesDto> getDomainIssuesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDomainIssuesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DomainIssuesDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainIssuesAsync(final ApiCallback<DomainIssuesDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainIssuesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DomainIssuesDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDomainIssuesRequest {

        private APIgetDomainIssuesRequest() {
        }

        /**
         * Build call for getDomainIssues
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainIssuesCall(_callback);
        }

        /**
         * Execute getDomainIssues request
         * @return DomainIssuesDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DomainIssuesDto execute() throws ApiException {
            ApiResponse<DomainIssuesDto> localVarResp = getDomainIssuesWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getDomainIssues request with HTTP info returned
         * @return ApiResponse&lt;DomainIssuesDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainIssuesDto> executeWithHttpInfo() throws ApiException {
            return getDomainIssuesWithHttpInfo();
        }

        /**
         * Execute getDomainIssues request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainIssuesDto> _callback) throws ApiException {
            return getDomainIssuesAsync(_callback);
        }
    }

    /**
     * Get domain issues
     * List domain issues for domains you have created
     * @return APIgetDomainIssuesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDomainIssuesRequest getDomainIssues() {
        return new APIgetDomainIssuesRequest();
    }
    private okhttp3.Call getDomainWildcardCatchAllInboxCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/{id}/wildcard"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainWildcardCatchAllInboxValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getDomainWildcardCatchAllInbox(Async)");
        }

        return getDomainWildcardCatchAllInboxCall(id, _callback);

    }


    private ApiResponse<InboxDto> getDomainWildcardCatchAllInboxWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getDomainWildcardCatchAllInboxValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainWildcardCatchAllInboxAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainWildcardCatchAllInboxValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDomainWildcardCatchAllInboxRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetDomainWildcardCatchAllInboxRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getDomainWildcardCatchAllInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainWildcardCatchAllInboxCall(id, _callback);
        }

        /**
         * Execute getDomainWildcardCatchAllInbox request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = getDomainWildcardCatchAllInboxWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getDomainWildcardCatchAllInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return getDomainWildcardCatchAllInboxWithHttpInfo(id);
        }

        /**
         * Execute getDomainWildcardCatchAllInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return getDomainWildcardCatchAllInboxAsync(id, _callback);
        }
    }

    /**
     * Get catch all wild card inbox for domain
     * Get the catch all inbox for a domain for missed emails
     * @param id  (required)
     * @return APIgetDomainWildcardCatchAllInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDomainWildcardCatchAllInboxRequest getDomainWildcardCatchAllInbox(@javax.annotation.Nonnull UUID id) {
        return new APIgetDomainWildcardCatchAllInboxRequest(id);
    }
    private okhttp3.Call getDomainsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomainsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getDomainsCall(_callback);

    }


    private ApiResponse<List<DomainPreview>> getDomainsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getDomainsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<DomainPreview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDomainsAsync(final ApiCallback<List<DomainPreview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomainsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<DomainPreview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDomainsRequest {

        private APIgetDomainsRequest() {
        }

        /**
         * Build call for getDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDomainsCall(_callback);
        }

        /**
         * Execute getDomains request
         * @return List&lt;DomainPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<DomainPreview> execute() throws ApiException {
            ApiResponse<List<DomainPreview>> localVarResp = getDomainsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getDomains request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DomainPreview&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DomainPreview>> executeWithHttpInfo() throws ApiException {
            return getDomainsWithHttpInfo();
        }

        /**
         * Execute getDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DomainPreview>> _callback) throws ApiException {
            return getDomainsAsync(_callback);
        }
    }

    /**
     * Get domains
     * List all custom domains you have created
     * @return APIgetDomainsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetDomainsRequest getDomains() {
        return new APIgetDomainsRequest();
    }
    private okhttp3.Call getMailSlurpDomainsCall(@javax.annotation.Nullable String inboxType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/domains/mailslurp-domains";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMailSlurpDomainsValidateBeforeCall(@javax.annotation.Nullable String inboxType, final ApiCallback _callback) throws ApiException {
        return getMailSlurpDomainsCall(inboxType, _callback);

    }


    private ApiResponse<DomainGroupsDto> getMailSlurpDomainsWithHttpInfo(@javax.annotation.Nullable String inboxType) throws ApiException {
        okhttp3.Call localVarCall = getMailSlurpDomainsValidateBeforeCall(inboxType, null);
        Type localVarReturnType = new TypeToken<DomainGroupsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getMailSlurpDomainsAsync(@javax.annotation.Nullable String inboxType, final ApiCallback<DomainGroupsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMailSlurpDomainsValidateBeforeCall(inboxType, _callback);
        Type localVarReturnType = new TypeToken<DomainGroupsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetMailSlurpDomainsRequest {
        @javax.annotation.Nullable
        private String inboxType;

        private APIgetMailSlurpDomainsRequest() {
        }

        /**
         * Set inboxType
         * @param inboxType  (optional)
         * @return APIgetMailSlurpDomainsRequest
         */
        public APIgetMailSlurpDomainsRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Build call for getMailSlurpDomains
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getMailSlurpDomainsCall(inboxType, _callback);
        }

        /**
         * Execute getMailSlurpDomains request
         * @return DomainGroupsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DomainGroupsDto execute() throws ApiException {
            ApiResponse<DomainGroupsDto> localVarResp = getMailSlurpDomainsWithHttpInfo(inboxType);
            return localVarResp.getData();
        }

        /**
         * Execute getMailSlurpDomains request with HTTP info returned
         * @return ApiResponse&lt;DomainGroupsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainGroupsDto> executeWithHttpInfo() throws ApiException {
            return getMailSlurpDomainsWithHttpInfo(inboxType);
        }

        /**
         * Execute getMailSlurpDomains request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainGroupsDto> _callback) throws ApiException {
            return getMailSlurpDomainsAsync(inboxType, _callback);
        }
    }

    /**
     * Get MailSlurp domains
     * List all MailSlurp domains used with non-custom email addresses
     * @return APIgetMailSlurpDomainsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetMailSlurpDomainsRequest getMailSlurpDomains() {
        return new APIgetMailSlurpDomainsRequest();
    }
    private okhttp3.Call updateDomainCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateDomainOptions updateDomainOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateDomainOptions;

        // create path and map variables
        String localVarPath = "/domains/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateDomainValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateDomainOptions updateDomainOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateDomain(Async)");
        }

        // verify the required parameter 'updateDomainOptions' is set
        if (updateDomainOptions == null) {
            throw new ApiException("Missing the required parameter 'updateDomainOptions' when calling updateDomain(Async)");
        }

        return updateDomainCall(id, updateDomainOptions, _callback);

    }


    private ApiResponse<DomainDto> updateDomainWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateDomainOptions updateDomainOptions) throws ApiException {
        okhttp3.Call localVarCall = updateDomainValidateBeforeCall(id, updateDomainOptions, null);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateDomainAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateDomainOptions updateDomainOptions, final ApiCallback<DomainDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateDomainValidateBeforeCall(id, updateDomainOptions, _callback);
        Type localVarReturnType = new TypeToken<DomainDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateDomainRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final UpdateDomainOptions updateDomainOptions;

        private APIupdateDomainRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateDomainOptions updateDomainOptions) {
            this.id = id;
            this.updateDomainOptions = updateDomainOptions;
        }

        /**
         * Build call for updateDomain
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateDomainCall(id, updateDomainOptions, _callback);
        }

        /**
         * Execute updateDomain request
         * @return DomainDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DomainDto execute() throws ApiException {
            ApiResponse<DomainDto> localVarResp = updateDomainWithHttpInfo(id, updateDomainOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateDomain request with HTTP info returned
         * @return ApiResponse&lt;DomainDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DomainDto> executeWithHttpInfo() throws ApiException {
            return updateDomainWithHttpInfo(id, updateDomainOptions);
        }

        /**
         * Execute updateDomain request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DomainDto> _callback) throws ApiException {
            return updateDomainAsync(id, updateDomainOptions, _callback);
        }
    }

    /**
     * Update a domain
     * Update values on a domain. Note you cannot change the domain name as it is immutable. Recreate the domain if you need to alter this.
     * @param id  (required)
     * @param updateDomainOptions  (required)
     * @return APIupdateDomainRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateDomainRequest updateDomain(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull UpdateDomainOptions updateDomainOptions) {
        return new APIupdateDomainRequest(id, updateDomainOptions);
    }
}
