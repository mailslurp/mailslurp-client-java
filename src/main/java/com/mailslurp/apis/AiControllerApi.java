/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.GenerateStructuredContentAttachmentOptions;
import com.mailslurp.models.GenerateStructuredContentEmailOptions;
import com.mailslurp.models.StructuredContentResult;
import com.mailslurp.models.StructuredOutputSchema;
import com.mailslurp.models.StructuredOutputSchemaValidation;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AiControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AiControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AiControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call generateStructuredContentFromAttachmentCall(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateStructuredContentAttachmentOptions;

        // create path and map variables
        String localVarPath = "/ai/structured-content/attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateStructuredContentFromAttachmentValidateBeforeCall(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateStructuredContentAttachmentOptions' is set
        if (generateStructuredContentAttachmentOptions == null) {
            throw new ApiException("Missing the required parameter 'generateStructuredContentAttachmentOptions' when calling generateStructuredContentFromAttachment(Async)");
        }

        return generateStructuredContentFromAttachmentCall(generateStructuredContentAttachmentOptions, _callback);

    }


    private ApiResponse<StructuredContentResult> generateStructuredContentFromAttachmentWithHttpInfo(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions) throws ApiException {
        okhttp3.Call localVarCall = generateStructuredContentFromAttachmentValidateBeforeCall(generateStructuredContentAttachmentOptions, null);
        Type localVarReturnType = new TypeToken<StructuredContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateStructuredContentFromAttachmentAsync(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, final ApiCallback<StructuredContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateStructuredContentFromAttachmentValidateBeforeCall(generateStructuredContentAttachmentOptions, _callback);
        Type localVarReturnType = new TypeToken<StructuredContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateStructuredContentFromAttachmentRequest {
        @javax.annotation.Nonnull
        private final GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions;

        private APIgenerateStructuredContentFromAttachmentRequest(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions) {
            this.generateStructuredContentAttachmentOptions = generateStructuredContentAttachmentOptions;
        }

        /**
         * Build call for generateStructuredContentFromAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateStructuredContentFromAttachmentCall(generateStructuredContentAttachmentOptions, _callback);
        }

        /**
         * Execute generateStructuredContentFromAttachment request
         * @return StructuredContentResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredContentResult execute() throws ApiException {
            ApiResponse<StructuredContentResult> localVarResp = generateStructuredContentFromAttachmentWithHttpInfo(generateStructuredContentAttachmentOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateStructuredContentFromAttachment request with HTTP info returned
         * @return ApiResponse&lt;StructuredContentResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredContentResult> executeWithHttpInfo() throws ApiException {
            return generateStructuredContentFromAttachmentWithHttpInfo(generateStructuredContentAttachmentOptions);
        }

        /**
         * Execute generateStructuredContentFromAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredContentResult> _callback) throws ApiException {
            return generateStructuredContentFromAttachmentAsync(generateStructuredContentAttachmentOptions, _callback);
        }
    }

    /**
     * Generate structured content for an attachment
     * Use output schemas to extract data from an attachment using AI
     * @param generateStructuredContentAttachmentOptions  (required)
     * @return APIgenerateStructuredContentFromAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateStructuredContentFromAttachmentRequest generateStructuredContentFromAttachment(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions) {
        return new APIgenerateStructuredContentFromAttachmentRequest(generateStructuredContentAttachmentOptions);
    }
    private okhttp3.Call generateStructuredContentFromEmailCall(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateStructuredContentEmailOptions;

        // create path and map variables
        String localVarPath = "/ai/structured-content/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateStructuredContentFromEmailValidateBeforeCall(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateStructuredContentEmailOptions' is set
        if (generateStructuredContentEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'generateStructuredContentEmailOptions' when calling generateStructuredContentFromEmail(Async)");
        }

        return generateStructuredContentFromEmailCall(generateStructuredContentEmailOptions, _callback);

    }


    private ApiResponse<StructuredContentResult> generateStructuredContentFromEmailWithHttpInfo(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = generateStructuredContentFromEmailValidateBeforeCall(generateStructuredContentEmailOptions, null);
        Type localVarReturnType = new TypeToken<StructuredContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateStructuredContentFromEmailAsync(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, final ApiCallback<StructuredContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateStructuredContentFromEmailValidateBeforeCall(generateStructuredContentEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<StructuredContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateStructuredContentFromEmailRequest {
        @javax.annotation.Nonnull
        private final GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions;

        private APIgenerateStructuredContentFromEmailRequest(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions) {
            this.generateStructuredContentEmailOptions = generateStructuredContentEmailOptions;
        }

        /**
         * Build call for generateStructuredContentFromEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateStructuredContentFromEmailCall(generateStructuredContentEmailOptions, _callback);
        }

        /**
         * Execute generateStructuredContentFromEmail request
         * @return StructuredContentResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredContentResult execute() throws ApiException {
            ApiResponse<StructuredContentResult> localVarResp = generateStructuredContentFromEmailWithHttpInfo(generateStructuredContentEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateStructuredContentFromEmail request with HTTP info returned
         * @return ApiResponse&lt;StructuredContentResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredContentResult> executeWithHttpInfo() throws ApiException {
            return generateStructuredContentFromEmailWithHttpInfo(generateStructuredContentEmailOptions);
        }

        /**
         * Execute generateStructuredContentFromEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredContentResult> _callback) throws ApiException {
            return generateStructuredContentFromEmailAsync(generateStructuredContentEmailOptions, _callback);
        }
    }

    /**
     * Generate structured content for an email
     * Use output schemas to extract data from an email using AI
     * @param generateStructuredContentEmailOptions  (required)
     * @return APIgenerateStructuredContentFromEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateStructuredContentFromEmailRequest generateStructuredContentFromEmail(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions) {
        return new APIgenerateStructuredContentFromEmailRequest(generateStructuredContentEmailOptions);
    }
    private okhttp3.Call validateStructuredOutputSchemaCall(@javax.annotation.Nonnull StructuredOutputSchema structuredOutputSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = structuredOutputSchema;

        // create path and map variables
        String localVarPath = "/ai/structured-content/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateStructuredOutputSchemaValidateBeforeCall(@javax.annotation.Nonnull StructuredOutputSchema structuredOutputSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'structuredOutputSchema' is set
        if (structuredOutputSchema == null) {
            throw new ApiException("Missing the required parameter 'structuredOutputSchema' when calling validateStructuredOutputSchema(Async)");
        }

        return validateStructuredOutputSchemaCall(structuredOutputSchema, _callback);

    }


    private ApiResponse<StructuredOutputSchemaValidation> validateStructuredOutputSchemaWithHttpInfo(@javax.annotation.Nonnull StructuredOutputSchema structuredOutputSchema) throws ApiException {
        okhttp3.Call localVarCall = validateStructuredOutputSchemaValidateBeforeCall(structuredOutputSchema, null);
        Type localVarReturnType = new TypeToken<StructuredOutputSchemaValidation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateStructuredOutputSchemaAsync(@javax.annotation.Nonnull StructuredOutputSchema structuredOutputSchema, final ApiCallback<StructuredOutputSchemaValidation> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateStructuredOutputSchemaValidateBeforeCall(structuredOutputSchema, _callback);
        Type localVarReturnType = new TypeToken<StructuredOutputSchemaValidation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvalidateStructuredOutputSchemaRequest {
        @javax.annotation.Nonnull
        private final StructuredOutputSchema structuredOutputSchema;

        private APIvalidateStructuredOutputSchemaRequest(@javax.annotation.Nonnull StructuredOutputSchema structuredOutputSchema) {
            this.structuredOutputSchema = structuredOutputSchema;
        }

        /**
         * Build call for validateStructuredOutputSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateStructuredOutputSchemaCall(structuredOutputSchema, _callback);
        }

        /**
         * Execute validateStructuredOutputSchema request
         * @return StructuredOutputSchemaValidation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredOutputSchemaValidation execute() throws ApiException {
            ApiResponse<StructuredOutputSchemaValidation> localVarResp = validateStructuredOutputSchemaWithHttpInfo(structuredOutputSchema);
            return localVarResp.getData();
        }

        /**
         * Execute validateStructuredOutputSchema request with HTTP info returned
         * @return ApiResponse&lt;StructuredOutputSchemaValidation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredOutputSchemaValidation> executeWithHttpInfo() throws ApiException {
            return validateStructuredOutputSchemaWithHttpInfo(structuredOutputSchema);
        }

        /**
         * Execute validateStructuredOutputSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredOutputSchemaValidation> _callback) throws ApiException {
            return validateStructuredOutputSchemaAsync(structuredOutputSchema, _callback);
        }
    }

    /**
     * Validate structured content schema
     * Check if a schema is valid and can be used to extract data using AI
     * @param structuredOutputSchema  (required)
     * @return APIvalidateStructuredOutputSchemaRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIvalidateStructuredOutputSchemaRequest validateStructuredOutputSchema(@javax.annotation.Nonnull StructuredOutputSchema structuredOutputSchema) {
        return new APIvalidateStructuredOutputSchemaRequest(structuredOutputSchema);
    }
}
