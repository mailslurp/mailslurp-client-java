/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.AITransformCreateOptions;
import com.mailslurp.models.AITransformDto;
import com.mailslurp.models.AITransformMappingDto;
import com.mailslurp.models.AITransformResultDto;
import com.mailslurp.models.ConditionalStructuredContentResult;
import com.mailslurp.models.CreateAITransformerMappingOptions;
import com.mailslurp.models.GenerateStructuredContentAttachmentOptions;
import com.mailslurp.models.GenerateStructuredContentEmailOptions;
import com.mailslurp.models.GenerateStructuredContentSmsOptions;
import com.mailslurp.models.InvokeTransformerOptions;
import com.mailslurp.models.PageAITransformMappingProjection;
import com.mailslurp.models.PageAITransformProjection;
import com.mailslurp.models.PageAITransformResultProjection;
import com.mailslurp.models.StructuredContentResultDto;
import com.mailslurp.models.StructuredOutputSchema;
import com.mailslurp.models.StructuredOutputSchemaValidation;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AiControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AiControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AiControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTransformerCall(@javax.annotation.Nonnull AITransformCreateOptions aiTransformCreateOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = aiTransformCreateOptions;

        // create path and map variables
        String localVarPath = "/ai/transformer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransformerValidateBeforeCall(@javax.annotation.Nonnull AITransformCreateOptions aiTransformCreateOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'aiTransformCreateOptions' is set
        if (aiTransformCreateOptions == null) {
            throw new ApiException("Missing the required parameter 'aiTransformCreateOptions' when calling createTransformer(Async)");
        }

        return createTransformerCall(aiTransformCreateOptions, _callback);

    }


    private ApiResponse<AITransformDto> createTransformerWithHttpInfo(@javax.annotation.Nonnull AITransformCreateOptions aiTransformCreateOptions) throws ApiException {
        okhttp3.Call localVarCall = createTransformerValidateBeforeCall(aiTransformCreateOptions, null);
        Type localVarReturnType = new TypeToken<AITransformDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransformerAsync(@javax.annotation.Nonnull AITransformCreateOptions aiTransformCreateOptions, final ApiCallback<AITransformDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransformerValidateBeforeCall(aiTransformCreateOptions, _callback);
        Type localVarReturnType = new TypeToken<AITransformDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTransformerRequest {
        @javax.annotation.Nonnull
        private final AITransformCreateOptions aiTransformCreateOptions;

        private APIcreateTransformerRequest(@javax.annotation.Nonnull AITransformCreateOptions aiTransformCreateOptions) {
            this.aiTransformCreateOptions = aiTransformCreateOptions;
        }

        /**
         * Build call for createTransformer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTransformerCall(aiTransformCreateOptions, _callback);
        }

        /**
         * Execute createTransformer request
         * @return AITransformDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AITransformDto execute() throws ApiException {
            ApiResponse<AITransformDto> localVarResp = createTransformerWithHttpInfo(aiTransformCreateOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createTransformer request with HTTP info returned
         * @return ApiResponse&lt;AITransformDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AITransformDto> executeWithHttpInfo() throws ApiException {
            return createTransformerWithHttpInfo(aiTransformCreateOptions);
        }

        /**
         * Execute createTransformer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AITransformDto> _callback) throws ApiException {
            return createTransformerAsync(aiTransformCreateOptions, _callback);
        }
    }

    /**
     * Create a transformer for reuse in automations
     * Save an AI transform instructions and schema for use with webhooks and automations
     * @param aiTransformCreateOptions  (required)
     * @return APIcreateTransformerRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTransformerRequest createTransformer(@javax.annotation.Nonnull AITransformCreateOptions aiTransformCreateOptions) {
        return new APIcreateTransformerRequest(aiTransformCreateOptions);
    }
    private okhttp3.Call createTransformerMappingsCall(@javax.annotation.Nonnull CreateAITransformerMappingOptions createAITransformerMappingOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAITransformerMappingOptions;

        // create path and map variables
        String localVarPath = "/ai/transformer/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransformerMappingsValidateBeforeCall(@javax.annotation.Nonnull CreateAITransformerMappingOptions createAITransformerMappingOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAITransformerMappingOptions' is set
        if (createAITransformerMappingOptions == null) {
            throw new ApiException("Missing the required parameter 'createAITransformerMappingOptions' when calling createTransformerMappings(Async)");
        }

        return createTransformerMappingsCall(createAITransformerMappingOptions, _callback);

    }


    private ApiResponse<AITransformMappingDto> createTransformerMappingsWithHttpInfo(@javax.annotation.Nonnull CreateAITransformerMappingOptions createAITransformerMappingOptions) throws ApiException {
        okhttp3.Call localVarCall = createTransformerMappingsValidateBeforeCall(createAITransformerMappingOptions, null);
        Type localVarReturnType = new TypeToken<AITransformMappingDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTransformerMappingsAsync(@javax.annotation.Nonnull CreateAITransformerMappingOptions createAITransformerMappingOptions, final ApiCallback<AITransformMappingDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransformerMappingsValidateBeforeCall(createAITransformerMappingOptions, _callback);
        Type localVarReturnType = new TypeToken<AITransformMappingDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTransformerMappingsRequest {
        @javax.annotation.Nonnull
        private final CreateAITransformerMappingOptions createAITransformerMappingOptions;

        private APIcreateTransformerMappingsRequest(@javax.annotation.Nonnull CreateAITransformerMappingOptions createAITransformerMappingOptions) {
            this.createAITransformerMappingOptions = createAITransformerMappingOptions;
        }

        /**
         * Build call for createTransformerMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTransformerMappingsCall(createAITransformerMappingOptions, _callback);
        }

        /**
         * Execute createTransformerMappings request
         * @return AITransformMappingDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AITransformMappingDto execute() throws ApiException {
            ApiResponse<AITransformMappingDto> localVarResp = createTransformerMappingsWithHttpInfo(createAITransformerMappingOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createTransformerMappings request with HTTP info returned
         * @return ApiResponse&lt;AITransformMappingDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AITransformMappingDto> executeWithHttpInfo() throws ApiException {
            return createTransformerMappingsWithHttpInfo(createAITransformerMappingOptions);
        }

        /**
         * Execute createTransformerMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AITransformMappingDto> _callback) throws ApiException {
            return createTransformerMappingsAsync(createAITransformerMappingOptions, _callback);
        }
    }

    /**
     * Create transformer mapping
     * Create AI transformer mappings to other entities
     * @param createAITransformerMappingOptions  (required)
     * @return APIcreateTransformerMappingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTransformerMappingsRequest createTransformerMappings(@javax.annotation.Nonnull CreateAITransformerMappingOptions createAITransformerMappingOptions) {
        return new APIcreateTransformerMappingsRequest(createAITransformerMappingOptions);
    }
    private okhttp3.Call deleteAllTransformerMappingsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllTransformerMappingsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAllTransformerMappingsCall(_callback);

    }


    private ApiResponse<Void> deleteAllTransformerMappingsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllTransformerMappingsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllTransformerMappingsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllTransformerMappingsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllTransformerMappingsRequest {

        private APIdeleteAllTransformerMappingsRequest() {
        }

        /**
         * Build call for deleteAllTransformerMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllTransformerMappingsCall(_callback);
        }

        /**
         * Execute deleteAllTransformerMappings request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllTransformerMappingsWithHttpInfo();
        }

        /**
         * Execute deleteAllTransformerMappings request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllTransformerMappingsWithHttpInfo();
        }

        /**
         * Execute deleteAllTransformerMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllTransformerMappingsAsync(_callback);
        }
    }

    /**
     * Delete all transformer mapping
     * Delete all AI transformer mappings
     * @return APIdeleteAllTransformerMappingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllTransformerMappingsRequest deleteAllTransformerMappings() {
        return new APIdeleteAllTransformerMappingsRequest();
    }
    private okhttp3.Call deleteTransformerCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransformerValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTransformer(Async)");
        }

        return deleteTransformerCall(id, _callback);

    }


    private ApiResponse<Void> deleteTransformerWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteTransformerValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTransformerAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransformerValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteTransformerRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteTransformerRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteTransformer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransformerCall(id, _callback);
        }

        /**
         * Execute deleteTransformer request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTransformerWithHttpInfo(id);
        }

        /**
         * Execute deleteTransformer request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTransformerWithHttpInfo(id);
        }

        /**
         * Execute deleteTransformer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTransformerAsync(id, _callback);
        }
    }

    /**
     * Delete a transformer
     * Delete an AI transformer and schemas by ID
     * @param id  (required)
     * @return APIdeleteTransformerRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransformerRequest deleteTransformer(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteTransformerRequest(id);
    }
    private okhttp3.Call deleteTransformerMappingCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/mappings/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransformerMappingValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteTransformerMapping(Async)");
        }

        return deleteTransformerMappingCall(id, _callback);

    }


    private ApiResponse<Void> deleteTransformerMappingWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteTransformerMappingValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTransformerMappingAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransformerMappingValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteTransformerMappingRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteTransformerMappingRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteTransformerMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransformerMappingCall(id, _callback);
        }

        /**
         * Execute deleteTransformerMapping request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTransformerMappingWithHttpInfo(id);
        }

        /**
         * Execute deleteTransformerMapping request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTransformerMappingWithHttpInfo(id);
        }

        /**
         * Execute deleteTransformerMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTransformerMappingAsync(id, _callback);
        }
    }

    /**
     * Delete transformer mapping
     * Delete an AI transformer mapping
     * @param id ID of transform mapping (required)
     * @return APIdeleteTransformerMappingRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransformerMappingRequest deleteTransformerMapping(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteTransformerMappingRequest(id);
    }
    private okhttp3.Call deleteTransformersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTransformersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteTransformersCall(_callback);

    }


    private ApiResponse<Void> deleteTransformersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteTransformersValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteTransformersAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTransformersValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteTransformersRequest {

        private APIdeleteTransformersRequest() {
        }

        /**
         * Build call for deleteTransformers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteTransformersCall(_callback);
        }

        /**
         * Execute deleteTransformers request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteTransformersWithHttpInfo();
        }

        /**
         * Execute deleteTransformers request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteTransformersWithHttpInfo();
        }

        /**
         * Execute deleteTransformers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteTransformersAsync(_callback);
        }
    }

    /**
     * Delete all transformers
     * Delete all AI transformers and schemas
     * @return APIdeleteTransformersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteTransformersRequest deleteTransformers() {
        return new APIdeleteTransformersRequest();
    }
    private okhttp3.Call generateStructuredContentFromAttachmentCall(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateStructuredContentAttachmentOptions;

        // create path and map variables
        String localVarPath = "/ai/structured-content/attachment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateStructuredContentFromAttachmentValidateBeforeCall(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateStructuredContentAttachmentOptions' is set
        if (generateStructuredContentAttachmentOptions == null) {
            throw new ApiException("Missing the required parameter 'generateStructuredContentAttachmentOptions' when calling generateStructuredContentFromAttachment(Async)");
        }

        return generateStructuredContentFromAttachmentCall(generateStructuredContentAttachmentOptions, _callback);

    }


    private ApiResponse<StructuredContentResultDto> generateStructuredContentFromAttachmentWithHttpInfo(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions) throws ApiException {
        okhttp3.Call localVarCall = generateStructuredContentFromAttachmentValidateBeforeCall(generateStructuredContentAttachmentOptions, null);
        Type localVarReturnType = new TypeToken<StructuredContentResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateStructuredContentFromAttachmentAsync(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions, final ApiCallback<StructuredContentResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateStructuredContentFromAttachmentValidateBeforeCall(generateStructuredContentAttachmentOptions, _callback);
        Type localVarReturnType = new TypeToken<StructuredContentResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateStructuredContentFromAttachmentRequest {
        @javax.annotation.Nonnull
        private final GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions;

        private APIgenerateStructuredContentFromAttachmentRequest(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions) {
            this.generateStructuredContentAttachmentOptions = generateStructuredContentAttachmentOptions;
        }

        /**
         * Build call for generateStructuredContentFromAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateStructuredContentFromAttachmentCall(generateStructuredContentAttachmentOptions, _callback);
        }

        /**
         * Execute generateStructuredContentFromAttachment request
         * @return StructuredContentResultDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredContentResultDto execute() throws ApiException {
            ApiResponse<StructuredContentResultDto> localVarResp = generateStructuredContentFromAttachmentWithHttpInfo(generateStructuredContentAttachmentOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateStructuredContentFromAttachment request with HTTP info returned
         * @return ApiResponse&lt;StructuredContentResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredContentResultDto> executeWithHttpInfo() throws ApiException {
            return generateStructuredContentFromAttachmentWithHttpInfo(generateStructuredContentAttachmentOptions);
        }

        /**
         * Execute generateStructuredContentFromAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredContentResultDto> _callback) throws ApiException {
            return generateStructuredContentFromAttachmentAsync(generateStructuredContentAttachmentOptions, _callback);
        }
    }

    /**
     * Generate structured content for an attachment
     * Use output schemas to extract data from an attachment using AI
     * @param generateStructuredContentAttachmentOptions  (required)
     * @return APIgenerateStructuredContentFromAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateStructuredContentFromAttachmentRequest generateStructuredContentFromAttachment(@javax.annotation.Nonnull GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions) {
        return new APIgenerateStructuredContentFromAttachmentRequest(generateStructuredContentAttachmentOptions);
    }
    private okhttp3.Call generateStructuredContentFromEmailCall(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateStructuredContentEmailOptions;

        // create path and map variables
        String localVarPath = "/ai/structured-content/email";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateStructuredContentFromEmailValidateBeforeCall(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateStructuredContentEmailOptions' is set
        if (generateStructuredContentEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'generateStructuredContentEmailOptions' when calling generateStructuredContentFromEmail(Async)");
        }

        return generateStructuredContentFromEmailCall(generateStructuredContentEmailOptions, _callback);

    }


    private ApiResponse<StructuredContentResultDto> generateStructuredContentFromEmailWithHttpInfo(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = generateStructuredContentFromEmailValidateBeforeCall(generateStructuredContentEmailOptions, null);
        Type localVarReturnType = new TypeToken<StructuredContentResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateStructuredContentFromEmailAsync(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions, final ApiCallback<StructuredContentResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateStructuredContentFromEmailValidateBeforeCall(generateStructuredContentEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<StructuredContentResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateStructuredContentFromEmailRequest {
        @javax.annotation.Nonnull
        private final GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions;

        private APIgenerateStructuredContentFromEmailRequest(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions) {
            this.generateStructuredContentEmailOptions = generateStructuredContentEmailOptions;
        }

        /**
         * Build call for generateStructuredContentFromEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateStructuredContentFromEmailCall(generateStructuredContentEmailOptions, _callback);
        }

        /**
         * Execute generateStructuredContentFromEmail request
         * @return StructuredContentResultDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredContentResultDto execute() throws ApiException {
            ApiResponse<StructuredContentResultDto> localVarResp = generateStructuredContentFromEmailWithHttpInfo(generateStructuredContentEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateStructuredContentFromEmail request with HTTP info returned
         * @return ApiResponse&lt;StructuredContentResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredContentResultDto> executeWithHttpInfo() throws ApiException {
            return generateStructuredContentFromEmailWithHttpInfo(generateStructuredContentEmailOptions);
        }

        /**
         * Execute generateStructuredContentFromEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredContentResultDto> _callback) throws ApiException {
            return generateStructuredContentFromEmailAsync(generateStructuredContentEmailOptions, _callback);
        }
    }

    /**
     * Generate structured content for an email
     * Use output schemas to extract data from an email using AI
     * @param generateStructuredContentEmailOptions  (required)
     * @return APIgenerateStructuredContentFromEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateStructuredContentFromEmailRequest generateStructuredContentFromEmail(@javax.annotation.Nonnull GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions) {
        return new APIgenerateStructuredContentFromEmailRequest(generateStructuredContentEmailOptions);
    }
    private okhttp3.Call generateStructuredContentFromSmsCall(@javax.annotation.Nonnull GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = generateStructuredContentSmsOptions;

        // create path and map variables
        String localVarPath = "/ai/structured-content/sms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call generateStructuredContentFromSmsValidateBeforeCall(@javax.annotation.Nonnull GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'generateStructuredContentSmsOptions' is set
        if (generateStructuredContentSmsOptions == null) {
            throw new ApiException("Missing the required parameter 'generateStructuredContentSmsOptions' when calling generateStructuredContentFromSms(Async)");
        }

        return generateStructuredContentFromSmsCall(generateStructuredContentSmsOptions, _callback);

    }


    private ApiResponse<StructuredContentResultDto> generateStructuredContentFromSmsWithHttpInfo(@javax.annotation.Nonnull GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions) throws ApiException {
        okhttp3.Call localVarCall = generateStructuredContentFromSmsValidateBeforeCall(generateStructuredContentSmsOptions, null);
        Type localVarReturnType = new TypeToken<StructuredContentResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call generateStructuredContentFromSmsAsync(@javax.annotation.Nonnull GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions, final ApiCallback<StructuredContentResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = generateStructuredContentFromSmsValidateBeforeCall(generateStructuredContentSmsOptions, _callback);
        Type localVarReturnType = new TypeToken<StructuredContentResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgenerateStructuredContentFromSmsRequest {
        @javax.annotation.Nonnull
        private final GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions;

        private APIgenerateStructuredContentFromSmsRequest(@javax.annotation.Nonnull GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions) {
            this.generateStructuredContentSmsOptions = generateStructuredContentSmsOptions;
        }

        /**
         * Build call for generateStructuredContentFromSms
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return generateStructuredContentFromSmsCall(generateStructuredContentSmsOptions, _callback);
        }

        /**
         * Execute generateStructuredContentFromSms request
         * @return StructuredContentResultDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredContentResultDto execute() throws ApiException {
            ApiResponse<StructuredContentResultDto> localVarResp = generateStructuredContentFromSmsWithHttpInfo(generateStructuredContentSmsOptions);
            return localVarResp.getData();
        }

        /**
         * Execute generateStructuredContentFromSms request with HTTP info returned
         * @return ApiResponse&lt;StructuredContentResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredContentResultDto> executeWithHttpInfo() throws ApiException {
            return generateStructuredContentFromSmsWithHttpInfo(generateStructuredContentSmsOptions);
        }

        /**
         * Execute generateStructuredContentFromSms request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredContentResultDto> _callback) throws ApiException {
            return generateStructuredContentFromSmsAsync(generateStructuredContentSmsOptions, _callback);
        }
    }

    /**
     * Generate structured content for a TXT message
     * Use output schemas to extract data from an SMS using AI
     * @param generateStructuredContentSmsOptions  (required)
     * @return APIgenerateStructuredContentFromSmsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgenerateStructuredContentFromSmsRequest generateStructuredContentFromSms(@javax.annotation.Nonnull GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions) {
        return new APIgenerateStructuredContentFromSmsRequest(generateStructuredContentSmsOptions);
    }
    private okhttp3.Call getTransformerCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformerValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTransformer(Async)");
        }

        return getTransformerCall(id, _callback);

    }


    private ApiResponse<AITransformDto> getTransformerWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getTransformerValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AITransformDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformerAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<AITransformDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformerValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AITransformDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransformerRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetTransformerRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getTransformer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformerCall(id, _callback);
        }

        /**
         * Execute getTransformer request
         * @return AITransformDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AITransformDto execute() throws ApiException {
            ApiResponse<AITransformDto> localVarResp = getTransformerWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getTransformer request with HTTP info returned
         * @return ApiResponse&lt;AITransformDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AITransformDto> executeWithHttpInfo() throws ApiException {
            return getTransformerWithHttpInfo(id);
        }

        /**
         * Execute getTransformer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AITransformDto> _callback) throws ApiException {
            return getTransformerAsync(id, _callback);
        }
    }

    /**
     * Get a transformer
     * Get AI transformer and schemas by ID
     * @param id  (required)
     * @return APIgetTransformerRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransformerRequest getTransformer(@javax.annotation.Nonnull UUID id) {
        return new APIgetTransformerRequest(id);
    }
    private okhttp3.Call getTransformerMappingCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/mappings/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformerMappingValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTransformerMapping(Async)");
        }

        return getTransformerMappingCall(id, _callback);

    }


    private ApiResponse<AITransformMappingDto> getTransformerMappingWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getTransformerMappingValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AITransformMappingDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformerMappingAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<AITransformMappingDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformerMappingValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AITransformMappingDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransformerMappingRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetTransformerMappingRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getTransformerMapping
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformerMappingCall(id, _callback);
        }

        /**
         * Execute getTransformerMapping request
         * @return AITransformMappingDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AITransformMappingDto execute() throws ApiException {
            ApiResponse<AITransformMappingDto> localVarResp = getTransformerMappingWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getTransformerMapping request with HTTP info returned
         * @return ApiResponse&lt;AITransformMappingDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AITransformMappingDto> executeWithHttpInfo() throws ApiException {
            return getTransformerMappingWithHttpInfo(id);
        }

        /**
         * Execute getTransformerMapping request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AITransformMappingDto> _callback) throws ApiException {
            return getTransformerMappingAsync(id, _callback);
        }
    }

    /**
     * Get transformer mapping
     * Get an AI transformer mapping
     * @param id ID of transform mapping (required)
     * @return APIgetTransformerMappingRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransformerMappingRequest getTransformerMapping(@javax.annotation.Nonnull UUID id) {
        return new APIgetTransformerMappingRequest(id);
    }
    private okhttp3.Call getTransformerMappingsCall(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/mappings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aiTransformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformId", aiTransformId));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformerMappingsValidateBeforeCall(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return getTransformerMappingsCall(aiTransformId, entityId, entityType, page, size, sort, _callback);

    }


    private ApiResponse<PageAITransformMappingProjection> getTransformerMappingsWithHttpInfo(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getTransformerMappingsValidateBeforeCall(aiTransformId, entityId, entityType, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageAITransformMappingProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformerMappingsAsync(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PageAITransformMappingProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformerMappingsValidateBeforeCall(aiTransformId, entityId, entityType, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageAITransformMappingProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransformerMappingsRequest {
        @javax.annotation.Nullable
        private UUID aiTransformId;
        @javax.annotation.Nullable
        private UUID entityId;
        @javax.annotation.Nullable
        private String entityType;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetTransformerMappingsRequest() {
        }

        /**
         * Set aiTransformId
         * @param aiTransformId  (optional)
         * @return APIgetTransformerMappingsRequest
         */
        public APIgetTransformerMappingsRequest aiTransformId(@javax.annotation.Nullable UUID aiTransformId) {
            this.aiTransformId = aiTransformId;
            return this;
        }

        /**
         * Set entityId
         * @param entityId  (optional)
         * @return APIgetTransformerMappingsRequest
         */
        public APIgetTransformerMappingsRequest entityId(@javax.annotation.Nullable UUID entityId) {
            this.entityId = entityId;
            return this;
        }

        /**
         * Set entityType
         * @param entityType  (optional)
         * @return APIgetTransformerMappingsRequest
         */
        public APIgetTransformerMappingsRequest entityType(@javax.annotation.Nullable String entityType) {
            this.entityType = entityType;
            return this;
        }

        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return APIgetTransformerMappingsRequest
         */
        public APIgetTransformerMappingsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetTransformerMappingsRequest
         */
        public APIgetTransformerMappingsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetTransformerMappingsRequest
         */
        public APIgetTransformerMappingsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getTransformerMappings
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformerMappingsCall(aiTransformId, entityId, entityType, page, size, sort, _callback);
        }

        /**
         * Execute getTransformerMappings request
         * @return PageAITransformMappingProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAITransformMappingProjection execute() throws ApiException {
            ApiResponse<PageAITransformMappingProjection> localVarResp = getTransformerMappingsWithHttpInfo(aiTransformId, entityId, entityType, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getTransformerMappings request with HTTP info returned
         * @return ApiResponse&lt;PageAITransformMappingProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAITransformMappingProjection> executeWithHttpInfo() throws ApiException {
            return getTransformerMappingsWithHttpInfo(aiTransformId, entityId, entityType, page, size, sort);
        }

        /**
         * Execute getTransformerMappings request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAITransformMappingProjection> _callback) throws ApiException {
            return getTransformerMappingsAsync(aiTransformId, entityId, entityType, page, size, sort, _callback);
        }
    }

    /**
     * Get transformer mappings
     * Get AI transformer mappings to other entities
     * @return APIgetTransformerMappingsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransformerMappingsRequest getTransformerMappings() {
        return new APIgetTransformerMappingsRequest();
    }
    private okhttp3.Call getTransformerResultCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/results/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformerResultValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTransformerResult(Async)");
        }

        return getTransformerResultCall(id, _callback);

    }


    private ApiResponse<AITransformResultDto> getTransformerResultWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getTransformerResultValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AITransformResultDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformerResultAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<AITransformResultDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformerResultValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AITransformResultDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransformerResultRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetTransformerResultRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getTransformerResult
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformerResultCall(id, _callback);
        }

        /**
         * Execute getTransformerResult request
         * @return AITransformResultDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AITransformResultDto execute() throws ApiException {
            ApiResponse<AITransformResultDto> localVarResp = getTransformerResultWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getTransformerResult request with HTTP info returned
         * @return ApiResponse&lt;AITransformResultDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AITransformResultDto> executeWithHttpInfo() throws ApiException {
            return getTransformerResultWithHttpInfo(id);
        }

        /**
         * Execute getTransformerResult request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AITransformResultDto> _callback) throws ApiException {
            return getTransformerResultAsync(id, _callback);
        }
    }

    /**
     * Get transformer result
     * Get AI transformer result
     * @param id ID of transform result (required)
     * @return APIgetTransformerResultRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransformerResultRequest getTransformerResult(@javax.annotation.Nonnull UUID id) {
        return new APIgetTransformerResultRequest(id);
    }
    private okhttp3.Call getTransformerResultsCall(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID aiTransformMappingId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer/results";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (aiTransformId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformId", aiTransformId));
        }

        if (aiTransformMappingId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aiTransformMappingId", aiTransformMappingId));
        }

        if (entityId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityId", entityId));
        }

        if (entityType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entityType", entityType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformerResultsValidateBeforeCall(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID aiTransformMappingId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return getTransformerResultsCall(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort, _callback);

    }


    private ApiResponse<PageAITransformResultProjection> getTransformerResultsWithHttpInfo(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID aiTransformMappingId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getTransformerResultsValidateBeforeCall(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageAITransformResultProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformerResultsAsync(@javax.annotation.Nullable UUID aiTransformId, @javax.annotation.Nullable UUID aiTransformMappingId, @javax.annotation.Nullable UUID entityId, @javax.annotation.Nullable String entityType, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PageAITransformResultProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformerResultsValidateBeforeCall(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageAITransformResultProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransformerResultsRequest {
        @javax.annotation.Nullable
        private UUID aiTransformId;
        @javax.annotation.Nullable
        private UUID aiTransformMappingId;
        @javax.annotation.Nullable
        private UUID entityId;
        @javax.annotation.Nullable
        private String entityType;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetTransformerResultsRequest() {
        }

        /**
         * Set aiTransformId
         * @param aiTransformId  (optional)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest aiTransformId(@javax.annotation.Nullable UUID aiTransformId) {
            this.aiTransformId = aiTransformId;
            return this;
        }

        /**
         * Set aiTransformMappingId
         * @param aiTransformMappingId  (optional)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest aiTransformMappingId(@javax.annotation.Nullable UUID aiTransformMappingId) {
            this.aiTransformMappingId = aiTransformMappingId;
            return this;
        }

        /**
         * Set entityId
         * @param entityId  (optional)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest entityId(@javax.annotation.Nullable UUID entityId) {
            this.entityId = entityId;
            return this;
        }

        /**
         * Set entityType
         * @param entityType  (optional)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest entityType(@javax.annotation.Nullable String entityType) {
            this.entityType = entityType;
            return this;
        }

        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetTransformerResultsRequest
         */
        public APIgetTransformerResultsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getTransformerResults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformerResultsCall(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort, _callback);
        }

        /**
         * Execute getTransformerResults request
         * @return PageAITransformResultProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAITransformResultProjection execute() throws ApiException {
            ApiResponse<PageAITransformResultProjection> localVarResp = getTransformerResultsWithHttpInfo(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getTransformerResults request with HTTP info returned
         * @return ApiResponse&lt;PageAITransformResultProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAITransformResultProjection> executeWithHttpInfo() throws ApiException {
            return getTransformerResultsWithHttpInfo(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort);
        }

        /**
         * Execute getTransformerResults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAITransformResultProjection> _callback) throws ApiException {
            return getTransformerResultsAsync(aiTransformId, aiTransformMappingId, entityId, entityType, page, size, sort, _callback);
        }
    }

    /**
     * Get transformer results
     * Get AI transformer results
     * @return APIgetTransformerResultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransformerResultsRequest getTransformerResults() {
        return new APIgetTransformerResultsRequest();
    }
    private okhttp3.Call getTransformersCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable List<UUID> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ai/transformer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransformersValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable List<UUID> include, final ApiCallback _callback) throws ApiException {
        return getTransformersCall(page, size, sort, include, _callback);

    }


    private ApiResponse<PageAITransformProjection> getTransformersWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable List<UUID> include) throws ApiException {
        okhttp3.Call localVarCall = getTransformersValidateBeforeCall(page, size, sort, include, null);
        Type localVarReturnType = new TypeToken<PageAITransformProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTransformersAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable List<UUID> include, final ApiCallback<PageAITransformProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransformersValidateBeforeCall(page, size, sort, include, _callback);
        Type localVarReturnType = new TypeToken<PageAITransformProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTransformersRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private List<UUID> include;

        private APIgetTransformersRequest() {
        }

        /**
         * Set page
         * @param page  (optional, default to 0)
         * @return APIgetTransformersRequest
         */
        public APIgetTransformersRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in SMS list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetTransformersRequest
         */
        public APIgetTransformersRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetTransformersRequest
         */
        public APIgetTransformersRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set include
         * @param include Optional list of IDs to include in result (optional)
         * @return APIgetTransformersRequest
         */
        public APIgetTransformersRequest include(@javax.annotation.Nullable List<UUID> include) {
            this.include = include;
            return this;
        }

        /**
         * Build call for getTransformers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTransformersCall(page, size, sort, include, _callback);
        }

        /**
         * Execute getTransformers request
         * @return PageAITransformProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageAITransformProjection execute() throws ApiException {
            ApiResponse<PageAITransformProjection> localVarResp = getTransformersWithHttpInfo(page, size, sort, include);
            return localVarResp.getData();
        }

        /**
         * Execute getTransformers request with HTTP info returned
         * @return ApiResponse&lt;PageAITransformProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageAITransformProjection> executeWithHttpInfo() throws ApiException {
            return getTransformersWithHttpInfo(page, size, sort, include);
        }

        /**
         * Execute getTransformers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageAITransformProjection> _callback) throws ApiException {
            return getTransformersAsync(page, size, sort, include, _callback);
        }
    }

    /**
     * List transformers
     * List all AI transforms
     * @return APIgetTransformersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTransformersRequest getTransformers() {
        return new APIgetTransformersRequest();
    }
    private okhttp3.Call invokeTransformerCall(@javax.annotation.Nonnull InvokeTransformerOptions invokeTransformerOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = invokeTransformerOptions;

        // create path and map variables
        String localVarPath = "/ai/transformer/invoke";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call invokeTransformerValidateBeforeCall(@javax.annotation.Nonnull InvokeTransformerOptions invokeTransformerOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'invokeTransformerOptions' is set
        if (invokeTransformerOptions == null) {
            throw new ApiException("Missing the required parameter 'invokeTransformerOptions' when calling invokeTransformer(Async)");
        }

        return invokeTransformerCall(invokeTransformerOptions, _callback);

    }


    private ApiResponse<ConditionalStructuredContentResult> invokeTransformerWithHttpInfo(@javax.annotation.Nonnull InvokeTransformerOptions invokeTransformerOptions) throws ApiException {
        okhttp3.Call localVarCall = invokeTransformerValidateBeforeCall(invokeTransformerOptions, null);
        Type localVarReturnType = new TypeToken<ConditionalStructuredContentResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call invokeTransformerAsync(@javax.annotation.Nonnull InvokeTransformerOptions invokeTransformerOptions, final ApiCallback<ConditionalStructuredContentResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = invokeTransformerValidateBeforeCall(invokeTransformerOptions, _callback);
        Type localVarReturnType = new TypeToken<ConditionalStructuredContentResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIinvokeTransformerRequest {
        @javax.annotation.Nonnull
        private final InvokeTransformerOptions invokeTransformerOptions;

        private APIinvokeTransformerRequest(@javax.annotation.Nonnull InvokeTransformerOptions invokeTransformerOptions) {
            this.invokeTransformerOptions = invokeTransformerOptions;
        }

        /**
         * Build call for invokeTransformer
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return invokeTransformerCall(invokeTransformerOptions, _callback);
        }

        /**
         * Execute invokeTransformer request
         * @return ConditionalStructuredContentResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ConditionalStructuredContentResult execute() throws ApiException {
            ApiResponse<ConditionalStructuredContentResult> localVarResp = invokeTransformerWithHttpInfo(invokeTransformerOptions);
            return localVarResp.getData();
        }

        /**
         * Execute invokeTransformer request with HTTP info returned
         * @return ApiResponse&lt;ConditionalStructuredContentResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ConditionalStructuredContentResult> executeWithHttpInfo() throws ApiException {
            return invokeTransformerWithHttpInfo(invokeTransformerOptions);
        }

        /**
         * Execute invokeTransformer request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ConditionalStructuredContentResult> _callback) throws ApiException {
            return invokeTransformerAsync(invokeTransformerOptions, _callback);
        }
    }

    /**
     * Invoke a transformer
     * Execute an AI transformer to generate structured content
     * @param invokeTransformerOptions  (required)
     * @return APIinvokeTransformerRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIinvokeTransformerRequest invokeTransformer(@javax.annotation.Nonnull InvokeTransformerOptions invokeTransformerOptions) {
        return new APIinvokeTransformerRequest(invokeTransformerOptions);
    }
    private okhttp3.Call validateStructuredOutputSchemaCall(@javax.annotation.Nullable StructuredOutputSchema structuredOutputSchema, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = structuredOutputSchema;

        // create path and map variables
        String localVarPath = "/ai/structured-content/validate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateStructuredOutputSchemaValidateBeforeCall(@javax.annotation.Nullable StructuredOutputSchema structuredOutputSchema, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'structuredOutputSchema' is set
        if (structuredOutputSchema == null) {
            throw new ApiException("Missing the required parameter 'structuredOutputSchema' when calling validateStructuredOutputSchema(Async)");
        }

        return validateStructuredOutputSchemaCall(structuredOutputSchema, _callback);

    }


    private ApiResponse<StructuredOutputSchemaValidation> validateStructuredOutputSchemaWithHttpInfo(@javax.annotation.Nullable StructuredOutputSchema structuredOutputSchema) throws ApiException {
        okhttp3.Call localVarCall = validateStructuredOutputSchemaValidateBeforeCall(structuredOutputSchema, null);
        Type localVarReturnType = new TypeToken<StructuredOutputSchemaValidation>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateStructuredOutputSchemaAsync(@javax.annotation.Nullable StructuredOutputSchema structuredOutputSchema, final ApiCallback<StructuredOutputSchemaValidation> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateStructuredOutputSchemaValidateBeforeCall(structuredOutputSchema, _callback);
        Type localVarReturnType = new TypeToken<StructuredOutputSchemaValidation>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvalidateStructuredOutputSchemaRequest {
        @javax.annotation.Nullable
        private final StructuredOutputSchema structuredOutputSchema;

        private APIvalidateStructuredOutputSchemaRequest(@javax.annotation.Nullable StructuredOutputSchema structuredOutputSchema) {
            this.structuredOutputSchema = structuredOutputSchema;
        }

        /**
         * Build call for validateStructuredOutputSchema
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateStructuredOutputSchemaCall(structuredOutputSchema, _callback);
        }

        /**
         * Execute validateStructuredOutputSchema request
         * @return StructuredOutputSchemaValidation
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public StructuredOutputSchemaValidation execute() throws ApiException {
            ApiResponse<StructuredOutputSchemaValidation> localVarResp = validateStructuredOutputSchemaWithHttpInfo(structuredOutputSchema);
            return localVarResp.getData();
        }

        /**
         * Execute validateStructuredOutputSchema request with HTTP info returned
         * @return ApiResponse&lt;StructuredOutputSchemaValidation&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<StructuredOutputSchemaValidation> executeWithHttpInfo() throws ApiException {
            return validateStructuredOutputSchemaWithHttpInfo(structuredOutputSchema);
        }

        /**
         * Execute validateStructuredOutputSchema request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<StructuredOutputSchemaValidation> _callback) throws ApiException {
            return validateStructuredOutputSchemaAsync(structuredOutputSchema, _callback);
        }
    }

    /**
     * Validate structured content schema
     * Check if a schema is valid and can be used to extract data using AI
     * @param structuredOutputSchema  (required)
     * @return APIvalidateStructuredOutputSchemaRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIvalidateStructuredOutputSchemaRequest validateStructuredOutputSchema(@javax.annotation.Nullable StructuredOutputSchema structuredOutputSchema) {
        return new APIvalidateStructuredOutputSchemaRequest(structuredOutputSchema);
    }
}
