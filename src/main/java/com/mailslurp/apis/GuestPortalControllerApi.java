/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreatePortalOptions;
import com.mailslurp.models.CreatePortalUserOptions;
import com.mailslurp.models.GuestPortalDto;
import com.mailslurp.models.GuestPortalUserCreateDto;
import com.mailslurp.models.GuestPortalUserDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageGuestPortalUsers;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GuestPortalControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GuestPortalControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GuestPortalControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createGuestPortalCall(@javax.annotation.Nonnull CreatePortalOptions createPortalOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPortalOptions;

        // create path and map variables
        String localVarPath = "/guest-portal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGuestPortalValidateBeforeCall(@javax.annotation.Nonnull CreatePortalOptions createPortalOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPortalOptions' is set
        if (createPortalOptions == null) {
            throw new ApiException("Missing the required parameter 'createPortalOptions' when calling createGuestPortal(Async)");
        }

        return createGuestPortalCall(createPortalOptions, _callback);

    }


    private ApiResponse<GuestPortalDto> createGuestPortalWithHttpInfo(@javax.annotation.Nonnull CreatePortalOptions createPortalOptions) throws ApiException {
        okhttp3.Call localVarCall = createGuestPortalValidateBeforeCall(createPortalOptions, null);
        Type localVarReturnType = new TypeToken<GuestPortalDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGuestPortalAsync(@javax.annotation.Nonnull CreatePortalOptions createPortalOptions, final ApiCallback<GuestPortalDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGuestPortalValidateBeforeCall(createPortalOptions, _callback);
        Type localVarReturnType = new TypeToken<GuestPortalDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateGuestPortalRequest {
        @javax.annotation.Nonnull
        private final CreatePortalOptions createPortalOptions;

        private APIcreateGuestPortalRequest(@javax.annotation.Nonnull CreatePortalOptions createPortalOptions) {
            this.createPortalOptions = createPortalOptions;
        }

        /**
         * Build call for createGuestPortal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createGuestPortalCall(createPortalOptions, _callback);
        }

        /**
         * Execute createGuestPortal request
         * @return GuestPortalDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GuestPortalDto execute() throws ApiException {
            ApiResponse<GuestPortalDto> localVarResp = createGuestPortalWithHttpInfo(createPortalOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createGuestPortal request with HTTP info returned
         * @return ApiResponse&lt;GuestPortalDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GuestPortalDto> executeWithHttpInfo() throws ApiException {
            return createGuestPortalWithHttpInfo(createPortalOptions);
        }

        /**
         * Execute createGuestPortal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GuestPortalDto> _callback) throws ApiException {
            return createGuestPortalAsync(createPortalOptions, _callback);
        }
    }

    /**
     * Create a portal page for your customers or clients to log into email accounts and view emails.
     * Create a guest login page for customers or clients to access assigned email addresses
     * @param createPortalOptions  (required)
     * @return APIcreateGuestPortalRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateGuestPortalRequest createGuestPortal(@javax.annotation.Nonnull CreatePortalOptions createPortalOptions) {
        return new APIcreateGuestPortalRequest(createPortalOptions);
    }
    private okhttp3.Call createGuestPortalUserCall(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull CreatePortalUserOptions createPortalUserOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPortalUserOptions;

        // create path and map variables
        String localVarPath = "/guest-portal/{portalId}/user"
            .replace("{" + "portalId" + "}", localVarApiClient.escapeString(portalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createGuestPortalUserValidateBeforeCall(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull CreatePortalUserOptions createPortalUserOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portalId' is set
        if (portalId == null) {
            throw new ApiException("Missing the required parameter 'portalId' when calling createGuestPortalUser(Async)");
        }

        // verify the required parameter 'createPortalUserOptions' is set
        if (createPortalUserOptions == null) {
            throw new ApiException("Missing the required parameter 'createPortalUserOptions' when calling createGuestPortalUser(Async)");
        }

        return createGuestPortalUserCall(portalId, createPortalUserOptions, _callback);

    }


    private ApiResponse<GuestPortalUserCreateDto> createGuestPortalUserWithHttpInfo(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull CreatePortalUserOptions createPortalUserOptions) throws ApiException {
        okhttp3.Call localVarCall = createGuestPortalUserValidateBeforeCall(portalId, createPortalUserOptions, null);
        Type localVarReturnType = new TypeToken<GuestPortalUserCreateDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createGuestPortalUserAsync(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull CreatePortalUserOptions createPortalUserOptions, final ApiCallback<GuestPortalUserCreateDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createGuestPortalUserValidateBeforeCall(portalId, createPortalUserOptions, _callback);
        Type localVarReturnType = new TypeToken<GuestPortalUserCreateDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateGuestPortalUserRequest {
        @javax.annotation.Nonnull
        private final UUID portalId;
        @javax.annotation.Nonnull
        private final CreatePortalUserOptions createPortalUserOptions;

        private APIcreateGuestPortalUserRequest(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull CreatePortalUserOptions createPortalUserOptions) {
            this.portalId = portalId;
            this.createPortalUserOptions = createPortalUserOptions;
        }

        /**
         * Build call for createGuestPortalUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createGuestPortalUserCall(portalId, createPortalUserOptions, _callback);
        }

        /**
         * Execute createGuestPortalUser request
         * @return GuestPortalUserCreateDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GuestPortalUserCreateDto execute() throws ApiException {
            ApiResponse<GuestPortalUserCreateDto> localVarResp = createGuestPortalUserWithHttpInfo(portalId, createPortalUserOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createGuestPortalUser request with HTTP info returned
         * @return ApiResponse&lt;GuestPortalUserCreateDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GuestPortalUserCreateDto> executeWithHttpInfo() throws ApiException {
            return createGuestPortalUserWithHttpInfo(portalId, createPortalUserOptions);
        }

        /**
         * Execute createGuestPortalUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GuestPortalUserCreateDto> _callback) throws ApiException {
            return createGuestPortalUserAsync(portalId, createPortalUserOptions, _callback);
        }
    }

    /**
     * Create a portal guest user
     * Add customer to portal
     * @param portalId  (required)
     * @param createPortalUserOptions  (required)
     * @return APIcreateGuestPortalUserRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateGuestPortalUserRequest createGuestPortalUser(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull CreatePortalUserOptions createPortalUserOptions) {
        return new APIcreateGuestPortalUserRequest(portalId, createPortalUserOptions);
    }
    private okhttp3.Call getAllGuestPortalUsersCall(@javax.annotation.Nullable UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest-portal/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (portalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("portalId", portalId));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllGuestPortalUsersValidateBeforeCall(@javax.annotation.Nullable UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getAllGuestPortalUsersCall(portalId, search, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageGuestPortalUsers> getAllGuestPortalUsersWithHttpInfo(@javax.annotation.Nullable UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getAllGuestPortalUsersValidateBeforeCall(portalId, search, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageGuestPortalUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllGuestPortalUsersAsync(@javax.annotation.Nullable UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageGuestPortalUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllGuestPortalUsersValidateBeforeCall(portalId, search, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageGuestPortalUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllGuestPortalUsersRequest {
        @javax.annotation.Nullable
        private UUID portalId;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetAllGuestPortalUsersRequest() {
        }

        /**
         * Set portalId
         * @param portalId Optional portal ID (optional)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest portalId(@javax.annotation.Nullable UUID portalId) {
            this.portalId = portalId;
            return this;
        }

        /**
         * Set search
         * @param search Optional search term (optional)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllGuestPortalUsersRequest
         */
        public APIgetAllGuestPortalUsersRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getAllGuestPortalUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllGuestPortalUsersCall(portalId, search, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getAllGuestPortalUsers request
         * @return PageGuestPortalUsers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageGuestPortalUsers execute() throws ApiException {
            ApiResponse<PageGuestPortalUsers> localVarResp = getAllGuestPortalUsersWithHttpInfo(portalId, search, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getAllGuestPortalUsers request with HTTP info returned
         * @return ApiResponse&lt;PageGuestPortalUsers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageGuestPortalUsers> executeWithHttpInfo() throws ApiException {
            return getAllGuestPortalUsersWithHttpInfo(portalId, search, page, size, sort, since, before);
        }

        /**
         * Execute getAllGuestPortalUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageGuestPortalUsers> _callback) throws ApiException {
            return getAllGuestPortalUsersAsync(portalId, search, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get all guest users for portal
     * Get all customers for a portal
     * @return APIgetAllGuestPortalUsersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllGuestPortalUsersRequest getAllGuestPortalUsers() {
        return new APIgetAllGuestPortalUsersRequest();
    }
    private okhttp3.Call getGuestPortalCall(@javax.annotation.Nonnull UUID portalId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest-portal/{portalId}"
            .replace("{" + "portalId" + "}", localVarApiClient.escapeString(portalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuestPortalValidateBeforeCall(@javax.annotation.Nonnull UUID portalId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portalId' is set
        if (portalId == null) {
            throw new ApiException("Missing the required parameter 'portalId' when calling getGuestPortal(Async)");
        }

        return getGuestPortalCall(portalId, _callback);

    }


    private ApiResponse<GuestPortalDto> getGuestPortalWithHttpInfo(@javax.annotation.Nonnull UUID portalId) throws ApiException {
        okhttp3.Call localVarCall = getGuestPortalValidateBeforeCall(portalId, null);
        Type localVarReturnType = new TypeToken<GuestPortalDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuestPortalAsync(@javax.annotation.Nonnull UUID portalId, final ApiCallback<GuestPortalDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuestPortalValidateBeforeCall(portalId, _callback);
        Type localVarReturnType = new TypeToken<GuestPortalDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGuestPortalRequest {
        @javax.annotation.Nonnull
        private final UUID portalId;

        private APIgetGuestPortalRequest(@javax.annotation.Nonnull UUID portalId) {
            this.portalId = portalId;
        }

        /**
         * Build call for getGuestPortal
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuestPortalCall(portalId, _callback);
        }

        /**
         * Execute getGuestPortal request
         * @return GuestPortalDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GuestPortalDto execute() throws ApiException {
            ApiResponse<GuestPortalDto> localVarResp = getGuestPortalWithHttpInfo(portalId);
            return localVarResp.getData();
        }

        /**
         * Execute getGuestPortal request with HTTP info returned
         * @return ApiResponse&lt;GuestPortalDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GuestPortalDto> executeWithHttpInfo() throws ApiException {
            return getGuestPortalWithHttpInfo(portalId);
        }

        /**
         * Execute getGuestPortal request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GuestPortalDto> _callback) throws ApiException {
            return getGuestPortalAsync(portalId, _callback);
        }
    }

    /**
     * Get a client email portal
     * Fetch a customer guest portal
     * @param portalId  (required)
     * @return APIgetGuestPortalRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGuestPortalRequest getGuestPortal(@javax.annotation.Nonnull UUID portalId) {
        return new APIgetGuestPortalRequest(portalId);
    }
    private okhttp3.Call getGuestPortalUserCall(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull UUID guestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest-portal/{portalId}/user/{guestId}"
            .replace("{" + "portalId" + "}", localVarApiClient.escapeString(portalId.toString()))
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuestPortalUserValidateBeforeCall(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull UUID guestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portalId' is set
        if (portalId == null) {
            throw new ApiException("Missing the required parameter 'portalId' when calling getGuestPortalUser(Async)");
        }

        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling getGuestPortalUser(Async)");
        }

        return getGuestPortalUserCall(portalId, guestId, _callback);

    }


    private ApiResponse<GuestPortalUserDto> getGuestPortalUserWithHttpInfo(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull UUID guestId) throws ApiException {
        okhttp3.Call localVarCall = getGuestPortalUserValidateBeforeCall(portalId, guestId, null);
        Type localVarReturnType = new TypeToken<GuestPortalUserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuestPortalUserAsync(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull UUID guestId, final ApiCallback<GuestPortalUserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuestPortalUserValidateBeforeCall(portalId, guestId, _callback);
        Type localVarReturnType = new TypeToken<GuestPortalUserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGuestPortalUserRequest {
        @javax.annotation.Nonnull
        private final UUID portalId;
        @javax.annotation.Nonnull
        private final UUID guestId;

        private APIgetGuestPortalUserRequest(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull UUID guestId) {
            this.portalId = portalId;
            this.guestId = guestId;
        }

        /**
         * Build call for getGuestPortalUser
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuestPortalUserCall(portalId, guestId, _callback);
        }

        /**
         * Execute getGuestPortalUser request
         * @return GuestPortalUserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GuestPortalUserDto execute() throws ApiException {
            ApiResponse<GuestPortalUserDto> localVarResp = getGuestPortalUserWithHttpInfo(portalId, guestId);
            return localVarResp.getData();
        }

        /**
         * Execute getGuestPortalUser request with HTTP info returned
         * @return ApiResponse&lt;GuestPortalUserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GuestPortalUserDto> executeWithHttpInfo() throws ApiException {
            return getGuestPortalUserWithHttpInfo(portalId, guestId);
        }

        /**
         * Execute getGuestPortalUser request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GuestPortalUserDto> _callback) throws ApiException {
            return getGuestPortalUserAsync(portalId, guestId, _callback);
        }
    }

    /**
     * Get guest user for portal
     * Get customer for portal
     * @param portalId  (required)
     * @param guestId  (required)
     * @return APIgetGuestPortalUserRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGuestPortalUserRequest getGuestPortalUser(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nonnull UUID guestId) {
        return new APIgetGuestPortalUserRequest(portalId, guestId);
    }
    private okhttp3.Call getGuestPortalUserByIdCall(@javax.annotation.Nonnull UUID guestId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest-portal/user/{guestId}"
            .replace("{" + "guestId" + "}", localVarApiClient.escapeString(guestId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuestPortalUserByIdValidateBeforeCall(@javax.annotation.Nonnull UUID guestId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'guestId' is set
        if (guestId == null) {
            throw new ApiException("Missing the required parameter 'guestId' when calling getGuestPortalUserById(Async)");
        }

        return getGuestPortalUserByIdCall(guestId, _callback);

    }


    private ApiResponse<GuestPortalUserDto> getGuestPortalUserByIdWithHttpInfo(@javax.annotation.Nonnull UUID guestId) throws ApiException {
        okhttp3.Call localVarCall = getGuestPortalUserByIdValidateBeforeCall(guestId, null);
        Type localVarReturnType = new TypeToken<GuestPortalUserDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuestPortalUserByIdAsync(@javax.annotation.Nonnull UUID guestId, final ApiCallback<GuestPortalUserDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuestPortalUserByIdValidateBeforeCall(guestId, _callback);
        Type localVarReturnType = new TypeToken<GuestPortalUserDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGuestPortalUserByIdRequest {
        @javax.annotation.Nonnull
        private final UUID guestId;

        private APIgetGuestPortalUserByIdRequest(@javax.annotation.Nonnull UUID guestId) {
            this.guestId = guestId;
        }

        /**
         * Build call for getGuestPortalUserById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuestPortalUserByIdCall(guestId, _callback);
        }

        /**
         * Execute getGuestPortalUserById request
         * @return GuestPortalUserDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GuestPortalUserDto execute() throws ApiException {
            ApiResponse<GuestPortalUserDto> localVarResp = getGuestPortalUserByIdWithHttpInfo(guestId);
            return localVarResp.getData();
        }

        /**
         * Execute getGuestPortalUserById request with HTTP info returned
         * @return ApiResponse&lt;GuestPortalUserDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GuestPortalUserDto> executeWithHttpInfo() throws ApiException {
            return getGuestPortalUserByIdWithHttpInfo(guestId);
        }

        /**
         * Execute getGuestPortalUserById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GuestPortalUserDto> _callback) throws ApiException {
            return getGuestPortalUserByIdAsync(guestId, _callback);
        }
    }

    /**
     * Get guest user
     * Get customer by ID
     * @param guestId  (required)
     * @return APIgetGuestPortalUserByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGuestPortalUserByIdRequest getGuestPortalUserById(@javax.annotation.Nonnull UUID guestId) {
        return new APIgetGuestPortalUserByIdRequest(guestId);
    }
    private okhttp3.Call getGuestPortalUsersCall(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest-portal/{portalId}/user"
            .replace("{" + "portalId" + "}", localVarApiClient.escapeString(portalId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuestPortalUsersValidateBeforeCall(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'portalId' is set
        if (portalId == null) {
            throw new ApiException("Missing the required parameter 'portalId' when calling getGuestPortalUsers(Async)");
        }

        return getGuestPortalUsersCall(portalId, search, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageGuestPortalUsers> getGuestPortalUsersWithHttpInfo(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getGuestPortalUsersValidateBeforeCall(portalId, search, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageGuestPortalUsers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuestPortalUsersAsync(@javax.annotation.Nonnull UUID portalId, @javax.annotation.Nullable String search, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageGuestPortalUsers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuestPortalUsersValidateBeforeCall(portalId, search, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageGuestPortalUsers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGuestPortalUsersRequest {
        @javax.annotation.Nonnull
        private final UUID portalId;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetGuestPortalUsersRequest(@javax.annotation.Nonnull UUID portalId) {
            this.portalId = portalId;
        }

        /**
         * Set search
         * @param search Optional search term (optional)
         * @return APIgetGuestPortalUsersRequest
         */
        public APIgetGuestPortalUsersRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetGuestPortalUsersRequest
         */
        public APIgetGuestPortalUsersRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetGuestPortalUsersRequest
         */
        public APIgetGuestPortalUsersRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetGuestPortalUsersRequest
         */
        public APIgetGuestPortalUsersRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetGuestPortalUsersRequest
         */
        public APIgetGuestPortalUsersRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetGuestPortalUsersRequest
         */
        public APIgetGuestPortalUsersRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getGuestPortalUsers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuestPortalUsersCall(portalId, search, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getGuestPortalUsers request
         * @return PageGuestPortalUsers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageGuestPortalUsers execute() throws ApiException {
            ApiResponse<PageGuestPortalUsers> localVarResp = getGuestPortalUsersWithHttpInfo(portalId, search, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getGuestPortalUsers request with HTTP info returned
         * @return ApiResponse&lt;PageGuestPortalUsers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageGuestPortalUsers> executeWithHttpInfo() throws ApiException {
            return getGuestPortalUsersWithHttpInfo(portalId, search, page, size, sort, since, before);
        }

        /**
         * Execute getGuestPortalUsers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageGuestPortalUsers> _callback) throws ApiException {
            return getGuestPortalUsersAsync(portalId, search, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get all guest users for portal
     * Get customers for a portal
     * @param portalId  (required)
     * @return APIgetGuestPortalUsersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGuestPortalUsersRequest getGuestPortalUsers(@javax.annotation.Nonnull UUID portalId) {
        return new APIgetGuestPortalUsersRequest(portalId);
    }
    private okhttp3.Call getGuestPortalsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/guest-portal";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGuestPortalsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getGuestPortalsCall(_callback);

    }


    private ApiResponse<List<GuestPortalDto>> getGuestPortalsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getGuestPortalsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<GuestPortalDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGuestPortalsAsync(final ApiCallback<List<GuestPortalDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGuestPortalsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<GuestPortalDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGuestPortalsRequest {

        private APIgetGuestPortalsRequest() {
        }

        /**
         * Build call for getGuestPortals
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGuestPortalsCall(_callback);
        }

        /**
         * Execute getGuestPortals request
         * @return List&lt;GuestPortalDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<GuestPortalDto> execute() throws ApiException {
            ApiResponse<List<GuestPortalDto>> localVarResp = getGuestPortalsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getGuestPortals request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GuestPortalDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GuestPortalDto>> executeWithHttpInfo() throws ApiException {
            return getGuestPortalsWithHttpInfo();
        }

        /**
         * Execute getGuestPortals request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GuestPortalDto>> _callback) throws ApiException {
            return getGuestPortalsAsync(_callback);
        }
    }

    /**
     * Get guest portals
     * Get portals
     * @return APIgetGuestPortalsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGuestPortalsRequest getGuestPortals() {
        return new APIgetGuestPortalsRequest();
    }
}
