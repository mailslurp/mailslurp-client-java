/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateOAuthConnectionResult;
import com.mailslurp.models.CreateOAuthExchangeResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuthConnectionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OAuthConnectionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuthConnectionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createOAuthConnectionCall(@javax.annotation.Nonnull String redirectBase, @javax.annotation.Nonnull String oAuthConnectionType, @javax.annotation.Nullable String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth-connection";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (redirectBase != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectBase", redirectBase));
        }

        if (oAuthConnectionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("oAuthConnectionType", oAuthConnectionType));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOAuthConnectionValidateBeforeCall(@javax.annotation.Nonnull String redirectBase, @javax.annotation.Nonnull String oAuthConnectionType, @javax.annotation.Nullable String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'redirectBase' is set
        if (redirectBase == null) {
            throw new ApiException("Missing the required parameter 'redirectBase' when calling createOAuthConnection(Async)");
        }

        // verify the required parameter 'oAuthConnectionType' is set
        if (oAuthConnectionType == null) {
            throw new ApiException("Missing the required parameter 'oAuthConnectionType' when calling createOAuthConnection(Async)");
        }

        return createOAuthConnectionCall(redirectBase, oAuthConnectionType, emailAddress, _callback);

    }


    private ApiResponse<CreateOAuthConnectionResult> createOAuthConnectionWithHttpInfo(@javax.annotation.Nonnull String redirectBase, @javax.annotation.Nonnull String oAuthConnectionType, @javax.annotation.Nullable String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = createOAuthConnectionValidateBeforeCall(redirectBase, oAuthConnectionType, emailAddress, null);
        Type localVarReturnType = new TypeToken<CreateOAuthConnectionResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createOAuthConnectionAsync(@javax.annotation.Nonnull String redirectBase, @javax.annotation.Nonnull String oAuthConnectionType, @javax.annotation.Nullable String emailAddress, final ApiCallback<CreateOAuthConnectionResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOAuthConnectionValidateBeforeCall(redirectBase, oAuthConnectionType, emailAddress, _callback);
        Type localVarReturnType = new TypeToken<CreateOAuthConnectionResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateOAuthConnectionRequest {
        @javax.annotation.Nonnull
        private final String redirectBase;
        @javax.annotation.Nonnull
        private final String oAuthConnectionType;
        @javax.annotation.Nullable
        private String emailAddress;

        private APIcreateOAuthConnectionRequest(@javax.annotation.Nonnull String redirectBase, @javax.annotation.Nonnull String oAuthConnectionType) {
            this.redirectBase = redirectBase;
            this.oAuthConnectionType = oAuthConnectionType;
        }

        /**
         * Set emailAddress
         * @param emailAddress  (optional)
         * @return APIcreateOAuthConnectionRequest
         */
        public APIcreateOAuthConnectionRequest emailAddress(@javax.annotation.Nullable String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Build call for createOAuthConnection
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createOAuthConnectionCall(redirectBase, oAuthConnectionType, emailAddress, _callback);
        }

        /**
         * Execute createOAuthConnection request
         * @return CreateOAuthConnectionResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CreateOAuthConnectionResult execute() throws ApiException {
            ApiResponse<CreateOAuthConnectionResult> localVarResp = createOAuthConnectionWithHttpInfo(redirectBase, oAuthConnectionType, emailAddress);
            return localVarResp.getData();
        }

        /**
         * Execute createOAuthConnection request with HTTP info returned
         * @return ApiResponse&lt;CreateOAuthConnectionResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOAuthConnectionResult> executeWithHttpInfo() throws ApiException {
            return createOAuthConnectionWithHttpInfo(redirectBase, oAuthConnectionType, emailAddress);
        }

        /**
         * Execute createOAuthConnection request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOAuthConnectionResult> _callback) throws ApiException {
            return createOAuthConnectionAsync(redirectBase, oAuthConnectionType, emailAddress, _callback);
        }
    }

    /**
     * Create an OAuth connection
     * Configure an inbox for OAuth sync with MailSlurp
     * @param redirectBase  (required)
     * @param oAuthConnectionType  (required)
     * @return APIcreateOAuthConnectionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateOAuthConnectionRequest createOAuthConnection(@javax.annotation.Nonnull String redirectBase, @javax.annotation.Nonnull String oAuthConnectionType) {
        return new APIcreateOAuthConnectionRequest(redirectBase, oAuthConnectionType);
    }
    private okhttp3.Call exchangeAuthorizationTokenAndCreateOrUpdateInboxCall(@javax.annotation.Nonnull String authorizationCode, @javax.annotation.Nonnull String redirectUri, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth-connection/oauth-exchange/google";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (authorizationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authorizationCode", authorizationCode));
        }

        if (redirectUri != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("redirectUri", redirectUri));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call exchangeAuthorizationTokenAndCreateOrUpdateInboxValidateBeforeCall(@javax.annotation.Nonnull String authorizationCode, @javax.annotation.Nonnull String redirectUri, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'authorizationCode' is set
        if (authorizationCode == null) {
            throw new ApiException("Missing the required parameter 'authorizationCode' when calling exchangeAuthorizationTokenAndCreateOrUpdateInbox(Async)");
        }

        // verify the required parameter 'redirectUri' is set
        if (redirectUri == null) {
            throw new ApiException("Missing the required parameter 'redirectUri' when calling exchangeAuthorizationTokenAndCreateOrUpdateInbox(Async)");
        }

        return exchangeAuthorizationTokenAndCreateOrUpdateInboxCall(authorizationCode, redirectUri, _callback);

    }


    private ApiResponse<CreateOAuthExchangeResult> exchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfo(@javax.annotation.Nonnull String authorizationCode, @javax.annotation.Nonnull String redirectUri) throws ApiException {
        okhttp3.Call localVarCall = exchangeAuthorizationTokenAndCreateOrUpdateInboxValidateBeforeCall(authorizationCode, redirectUri, null);
        Type localVarReturnType = new TypeToken<CreateOAuthExchangeResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call exchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(@javax.annotation.Nonnull String authorizationCode, @javax.annotation.Nonnull String redirectUri, final ApiCallback<CreateOAuthExchangeResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = exchangeAuthorizationTokenAndCreateOrUpdateInboxValidateBeforeCall(authorizationCode, redirectUri, _callback);
        Type localVarReturnType = new TypeToken<CreateOAuthExchangeResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIexchangeAuthorizationTokenAndCreateOrUpdateInboxRequest {
        @javax.annotation.Nonnull
        private final String authorizationCode;
        @javax.annotation.Nonnull
        private final String redirectUri;

        private APIexchangeAuthorizationTokenAndCreateOrUpdateInboxRequest(@javax.annotation.Nonnull String authorizationCode, @javax.annotation.Nonnull String redirectUri) {
            this.authorizationCode = authorizationCode;
            this.redirectUri = redirectUri;
        }

        /**
         * Build call for exchangeAuthorizationTokenAndCreateOrUpdateInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return exchangeAuthorizationTokenAndCreateOrUpdateInboxCall(authorizationCode, redirectUri, _callback);
        }

        /**
         * Execute exchangeAuthorizationTokenAndCreateOrUpdateInbox request
         * @return CreateOAuthExchangeResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public CreateOAuthExchangeResult execute() throws ApiException {
            ApiResponse<CreateOAuthExchangeResult> localVarResp = exchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfo(authorizationCode, redirectUri);
            return localVarResp.getData();
        }

        /**
         * Execute exchangeAuthorizationTokenAndCreateOrUpdateInbox request with HTTP info returned
         * @return ApiResponse&lt;CreateOAuthExchangeResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CreateOAuthExchangeResult> executeWithHttpInfo() throws ApiException {
            return exchangeAuthorizationTokenAndCreateOrUpdateInboxWithHttpInfo(authorizationCode, redirectUri);
        }

        /**
         * Execute exchangeAuthorizationTokenAndCreateOrUpdateInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CreateOAuthExchangeResult> _callback) throws ApiException {
            return exchangeAuthorizationTokenAndCreateOrUpdateInboxAsync(authorizationCode, redirectUri, _callback);
        }
    }

    /**
     * Exchange authorization code for access token and create inbox
     * Exchange an OAuth code for an access token and create an inbox connection in MailSlurp
     * @param authorizationCode  (required)
     * @param redirectUri  (required)
     * @return APIexchangeAuthorizationTokenAndCreateOrUpdateInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIexchangeAuthorizationTokenAndCreateOrUpdateInboxRequest exchangeAuthorizationTokenAndCreateOrUpdateInbox(@javax.annotation.Nonnull String authorizationCode, @javax.annotation.Nonnull String redirectUri) {
        return new APIexchangeAuthorizationTokenAndCreateOrUpdateInboxRequest(authorizationCode, redirectUri);
    }
}
