/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateInboxRulesetOptions;
import com.mailslurp.models.InboxRulesetDto;
import com.mailslurp.models.InboxRulesetTestOptions;
import com.mailslurp.models.InboxRulesetTestResult;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageInboxRulesetDto;
import com.mailslurp.models.TestInboxRulesetReceivingOptions;
import com.mailslurp.models.TestInboxRulesetReceivingResult;
import com.mailslurp.models.TestInboxRulesetSendingOptions;
import com.mailslurp.models.TestInboxRulesetSendingResult;
import com.mailslurp.models.TestNewInboxRulesetOptions;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboxRulesetControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboxRulesetControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboxRulesetControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewInboxRulesetCall(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboxRulesetOptions;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewInboxRulesetValidateBeforeCall(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createInboxRulesetOptions' is set
        if (createInboxRulesetOptions == null) {
            throw new ApiException("Missing the required parameter 'createInboxRulesetOptions' when calling createNewInboxRuleset(Async)");
        }

        return createNewInboxRulesetCall(createInboxRulesetOptions, inboxId, _callback);

    }


    private ApiResponse<InboxRulesetDto> createNewInboxRulesetWithHttpInfo(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = createNewInboxRulesetValidateBeforeCall(createInboxRulesetOptions, inboxId, null);
        Type localVarReturnType = new TypeToken<InboxRulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewInboxRulesetAsync(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<InboxRulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewInboxRulesetValidateBeforeCall(createInboxRulesetOptions, inboxId, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNewInboxRulesetRequest {
        @javax.annotation.Nonnull
        private final CreateInboxRulesetOptions createInboxRulesetOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIcreateNewInboxRulesetRequest(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) {
            this.createInboxRulesetOptions = createInboxRulesetOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox id to attach ruleset to (optional)
         * @return APIcreateNewInboxRulesetRequest
         */
        public APIcreateNewInboxRulesetRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for createNewInboxRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewInboxRulesetCall(createInboxRulesetOptions, inboxId, _callback);
        }

        /**
         * Execute createNewInboxRuleset request
         * @return InboxRulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetDto execute() throws ApiException {
            ApiResponse<InboxRulesetDto> localVarResp = createNewInboxRulesetWithHttpInfo(createInboxRulesetOptions, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute createNewInboxRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetDto> executeWithHttpInfo() throws ApiException {
            return createNewInboxRulesetWithHttpInfo(createInboxRulesetOptions, inboxId);
        }

        /**
         * Execute createNewInboxRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetDto> _callback) throws ApiException {
            return createNewInboxRulesetAsync(createInboxRulesetOptions, inboxId, _callback);
        }
    }

    /**
     * Create an inbox ruleset
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * @param createInboxRulesetOptions  (required)
     * @return APIcreateNewInboxRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNewInboxRulesetRequest createNewInboxRuleset(@javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) {
        return new APIcreateNewInboxRulesetRequest(createInboxRulesetOptions);
    }
    private okhttp3.Call deleteInboxRulesetCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteInboxRuleset(Async)");
        }

        return deleteInboxRulesetCall(id, _callback);

    }


    private ApiResponse<Void> deleteInboxRulesetWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxRulesetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxRulesetAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxRulesetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteInboxRulesetRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteInboxRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxRulesetCall(id, _callback);
        }

        /**
         * Execute deleteInboxRuleset request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxRulesetWithHttpInfo(id);
        }

        /**
         * Execute deleteInboxRuleset request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxRulesetWithHttpInfo(id);
        }

        /**
         * Execute deleteInboxRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxRulesetAsync(id, _callback);
        }
    }

    /**
     * Delete an inbox ruleset
     * Delete inbox ruleset
     * @param id ID of inbox ruleset (required)
     * @return APIdeleteInboxRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxRulesetRequest deleteInboxRuleset(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteInboxRulesetRequest(id);
    }
    private okhttp3.Call deleteInboxRulesetsCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxRulesetsValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return deleteInboxRulesetsCall(inboxId, _callback);

    }


    private ApiResponse<Void> deleteInboxRulesetsWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxRulesetsValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxRulesetsAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxRulesetsValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxRulesetsRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIdeleteInboxRulesetsRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to attach ruleset to (optional)
         * @return APIdeleteInboxRulesetsRequest
         */
        public APIdeleteInboxRulesetsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for deleteInboxRulesets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxRulesetsCall(inboxId, _callback);
        }

        /**
         * Execute deleteInboxRulesets request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxRulesetsWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInboxRulesets request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxRulesetsWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInboxRulesets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxRulesetsAsync(inboxId, _callback);
        }
    }

    /**
     * Delete inbox rulesets
     * Delete inbox rulesets. Accepts optional inboxId filter.
     * @return APIdeleteInboxRulesetsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxRulesetsRequest deleteInboxRulesets() {
        return new APIdeleteInboxRulesetsRequest();
    }
    private okhttp3.Call getInboxRulesetCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getInboxRuleset(Async)");
        }

        return getInboxRulesetCall(id, _callback);

    }


    private ApiResponse<InboxRulesetDto> getInboxRulesetWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getInboxRulesetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InboxRulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxRulesetAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<InboxRulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxRulesetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetInboxRulesetRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getInboxRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxRulesetCall(id, _callback);
        }

        /**
         * Execute getInboxRuleset request
         * @return InboxRulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetDto execute() throws ApiException {
            ApiResponse<InboxRulesetDto> localVarResp = getInboxRulesetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetDto> executeWithHttpInfo() throws ApiException {
            return getInboxRulesetWithHttpInfo(id);
        }

        /**
         * Execute getInboxRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetDto> _callback) throws ApiException {
            return getInboxRulesetAsync(id, _callback);
        }
    }

    /**
     * Get an inbox ruleset
     * Get inbox ruleset
     * @param id ID of inbox ruleset (required)
     * @return APIgetInboxRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxRulesetRequest getInboxRuleset(@javax.annotation.Nonnull UUID id) {
        return new APIgetInboxRulesetRequest(id);
    }
    private okhttp3.Call getInboxRulesetsCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxRulesetsValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getInboxRulesetsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageInboxRulesetDto> getInboxRulesetsWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getInboxRulesetsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageInboxRulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxRulesetsAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageInboxRulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxRulesetsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageInboxRulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxRulesetsRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetInboxRulesetsRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to get rulesets from (optional)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in inbox ruleset list pagination (optional, default to 0)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox ruleset list pagination (optional, default to 20)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetInboxRulesetsRequest
         */
        public APIgetInboxRulesetsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getInboxRulesets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxRulesetsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getInboxRulesets request
         * @return PageInboxRulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxRulesetDto execute() throws ApiException {
            ApiResponse<PageInboxRulesetDto> localVarResp = getInboxRulesetsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxRulesets request with HTTP info returned
         * @return ApiResponse&lt;PageInboxRulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxRulesetDto> executeWithHttpInfo() throws ApiException {
            return getInboxRulesetsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getInboxRulesets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxRulesetDto> _callback) throws ApiException {
            return getInboxRulesetsAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * List inbox rulesets
     * List all rulesets attached to an inbox
     * @return APIgetInboxRulesetsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxRulesetsRequest getInboxRulesets() {
        return new APIgetInboxRulesetsRequest();
    }
    private okhttp3.Call testInboxRulesetCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboxRulesetTestOptions;

        // create path and map variables
        String localVarPath = "/rulesets/{id}/test"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testInboxRuleset(Async)");
        }

        // verify the required parameter 'inboxRulesetTestOptions' is set
        if (inboxRulesetTestOptions == null) {
            throw new ApiException("Missing the required parameter 'inboxRulesetTestOptions' when calling testInboxRuleset(Async)");
        }

        return testInboxRulesetCall(id, inboxRulesetTestOptions, _callback);

    }


    private ApiResponse<InboxRulesetTestResult> testInboxRulesetWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxRulesetValidateBeforeCall(id, inboxRulesetTestOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxRulesetAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions, final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxRulesetValidateBeforeCall(id, inboxRulesetTestOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final InboxRulesetTestOptions inboxRulesetTestOptions;

        private APItestInboxRulesetRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) {
            this.id = id;
            this.inboxRulesetTestOptions = inboxRulesetTestOptions;
        }

        /**
         * Build call for testInboxRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxRulesetCall(id, inboxRulesetTestOptions, _callback);
        }

        /**
         * Execute testInboxRuleset request
         * @return InboxRulesetTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetTestResult execute() throws ApiException {
            ApiResponse<InboxRulesetTestResult> localVarResp = testInboxRulesetWithHttpInfo(id, inboxRulesetTestOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetTestResult> executeWithHttpInfo() throws ApiException {
            return testInboxRulesetWithHttpInfo(id, inboxRulesetTestOptions);
        }

        /**
         * Execute testInboxRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {
            return testInboxRulesetAsync(id, inboxRulesetTestOptions, _callback);
        }
    }

    /**
     * Test an inbox ruleset
     * Test an inbox ruleset
     * @param id ID of inbox ruleset (required)
     * @param inboxRulesetTestOptions  (required)
     * @return APItestInboxRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxRulesetRequest testInboxRuleset(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) {
        return new APItestInboxRulesetRequest(id, inboxRulesetTestOptions);
    }
    private okhttp3.Call testInboxRulesetReceivingCall(@javax.annotation.Nonnull TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testInboxRulesetReceivingOptions;

        // create path and map variables
        String localVarPath = "/rulesets/test-receiving";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxRulesetReceivingValidateBeforeCall(@javax.annotation.Nonnull TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testInboxRulesetReceivingOptions' is set
        if (testInboxRulesetReceivingOptions == null) {
            throw new ApiException("Missing the required parameter 'testInboxRulesetReceivingOptions' when calling testInboxRulesetReceiving(Async)");
        }

        return testInboxRulesetReceivingCall(testInboxRulesetReceivingOptions, _callback);

    }


    private ApiResponse<TestInboxRulesetReceivingResult> testInboxRulesetReceivingWithHttpInfo(@javax.annotation.Nonnull TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxRulesetReceivingValidateBeforeCall(testInboxRulesetReceivingOptions, null);
        Type localVarReturnType = new TypeToken<TestInboxRulesetReceivingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxRulesetReceivingAsync(@javax.annotation.Nonnull TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions, final ApiCallback<TestInboxRulesetReceivingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxRulesetReceivingValidateBeforeCall(testInboxRulesetReceivingOptions, _callback);
        Type localVarReturnType = new TypeToken<TestInboxRulesetReceivingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxRulesetReceivingRequest {
        @javax.annotation.Nonnull
        private final TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions;

        private APItestInboxRulesetReceivingRequest(@javax.annotation.Nonnull TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions) {
            this.testInboxRulesetReceivingOptions = testInboxRulesetReceivingOptions;
        }

        /**
         * Build call for testInboxRulesetReceiving
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxRulesetReceivingCall(testInboxRulesetReceivingOptions, _callback);
        }

        /**
         * Execute testInboxRulesetReceiving request
         * @return TestInboxRulesetReceivingResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TestInboxRulesetReceivingResult execute() throws ApiException {
            ApiResponse<TestInboxRulesetReceivingResult> localVarResp = testInboxRulesetReceivingWithHttpInfo(testInboxRulesetReceivingOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxRulesetReceiving request with HTTP info returned
         * @return ApiResponse&lt;TestInboxRulesetReceivingResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TestInboxRulesetReceivingResult> executeWithHttpInfo() throws ApiException {
            return testInboxRulesetReceivingWithHttpInfo(testInboxRulesetReceivingOptions);
        }

        /**
         * Execute testInboxRulesetReceiving request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TestInboxRulesetReceivingResult> _callback) throws ApiException {
            return testInboxRulesetReceivingAsync(testInboxRulesetReceivingOptions, _callback);
        }
    }

    /**
     * Test receiving with inbox rulesets
     * Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets
     * @param testInboxRulesetReceivingOptions  (required)
     * @return APItestInboxRulesetReceivingRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxRulesetReceivingRequest testInboxRulesetReceiving(@javax.annotation.Nonnull TestInboxRulesetReceivingOptions testInboxRulesetReceivingOptions) {
        return new APItestInboxRulesetReceivingRequest(testInboxRulesetReceivingOptions);
    }
    private okhttp3.Call testInboxRulesetSendingCall(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testInboxRulesetSendingOptions;

        // create path and map variables
        String localVarPath = "/rulesets/test-sending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxRulesetSendingValidateBeforeCall(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testInboxRulesetSendingOptions' is set
        if (testInboxRulesetSendingOptions == null) {
            throw new ApiException("Missing the required parameter 'testInboxRulesetSendingOptions' when calling testInboxRulesetSending(Async)");
        }

        return testInboxRulesetSendingCall(testInboxRulesetSendingOptions, _callback);

    }


    private ApiResponse<TestInboxRulesetSendingResult> testInboxRulesetSendingWithHttpInfo(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxRulesetSendingValidateBeforeCall(testInboxRulesetSendingOptions, null);
        Type localVarReturnType = new TypeToken<TestInboxRulesetSendingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxRulesetSendingAsync(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, final ApiCallback<TestInboxRulesetSendingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxRulesetSendingValidateBeforeCall(testInboxRulesetSendingOptions, _callback);
        Type localVarReturnType = new TypeToken<TestInboxRulesetSendingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxRulesetSendingRequest {
        @javax.annotation.Nonnull
        private final TestInboxRulesetSendingOptions testInboxRulesetSendingOptions;

        private APItestInboxRulesetSendingRequest(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions) {
            this.testInboxRulesetSendingOptions = testInboxRulesetSendingOptions;
        }

        /**
         * Build call for testInboxRulesetSending
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxRulesetSendingCall(testInboxRulesetSendingOptions, _callback);
        }

        /**
         * Execute testInboxRulesetSending request
         * @return TestInboxRulesetSendingResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TestInboxRulesetSendingResult execute() throws ApiException {
            ApiResponse<TestInboxRulesetSendingResult> localVarResp = testInboxRulesetSendingWithHttpInfo(testInboxRulesetSendingOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxRulesetSending request with HTTP info returned
         * @return ApiResponse&lt;TestInboxRulesetSendingResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TestInboxRulesetSendingResult> executeWithHttpInfo() throws ApiException {
            return testInboxRulesetSendingWithHttpInfo(testInboxRulesetSendingOptions);
        }

        /**
         * Execute testInboxRulesetSending request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TestInboxRulesetSendingResult> _callback) throws ApiException {
            return testInboxRulesetSendingAsync(testInboxRulesetSendingOptions, _callback);
        }
    }

    /**
     * Test sending with inbox rulesets
     * Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets
     * @param testInboxRulesetSendingOptions  (required)
     * @return APItestInboxRulesetSendingRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxRulesetSendingRequest testInboxRulesetSending(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions) {
        return new APItestInboxRulesetSendingRequest(testInboxRulesetSendingOptions);
    }
    private okhttp3.Call testInboxRulesetsForInboxCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = inboxRulesetTestOptions;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxRulesetsForInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling testInboxRulesetsForInbox(Async)");
        }

        // verify the required parameter 'inboxRulesetTestOptions' is set
        if (inboxRulesetTestOptions == null) {
            throw new ApiException("Missing the required parameter 'inboxRulesetTestOptions' when calling testInboxRulesetsForInbox(Async)");
        }

        return testInboxRulesetsForInboxCall(inboxId, inboxRulesetTestOptions, _callback);

    }


    private ApiResponse<InboxRulesetTestResult> testInboxRulesetsForInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxRulesetsForInboxValidateBeforeCall(inboxId, inboxRulesetTestOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxRulesetsForInboxAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions, final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxRulesetsForInboxValidateBeforeCall(inboxId, inboxRulesetTestOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxRulesetsForInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final InboxRulesetTestOptions inboxRulesetTestOptions;

        private APItestInboxRulesetsForInboxRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) {
            this.inboxId = inboxId;
            this.inboxRulesetTestOptions = inboxRulesetTestOptions;
        }

        /**
         * Build call for testInboxRulesetsForInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxRulesetsForInboxCall(inboxId, inboxRulesetTestOptions, _callback);
        }

        /**
         * Execute testInboxRulesetsForInbox request
         * @return InboxRulesetTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetTestResult execute() throws ApiException {
            ApiResponse<InboxRulesetTestResult> localVarResp = testInboxRulesetsForInboxWithHttpInfo(inboxId, inboxRulesetTestOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxRulesetsForInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetTestResult> executeWithHttpInfo() throws ApiException {
            return testInboxRulesetsForInboxWithHttpInfo(inboxId, inboxRulesetTestOptions);
        }

        /**
         * Execute testInboxRulesetsForInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {
            return testInboxRulesetsForInboxAsync(inboxId, inboxRulesetTestOptions, _callback);
        }
    }

    /**
     * Test inbox rulesets for inbox
     * Test inbox rulesets for inbox
     * @param inboxId ID of inbox (required)
     * @param inboxRulesetTestOptions  (required)
     * @return APItestInboxRulesetsForInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxRulesetsForInboxRequest testInboxRulesetsForInbox(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull InboxRulesetTestOptions inboxRulesetTestOptions) {
        return new APItestInboxRulesetsForInboxRequest(inboxId, inboxRulesetTestOptions);
    }
    private okhttp3.Call testNewInboxRulesetCall(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testNewInboxRulesetOptions;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testNewInboxRulesetValidateBeforeCall(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testNewInboxRulesetOptions' is set
        if (testNewInboxRulesetOptions == null) {
            throw new ApiException("Missing the required parameter 'testNewInboxRulesetOptions' when calling testNewInboxRuleset(Async)");
        }

        return testNewInboxRulesetCall(testNewInboxRulesetOptions, _callback);

    }


    private ApiResponse<InboxRulesetTestResult> testNewInboxRulesetWithHttpInfo(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions) throws ApiException {
        okhttp3.Call localVarCall = testNewInboxRulesetValidateBeforeCall(testNewInboxRulesetOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testNewInboxRulesetAsync(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions, final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testNewInboxRulesetValidateBeforeCall(testNewInboxRulesetOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestNewInboxRulesetRequest {
        @javax.annotation.Nonnull
        private final TestNewInboxRulesetOptions testNewInboxRulesetOptions;

        private APItestNewInboxRulesetRequest(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions) {
            this.testNewInboxRulesetOptions = testNewInboxRulesetOptions;
        }

        /**
         * Build call for testNewInboxRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testNewInboxRulesetCall(testNewInboxRulesetOptions, _callback);
        }

        /**
         * Execute testNewInboxRuleset request
         * @return InboxRulesetTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetTestResult execute() throws ApiException {
            ApiResponse<InboxRulesetTestResult> localVarResp = testNewInboxRulesetWithHttpInfo(testNewInboxRulesetOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testNewInboxRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetTestResult> executeWithHttpInfo() throws ApiException {
            return testNewInboxRulesetWithHttpInfo(testNewInboxRulesetOptions);
        }

        /**
         * Execute testNewInboxRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {
            return testNewInboxRulesetAsync(testNewInboxRulesetOptions, _callback);
        }
    }

    /**
     * Test new inbox ruleset
     * Test new inbox ruleset
     * @param testNewInboxRulesetOptions  (required)
     * @return APItestNewInboxRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestNewInboxRulesetRequest testNewInboxRuleset(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions) {
        return new APItestNewInboxRulesetRequest(testNewInboxRulesetOptions);
    }
}
