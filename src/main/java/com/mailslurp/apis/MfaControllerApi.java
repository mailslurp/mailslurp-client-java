/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateTotpDeviceOtpAuthUrlOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.TotpDeviceCodeDto;
import com.mailslurp.models.TotpDeviceDto;
import com.mailslurp.models.TotpDeviceOptionalDto;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MfaControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MfaControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MfaControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createTotpDeviceForCustomCall(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTotpDeviceOtpAuthUrlOptions;

        // create path and map variables
        String localVarPath = "/mfa/totp/device/custom";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTotpDeviceForCustomValidateBeforeCall(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTotpDeviceOtpAuthUrlOptions' is set
        if (createTotpDeviceOtpAuthUrlOptions == null) {
            throw new ApiException("Missing the required parameter 'createTotpDeviceOtpAuthUrlOptions' when calling createTotpDeviceForCustom(Async)");
        }

        return createTotpDeviceForCustomCall(createTotpDeviceOtpAuthUrlOptions, _callback);

    }


    private ApiResponse<TotpDeviceDto> createTotpDeviceForCustomWithHttpInfo(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions) throws ApiException {
        okhttp3.Call localVarCall = createTotpDeviceForCustomValidateBeforeCall(createTotpDeviceOtpAuthUrlOptions, null);
        Type localVarReturnType = new TypeToken<TotpDeviceDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTotpDeviceForCustomAsync(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, final ApiCallback<TotpDeviceDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTotpDeviceForCustomValidateBeforeCall(createTotpDeviceOtpAuthUrlOptions, _callback);
        Type localVarReturnType = new TypeToken<TotpDeviceDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTotpDeviceForCustomRequest {
        @javax.annotation.Nonnull
        private final CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions;

        private APIcreateTotpDeviceForCustomRequest(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions) {
            this.createTotpDeviceOtpAuthUrlOptions = createTotpDeviceOtpAuthUrlOptions;
        }

        /**
         * Build call for createTotpDeviceForCustom
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTotpDeviceForCustomCall(createTotpDeviceOtpAuthUrlOptions, _callback);
        }

        /**
         * Execute createTotpDeviceForCustom request
         * @return TotpDeviceDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TotpDeviceDto execute() throws ApiException {
            ApiResponse<TotpDeviceDto> localVarResp = createTotpDeviceForCustomWithHttpInfo(createTotpDeviceOtpAuthUrlOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createTotpDeviceForCustom request with HTTP info returned
         * @return ApiResponse&lt;TotpDeviceDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TotpDeviceDto> executeWithHttpInfo() throws ApiException {
            return createTotpDeviceForCustomWithHttpInfo(createTotpDeviceOtpAuthUrlOptions);
        }

        /**
         * Execute createTotpDeviceForCustom request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TotpDeviceDto> _callback) throws ApiException {
            return createTotpDeviceForCustomAsync(createTotpDeviceOtpAuthUrlOptions, _callback);
        }
    }

    /**
     * Create a TOTP device from custom options
     * Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
     * @param createTotpDeviceOtpAuthUrlOptions  (required)
     * @return APIcreateTotpDeviceForCustomRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTotpDeviceForCustomRequest createTotpDeviceForCustom(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions) {
        return new APIcreateTotpDeviceForCustomRequest(createTotpDeviceOtpAuthUrlOptions);
    }
    private okhttp3.Call createTotpDeviceForOtpAuthUrlCall(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createTotpDeviceOtpAuthUrlOptions;

        // create path and map variables
        String localVarPath = "/mfa/totp/device/otpAuthUrl";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTotpDeviceForOtpAuthUrlValidateBeforeCall(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createTotpDeviceOtpAuthUrlOptions' is set
        if (createTotpDeviceOtpAuthUrlOptions == null) {
            throw new ApiException("Missing the required parameter 'createTotpDeviceOtpAuthUrlOptions' when calling createTotpDeviceForOtpAuthUrl(Async)");
        }

        return createTotpDeviceForOtpAuthUrlCall(createTotpDeviceOtpAuthUrlOptions, _callback);

    }


    private ApiResponse<TotpDeviceDto> createTotpDeviceForOtpAuthUrlWithHttpInfo(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions) throws ApiException {
        okhttp3.Call localVarCall = createTotpDeviceForOtpAuthUrlValidateBeforeCall(createTotpDeviceOtpAuthUrlOptions, null);
        Type localVarReturnType = new TypeToken<TotpDeviceDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createTotpDeviceForOtpAuthUrlAsync(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions, final ApiCallback<TotpDeviceDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTotpDeviceForOtpAuthUrlValidateBeforeCall(createTotpDeviceOtpAuthUrlOptions, _callback);
        Type localVarReturnType = new TypeToken<TotpDeviceDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateTotpDeviceForOtpAuthUrlRequest {
        @javax.annotation.Nonnull
        private final CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions;

        private APIcreateTotpDeviceForOtpAuthUrlRequest(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions) {
            this.createTotpDeviceOtpAuthUrlOptions = createTotpDeviceOtpAuthUrlOptions;
        }

        /**
         * Build call for createTotpDeviceForOtpAuthUrl
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createTotpDeviceForOtpAuthUrlCall(createTotpDeviceOtpAuthUrlOptions, _callback);
        }

        /**
         * Execute createTotpDeviceForOtpAuthUrl request
         * @return TotpDeviceDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TotpDeviceDto execute() throws ApiException {
            ApiResponse<TotpDeviceDto> localVarResp = createTotpDeviceForOtpAuthUrlWithHttpInfo(createTotpDeviceOtpAuthUrlOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createTotpDeviceForOtpAuthUrl request with HTTP info returned
         * @return ApiResponse&lt;TotpDeviceDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TotpDeviceDto> executeWithHttpInfo() throws ApiException {
            return createTotpDeviceForOtpAuthUrlWithHttpInfo(createTotpDeviceOtpAuthUrlOptions);
        }

        /**
         * Execute createTotpDeviceForOtpAuthUrl request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TotpDeviceDto> _callback) throws ApiException {
            return createTotpDeviceForOtpAuthUrlAsync(createTotpDeviceOtpAuthUrlOptions, _callback);
        }
    }

    /**
     * Create a TOTP device from an OTP Auth URL
     * Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
     * @param createTotpDeviceOtpAuthUrlOptions  (required)
     * @return APIcreateTotpDeviceForOtpAuthUrlRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateTotpDeviceForOtpAuthUrlRequest createTotpDeviceForOtpAuthUrl(@javax.annotation.Nonnull CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions) {
        return new APIcreateTotpDeviceForOtpAuthUrlRequest(createTotpDeviceOtpAuthUrlOptions);
    }
    private okhttp3.Call getTotpDeviceCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mfa/totp/device/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTotpDeviceValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTotpDevice(Async)");
        }

        return getTotpDeviceCall(id, _callback);

    }


    private ApiResponse<TotpDeviceDto> getTotpDeviceWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getTotpDeviceValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<TotpDeviceDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTotpDeviceAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<TotpDeviceDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTotpDeviceValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<TotpDeviceDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTotpDeviceRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetTotpDeviceRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getTotpDevice
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTotpDeviceCall(id, _callback);
        }

        /**
         * Execute getTotpDevice request
         * @return TotpDeviceDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TotpDeviceDto execute() throws ApiException {
            ApiResponse<TotpDeviceDto> localVarResp = getTotpDeviceWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getTotpDevice request with HTTP info returned
         * @return ApiResponse&lt;TotpDeviceDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TotpDeviceDto> executeWithHttpInfo() throws ApiException {
            return getTotpDeviceWithHttpInfo(id);
        }

        /**
         * Execute getTotpDevice request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TotpDeviceDto> _callback) throws ApiException {
            return getTotpDeviceAsync(id, _callback);
        }
    }

    /**
     * Get a TOTP device by ID
     * Get Time-Based One-Time Password (TOTP) device by its ID.
     * @param id  (required)
     * @return APIgetTotpDeviceRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTotpDeviceRequest getTotpDevice(@javax.annotation.Nonnull UUID id) {
        return new APIgetTotpDeviceRequest(id);
    }
    private okhttp3.Call getTotpDeviceByCall(@javax.annotation.Nullable String name, @javax.annotation.Nullable String issuer, @javax.annotation.Nullable String username, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mfa/totp/device/by";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (issuer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("issuer", issuer));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTotpDeviceByValidateBeforeCall(@javax.annotation.Nullable String name, @javax.annotation.Nullable String issuer, @javax.annotation.Nullable String username, final ApiCallback _callback) throws ApiException {
        return getTotpDeviceByCall(name, issuer, username, _callback);

    }


    private ApiResponse<TotpDeviceOptionalDto> getTotpDeviceByWithHttpInfo(@javax.annotation.Nullable String name, @javax.annotation.Nullable String issuer, @javax.annotation.Nullable String username) throws ApiException {
        okhttp3.Call localVarCall = getTotpDeviceByValidateBeforeCall(name, issuer, username, null);
        Type localVarReturnType = new TypeToken<TotpDeviceOptionalDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTotpDeviceByAsync(@javax.annotation.Nullable String name, @javax.annotation.Nullable String issuer, @javax.annotation.Nullable String username, final ApiCallback<TotpDeviceOptionalDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTotpDeviceByValidateBeforeCall(name, issuer, username, _callback);
        Type localVarReturnType = new TypeToken<TotpDeviceOptionalDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTotpDeviceByRequest {
        @javax.annotation.Nullable
        private String name;
        @javax.annotation.Nullable
        private String issuer;
        @javax.annotation.Nullable
        private String username;

        private APIgetTotpDeviceByRequest() {
        }

        /**
         * Set name
         * @param name Optional name filter (optional)
         * @return APIgetTotpDeviceByRequest
         */
        public APIgetTotpDeviceByRequest name(@javax.annotation.Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Set issuer
         * @param issuer Optional issuer filter (optional)
         * @return APIgetTotpDeviceByRequest
         */
        public APIgetTotpDeviceByRequest issuer(@javax.annotation.Nullable String issuer) {
            this.issuer = issuer;
            return this;
        }

        /**
         * Set username
         * @param username Optional username filter (optional)
         * @return APIgetTotpDeviceByRequest
         */
        public APIgetTotpDeviceByRequest username(@javax.annotation.Nullable String username) {
            this.username = username;
            return this;
        }

        /**
         * Build call for getTotpDeviceBy
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTotpDeviceByCall(name, issuer, username, _callback);
        }

        /**
         * Execute getTotpDeviceBy request
         * @return TotpDeviceOptionalDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TotpDeviceOptionalDto execute() throws ApiException {
            ApiResponse<TotpDeviceOptionalDto> localVarResp = getTotpDeviceByWithHttpInfo(name, issuer, username);
            return localVarResp.getData();
        }

        /**
         * Execute getTotpDeviceBy request with HTTP info returned
         * @return ApiResponse&lt;TotpDeviceOptionalDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TotpDeviceOptionalDto> executeWithHttpInfo() throws ApiException {
            return getTotpDeviceByWithHttpInfo(name, issuer, username);
        }

        /**
         * Execute getTotpDeviceBy request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TotpDeviceOptionalDto> _callback) throws ApiException {
            return getTotpDeviceByAsync(name, issuer, username, _callback);
        }
    }

    /**
     * Get a TOTP device by username, issuer, or name. Returns empty if not found.
     * Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
     * @return APIgetTotpDeviceByRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTotpDeviceByRequest getTotpDeviceBy() {
        return new APIgetTotpDeviceByRequest();
    }
    private okhttp3.Call getTotpDeviceCodeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime at, @javax.annotation.Nullable Integer minSecondsUntilExpire, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/mfa/totp/device/{id}/code"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (at != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("at", at));
        }

        if (minSecondsUntilExpire != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minSecondsUntilExpire", minSecondsUntilExpire));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTotpDeviceCodeValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime at, @javax.annotation.Nullable Integer minSecondsUntilExpire, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getTotpDeviceCode(Async)");
        }

        return getTotpDeviceCodeCall(id, at, minSecondsUntilExpire, _callback);

    }


    private ApiResponse<TotpDeviceCodeDto> getTotpDeviceCodeWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime at, @javax.annotation.Nullable Integer minSecondsUntilExpire) throws ApiException {
        okhttp3.Call localVarCall = getTotpDeviceCodeValidateBeforeCall(id, at, minSecondsUntilExpire, null);
        Type localVarReturnType = new TypeToken<TotpDeviceCodeDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getTotpDeviceCodeAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nullable OffsetDateTime at, @javax.annotation.Nullable Integer minSecondsUntilExpire, final ApiCallback<TotpDeviceCodeDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTotpDeviceCodeValidateBeforeCall(id, at, minSecondsUntilExpire, _callback);
        Type localVarReturnType = new TypeToken<TotpDeviceCodeDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetTotpDeviceCodeRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nullable
        private OffsetDateTime at;
        @javax.annotation.Nullable
        private Integer minSecondsUntilExpire;

        private APIgetTotpDeviceCodeRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Set at
         * @param at Optional time to get code for. If not provided, current time is used. (optional)
         * @return APIgetTotpDeviceCodeRequest
         */
        public APIgetTotpDeviceCodeRequest at(@javax.annotation.Nullable OffsetDateTime at) {
            this.at = at;
            return this;
        }

        /**
         * Set minSecondsUntilExpire
         * @param minSecondsUntilExpire Optional minimum time until code expires. Will hold thread open until period reached. (optional, default to 5)
         * @return APIgetTotpDeviceCodeRequest
         */
        public APIgetTotpDeviceCodeRequest minSecondsUntilExpire(@javax.annotation.Nullable Integer minSecondsUntilExpire) {
            this.minSecondsUntilExpire = minSecondsUntilExpire;
            return this;
        }

        /**
         * Build call for getTotpDeviceCode
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getTotpDeviceCodeCall(id, at, minSecondsUntilExpire, _callback);
        }

        /**
         * Execute getTotpDeviceCode request
         * @return TotpDeviceCodeDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TotpDeviceCodeDto execute() throws ApiException {
            ApiResponse<TotpDeviceCodeDto> localVarResp = getTotpDeviceCodeWithHttpInfo(id, at, minSecondsUntilExpire);
            return localVarResp.getData();
        }

        /**
         * Execute getTotpDeviceCode request with HTTP info returned
         * @return ApiResponse&lt;TotpDeviceCodeDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TotpDeviceCodeDto> executeWithHttpInfo() throws ApiException {
            return getTotpDeviceCodeWithHttpInfo(id, at, minSecondsUntilExpire);
        }

        /**
         * Execute getTotpDeviceCode request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TotpDeviceCodeDto> _callback) throws ApiException {
            return getTotpDeviceCodeAsync(id, at, minSecondsUntilExpire, _callback);
        }
    }

    /**
     * Get a TOTP device code by device ID
     * Get Time-Based One-Time Password for a device by its ID.
     * @param id ID of the TOTP device to get the code for (required)
     * @return APIgetTotpDeviceCodeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetTotpDeviceCodeRequest getTotpDeviceCode(@javax.annotation.Nonnull UUID id) {
        return new APIgetTotpDeviceCodeRequest(id);
    }
}
