/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.CanSendEmailResults;
import com.mailslurp.models.CheckEmailBodyFeatureSupportResults;
import com.mailslurp.models.CheckEmailBodyResults;
import com.mailslurp.models.CheckEmailClientSupportOptions;
import com.mailslurp.models.CheckEmailClientSupportResults;
import com.mailslurp.models.ContentMatchOptions;
import com.mailslurp.models.CountDto;
import com.mailslurp.models.DownloadAttachmentDto;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailContentMatchResult;
import com.mailslurp.models.EmailContentPartResult;
import com.mailslurp.models.EmailHtmlDto;
import com.mailslurp.models.EmailLinksResult;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.EmailPreviewUrls;
import com.mailslurp.models.EmailScreenshotResult;
import com.mailslurp.models.EmailTextLinesResult;
import com.mailslurp.models.EmailThreadDto;
import com.mailslurp.models.EmailThreadItemsDto;
import com.mailslurp.models.ForwardEmailOptions;
import com.mailslurp.models.GetEmailScreenshotOptions;
import com.mailslurp.models.GravatarUrl;
import com.mailslurp.models.ImapFlagOperationOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageEmailProjection;
import com.mailslurp.models.PageEmailThreadProjection;
import com.mailslurp.models.RawEmailJson;
import com.mailslurp.models.ReplyToEmailOptions;
import com.mailslurp.models.SearchEmailsOptions;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;
import com.mailslurp.models.UnreadCount;
import com.mailslurp.models.ValidationDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EmailControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmailControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EmailControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call applyImapFlagOperationCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ImapFlagOperationOptions imapFlagOperationOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imapFlagOperationOptions;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/imap-flag-operation"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call applyImapFlagOperationValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ImapFlagOperationOptions imapFlagOperationOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling applyImapFlagOperation(Async)");
        }

        // verify the required parameter 'imapFlagOperationOptions' is set
        if (imapFlagOperationOptions == null) {
            throw new ApiException("Missing the required parameter 'imapFlagOperationOptions' when calling applyImapFlagOperation(Async)");
        }

        return applyImapFlagOperationCall(emailId, imapFlagOperationOptions, _callback);

    }


    private ApiResponse<EmailPreview> applyImapFlagOperationWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ImapFlagOperationOptions imapFlagOperationOptions) throws ApiException {
        okhttp3.Call localVarCall = applyImapFlagOperationValidateBeforeCall(emailId, imapFlagOperationOptions, null);
        Type localVarReturnType = new TypeToken<EmailPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call applyImapFlagOperationAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ImapFlagOperationOptions imapFlagOperationOptions, final ApiCallback<EmailPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = applyImapFlagOperationValidateBeforeCall(emailId, imapFlagOperationOptions, _callback);
        Type localVarReturnType = new TypeToken<EmailPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIapplyImapFlagOperationRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final ImapFlagOperationOptions imapFlagOperationOptions;

        private APIapplyImapFlagOperationRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ImapFlagOperationOptions imapFlagOperationOptions) {
            this.emailId = emailId;
            this.imapFlagOperationOptions = imapFlagOperationOptions;
        }

        /**
         * Build call for applyImapFlagOperation
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return applyImapFlagOperationCall(emailId, imapFlagOperationOptions, _callback);
        }

        /**
         * Execute applyImapFlagOperation request
         * @return EmailPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailPreview execute() throws ApiException {
            ApiResponse<EmailPreview> localVarResp = applyImapFlagOperationWithHttpInfo(emailId, imapFlagOperationOptions);
            return localVarResp.getData();
        }

        /**
         * Execute applyImapFlagOperation request with HTTP info returned
         * @return ApiResponse&lt;EmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailPreview> executeWithHttpInfo() throws ApiException {
            return applyImapFlagOperationWithHttpInfo(emailId, imapFlagOperationOptions);
        }

        /**
         * Execute applyImapFlagOperation request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailPreview> _callback) throws ApiException {
            return applyImapFlagOperationAsync(emailId, imapFlagOperationOptions, _callback);
        }
    }

    /**
     * Set IMAP flags associated with a message. Only supports &#39;\\Seen&#39; flag.
     * Apply RFC3501 section-2.3.2 IMAP flag operations on an email
     * @param emailId  (required)
     * @param imapFlagOperationOptions  (required)
     * @return APIapplyImapFlagOperationRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIapplyImapFlagOperationRequest applyImapFlagOperation(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ImapFlagOperationOptions imapFlagOperationOptions) {
        return new APIapplyImapFlagOperationRequest(emailId, imapFlagOperationOptions);
    }
    private okhttp3.Call canSendCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/emails/can-send";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call canSendValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling canSend(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling canSend(Async)");
        }

        return canSendCall(inboxId, sendEmailOptions, _callback);

    }


    private ApiResponse<CanSendEmailResults> canSendWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = canSendValidateBeforeCall(inboxId, sendEmailOptions, null);
        Type localVarReturnType = new TypeToken<CanSendEmailResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call canSendAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback<CanSendEmailResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = canSendValidateBeforeCall(inboxId, sendEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<CanSendEmailResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcanSendRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;

        private APIcanSendRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.inboxId = inboxId;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Build call for canSend
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return canSendCall(inboxId, sendEmailOptions, _callback);
        }

        /**
         * Execute canSend request
         * @return CanSendEmailResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CanSendEmailResults execute() throws ApiException {
            ApiResponse<CanSendEmailResults> localVarResp = canSendWithHttpInfo(inboxId, sendEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute canSend request with HTTP info returned
         * @return ApiResponse&lt;CanSendEmailResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CanSendEmailResults> executeWithHttpInfo() throws ApiException {
            return canSendWithHttpInfo(inboxId, sendEmailOptions);
        }

        /**
         * Execute canSend request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CanSendEmailResults> _callback) throws ApiException {
            return canSendAsync(inboxId, sendEmailOptions, _callback);
        }
    }

    /**
     * Check if email can be sent and options are valid.
     * Can user send email to given recipient or is the recipient blocked
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @param sendEmailOptions  (required)
     * @return APIcanSendRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcanSendRequest canSend(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIcanSendRequest(inboxId, sendEmailOptions);
    }
    private okhttp3.Call checkEmailBodyCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/check-email-body"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkEmailBodyValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling checkEmailBody(Async)");
        }

        return checkEmailBodyCall(emailId, _callback);

    }


    private ApiResponse<CheckEmailBodyResults> checkEmailBodyWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = checkEmailBodyValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<CheckEmailBodyResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkEmailBodyAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<CheckEmailBodyResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkEmailBodyValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<CheckEmailBodyResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcheckEmailBodyRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIcheckEmailBodyRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for checkEmailBody
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkEmailBodyCall(emailId, _callback);
        }

        /**
         * Execute checkEmailBody request
         * @return CheckEmailBodyResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckEmailBodyResults execute() throws ApiException {
            ApiResponse<CheckEmailBodyResults> localVarResp = checkEmailBodyWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute checkEmailBody request with HTTP info returned
         * @return ApiResponse&lt;CheckEmailBodyResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckEmailBodyResults> executeWithHttpInfo() throws ApiException {
            return checkEmailBodyWithHttpInfo(emailId);
        }

        /**
         * Execute checkEmailBody request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckEmailBodyResults> _callback) throws ApiException {
            return checkEmailBodyAsync(emailId, _callback);
        }
    }

    /**
     * Detect broken links, spelling, and images in email content
     * Find dead links, broken images, and spelling mistakes in email body. Will call included links via HTTP so do not invoke if your links are sensitive or stateful. Any resource that returns a 4xx or 5xx response or is not reachable via HEAD or GET HTTP operations will be considered unhealthy.
     * @param emailId  (required)
     * @return APIcheckEmailBodyRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcheckEmailBodyRequest checkEmailBody(@javax.annotation.Nonnull UUID emailId) {
        return new APIcheckEmailBodyRequest(emailId);
    }
    private okhttp3.Call checkEmailBodyFeatureSupportCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/check-email-body-feature-support"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkEmailBodyFeatureSupportValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling checkEmailBodyFeatureSupport(Async)");
        }

        return checkEmailBodyFeatureSupportCall(emailId, _callback);

    }


    private ApiResponse<CheckEmailBodyFeatureSupportResults> checkEmailBodyFeatureSupportWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = checkEmailBodyFeatureSupportValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<CheckEmailBodyFeatureSupportResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkEmailBodyFeatureSupportAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<CheckEmailBodyFeatureSupportResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkEmailBodyFeatureSupportValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<CheckEmailBodyFeatureSupportResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcheckEmailBodyFeatureSupportRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIcheckEmailBodyFeatureSupportRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for checkEmailBodyFeatureSupport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkEmailBodyFeatureSupportCall(emailId, _callback);
        }

        /**
         * Execute checkEmailBodyFeatureSupport request
         * @return CheckEmailBodyFeatureSupportResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckEmailBodyFeatureSupportResults execute() throws ApiException {
            ApiResponse<CheckEmailBodyFeatureSupportResults> localVarResp = checkEmailBodyFeatureSupportWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute checkEmailBodyFeatureSupport request with HTTP info returned
         * @return ApiResponse&lt;CheckEmailBodyFeatureSupportResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckEmailBodyFeatureSupportResults> executeWithHttpInfo() throws ApiException {
            return checkEmailBodyFeatureSupportWithHttpInfo(emailId);
        }

        /**
         * Execute checkEmailBodyFeatureSupport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckEmailBodyFeatureSupportResults> _callback) throws ApiException {
            return checkEmailBodyFeatureSupportAsync(emailId, _callback);
        }
    }

    /**
     * Show which mail clients support the HTML and CSS features used in an email body.
     * Detect HTML and CSS features inside an email body and return a report of email client support across different platforms and versions.
     * @param emailId  (required)
     * @return APIcheckEmailBodyFeatureSupportRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcheckEmailBodyFeatureSupportRequest checkEmailBodyFeatureSupport(@javax.annotation.Nonnull UUID emailId) {
        return new APIcheckEmailBodyFeatureSupportRequest(emailId);
    }
    private okhttp3.Call checkEmailClientSupportCall(@javax.annotation.Nonnull CheckEmailClientSupportOptions checkEmailClientSupportOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkEmailClientSupportOptions;

        // create path and map variables
        String localVarPath = "/emails/check-email-client-support";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkEmailClientSupportValidateBeforeCall(@javax.annotation.Nonnull CheckEmailClientSupportOptions checkEmailClientSupportOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkEmailClientSupportOptions' is set
        if (checkEmailClientSupportOptions == null) {
            throw new ApiException("Missing the required parameter 'checkEmailClientSupportOptions' when calling checkEmailClientSupport(Async)");
        }

        return checkEmailClientSupportCall(checkEmailClientSupportOptions, _callback);

    }


    private ApiResponse<CheckEmailClientSupportResults> checkEmailClientSupportWithHttpInfo(@javax.annotation.Nonnull CheckEmailClientSupportOptions checkEmailClientSupportOptions) throws ApiException {
        okhttp3.Call localVarCall = checkEmailClientSupportValidateBeforeCall(checkEmailClientSupportOptions, null);
        Type localVarReturnType = new TypeToken<CheckEmailClientSupportResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call checkEmailClientSupportAsync(@javax.annotation.Nonnull CheckEmailClientSupportOptions checkEmailClientSupportOptions, final ApiCallback<CheckEmailClientSupportResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkEmailClientSupportValidateBeforeCall(checkEmailClientSupportOptions, _callback);
        Type localVarReturnType = new TypeToken<CheckEmailClientSupportResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcheckEmailClientSupportRequest {
        @javax.annotation.Nonnull
        private final CheckEmailClientSupportOptions checkEmailClientSupportOptions;

        private APIcheckEmailClientSupportRequest(@javax.annotation.Nonnull CheckEmailClientSupportOptions checkEmailClientSupportOptions) {
            this.checkEmailClientSupportOptions = checkEmailClientSupportOptions;
        }

        /**
         * Build call for checkEmailClientSupport
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return checkEmailClientSupportCall(checkEmailClientSupportOptions, _callback);
        }

        /**
         * Execute checkEmailClientSupport request
         * @return CheckEmailClientSupportResults
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CheckEmailClientSupportResults execute() throws ApiException {
            ApiResponse<CheckEmailClientSupportResults> localVarResp = checkEmailClientSupportWithHttpInfo(checkEmailClientSupportOptions);
            return localVarResp.getData();
        }

        /**
         * Execute checkEmailClientSupport request with HTTP info returned
         * @return ApiResponse&lt;CheckEmailClientSupportResults&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CheckEmailClientSupportResults> executeWithHttpInfo() throws ApiException {
            return checkEmailClientSupportWithHttpInfo(checkEmailClientSupportOptions);
        }

        /**
         * Execute checkEmailClientSupport request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CheckEmailClientSupportResults> _callback) throws ApiException {
            return checkEmailClientSupportAsync(checkEmailClientSupportOptions, _callback);
        }
    }

    /**
     * Show which email programs and devices support the features used in an email body.
     * Evaluate the features used in an email body and return a report of email client support across different platforms and versions.
     * @param checkEmailClientSupportOptions  (required)
     * @return APIcheckEmailClientSupportRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcheckEmailClientSupportRequest checkEmailClientSupport(@javax.annotation.Nonnull CheckEmailClientSupportOptions checkEmailClientSupportOptions) {
        return new APIcheckEmailClientSupportRequest(checkEmailClientSupportOptions);
    }
    private okhttp3.Call deleteAllEmailsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllEmailsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAllEmailsCall(_callback);

    }


    private ApiResponse<Void> deleteAllEmailsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllEmailsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllEmailsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllEmailsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllEmailsRequest {

        private APIdeleteAllEmailsRequest() {
        }

        /**
         * Build call for deleteAllEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllEmailsCall(_callback);
        }

        /**
         * Execute deleteAllEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllEmailsWithHttpInfo();
        }

        /**
         * Execute deleteAllEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllEmailsWithHttpInfo();
        }

        /**
         * Execute deleteAllEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllEmailsAsync(_callback);
        }
    }

    /**
     * Delete all emails in all inboxes.
     * Deletes all emails in your account. Be careful as emails cannot be recovered
     * @return APIdeleteAllEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllEmailsRequest deleteAllEmails() {
        return new APIdeleteAllEmailsRequest();
    }
    private okhttp3.Call deleteEmailCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEmailValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling deleteEmail(Async)");
        }

        return deleteEmailCall(emailId, _callback);

    }


    private ApiResponse<Void> deleteEmailWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = deleteEmailValidateBeforeCall(emailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEmailAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEmailValidateBeforeCall(emailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteEmailRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIdeleteEmailRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for deleteEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEmailCall(emailId, _callback);
        }

        /**
         * Execute deleteEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEmailWithHttpInfo(emailId);
        }

        /**
         * Execute deleteEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEmailWithHttpInfo(emailId);
        }

        /**
         * Execute deleteEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEmailAsync(emailId, _callback);
        }
    }

    /**
     * Delete an email
     * Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
     * @param emailId ID of email to delete (required)
     * @return APIdeleteEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteEmailRequest deleteEmail(@javax.annotation.Nonnull UUID emailId) {
        return new APIdeleteEmailRequest(emailId);
    }
    private okhttp3.Call downloadAttachmentCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String apiKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/attachments/{attachmentId}"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (apiKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("apiKey", apiKey));
        }

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String apiKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling downloadAttachment(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachment(Async)");
        }

        return downloadAttachmentCall(emailId, attachmentId, apiKey, _callback);

    }


    private ApiResponse<byte[]> downloadAttachmentWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String apiKey) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentValidateBeforeCall(emailId, attachmentId, apiKey, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadAttachmentAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, @javax.annotation.Nullable String apiKey, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentValidateBeforeCall(emailId, attachmentId, apiKey, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadAttachmentRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final String attachmentId;
        @javax.annotation.Nullable
        private String apiKey;

        private APIdownloadAttachmentRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) {
            this.emailId = emailId;
            this.attachmentId = attachmentId;
        }

        /**
         * Set apiKey
         * @param apiKey Can pass apiKey in url for this request if you wish to download the file in a browser. Content type will be set to original content type of the attachment file. This is so that browsers can download the file correctly. (optional)
         * @return APIdownloadAttachmentRequest
         */
        public APIdownloadAttachmentRequest apiKey(@javax.annotation.Nullable String apiKey) {
            this.apiKey = apiKey;
            return this;
        }

        /**
         * Build call for downloadAttachment
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadAttachmentCall(emailId, attachmentId, apiKey, _callback);
        }

        /**
         * Execute downloadAttachment request
         * @return byte[]
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public byte[] execute() throws ApiException {
            ApiResponse<byte[]> localVarResp = downloadAttachmentWithHttpInfo(emailId, attachmentId, apiKey);
            return localVarResp.getData();
        }

        /**
         * Execute downloadAttachment request with HTTP info returned
         * @return ApiResponse&lt;byte[]&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<byte[]> executeWithHttpInfo() throws ApiException {
            return downloadAttachmentWithHttpInfo(emailId, attachmentId, apiKey);
        }

        /**
         * Execute downloadAttachment request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<byte[]> _callback) throws ApiException {
            return downloadAttachmentAsync(emailId, attachmentId, apiKey, _callback);
        }
    }

    /**
     * Get email attachment bytes. Returned as &#x60;octet-stream&#x60; with content type header. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints and convert the base 64 encoded content to a file or string.
     * Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     * @param emailId ID of email (required)
     * @param attachmentId ID of attachment (required)
     * @return APIdownloadAttachmentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadAttachmentRequest downloadAttachment(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) {
        return new APIdownloadAttachmentRequest(emailId, attachmentId);
    }
    private okhttp3.Call downloadAttachmentBase64Call(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/attachments/{attachmentId}/base64"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadAttachmentBase64ValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling downloadAttachmentBase64(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling downloadAttachmentBase64(Async)");
        }

        return downloadAttachmentBase64Call(emailId, attachmentId, _callback);

    }


    private ApiResponse<DownloadAttachmentDto> downloadAttachmentBase64WithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = downloadAttachmentBase64ValidateBeforeCall(emailId, attachmentId, null);
        Type localVarReturnType = new TypeToken<DownloadAttachmentDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadAttachmentBase64Async(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, final ApiCallback<DownloadAttachmentDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadAttachmentBase64ValidateBeforeCall(emailId, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<DownloadAttachmentDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadAttachmentBase64Request {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIdownloadAttachmentBase64Request(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) {
            this.emailId = emailId;
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for downloadAttachmentBase64
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadAttachmentBase64Call(emailId, attachmentId, _callback);
        }

        /**
         * Execute downloadAttachmentBase64 request
         * @return DownloadAttachmentDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public DownloadAttachmentDto execute() throws ApiException {
            ApiResponse<DownloadAttachmentDto> localVarResp = downloadAttachmentBase64WithHttpInfo(emailId, attachmentId);
            return localVarResp.getData();
        }

        /**
         * Execute downloadAttachmentBase64 request with HTTP info returned
         * @return ApiResponse&lt;DownloadAttachmentDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<DownloadAttachmentDto> executeWithHttpInfo() throws ApiException {
            return downloadAttachmentBase64WithHttpInfo(emailId, attachmentId);
        }

        /**
         * Execute downloadAttachmentBase64 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<DownloadAttachmentDto> _callback) throws ApiException {
            return downloadAttachmentBase64Async(emailId, attachmentId, _callback);
        }
    }

    /**
     * Get email attachment as base64 encoded string as an alternative to binary responses. Decode the &#x60;base64FileContents&#x60; as a &#x60;utf-8&#x60; encoded string or array of bytes depending on the &#x60;contentType&#x60;.
     * Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
     * @param emailId ID of email (required)
     * @param attachmentId ID of attachment (required)
     * @return APIdownloadAttachmentBase64Request
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadAttachmentBase64Request downloadAttachmentBase64(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) {
        return new APIdownloadAttachmentBase64Request(emailId, attachmentId);
    }
    private okhttp3.Call downloadBodyCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/body"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/plain",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadBodyValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling downloadBody(Async)");
        }

        return downloadBodyCall(emailId, _callback);

    }


    private ApiResponse<String> downloadBodyWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = downloadBodyValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadBodyAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadBodyValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadBodyRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIdownloadBodyRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for downloadBody
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadBodyCall(emailId, _callback);
        }

        /**
         * Execute downloadBody request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = downloadBodyWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute downloadBody request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return downloadBodyWithHttpInfo(emailId);
        }

        /**
         * Execute downloadBody request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return downloadBodyAsync(emailId, _callback);
        }
    }

    /**
     * Get email body as string. Returned as &#x60;plain/text&#x60; with content type header.
     * Returns the specified email body for a given email as a string
     * @param emailId ID of email (required)
     * @return APIdownloadBodyRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadBodyRequest downloadBody(@javax.annotation.Nonnull UUID emailId) {
        return new APIdownloadBodyRequest(emailId);
    }
    private okhttp3.Call downloadBodyBytesCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/body-bytes"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadBodyBytesValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling downloadBodyBytes(Async)");
        }

        return downloadBodyBytesCall(emailId, _callback);

    }


    private ApiResponse<byte[]> downloadBodyBytesWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = downloadBodyBytesValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call downloadBodyBytesAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<byte[]> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadBodyBytesValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdownloadBodyBytesRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIdownloadBodyBytesRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for downloadBodyBytes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return downloadBodyBytesCall(emailId, _callback);
        }

        /**
         * Execute downloadBodyBytes request
         * @return byte[]
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public byte[] execute() throws ApiException {
            ApiResponse<byte[]> localVarResp = downloadBodyBytesWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute downloadBodyBytes request with HTTP info returned
         * @return ApiResponse&lt;byte[]&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<byte[]> executeWithHttpInfo() throws ApiException {
            return downloadBodyBytesWithHttpInfo(emailId);
        }

        /**
         * Execute downloadBodyBytes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<byte[]> _callback) throws ApiException {
            return downloadBodyBytesAsync(emailId, _callback);
        }
    }

    /**
     * Get email body in bytes. Returned as &#x60;octet-stream&#x60; with content type header.
     * Returns the specified email body for a given email as a stream / array of bytes.
     * @param emailId ID of email (required)
     * @return APIdownloadBodyBytesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> default response </td><td>  -  </td></tr>
     </table>
     */
    public APIdownloadBodyBytesRequest downloadBodyBytes(@javax.annotation.Nonnull UUID emailId) {
        return new APIdownloadBodyBytesRequest(emailId);
    }
    private okhttp3.Call forwardEmailCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ForwardEmailOptions forwardEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = forwardEmailOptions;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/forward"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call forwardEmailValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ForwardEmailOptions forwardEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling forwardEmail(Async)");
        }

        // verify the required parameter 'forwardEmailOptions' is set
        if (forwardEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'forwardEmailOptions' when calling forwardEmail(Async)");
        }

        return forwardEmailCall(emailId, forwardEmailOptions, _callback);

    }


    private ApiResponse<SentEmailDto> forwardEmailWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ForwardEmailOptions forwardEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = forwardEmailValidateBeforeCall(emailId, forwardEmailOptions, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call forwardEmailAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ForwardEmailOptions forwardEmailOptions, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = forwardEmailValidateBeforeCall(emailId, forwardEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIforwardEmailRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final ForwardEmailOptions forwardEmailOptions;

        private APIforwardEmailRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ForwardEmailOptions forwardEmailOptions) {
            this.emailId = emailId;
            this.forwardEmailOptions = forwardEmailOptions;
        }

        /**
         * Build call for forwardEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return forwardEmailCall(emailId, forwardEmailOptions, _callback);
        }

        /**
         * Execute forwardEmail request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = forwardEmailWithHttpInfo(emailId, forwardEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute forwardEmail request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return forwardEmailWithHttpInfo(emailId, forwardEmailOptions);
        }

        /**
         * Execute forwardEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return forwardEmailAsync(emailId, forwardEmailOptions, _callback);
        }
    }

    /**
     * Forward email to recipients
     * Forward an existing email to new recipients. The sender of the email will be the inbox that received the email you are forwarding. You can override the sender with the &#x60;from&#x60; option. Note you must have access to the from address in MailSlurp to use the override. For more control consider fetching the email and sending it a new using the send email endpoints.
     * @param emailId ID of email (required)
     * @param forwardEmailOptions  (required)
     * @return APIforwardEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIforwardEmailRequest forwardEmail(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ForwardEmailOptions forwardEmailOptions) {
        return new APIforwardEmailRequest(emailId, forwardEmailOptions);
    }
    private okhttp3.Call getAttachmentMetaDataCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/attachments/{attachmentId}/metadata"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()))
            .replace("{" + "attachmentId" + "}", localVarApiClient.escapeString(attachmentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAttachmentMetaDataValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getAttachmentMetaData(Async)");
        }

        // verify the required parameter 'attachmentId' is set
        if (attachmentId == null) {
            throw new ApiException("Missing the required parameter 'attachmentId' when calling getAttachmentMetaData(Async)");
        }

        return getAttachmentMetaDataCall(emailId, attachmentId, _callback);

    }


    private ApiResponse<AttachmentMetaData> getAttachmentMetaDataWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) throws ApiException {
        okhttp3.Call localVarCall = getAttachmentMetaDataValidateBeforeCall(emailId, attachmentId, null);
        Type localVarReturnType = new TypeToken<AttachmentMetaData>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAttachmentMetaDataAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId, final ApiCallback<AttachmentMetaData> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAttachmentMetaDataValidateBeforeCall(emailId, attachmentId, _callback);
        Type localVarReturnType = new TypeToken<AttachmentMetaData>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAttachmentMetaDataRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final String attachmentId;

        private APIgetAttachmentMetaDataRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) {
            this.emailId = emailId;
            this.attachmentId = attachmentId;
        }

        /**
         * Build call for getAttachmentMetaData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAttachmentMetaDataCall(emailId, attachmentId, _callback);
        }

        /**
         * Execute getAttachmentMetaData request
         * @return AttachmentMetaData
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public AttachmentMetaData execute() throws ApiException {
            ApiResponse<AttachmentMetaData> localVarResp = getAttachmentMetaDataWithHttpInfo(emailId, attachmentId);
            return localVarResp.getData();
        }

        /**
         * Execute getAttachmentMetaData request with HTTP info returned
         * @return ApiResponse&lt;AttachmentMetaData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<AttachmentMetaData> executeWithHttpInfo() throws ApiException {
            return getAttachmentMetaDataWithHttpInfo(emailId, attachmentId);
        }

        /**
         * Execute getAttachmentMetaData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<AttachmentMetaData> _callback) throws ApiException {
            return getAttachmentMetaDataAsync(emailId, attachmentId, _callback);
        }
    }

    /**
     * Get email attachment metadata. This is the &#x60;contentType&#x60; and &#x60;contentLength&#x60; of an attachment. To get the individual attachments  use the &#x60;downloadAttachment&#x60; methods.
     * Returns the metadata such as name and content-type for a given attachment and email.
     * @param emailId ID of email (required)
     * @param attachmentId ID of attachment (required)
     * @return APIgetAttachmentMetaDataRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAttachmentMetaDataRequest getAttachmentMetaData(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String attachmentId) {
        return new APIgetAttachmentMetaDataRequest(emailId, attachmentId);
    }
    private okhttp3.Call getEmailCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8",
            "application/xml;charset=UTF-8",
            "application/json; charset=UTF-8",
            "application/xml; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmail(Async)");
        }

        return getEmailCall(emailId, _callback);

    }


    private ApiResponse<Email> getEmailWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getEmailValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetEmailRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailCall(emailId, _callback);
        }

        /**
         * Execute getEmail request
         * @return Email
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Email execute() throws ApiException {
            ApiResponse<Email> localVarResp = getEmailWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmail request with HTTP info returned
         * @return ApiResponse&lt;Email&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Email> executeWithHttpInfo() throws ApiException {
            return getEmailWithHttpInfo(emailId);
        }

        /**
         * Execute getEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Email> _callback) throws ApiException {
            return getEmailAsync(emailId, _callback);
        }
    }

    /**
     * Get email content including headers and body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     * Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
     * @param emailId  (required)
     * @return APIgetEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailRequest getEmail(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailRequest(emailId);
    }
    private okhttp3.Call getEmailAttachmentsCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/attachments"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailAttachmentsValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailAttachments(Async)");
        }

        return getEmailAttachmentsCall(emailId, _callback);

    }


    private ApiResponse<List<AttachmentMetaData>> getEmailAttachmentsWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getEmailAttachmentsValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<List<AttachmentMetaData>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailAttachmentsAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<List<AttachmentMetaData>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailAttachmentsValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<List<AttachmentMetaData>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailAttachmentsRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetEmailAttachmentsRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getEmailAttachments
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailAttachmentsCall(emailId, _callback);
        }

        /**
         * Execute getEmailAttachments request
         * @return List&lt;AttachmentMetaData&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<AttachmentMetaData> execute() throws ApiException {
            ApiResponse<List<AttachmentMetaData>> localVarResp = getEmailAttachmentsWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailAttachments request with HTTP info returned
         * @return ApiResponse&lt;List&lt;AttachmentMetaData&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<AttachmentMetaData>> executeWithHttpInfo() throws ApiException {
            return getEmailAttachmentsWithHttpInfo(emailId);
        }

        /**
         * Execute getEmailAttachments request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<AttachmentMetaData>> _callback) throws ApiException {
            return getEmailAttachmentsAsync(emailId, _callback);
        }
    }

    /**
     * Get all email attachment metadata. Metadata includes name and size of attachments.
     * Returns an array of attachment metadata such as name and content-type for a given email if present.
     * @param emailId ID of email (required)
     * @return APIgetEmailAttachmentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailAttachmentsRequest getEmailAttachments(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailAttachmentsRequest(emailId);
    }
    private okhttp3.Call getEmailContentMatchCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ContentMatchOptions contentMatchOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = contentMatchOptions;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/contentMatch"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailContentMatchValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ContentMatchOptions contentMatchOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailContentMatch(Async)");
        }

        // verify the required parameter 'contentMatchOptions' is set
        if (contentMatchOptions == null) {
            throw new ApiException("Missing the required parameter 'contentMatchOptions' when calling getEmailContentMatch(Async)");
        }

        return getEmailContentMatchCall(emailId, contentMatchOptions, _callback);

    }


    private ApiResponse<EmailContentMatchResult> getEmailContentMatchWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ContentMatchOptions contentMatchOptions) throws ApiException {
        okhttp3.Call localVarCall = getEmailContentMatchValidateBeforeCall(emailId, contentMatchOptions, null);
        Type localVarReturnType = new TypeToken<EmailContentMatchResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailContentMatchAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ContentMatchOptions contentMatchOptions, final ApiCallback<EmailContentMatchResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailContentMatchValidateBeforeCall(emailId, contentMatchOptions, _callback);
        Type localVarReturnType = new TypeToken<EmailContentMatchResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailContentMatchRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final ContentMatchOptions contentMatchOptions;

        private APIgetEmailContentMatchRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ContentMatchOptions contentMatchOptions) {
            this.emailId = emailId;
            this.contentMatchOptions = contentMatchOptions;
        }

        /**
         * Build call for getEmailContentMatch
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailContentMatchCall(emailId, contentMatchOptions, _callback);
        }

        /**
         * Execute getEmailContentMatch request
         * @return EmailContentMatchResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailContentMatchResult execute() throws ApiException {
            ApiResponse<EmailContentMatchResult> localVarResp = getEmailContentMatchWithHttpInfo(emailId, contentMatchOptions);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailContentMatch request with HTTP info returned
         * @return ApiResponse&lt;EmailContentMatchResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailContentMatchResult> executeWithHttpInfo() throws ApiException {
            return getEmailContentMatchWithHttpInfo(emailId, contentMatchOptions);
        }

        /**
         * Execute getEmailContentMatch request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailContentMatchResult> _callback) throws ApiException {
            return getEmailContentMatchAsync(emailId, contentMatchOptions, _callback);
        }
    }

    /**
     * Get email content regex pattern match results. Runs regex against email body and returns match groups.
     * Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
     * @param emailId ID of email to match against (required)
     * @param contentMatchOptions  (required)
     * @return APIgetEmailContentMatchRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailContentMatchRequest getEmailContentMatch(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ContentMatchOptions contentMatchOptions) {
        return new APIgetEmailContentMatchRequest(emailId, contentMatchOptions);
    }
    private okhttp3.Call getEmailContentPartCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/contentPart"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentType", contentType));
        }

        if (strict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("strict", strict));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8",
            "application/xml;charset=UTF-8",
            "application/json; charset=UTF-8",
            "application/xml; charset=UTF-8"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailContentPartValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailContentPart(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getEmailContentPart(Async)");
        }

        return getEmailContentPartCall(emailId, contentType, strict, index, _callback);

    }


    private ApiResponse<EmailContentPartResult> getEmailContentPartWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index) throws ApiException {
        okhttp3.Call localVarCall = getEmailContentPartValidateBeforeCall(emailId, contentType, strict, index, null);
        Type localVarReturnType = new TypeToken<EmailContentPartResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailContentPartAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index, final ApiCallback<EmailContentPartResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailContentPartValidateBeforeCall(emailId, contentType, strict, index, _callback);
        Type localVarReturnType = new TypeToken<EmailContentPartResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailContentPartRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final String contentType;
        @javax.annotation.Nullable
        private Boolean strict;
        @javax.annotation.Nullable
        private Integer index;

        private APIgetEmailContentPartRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType) {
            this.emailId = emailId;
            this.contentType = contentType;
        }

        /**
         * Set strict
         * @param strict Strict content type match (optional)
         * @return APIgetEmailContentPartRequest
         */
        public APIgetEmailContentPartRequest strict(@javax.annotation.Nullable Boolean strict) {
            this.strict = strict;
            return this;
        }

        /**
         * Set index
         * @param index Index of content type part if multiple (optional)
         * @return APIgetEmailContentPartRequest
         */
        public APIgetEmailContentPartRequest index(@javax.annotation.Nullable Integer index) {
            this.index = index;
            return this;
        }

        /**
         * Build call for getEmailContentPart
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailContentPartCall(emailId, contentType, strict, index, _callback);
        }

        /**
         * Execute getEmailContentPart request
         * @return EmailContentPartResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailContentPartResult execute() throws ApiException {
            ApiResponse<EmailContentPartResult> localVarResp = getEmailContentPartWithHttpInfo(emailId, contentType, strict, index);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailContentPart request with HTTP info returned
         * @return ApiResponse&lt;EmailContentPartResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailContentPartResult> executeWithHttpInfo() throws ApiException {
            return getEmailContentPartWithHttpInfo(emailId, contentType, strict, index);
        }

        /**
         * Execute getEmailContentPart request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailContentPartResult> _callback) throws ApiException {
            return getEmailContentPartAsync(emailId, contentType, strict, index, _callback);
        }
    }

    /**
     * Get email content part by content type
     * Get email body content parts from a multipart email message for a given content type
     * @param emailId ID of email to match against (required)
     * @param contentType Content type (required)
     * @return APIgetEmailContentPartRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailContentPartRequest getEmailContentPart(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType) {
        return new APIgetEmailContentPartRequest(emailId, contentType);
    }
    private okhttp3.Call getEmailContentPartContentCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/contentPart/raw"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (contentType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contentType", contentType));
        }

        if (strict != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("strict", strict));
        }

        if (index != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("index", index));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailContentPartContentValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailContentPartContent(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling getEmailContentPartContent(Async)");
        }

        return getEmailContentPartContentCall(emailId, contentType, strict, index, _callback);

    }


    private ApiResponse<String> getEmailContentPartContentWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index) throws ApiException {
        okhttp3.Call localVarCall = getEmailContentPartContentValidateBeforeCall(emailId, contentType, strict, index, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailContentPartContentAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType, @javax.annotation.Nullable Boolean strict, @javax.annotation.Nullable Integer index, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailContentPartContentValidateBeforeCall(emailId, contentType, strict, index, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailContentPartContentRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final String contentType;
        @javax.annotation.Nullable
        private Boolean strict;
        @javax.annotation.Nullable
        private Integer index;

        private APIgetEmailContentPartContentRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType) {
            this.emailId = emailId;
            this.contentType = contentType;
        }

        /**
         * Set strict
         * @param strict Strict content type match (optional)
         * @return APIgetEmailContentPartContentRequest
         */
        public APIgetEmailContentPartContentRequest strict(@javax.annotation.Nullable Boolean strict) {
            this.strict = strict;
            return this;
        }

        /**
         * Set index
         * @param index Index of content type part if multiple. Starts from 0 and applies to the result list after selecting for your content type. Content type parts are sorted by order found in original MIME message. (optional)
         * @return APIgetEmailContentPartContentRequest
         */
        public APIgetEmailContentPartContentRequest index(@javax.annotation.Nullable Integer index) {
            this.index = index;
            return this;
        }

        /**
         * Build call for getEmailContentPartContent
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailContentPartContentCall(emailId, contentType, strict, index, _callback);
        }

        /**
         * Execute getEmailContentPartContent request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getEmailContentPartContentWithHttpInfo(emailId, contentType, strict, index);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailContentPartContent request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getEmailContentPartContentWithHttpInfo(emailId, contentType, strict, index);
        }

        /**
         * Execute getEmailContentPartContent request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getEmailContentPartContentAsync(emailId, contentType, strict, index, _callback);
        }
    }

    /**
     * Get email content part by content type raw response
     * Get email body content parts from a multipart email message for a given content type and return as response
     * @param emailId ID of email to match against (required)
     * @param contentType Content type (required)
     * @return APIgetEmailContentPartContentRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailContentPartContentRequest getEmailContentPartContent(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String contentType) {
        return new APIgetEmailContentPartContentRequest(emailId, contentType);
    }
    private okhttp3.Call getEmailCountCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/emails/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailCountValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getEmailCountCall(inboxId, _callback);

    }


    private ApiResponse<CountDto> getEmailCountWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getEmailCountValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailCountAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailCountValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailCountRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetEmailCountRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId  (optional)
         * @return APIgetEmailCountRequest
         */
        public APIgetEmailCountRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getEmailCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailCountCall(inboxId, _callback);
        }

        /**
         * Execute getEmailCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getEmailCountWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getEmailCountWithHttpInfo(inboxId);
        }

        /**
         * Execute getEmailCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getEmailCountAsync(inboxId, _callback);
        }
    }

    /**
     * Get email count
     * 
     * @return APIgetEmailCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailCountRequest getEmailCount() {
        return new APIgetEmailCountRequest();
    }
    private okhttp3.Call getEmailHTMLCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/html"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceCidImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceCidImages", replaceCidImages));
        }

        final String[] localVarAccepts = {
            "text/html;charset=utf-8",
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailHTMLValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailHTML(Async)");
        }

        return getEmailHTMLCall(emailId, replaceCidImages, _callback);

    }


    private ApiResponse<String> getEmailHTMLWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages) throws ApiException {
        okhttp3.Call localVarCall = getEmailHTMLValidateBeforeCall(emailId, replaceCidImages, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailHTMLAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailHTMLValidateBeforeCall(emailId, replaceCidImages, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailHTMLRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private Boolean replaceCidImages;

        private APIgetEmailHTMLRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set replaceCidImages
         * @param replaceCidImages  (optional, default to false)
         * @return APIgetEmailHTMLRequest
         */
        public APIgetEmailHTMLRequest replaceCidImages(@javax.annotation.Nullable Boolean replaceCidImages) {
            this.replaceCidImages = replaceCidImages;
            return this;
        }

        /**
         * Build call for getEmailHTML
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailHTMLCall(emailId, replaceCidImages, _callback);
        }

        /**
         * Execute getEmailHTML request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getEmailHTMLWithHttpInfo(emailId, replaceCidImages);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailHTML request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getEmailHTMLWithHttpInfo(emailId, replaceCidImages);
        }

        /**
         * Execute getEmailHTML request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getEmailHTMLAsync(emailId, replaceCidImages, _callback);
        }
    }

    /**
     * Get email content as HTML. For displaying emails in browser context.
     * Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;. Returns content-type &#x60;text/html;charset&#x3D;utf-8&#x60; so you must call expecting that content response not JSON. For JSON response see the &#x60;getEmailHTMLJson&#x60; method.
     * @param emailId  (required)
     * @return APIgetEmailHTMLRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailHTMLRequest getEmailHTML(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailHTMLRequest(emailId);
    }
    private okhttp3.Call getEmailHTMLJsonCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/html/json"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (replaceCidImages != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("replaceCidImages", replaceCidImages));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailHTMLJsonValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailHTMLJson(Async)");
        }

        return getEmailHTMLJsonCall(emailId, replaceCidImages, _callback);

    }


    private ApiResponse<EmailHtmlDto> getEmailHTMLJsonWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages) throws ApiException {
        okhttp3.Call localVarCall = getEmailHTMLJsonValidateBeforeCall(emailId, replaceCidImages, null);
        Type localVarReturnType = new TypeToken<EmailHtmlDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailHTMLJsonAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean replaceCidImages, final ApiCallback<EmailHtmlDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailHTMLJsonValidateBeforeCall(emailId, replaceCidImages, _callback);
        Type localVarReturnType = new TypeToken<EmailHtmlDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailHTMLJsonRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private Boolean replaceCidImages;

        private APIgetEmailHTMLJsonRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set replaceCidImages
         * @param replaceCidImages  (optional, default to false)
         * @return APIgetEmailHTMLJsonRequest
         */
        public APIgetEmailHTMLJsonRequest replaceCidImages(@javax.annotation.Nullable Boolean replaceCidImages) {
            this.replaceCidImages = replaceCidImages;
            return this;
        }

        /**
         * Build call for getEmailHTMLJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailHTMLJsonCall(emailId, replaceCidImages, _callback);
        }

        /**
         * Execute getEmailHTMLJson request
         * @return EmailHtmlDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailHtmlDto execute() throws ApiException {
            ApiResponse<EmailHtmlDto> localVarResp = getEmailHTMLJsonWithHttpInfo(emailId, replaceCidImages);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailHTMLJson request with HTTP info returned
         * @return ApiResponse&lt;EmailHtmlDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailHtmlDto> executeWithHttpInfo() throws ApiException {
            return getEmailHTMLJsonWithHttpInfo(emailId, replaceCidImages);
        }

        /**
         * Execute getEmailHTMLJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailHtmlDto> _callback) throws ApiException {
            return getEmailHTMLJsonAsync(emailId, replaceCidImages, _callback);
        }
    }

    /**
     * Get email content as HTML in JSON wrapper. For fetching entity decoded HTML content
     * Retrieve email content as HTML response. Decodes quoted-printable entities and converts charset to UTF-8. Returns content-type &#x60;application/json;charset&#x3D;utf-8&#x60; so you must call expecting that content response not JSON.
     * @param emailId  (required)
     * @return APIgetEmailHTMLJsonRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailHTMLJsonRequest getEmailHTMLJson(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailHTMLJsonRequest(emailId);
    }
    private okhttp3.Call getEmailHTMLQueryCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String htmlSelector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/htmlQuery"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (htmlSelector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("htmlSelector", htmlSelector));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailHTMLQueryValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String htmlSelector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailHTMLQuery(Async)");
        }

        // verify the required parameter 'htmlSelector' is set
        if (htmlSelector == null) {
            throw new ApiException("Missing the required parameter 'htmlSelector' when calling getEmailHTMLQuery(Async)");
        }

        return getEmailHTMLQueryCall(emailId, htmlSelector, _callback);

    }


    private ApiResponse<EmailTextLinesResult> getEmailHTMLQueryWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String htmlSelector) throws ApiException {
        okhttp3.Call localVarCall = getEmailHTMLQueryValidateBeforeCall(emailId, htmlSelector, null);
        Type localVarReturnType = new TypeToken<EmailTextLinesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailHTMLQueryAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String htmlSelector, final ApiCallback<EmailTextLinesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailHTMLQueryValidateBeforeCall(emailId, htmlSelector, _callback);
        Type localVarReturnType = new TypeToken<EmailTextLinesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailHTMLQueryRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final String htmlSelector;

        private APIgetEmailHTMLQueryRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String htmlSelector) {
            this.emailId = emailId;
            this.htmlSelector = htmlSelector;
        }

        /**
         * Build call for getEmailHTMLQuery
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailHTMLQueryCall(emailId, htmlSelector, _callback);
        }

        /**
         * Execute getEmailHTMLQuery request
         * @return EmailTextLinesResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailTextLinesResult execute() throws ApiException {
            ApiResponse<EmailTextLinesResult> localVarResp = getEmailHTMLQueryWithHttpInfo(emailId, htmlSelector);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailHTMLQuery request with HTTP info returned
         * @return ApiResponse&lt;EmailTextLinesResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTextLinesResult> executeWithHttpInfo() throws ApiException {
            return getEmailHTMLQueryWithHttpInfo(emailId, htmlSelector);
        }

        /**
         * Execute getEmailHTMLQuery request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTextLinesResult> _callback) throws ApiException {
            return getEmailHTMLQueryAsync(emailId, htmlSelector, _callback);
        }
    }

    /**
     * Parse and return text from an email, stripping HTML and decoding encoded characters
     * Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
     * @param emailId ID of email to perform HTML query on (required)
     * @param htmlSelector HTML selector to search for. Uses JQuery/JSoup/CSS style selector like &#39;.my-div&#39; to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html for more information. (required)
     * @return APIgetEmailHTMLQueryRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailHTMLQueryRequest getEmailHTMLQuery(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull String htmlSelector) {
        return new APIgetEmailHTMLQueryRequest(emailId, htmlSelector);
    }
    private okhttp3.Call getEmailLinksCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable String selector, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/links"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (selector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("selector", selector));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailLinksValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable String selector, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailLinks(Async)");
        }

        return getEmailLinksCall(emailId, selector, _callback);

    }


    private ApiResponse<EmailLinksResult> getEmailLinksWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable String selector) throws ApiException {
        okhttp3.Call localVarCall = getEmailLinksValidateBeforeCall(emailId, selector, null);
        Type localVarReturnType = new TypeToken<EmailLinksResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailLinksAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable String selector, final ApiCallback<EmailLinksResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailLinksValidateBeforeCall(emailId, selector, _callback);
        Type localVarReturnType = new TypeToken<EmailLinksResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailLinksRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private String selector;

        private APIgetEmailLinksRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set selector
         * @param selector Optional HTML query selector for links (optional)
         * @return APIgetEmailLinksRequest
         */
        public APIgetEmailLinksRequest selector(@javax.annotation.Nullable String selector) {
            this.selector = selector;
            return this;
        }

        /**
         * Build call for getEmailLinks
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailLinksCall(emailId, selector, _callback);
        }

        /**
         * Execute getEmailLinks request
         * @return EmailLinksResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailLinksResult execute() throws ApiException {
            ApiResponse<EmailLinksResult> localVarResp = getEmailLinksWithHttpInfo(emailId, selector);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailLinks request with HTTP info returned
         * @return ApiResponse&lt;EmailLinksResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailLinksResult> executeWithHttpInfo() throws ApiException {
            return getEmailLinksWithHttpInfo(emailId, selector);
        }

        /**
         * Execute getEmailLinks request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailLinksResult> _callback) throws ApiException {
            return getEmailLinksAsync(emailId, selector, _callback);
        }
    }

    /**
     * Parse and return list of links found in an email (only works for HTML content)
     * HTML parsing uses JSoup and UNIX line separators. Searches content for href attributes
     * @param emailId ID of email to fetch text for (required)
     * @return APIgetEmailLinksRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailLinksRequest getEmailLinks(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailLinksRequest(emailId);
    }
    private okhttp3.Call getEmailPreviewURLsCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/urls"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailPreviewURLsValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailPreviewURLs(Async)");
        }

        return getEmailPreviewURLsCall(emailId, _callback);

    }


    private ApiResponse<EmailPreviewUrls> getEmailPreviewURLsWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getEmailPreviewURLsValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<EmailPreviewUrls>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailPreviewURLsAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<EmailPreviewUrls> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailPreviewURLsValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<EmailPreviewUrls>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailPreviewURLsRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetEmailPreviewURLsRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getEmailPreviewURLs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailPreviewURLsCall(emailId, _callback);
        }

        /**
         * Execute getEmailPreviewURLs request
         * @return EmailPreviewUrls
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailPreviewUrls execute() throws ApiException {
            ApiResponse<EmailPreviewUrls> localVarResp = getEmailPreviewURLsWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailPreviewURLs request with HTTP info returned
         * @return ApiResponse&lt;EmailPreviewUrls&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailPreviewUrls> executeWithHttpInfo() throws ApiException {
            return getEmailPreviewURLsWithHttpInfo(emailId);
        }

        /**
         * Execute getEmailPreviewURLs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailPreviewUrls> _callback) throws ApiException {
            return getEmailPreviewURLsAsync(emailId, _callback);
        }
    }

    /**
     * Get email URLs for viewing in browser or downloading
     * Get a list of URLs for email content as text/html or raw SMTP message for viewing the message in a browser.
     * @param emailId  (required)
     * @return APIgetEmailPreviewURLsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailPreviewURLsRequest getEmailPreviewURLs(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailPreviewURLsRequest(emailId);
    }
    private okhttp3.Call getEmailScreenshotAsBase64Call(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEmailScreenshotOptions;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/screenshot/base64"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailScreenshotAsBase64ValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailScreenshotAsBase64(Async)");
        }

        // verify the required parameter 'getEmailScreenshotOptions' is set
        if (getEmailScreenshotOptions == null) {
            throw new ApiException("Missing the required parameter 'getEmailScreenshotOptions' when calling getEmailScreenshotAsBase64(Async)");
        }

        return getEmailScreenshotAsBase64Call(emailId, getEmailScreenshotOptions, _callback);

    }


    private ApiResponse<EmailScreenshotResult> getEmailScreenshotAsBase64WithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions) throws ApiException {
        okhttp3.Call localVarCall = getEmailScreenshotAsBase64ValidateBeforeCall(emailId, getEmailScreenshotOptions, null);
        Type localVarReturnType = new TypeToken<EmailScreenshotResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailScreenshotAsBase64Async(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions, final ApiCallback<EmailScreenshotResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailScreenshotAsBase64ValidateBeforeCall(emailId, getEmailScreenshotOptions, _callback);
        Type localVarReturnType = new TypeToken<EmailScreenshotResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailScreenshotAsBase64Request {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final GetEmailScreenshotOptions getEmailScreenshotOptions;

        private APIgetEmailScreenshotAsBase64Request(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions) {
            this.emailId = emailId;
            this.getEmailScreenshotOptions = getEmailScreenshotOptions;
        }

        /**
         * Build call for getEmailScreenshotAsBase64
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailScreenshotAsBase64Call(emailId, getEmailScreenshotOptions, _callback);
        }

        /**
         * Execute getEmailScreenshotAsBase64 request
         * @return EmailScreenshotResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailScreenshotResult execute() throws ApiException {
            ApiResponse<EmailScreenshotResult> localVarResp = getEmailScreenshotAsBase64WithHttpInfo(emailId, getEmailScreenshotOptions);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailScreenshotAsBase64 request with HTTP info returned
         * @return ApiResponse&lt;EmailScreenshotResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailScreenshotResult> executeWithHttpInfo() throws ApiException {
            return getEmailScreenshotAsBase64WithHttpInfo(emailId, getEmailScreenshotOptions);
        }

        /**
         * Execute getEmailScreenshotAsBase64 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailScreenshotResult> _callback) throws ApiException {
            return getEmailScreenshotAsBase64Async(emailId, getEmailScreenshotOptions, _callback);
        }
    }

    /**
     * Take a screenshot of an email in a browser and return base64 encoded string
     * Capture image of email screenshot and return as base64 encoded string. Useful for embedding in HTML. Be careful as this may contain sensitive information.
     * @param emailId  (required)
     * @param getEmailScreenshotOptions  (required)
     * @return APIgetEmailScreenshotAsBase64Request
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailScreenshotAsBase64Request getEmailScreenshotAsBase64(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions) {
        return new APIgetEmailScreenshotAsBase64Request(emailId, getEmailScreenshotOptions);
    }
    private okhttp3.Call getEmailScreenshotAsBinaryCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = getEmailScreenshotOptions;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/screenshot/binary"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailScreenshotAsBinaryValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailScreenshotAsBinary(Async)");
        }

        // verify the required parameter 'getEmailScreenshotOptions' is set
        if (getEmailScreenshotOptions == null) {
            throw new ApiException("Missing the required parameter 'getEmailScreenshotOptions' when calling getEmailScreenshotAsBinary(Async)");
        }

        return getEmailScreenshotAsBinaryCall(emailId, getEmailScreenshotOptions, _callback);

    }


    private ApiResponse<Void> getEmailScreenshotAsBinaryWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions) throws ApiException {
        okhttp3.Call localVarCall = getEmailScreenshotAsBinaryValidateBeforeCall(emailId, getEmailScreenshotOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getEmailScreenshotAsBinaryAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailScreenshotAsBinaryValidateBeforeCall(emailId, getEmailScreenshotOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIgetEmailScreenshotAsBinaryRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final GetEmailScreenshotOptions getEmailScreenshotOptions;

        private APIgetEmailScreenshotAsBinaryRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions) {
            this.emailId = emailId;
            this.getEmailScreenshotOptions = getEmailScreenshotOptions;
        }

        /**
         * Build call for getEmailScreenshotAsBinary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailScreenshotAsBinaryCall(emailId, getEmailScreenshotOptions, _callback);
        }

        /**
         * Execute getEmailScreenshotAsBinary request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getEmailScreenshotAsBinaryWithHttpInfo(emailId, getEmailScreenshotOptions);
        }

        /**
         * Execute getEmailScreenshotAsBinary request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getEmailScreenshotAsBinaryWithHttpInfo(emailId, getEmailScreenshotOptions);
        }

        /**
         * Execute getEmailScreenshotAsBinary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getEmailScreenshotAsBinaryAsync(emailId, getEmailScreenshotOptions, _callback);
        }
    }

    /**
     * Take a screenshot of an email in a browser
     * Returns binary octet-stream of screenshot of the given email
     * @param emailId  (required)
     * @param getEmailScreenshotOptions  (required)
     * @return APIgetEmailScreenshotAsBinaryRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailScreenshotAsBinaryRequest getEmailScreenshotAsBinary(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull GetEmailScreenshotOptions getEmailScreenshotOptions) {
        return new APIgetEmailScreenshotAsBinaryRequest(emailId, getEmailScreenshotOptions);
    }
    private okhttp3.Call getEmailSummaryCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/summary"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (decode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decode", decode));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailSummaryValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailSummary(Async)");
        }

        return getEmailSummaryCall(emailId, decode, _callback);

    }


    private ApiResponse<EmailPreview> getEmailSummaryWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decode) throws ApiException {
        okhttp3.Call localVarCall = getEmailSummaryValidateBeforeCall(emailId, decode, null);
        Type localVarReturnType = new TypeToken<EmailPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailSummaryAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decode, final ApiCallback<EmailPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailSummaryValidateBeforeCall(emailId, decode, _callback);
        Type localVarReturnType = new TypeToken<EmailPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailSummaryRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private Boolean decode;

        private APIgetEmailSummaryRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set decode
         * @param decode  (optional)
         * @return APIgetEmailSummaryRequest
         */
        public APIgetEmailSummaryRequest decode(@javax.annotation.Nullable Boolean decode) {
            this.decode = decode;
            return this;
        }

        /**
         * Build call for getEmailSummary
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailSummaryCall(emailId, decode, _callback);
        }

        /**
         * Execute getEmailSummary request
         * @return EmailPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailPreview execute() throws ApiException {
            ApiResponse<EmailPreview> localVarResp = getEmailSummaryWithHttpInfo(emailId, decode);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailSummary request with HTTP info returned
         * @return ApiResponse&lt;EmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailPreview> executeWithHttpInfo() throws ApiException {
            return getEmailSummaryWithHttpInfo(emailId, decode);
        }

        /**
         * Execute getEmailSummary request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailPreview> _callback) throws ApiException {
            return getEmailSummaryAsync(emailId, decode, _callback);
        }
    }

    /**
     * Get email data including headers but not body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     * Returns a email summary object with headers. To retrieve the body see getEmail and to get raw unparsed email use the getRawEmail endpoints
     * @param emailId  (required)
     * @return APIgetEmailSummaryRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailSummaryRequest getEmailSummary(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailSummaryRequest(emailId);
    }
    private okhttp3.Call getEmailTextLinesCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decodeHtmlEntities, @javax.annotation.Nullable String lineSeparator, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/textLines"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (decodeHtmlEntities != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decodeHtmlEntities", decodeHtmlEntities));
        }

        if (lineSeparator != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lineSeparator", lineSeparator));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailTextLinesValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decodeHtmlEntities, @javax.annotation.Nullable String lineSeparator, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getEmailTextLines(Async)");
        }

        return getEmailTextLinesCall(emailId, decodeHtmlEntities, lineSeparator, _callback);

    }


    private ApiResponse<EmailTextLinesResult> getEmailTextLinesWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decodeHtmlEntities, @javax.annotation.Nullable String lineSeparator) throws ApiException {
        okhttp3.Call localVarCall = getEmailTextLinesValidateBeforeCall(emailId, decodeHtmlEntities, lineSeparator, null);
        Type localVarReturnType = new TypeToken<EmailTextLinesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailTextLinesAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean decodeHtmlEntities, @javax.annotation.Nullable String lineSeparator, final ApiCallback<EmailTextLinesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailTextLinesValidateBeforeCall(emailId, decodeHtmlEntities, lineSeparator, _callback);
        Type localVarReturnType = new TypeToken<EmailTextLinesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailTextLinesRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private Boolean decodeHtmlEntities;
        @javax.annotation.Nullable
        private String lineSeparator;

        private APIgetEmailTextLinesRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set decodeHtmlEntities
         * @param decodeHtmlEntities Decode HTML entities (optional)
         * @return APIgetEmailTextLinesRequest
         */
        public APIgetEmailTextLinesRequest decodeHtmlEntities(@javax.annotation.Nullable Boolean decodeHtmlEntities) {
            this.decodeHtmlEntities = decodeHtmlEntities;
            return this;
        }

        /**
         * Set lineSeparator
         * @param lineSeparator Line separator character (optional)
         * @return APIgetEmailTextLinesRequest
         */
        public APIgetEmailTextLinesRequest lineSeparator(@javax.annotation.Nullable String lineSeparator) {
            this.lineSeparator = lineSeparator;
            return this;
        }

        /**
         * Build call for getEmailTextLines
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailTextLinesCall(emailId, decodeHtmlEntities, lineSeparator, _callback);
        }

        /**
         * Execute getEmailTextLines request
         * @return EmailTextLinesResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailTextLinesResult execute() throws ApiException {
            ApiResponse<EmailTextLinesResult> localVarResp = getEmailTextLinesWithHttpInfo(emailId, decodeHtmlEntities, lineSeparator);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailTextLines request with HTTP info returned
         * @return ApiResponse&lt;EmailTextLinesResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailTextLinesResult> executeWithHttpInfo() throws ApiException {
            return getEmailTextLinesWithHttpInfo(emailId, decodeHtmlEntities, lineSeparator);
        }

        /**
         * Execute getEmailTextLines request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailTextLinesResult> _callback) throws ApiException {
            return getEmailTextLinesAsync(emailId, decodeHtmlEntities, lineSeparator, _callback);
        }
    }

    /**
     * Parse and return text from an email, stripping HTML and decoding encoded characters
     * Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
     * @param emailId ID of email to fetch text for (required)
     * @return APIgetEmailTextLinesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailTextLinesRequest getEmailTextLines(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetEmailTextLinesRequest(emailId);
    }
    private okhttp3.Call getEmailThreadCall(@javax.annotation.Nonnull UUID threadId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/threads/{threadId}"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailThreadValidateBeforeCall(@javax.annotation.Nonnull UUID threadId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling getEmailThread(Async)");
        }

        return getEmailThreadCall(threadId, _callback);

    }


    private ApiResponse<EmailThreadDto> getEmailThreadWithHttpInfo(@javax.annotation.Nonnull UUID threadId) throws ApiException {
        okhttp3.Call localVarCall = getEmailThreadValidateBeforeCall(threadId, null);
        Type localVarReturnType = new TypeToken<EmailThreadDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailThreadAsync(@javax.annotation.Nonnull UUID threadId, final ApiCallback<EmailThreadDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailThreadValidateBeforeCall(threadId, _callback);
        Type localVarReturnType = new TypeToken<EmailThreadDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailThreadRequest {
        @javax.annotation.Nonnull
        private final UUID threadId;

        private APIgetEmailThreadRequest(@javax.annotation.Nonnull UUID threadId) {
            this.threadId = threadId;
        }

        /**
         * Build call for getEmailThread
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailThreadCall(threadId, _callback);
        }

        /**
         * Execute getEmailThread request
         * @return EmailThreadDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailThreadDto execute() throws ApiException {
            ApiResponse<EmailThreadDto> localVarResp = getEmailThreadWithHttpInfo(threadId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailThread request with HTTP info returned
         * @return ApiResponse&lt;EmailThreadDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailThreadDto> executeWithHttpInfo() throws ApiException {
            return getEmailThreadWithHttpInfo(threadId);
        }

        /**
         * Execute getEmailThread request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailThreadDto> _callback) throws ApiException {
            return getEmailThreadAsync(threadId, _callback);
        }
    }

    /**
     * Return email thread information. Use items endpoints to get messages for thread.
     * Return email message thread summary from Message-ID, In-Reply-To, and References header. Get messages using items endpoint
     * @param threadId  (required)
     * @return APIgetEmailThreadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailThreadRequest getEmailThread(@javax.annotation.Nonnull UUID threadId) {
        return new APIgetEmailThreadRequest(threadId);
    }
    private okhttp3.Call getEmailThreadItemsCall(@javax.annotation.Nonnull UUID threadId, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/threads/{threadId}/items"
            .replace("{" + "threadId" + "}", localVarApiClient.escapeString(threadId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailThreadItemsValidateBeforeCall(@javax.annotation.Nonnull UUID threadId, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'threadId' is set
        if (threadId == null) {
            throw new ApiException("Missing the required parameter 'threadId' when calling getEmailThreadItems(Async)");
        }

        return getEmailThreadItemsCall(threadId, sort, _callback);

    }


    private ApiResponse<EmailThreadItemsDto> getEmailThreadItemsWithHttpInfo(@javax.annotation.Nonnull UUID threadId, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getEmailThreadItemsValidateBeforeCall(threadId, sort, null);
        Type localVarReturnType = new TypeToken<EmailThreadItemsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailThreadItemsAsync(@javax.annotation.Nonnull UUID threadId, @javax.annotation.Nullable String sort, final ApiCallback<EmailThreadItemsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailThreadItemsValidateBeforeCall(threadId, sort, _callback);
        Type localVarReturnType = new TypeToken<EmailThreadItemsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailThreadItemsRequest {
        @javax.annotation.Nonnull
        private final UUID threadId;
        @javax.annotation.Nullable
        private String sort;

        private APIgetEmailThreadItemsRequest(@javax.annotation.Nonnull UUID threadId) {
            this.threadId = threadId;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetEmailThreadItemsRequest
         */
        public APIgetEmailThreadItemsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getEmailThreadItems
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailThreadItemsCall(threadId, sort, _callback);
        }

        /**
         * Execute getEmailThreadItems request
         * @return EmailThreadItemsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailThreadItemsDto execute() throws ApiException {
            ApiResponse<EmailThreadItemsDto> localVarResp = getEmailThreadItemsWithHttpInfo(threadId, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailThreadItems request with HTTP info returned
         * @return ApiResponse&lt;EmailThreadItemsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailThreadItemsDto> executeWithHttpInfo() throws ApiException {
            return getEmailThreadItemsWithHttpInfo(threadId, sort);
        }

        /**
         * Execute getEmailThreadItems request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailThreadItemsDto> _callback) throws ApiException {
            return getEmailThreadItemsAsync(threadId, sort, _callback);
        }
    }

    /**
     * Return email thread items.
     * Return email thread messages based on Message-ID, In-Reply-To, and References header
     * @param threadId  (required)
     * @return APIgetEmailThreadItemsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailThreadItemsRequest getEmailThreadItems(@javax.annotation.Nonnull UUID threadId) {
        return new APIgetEmailThreadItemsRequest(threadId);
    }
    private okhttp3.Call getEmailThreadsCall(@javax.annotation.Nullable UUID htmlSelector, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/threads";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (htmlSelector != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("htmlSelector", htmlSelector));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailThreadsValidateBeforeCall(@javax.annotation.Nullable UUID htmlSelector, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getEmailThreadsCall(htmlSelector, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageEmailThreadProjection> getEmailThreadsWithHttpInfo(@javax.annotation.Nullable UUID htmlSelector, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getEmailThreadsValidateBeforeCall(htmlSelector, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageEmailThreadProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailThreadsAsync(@javax.annotation.Nullable UUID htmlSelector, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageEmailThreadProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailThreadsValidateBeforeCall(htmlSelector, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageEmailThreadProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailThreadsRequest {
        @javax.annotation.Nullable
        private UUID htmlSelector;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetEmailThreadsRequest() {
        }

        /**
         * Set htmlSelector
         * @param htmlSelector Optional inbox filter (optional)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest htmlSelector(@javax.annotation.Nullable UUID htmlSelector) {
            this.htmlSelector = htmlSelector;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in email thread pagination (optional, default to 0)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in email thread pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter search filter for email threads. (optional)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter email threads created since time (optional)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter emails threads created before given date time (optional)
         * @return APIgetEmailThreadsRequest
         */
        public APIgetEmailThreadsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getEmailThreads
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailThreadsCall(htmlSelector, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getEmailThreads request
         * @return PageEmailThreadProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailThreadProjection execute() throws ApiException {
            ApiResponse<PageEmailThreadProjection> localVarResp = getEmailThreadsWithHttpInfo(htmlSelector, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailThreads request with HTTP info returned
         * @return ApiResponse&lt;PageEmailThreadProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailThreadProjection> executeWithHttpInfo() throws ApiException {
            return getEmailThreadsWithHttpInfo(htmlSelector, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getEmailThreads request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailThreadProjection> _callback) throws ApiException {
            return getEmailThreadsAsync(htmlSelector, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * Return email threads in paginated form
     * Return email message chains built from Message-ID, In-Reply-To, and References header.
     * @return APIgetEmailThreadsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailThreadsRequest getEmailThreads() {
        return new APIgetEmailThreadsRequest();
    }
    private okhttp3.Call getEmailsOffsetPaginatedCall(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/offset-paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (favourited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourited", favourited));
        }

        if (syncConnectors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncConnectors", syncConnectors));
        }

        if (plusAddressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plusAddressId", plusAddressId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailsOffsetPaginatedValidateBeforeCall(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback _callback) throws ApiException {
        return getEmailsOffsetPaginatedCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId, _callback);

    }


    private ApiResponse<PageEmailProjection> getEmailsOffsetPaginatedWithHttpInfo(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId) throws ApiException {
        okhttp3.Call localVarCall = getEmailsOffsetPaginatedValidateBeforeCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId, null);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailsOffsetPaginatedAsync(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback<PageEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailsOffsetPaginatedValidateBeforeCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId, _callback);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailsOffsetPaginatedRequest {
        @javax.annotation.Nullable
        private List<UUID> inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Boolean unreadOnly;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private Boolean favourited;
        @javax.annotation.Nullable
        private Boolean syncConnectors;
        @javax.annotation.Nullable
        private UUID plusAddressId;

        private APIgetEmailsOffsetPaginatedRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest inboxId(@javax.annotation.Nullable List<UUID> inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in email list pagination (optional, default to 0)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter emails received after given date time (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter emails received before given date time (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set favourited
         * @param favourited Optional filter emails that are favourited (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest favourited(@javax.annotation.Nullable Boolean favourited) {
            this.favourited = favourited;
            return this;
        }

        /**
         * Set syncConnectors
         * @param syncConnectors Sync connectors (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest syncConnectors(@javax.annotation.Nullable Boolean syncConnectors) {
            this.syncConnectors = syncConnectors;
            return this;
        }

        /**
         * Set plusAddressId
         * @param plusAddressId Optional plus address ID filter (optional)
         * @return APIgetEmailsOffsetPaginatedRequest
         */
        public APIgetEmailsOffsetPaginatedRequest plusAddressId(@javax.annotation.Nullable UUID plusAddressId) {
            this.plusAddressId = plusAddressId;
            return this;
        }

        /**
         * Build call for getEmailsOffsetPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailsOffsetPaginatedCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId, _callback);
        }

        /**
         * Execute getEmailsOffsetPaginated request
         * @return PageEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailProjection execute() throws ApiException {
            ApiResponse<PageEmailProjection> localVarResp = getEmailsOffsetPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailsOffsetPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailProjection> executeWithHttpInfo() throws ApiException {
            return getEmailsOffsetPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId);
        }

        /**
         * Execute getEmailsOffsetPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailProjection> _callback) throws ApiException {
            return getEmailsOffsetPaginatedAsync(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, favourited, syncConnectors, plusAddressId, _callback);
        }
    }

    /**
     * Get all emails in all inboxes in paginated form. Email API list all.
     * By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     * @return APIgetEmailsOffsetPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailsOffsetPaginatedRequest getEmailsOffsetPaginated() {
        return new APIgetEmailsOffsetPaginatedRequest();
    }
    private okhttp3.Call getEmailsPaginatedCall(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, @javax.annotation.Nullable Boolean favourited, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (syncConnectors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncConnectors", syncConnectors));
        }

        if (plusAddressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plusAddressId", plusAddressId));
        }

        if (favourited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourited", favourited));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailsPaginatedValidateBeforeCall(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, @javax.annotation.Nullable Boolean favourited, final ApiCallback _callback) throws ApiException {
        return getEmailsPaginatedCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited, _callback);

    }


    private ApiResponse<PageEmailProjection> getEmailsPaginatedWithHttpInfo(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, @javax.annotation.Nullable Boolean favourited) throws ApiException {
        okhttp3.Call localVarCall = getEmailsPaginatedValidateBeforeCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited, null);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailsPaginatedAsync(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable UUID plusAddressId, @javax.annotation.Nullable Boolean favourited, final ApiCallback<PageEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailsPaginatedValidateBeforeCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited, _callback);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailsPaginatedRequest {
        @javax.annotation.Nullable
        private List<UUID> inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Boolean unreadOnly;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private Boolean syncConnectors;
        @javax.annotation.Nullable
        private UUID plusAddressId;
        @javax.annotation.Nullable
        private Boolean favourited;

        private APIgetEmailsPaginatedRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest inboxId(@javax.annotation.Nullable List<UUID> inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in email list pagination (optional, default to 0)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter. Searches email recipients, sender, subject, email address and ID. Does not search email body (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter emails received after given date time. If unset will use time 24hours prior to now. (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter emails received before given date time (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set syncConnectors
         * @param syncConnectors Sync connectors (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest syncConnectors(@javax.annotation.Nullable Boolean syncConnectors) {
            this.syncConnectors = syncConnectors;
            return this;
        }

        /**
         * Set plusAddressId
         * @param plusAddressId Optional plus address ID filter (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest plusAddressId(@javax.annotation.Nullable UUID plusAddressId) {
            this.plusAddressId = plusAddressId;
            return this;
        }

        /**
         * Set favourited
         * @param favourited Optional filter emails that are favourited (optional)
         * @return APIgetEmailsPaginatedRequest
         */
        public APIgetEmailsPaginatedRequest favourited(@javax.annotation.Nullable Boolean favourited) {
            this.favourited = favourited;
            return this;
        }

        /**
         * Build call for getEmailsPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailsPaginatedCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited, _callback);
        }

        /**
         * Execute getEmailsPaginated request
         * @return PageEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailProjection execute() throws ApiException {
            ApiResponse<PageEmailProjection> localVarResp = getEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited);
            return localVarResp.getData();
        }

        /**
         * Execute getEmailsPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailProjection> executeWithHttpInfo() throws ApiException {
            return getEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited);
        }

        /**
         * Execute getEmailsPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailProjection> _callback) throws ApiException {
            return getEmailsPaginatedAsync(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, plusAddressId, favourited, _callback);
        }
    }

    /**
     * Get all emails in all inboxes in paginated form. Email API list all.
     * By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     * @return APIgetEmailsPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailsPaginatedRequest getEmailsPaginated() {
        return new APIgetEmailsPaginatedRequest();
    }
    private okhttp3.Call getGravatarUrlForEmailAddressCall(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable String size, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/gravatarFor";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getGravatarUrlForEmailAddressValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable String size, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getGravatarUrlForEmailAddress(Async)");
        }

        return getGravatarUrlForEmailAddressCall(emailAddress, size, _callback);

    }


    private ApiResponse<GravatarUrl> getGravatarUrlForEmailAddressWithHttpInfo(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable String size) throws ApiException {
        okhttp3.Call localVarCall = getGravatarUrlForEmailAddressValidateBeforeCall(emailAddress, size, null);
        Type localVarReturnType = new TypeToken<GravatarUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getGravatarUrlForEmailAddressAsync(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable String size, final ApiCallback<GravatarUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = getGravatarUrlForEmailAddressValidateBeforeCall(emailAddress, size, _callback);
        Type localVarReturnType = new TypeToken<GravatarUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetGravatarUrlForEmailAddressRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;
        @javax.annotation.Nullable
        private String size;

        private APIgetGravatarUrlForEmailAddressRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Set size
         * @param size  (optional)
         * @return APIgetGravatarUrlForEmailAddressRequest
         */
        public APIgetGravatarUrlForEmailAddressRequest size(@javax.annotation.Nullable String size) {
            this.size = size;
            return this;
        }

        /**
         * Build call for getGravatarUrlForEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getGravatarUrlForEmailAddressCall(emailAddress, size, _callback);
        }

        /**
         * Execute getGravatarUrlForEmailAddress request
         * @return GravatarUrl
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public GravatarUrl execute() throws ApiException {
            ApiResponse<GravatarUrl> localVarResp = getGravatarUrlForEmailAddressWithHttpInfo(emailAddress, size);
            return localVarResp.getData();
        }

        /**
         * Execute getGravatarUrlForEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;GravatarUrl&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<GravatarUrl> executeWithHttpInfo() throws ApiException {
            return getGravatarUrlForEmailAddressWithHttpInfo(emailAddress, size);
        }

        /**
         * Execute getGravatarUrlForEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<GravatarUrl> _callback) throws ApiException {
            return getGravatarUrlForEmailAddressAsync(emailAddress, size, _callback);
        }
    }

    /**
     * 
     * Get gravatar url for email address
     * @param emailAddress  (required)
     * @return APIgetGravatarUrlForEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetGravatarUrlForEmailAddressRequest getGravatarUrlForEmailAddress(@javax.annotation.Nonnull String emailAddress) {
        return new APIgetGravatarUrlForEmailAddressRequest(emailAddress);
    }
    private okhttp3.Call getLatestEmailCall(@javax.annotation.Nullable List<UUID> inboxIds, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "inboxIds", inboxIds));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestEmailValidateBeforeCall(@javax.annotation.Nullable List<UUID> inboxIds, final ApiCallback _callback) throws ApiException {
        return getLatestEmailCall(inboxIds, _callback);

    }


    private ApiResponse<Email> getLatestEmailWithHttpInfo(@javax.annotation.Nullable List<UUID> inboxIds) throws ApiException {
        okhttp3.Call localVarCall = getLatestEmailValidateBeforeCall(inboxIds, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLatestEmailAsync(@javax.annotation.Nullable List<UUID> inboxIds, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestEmailValidateBeforeCall(inboxIds, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLatestEmailRequest {
        @javax.annotation.Nullable
        private List<UUID> inboxIds;

        private APIgetLatestEmailRequest() {
        }

        /**
         * Set inboxIds
         * @param inboxIds Optional set of inboxes to filter by. Only get the latest email from these inbox IDs. If not provided will search across all inboxes (optional)
         * @return APIgetLatestEmailRequest
         */
        public APIgetLatestEmailRequest inboxIds(@javax.annotation.Nullable List<UUID> inboxIds) {
            this.inboxIds = inboxIds;
            return this;
        }

        /**
         * Build call for getLatestEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestEmailCall(inboxIds, _callback);
        }

        /**
         * Execute getLatestEmail request
         * @return Email
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Email execute() throws ApiException {
            ApiResponse<Email> localVarResp = getLatestEmailWithHttpInfo(inboxIds);
            return localVarResp.getData();
        }

        /**
         * Execute getLatestEmail request with HTTP info returned
         * @return ApiResponse&lt;Email&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Email> executeWithHttpInfo() throws ApiException {
            return getLatestEmailWithHttpInfo(inboxIds);
        }

        /**
         * Execute getLatestEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Email> _callback) throws ApiException {
            return getLatestEmailAsync(inboxIds, _callback);
        }
    }

    /**
     * Get latest email in all inboxes. Most recently received.
     * Get the newest email in all inboxes or in a passed set of inbox IDs
     * @return APIgetLatestEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLatestEmailRequest getLatestEmail() {
        return new APIgetLatestEmailRequest();
    }
    private okhttp3.Call getLatestEmailInInbox1Call(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/latestIn";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestEmailInInbox1ValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getLatestEmailInInbox1(Async)");
        }

        return getLatestEmailInInbox1Call(inboxId, _callback);

    }


    private ApiResponse<Email> getLatestEmailInInbox1WithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getLatestEmailInInbox1ValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLatestEmailInInbox1Async(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestEmailInInbox1ValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLatestEmailInInbox1Request {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetLatestEmailInInbox1Request(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getLatestEmailInInbox1
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestEmailInInbox1Call(inboxId, _callback);
        }

        /**
         * Execute getLatestEmailInInbox1 request
         * @return Email
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Email execute() throws ApiException {
            ApiResponse<Email> localVarResp = getLatestEmailInInbox1WithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getLatestEmailInInbox1 request with HTTP info returned
         * @return ApiResponse&lt;Email&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Email> executeWithHttpInfo() throws ApiException {
            return getLatestEmailInInbox1WithHttpInfo(inboxId);
        }

        /**
         * Execute getLatestEmailInInbox1 request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Email> _callback) throws ApiException {
            return getLatestEmailInInbox1Async(inboxId, _callback);
        }
    }

    /**
     * Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
     * Get the newest email in all inboxes or in a passed set of inbox IDs
     * @param inboxId ID of the inbox you want to get the latest email from (required)
     * @return APIgetLatestEmailInInbox1Request
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLatestEmailInInbox1Request getLatestEmailInInbox1(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetLatestEmailInInbox1Request(inboxId);
    }
    private okhttp3.Call getOrganizationEmailsPaginatedCall(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "inboxId", inboxId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (syncConnectors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncConnectors", syncConnectors));
        }

        if (favourited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourited", favourited));
        }

        if (plusAddressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plusAddressId", plusAddressId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationEmailsPaginatedValidateBeforeCall(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback _callback) throws ApiException {
        return getOrganizationEmailsPaginatedCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId, _callback);

    }


    private ApiResponse<PageEmailProjection> getOrganizationEmailsPaginatedWithHttpInfo(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationEmailsPaginatedValidateBeforeCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId, null);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationEmailsPaginatedAsync(@javax.annotation.Nullable List<UUID> inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback<PageEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationEmailsPaginatedValidateBeforeCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId, _callback);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrganizationEmailsPaginatedRequest {
        @javax.annotation.Nullable
        private List<UUID> inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Boolean unreadOnly;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private Boolean syncConnectors;
        @javax.annotation.Nullable
        private Boolean favourited;
        @javax.annotation.Nullable
        private UUID plusAddressId;

        private APIgetOrganizationEmailsPaginatedRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ids to filter by. Can be repeated. By default will use all inboxes belonging to your account. (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest inboxId(@javax.annotation.Nullable List<UUID> inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in email list pagination (optional, default to 0)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in email list pagination. Maximum size is 100. Use page index and sort to page through larger results (optional, default to 20)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly Optional filter for unread emails only. All emails are considered unread until they are viewed in the dashboard or requested directly (optional, default to false)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter search filter for emails. (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter emails received after given date time. If unset will use time 24hours prior to now. (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter emails received before given date time (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set syncConnectors
         * @param syncConnectors Sync connectors (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest syncConnectors(@javax.annotation.Nullable Boolean syncConnectors) {
            this.syncConnectors = syncConnectors;
            return this;
        }

        /**
         * Set favourited
         * @param favourited Search only favorited emails (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest favourited(@javax.annotation.Nullable Boolean favourited) {
            this.favourited = favourited;
            return this;
        }

        /**
         * Set plusAddressId
         * @param plusAddressId Optional plus address ID filter (optional)
         * @return APIgetOrganizationEmailsPaginatedRequest
         */
        public APIgetOrganizationEmailsPaginatedRequest plusAddressId(@javax.annotation.Nullable UUID plusAddressId) {
            this.plusAddressId = plusAddressId;
            return this;
        }

        /**
         * Build call for getOrganizationEmailsPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationEmailsPaginatedCall(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId, _callback);
        }

        /**
         * Execute getOrganizationEmailsPaginated request
         * @return PageEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailProjection execute() throws ApiException {
            ApiResponse<PageEmailProjection> localVarResp = getOrganizationEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId);
            return localVarResp.getData();
        }

        /**
         * Execute getOrganizationEmailsPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailProjection> executeWithHttpInfo() throws ApiException {
            return getOrganizationEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId);
        }

        /**
         * Execute getOrganizationEmailsPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailProjection> _callback) throws ApiException {
            return getOrganizationEmailsPaginatedAsync(inboxId, page, size, sort, unreadOnly, searchFilter, since, before, syncConnectors, favourited, plusAddressId, _callback);
        }
    }

    /**
     * Get all organization emails. List team or shared test email accounts
     * By default returns all emails across all team inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     * @return APIgetOrganizationEmailsPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOrganizationEmailsPaginatedRequest getOrganizationEmailsPaginated() {
        return new APIgetOrganizationEmailsPaginatedRequest();
    }
    private okhttp3.Call getRawEmailContentsCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/raw"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawEmailContentsValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getRawEmailContents(Async)");
        }

        return getRawEmailContentsCall(emailId, _callback);

    }


    private ApiResponse<Void> getRawEmailContentsWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getRawEmailContentsValidateBeforeCall(emailId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call getRawEmailContentsAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawEmailContentsValidateBeforeCall(emailId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIgetRawEmailContentsRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetRawEmailContentsRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getRawEmailContents
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRawEmailContentsCall(emailId, _callback);
        }

        /**
         * Execute getRawEmailContents request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            getRawEmailContentsWithHttpInfo(emailId);
        }

        /**
         * Execute getRawEmailContents request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return getRawEmailContentsWithHttpInfo(emailId);
        }

        /**
         * Execute getRawEmailContents request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return getRawEmailContentsAsync(emailId, _callback);
        }
    }

    /**
     * Get raw email string. Returns unparsed raw SMTP message with headers and body.
     * Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
     * @param emailId ID of email (required)
     * @return APIgetRawEmailContentsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRawEmailContentsRequest getRawEmailContents(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetRawEmailContentsRequest(emailId);
    }
    private okhttp3.Call getRawEmailJsonCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/raw/json"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRawEmailJsonValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling getRawEmailJson(Async)");
        }

        return getRawEmailJsonCall(emailId, _callback);

    }


    private ApiResponse<RawEmailJson> getRawEmailJsonWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = getRawEmailJsonValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<RawEmailJson>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRawEmailJsonAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<RawEmailJson> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRawEmailJsonValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<RawEmailJson>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRawEmailJsonRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIgetRawEmailJsonRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for getRawEmailJson
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRawEmailJsonCall(emailId, _callback);
        }

        /**
         * Execute getRawEmailJson request
         * @return RawEmailJson
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RawEmailJson execute() throws ApiException {
            ApiResponse<RawEmailJson> localVarResp = getRawEmailJsonWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute getRawEmailJson request with HTTP info returned
         * @return ApiResponse&lt;RawEmailJson&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RawEmailJson> executeWithHttpInfo() throws ApiException {
            return getRawEmailJsonWithHttpInfo(emailId);
        }

        /**
         * Execute getRawEmailJson request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RawEmailJson> _callback) throws ApiException {
            return getRawEmailJsonAsync(emailId, _callback);
        }
    }

    /**
     * Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
     * Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
     * @param emailId ID of email (required)
     * @return APIgetRawEmailJsonRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRawEmailJsonRequest getRawEmailJson(@javax.annotation.Nonnull UUID emailId) {
        return new APIgetRawEmailJsonRequest(emailId);
    }
    private okhttp3.Call getUnreadEmailCountCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/unreadCount";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUnreadEmailCountValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getUnreadEmailCountCall(inboxId, _callback);

    }


    private ApiResponse<UnreadCount> getUnreadEmailCountWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getUnreadEmailCountValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<UnreadCount>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getUnreadEmailCountAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<UnreadCount> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUnreadEmailCountValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<UnreadCount>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetUnreadEmailCountRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetUnreadEmailCountRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID filter (optional)
         * @return APIgetUnreadEmailCountRequest
         */
        public APIgetUnreadEmailCountRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getUnreadEmailCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getUnreadEmailCountCall(inboxId, _callback);
        }

        /**
         * Execute getUnreadEmailCount request
         * @return UnreadCount
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public UnreadCount execute() throws ApiException {
            ApiResponse<UnreadCount> localVarResp = getUnreadEmailCountWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getUnreadEmailCount request with HTTP info returned
         * @return ApiResponse&lt;UnreadCount&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UnreadCount> executeWithHttpInfo() throws ApiException {
            return getUnreadEmailCountWithHttpInfo(inboxId);
        }

        /**
         * Execute getUnreadEmailCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UnreadCount> _callback) throws ApiException {
            return getUnreadEmailCountAsync(inboxId, _callback);
        }
    }

    /**
     * Get unread email count
     * Get number of emails unread. Unread means has not been viewed in dashboard or returned in an email API response
     * @return APIgetUnreadEmailCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetUnreadEmailCountRequest getUnreadEmailCount() {
        return new APIgetUnreadEmailCountRequest();
    }
    private okhttp3.Call markAllAsReadCall(@javax.annotation.Nullable Boolean read, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/read";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (read != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read", read));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAllAsReadValidateBeforeCall(@javax.annotation.Nullable Boolean read, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return markAllAsReadCall(read, inboxId, _callback);

    }


    private ApiResponse<Void> markAllAsReadWithHttpInfo(@javax.annotation.Nullable Boolean read, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = markAllAsReadValidateBeforeCall(read, inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call markAllAsReadAsync(@javax.annotation.Nullable Boolean read, @javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAllAsReadValidateBeforeCall(read, inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APImarkAllAsReadRequest {
        @javax.annotation.Nullable
        private Boolean read;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APImarkAllAsReadRequest() {
        }

        /**
         * Set read
         * @param read What value to assign to email read property. Default true. (optional, default to true)
         * @return APImarkAllAsReadRequest
         */
        public APImarkAllAsReadRequest read(@javax.annotation.Nullable Boolean read) {
            this.read = read;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox ID filter (optional)
         * @return APImarkAllAsReadRequest
         */
        public APImarkAllAsReadRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for markAllAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAllAsReadCall(read, inboxId, _callback);
        }

        /**
         * Execute markAllAsRead request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            markAllAsReadWithHttpInfo(read, inboxId);
        }

        /**
         * Execute markAllAsRead request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return markAllAsReadWithHttpInfo(read, inboxId);
        }

        /**
         * Execute markAllAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return markAllAsReadAsync(read, inboxId, _callback);
        }
    }

    /**
     * Mark all emails as read or unread
     * Marks all emails as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
     * @return APImarkAllAsReadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APImarkAllAsReadRequest markAllAsRead() {
        return new APImarkAllAsReadRequest();
    }
    private okhttp3.Call markAsReadCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean read, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/read"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (read != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("read", read));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call markAsReadValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean read, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling markAsRead(Async)");
        }

        return markAsReadCall(emailId, read, _callback);

    }


    private ApiResponse<EmailPreview> markAsReadWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean read) throws ApiException {
        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(emailId, read, null);
        Type localVarReturnType = new TypeToken<EmailPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call markAsReadAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nullable Boolean read, final ApiCallback<EmailPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = markAsReadValidateBeforeCall(emailId, read, _callback);
        Type localVarReturnType = new TypeToken<EmailPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APImarkAsReadRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nullable
        private Boolean read;

        private APImarkAsReadRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Set read
         * @param read What value to assign to email read property. Default true. (optional, default to true)
         * @return APImarkAsReadRequest
         */
        public APImarkAsReadRequest read(@javax.annotation.Nullable Boolean read) {
            this.read = read;
            return this;
        }

        /**
         * Build call for markAsRead
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return markAsReadCall(emailId, read, _callback);
        }

        /**
         * Execute markAsRead request
         * @return EmailPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailPreview execute() throws ApiException {
            ApiResponse<EmailPreview> localVarResp = markAsReadWithHttpInfo(emailId, read);
            return localVarResp.getData();
        }

        /**
         * Execute markAsRead request with HTTP info returned
         * @return ApiResponse&lt;EmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailPreview> executeWithHttpInfo() throws ApiException {
            return markAsReadWithHttpInfo(emailId, read);
        }

        /**
         * Execute markAsRead request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailPreview> _callback) throws ApiException {
            return markAsReadAsync(emailId, read, _callback);
        }
    }

    /**
     * Mark an email as read or unread
     * Marks an email as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
     * @param emailId  (required)
     * @return APImarkAsReadRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APImarkAsReadRequest markAsRead(@javax.annotation.Nonnull UUID emailId) {
        return new APImarkAsReadRequest(emailId);
    }
    private okhttp3.Call replyToEmailCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToEmailOptions replyToEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = replyToEmailOptions;

        // create path and map variables
        String localVarPath = "/emails/{emailId}"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call replyToEmailValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToEmailOptions replyToEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling replyToEmail(Async)");
        }

        // verify the required parameter 'replyToEmailOptions' is set
        if (replyToEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'replyToEmailOptions' when calling replyToEmail(Async)");
        }

        return replyToEmailCall(emailId, replyToEmailOptions, _callback);

    }


    private ApiResponse<SentEmailDto> replyToEmailWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToEmailOptions replyToEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = replyToEmailValidateBeforeCall(emailId, replyToEmailOptions, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call replyToEmailAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToEmailOptions replyToEmailOptions, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = replyToEmailValidateBeforeCall(emailId, replyToEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIreplyToEmailRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final ReplyToEmailOptions replyToEmailOptions;

        private APIreplyToEmailRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToEmailOptions replyToEmailOptions) {
            this.emailId = emailId;
            this.replyToEmailOptions = replyToEmailOptions;
        }

        /**
         * Build call for replyToEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return replyToEmailCall(emailId, replyToEmailOptions, _callback);
        }

        /**
         * Execute replyToEmail request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = replyToEmailWithHttpInfo(emailId, replyToEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute replyToEmail request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return replyToEmailWithHttpInfo(emailId, replyToEmailOptions);
        }

        /**
         * Execute replyToEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return replyToEmailAsync(emailId, replyToEmailOptions, _callback);
        }
    }

    /**
     * Reply to an email
     * Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
     * @param emailId ID of the email that should be replied to (required)
     * @param replyToEmailOptions  (required)
     * @return APIreplyToEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIreplyToEmailRequest replyToEmail(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull ReplyToEmailOptions replyToEmailOptions) {
        return new APIreplyToEmailRequest(emailId, replyToEmailOptions);
    }
    private okhttp3.Call searchEmailsCall(@javax.annotation.Nonnull SearchEmailsOptions searchEmailsOptions, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchEmailsOptions;

        // create path and map variables
        String localVarPath = "/emails/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (syncConnectors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncConnectors", syncConnectors));
        }

        if (favourited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourited", favourited));
        }

        if (plusAddressId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plusAddressId", plusAddressId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchEmailsValidateBeforeCall(@javax.annotation.Nonnull SearchEmailsOptions searchEmailsOptions, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchEmailsOptions' is set
        if (searchEmailsOptions == null) {
            throw new ApiException("Missing the required parameter 'searchEmailsOptions' when calling searchEmails(Async)");
        }

        return searchEmailsCall(searchEmailsOptions, syncConnectors, favourited, plusAddressId, _callback);

    }


    private ApiResponse<PageEmailProjection> searchEmailsWithHttpInfo(@javax.annotation.Nonnull SearchEmailsOptions searchEmailsOptions, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId) throws ApiException {
        okhttp3.Call localVarCall = searchEmailsValidateBeforeCall(searchEmailsOptions, syncConnectors, favourited, plusAddressId, null);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchEmailsAsync(@javax.annotation.Nonnull SearchEmailsOptions searchEmailsOptions, @javax.annotation.Nullable Boolean syncConnectors, @javax.annotation.Nullable Boolean favourited, @javax.annotation.Nullable UUID plusAddressId, final ApiCallback<PageEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchEmailsValidateBeforeCall(searchEmailsOptions, syncConnectors, favourited, plusAddressId, _callback);
        Type localVarReturnType = new TypeToken<PageEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsearchEmailsRequest {
        @javax.annotation.Nonnull
        private final SearchEmailsOptions searchEmailsOptions;
        @javax.annotation.Nullable
        private Boolean syncConnectors;
        @javax.annotation.Nullable
        private Boolean favourited;
        @javax.annotation.Nullable
        private UUID plusAddressId;

        private APIsearchEmailsRequest(@javax.annotation.Nonnull SearchEmailsOptions searchEmailsOptions) {
            this.searchEmailsOptions = searchEmailsOptions;
        }

        /**
         * Set syncConnectors
         * @param syncConnectors Sync connectors (optional)
         * @return APIsearchEmailsRequest
         */
        public APIsearchEmailsRequest syncConnectors(@javax.annotation.Nullable Boolean syncConnectors) {
            this.syncConnectors = syncConnectors;
            return this;
        }

        /**
         * Set favourited
         * @param favourited Search only favourited emails (optional)
         * @return APIsearchEmailsRequest
         */
        public APIsearchEmailsRequest favourited(@javax.annotation.Nullable Boolean favourited) {
            this.favourited = favourited;
            return this;
        }

        /**
         * Set plusAddressId
         * @param plusAddressId Optional plus address ID filter (optional)
         * @return APIsearchEmailsRequest
         */
        public APIsearchEmailsRequest plusAddressId(@javax.annotation.Nullable UUID plusAddressId) {
            this.plusAddressId = plusAddressId;
            return this;
        }

        /**
         * Build call for searchEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchEmailsCall(searchEmailsOptions, syncConnectors, favourited, plusAddressId, _callback);
        }

        /**
         * Execute searchEmails request
         * @return PageEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailProjection execute() throws ApiException {
            ApiResponse<PageEmailProjection> localVarResp = searchEmailsWithHttpInfo(searchEmailsOptions, syncConnectors, favourited, plusAddressId);
            return localVarResp.getData();
        }

        /**
         * Execute searchEmails request with HTTP info returned
         * @return ApiResponse&lt;PageEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailProjection> executeWithHttpInfo() throws ApiException {
            return searchEmailsWithHttpInfo(searchEmailsOptions, syncConnectors, favourited, plusAddressId);
        }

        /**
         * Execute searchEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailProjection> _callback) throws ApiException {
            return searchEmailsAsync(searchEmailsOptions, syncConnectors, favourited, plusAddressId, _callback);
        }
    }

    /**
     * Get all emails by search criteria. Return in paginated form.
     * Search emails by given criteria return matches in paginated format. Searches against email recipients, sender, subject, email address and ID. Does not search email body
     * @param searchEmailsOptions  (required)
     * @return APIsearchEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsearchEmailsRequest searchEmails(@javax.annotation.Nonnull SearchEmailsOptions searchEmailsOptions) {
        return new APIsearchEmailsRequest(searchEmailsOptions);
    }
    private okhttp3.Call sendEmailSourceOptionalCall(@javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean virtualSend, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/emails";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (useDomainPool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDomainPool", useDomainPool));
        }

        if (virtualSend != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtualSend", virtualSend));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailSourceOptionalValidateBeforeCall(@javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean virtualSend, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendEmailSourceOptional(Async)");
        }

        return sendEmailSourceOptionalCall(sendEmailOptions, inboxId, useDomainPool, virtualSend, _callback);

    }


    private ApiResponse<Void> sendEmailSourceOptionalWithHttpInfo(@javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean virtualSend) throws ApiException {
        okhttp3.Call localVarCall = sendEmailSourceOptionalValidateBeforeCall(sendEmailOptions, inboxId, useDomainPool, virtualSend, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailSourceOptionalAsync(@javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean virtualSend, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailSourceOptionalValidateBeforeCall(sendEmailOptions, inboxId, useDomainPool, virtualSend, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsendEmailSourceOptionalRequest {
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private Boolean useDomainPool;
        @javax.annotation.Nullable
        private Boolean virtualSend;

        private APIsendEmailSourceOptionalRequest(@javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Set inboxId
         * @param inboxId ID of the inbox you want to send the email from (optional)
         * @return APIsendEmailSourceOptionalRequest
         */
        public APIsendEmailSourceOptionalRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set useDomainPool
         * @param useDomainPool Use domain pool. Optionally create inbox to send from using the mailslurp domain pool. (optional)
         * @return APIsendEmailSourceOptionalRequest
         */
        public APIsendEmailSourceOptionalRequest useDomainPool(@javax.annotation.Nullable Boolean useDomainPool) {
            this.useDomainPool = useDomainPool;
            return this;
        }

        /**
         * Set virtualSend
         * @param virtualSend Optionally create inbox to send from that is a virtual inbox and won&#39;t send to external addresses (optional)
         * @return APIsendEmailSourceOptionalRequest
         */
        public APIsendEmailSourceOptionalRequest virtualSend(@javax.annotation.Nullable Boolean virtualSend) {
            this.virtualSend = virtualSend;
            return this;
        }

        /**
         * Build call for sendEmailSourceOptional
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailSourceOptionalCall(sendEmailOptions, inboxId, useDomainPool, virtualSend, _callback);
        }

        /**
         * Execute sendEmailSourceOptional request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendEmailSourceOptionalWithHttpInfo(sendEmailOptions, inboxId, useDomainPool, virtualSend);
        }

        /**
         * Execute sendEmailSourceOptional request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendEmailSourceOptionalWithHttpInfo(sendEmailOptions, inboxId, useDomainPool, virtualSend);
        }

        /**
         * Execute sendEmailSourceOptional request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendEmailSourceOptionalAsync(sendEmailOptions, inboxId, useDomainPool, virtualSend, _callback);
        }
    }

    /**
     * Send email
     * Alias for &#x60;InboxController.sendEmail&#x60; method - see original method for full details. Sends an email from a given inbox that you have created. If no inbox is supplied a random inbox will be created for you and used to send the email.
     * @param sendEmailOptions  (required)
     * @return APIsendEmailSourceOptionalRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailSourceOptionalRequest sendEmailSourceOptional(@javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendEmailSourceOptionalRequest(sendEmailOptions);
    }
    private okhttp3.Call setEmailFavouritedCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull Boolean favourited, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/favourite"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (favourited != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourited", favourited));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setEmailFavouritedValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull Boolean favourited, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling setEmailFavourited(Async)");
        }

        // verify the required parameter 'favourited' is set
        if (favourited == null) {
            throw new ApiException("Missing the required parameter 'favourited' when calling setEmailFavourited(Async)");
        }

        return setEmailFavouritedCall(emailId, favourited, _callback);

    }


    private ApiResponse<Void> setEmailFavouritedWithHttpInfo(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull Boolean favourited) throws ApiException {
        okhttp3.Call localVarCall = setEmailFavouritedValidateBeforeCall(emailId, favourited, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call setEmailFavouritedAsync(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull Boolean favourited, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = setEmailFavouritedValidateBeforeCall(emailId, favourited, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsetEmailFavouritedRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;
        @javax.annotation.Nonnull
        private final Boolean favourited;

        private APIsetEmailFavouritedRequest(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull Boolean favourited) {
            this.emailId = emailId;
            this.favourited = favourited;
        }

        /**
         * Build call for setEmailFavourited
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setEmailFavouritedCall(emailId, favourited, _callback);
        }

        /**
         * Execute setEmailFavourited request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            setEmailFavouritedWithHttpInfo(emailId, favourited);
        }

        /**
         * Execute setEmailFavourited request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return setEmailFavouritedWithHttpInfo(emailId, favourited);
        }

        /**
         * Execute setEmailFavourited request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return setEmailFavouritedAsync(emailId, favourited, _callback);
        }
    }

    /**
     * Set email favourited state
     * Set and return new favorite state for an email
     * @param emailId ID of email to set favourite state (required)
     * @param favourited  (required)
     * @return APIsetEmailFavouritedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIsetEmailFavouritedRequest setEmailFavourited(@javax.annotation.Nonnull UUID emailId, @javax.annotation.Nonnull Boolean favourited) {
        return new APIsetEmailFavouritedRequest(emailId, favourited);
    }
    private okhttp3.Call validateEmailCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/emails/{emailId}/validate"
            .replace("{" + "emailId" + "}", localVarApiClient.escapeString(emailId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateEmailValidateBeforeCall(@javax.annotation.Nonnull UUID emailId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailId' is set
        if (emailId == null) {
            throw new ApiException("Missing the required parameter 'emailId' when calling validateEmail(Async)");
        }

        return validateEmailCall(emailId, _callback);

    }


    private ApiResponse<ValidationDto> validateEmailWithHttpInfo(@javax.annotation.Nonnull UUID emailId) throws ApiException {
        okhttp3.Call localVarCall = validateEmailValidateBeforeCall(emailId, null);
        Type localVarReturnType = new TypeToken<ValidationDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call validateEmailAsync(@javax.annotation.Nonnull UUID emailId, final ApiCallback<ValidationDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateEmailValidateBeforeCall(emailId, _callback);
        Type localVarReturnType = new TypeToken<ValidationDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIvalidateEmailRequest {
        @javax.annotation.Nonnull
        private final UUID emailId;

        private APIvalidateEmailRequest(@javax.annotation.Nonnull UUID emailId) {
            this.emailId = emailId;
        }

        /**
         * Build call for validateEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return validateEmailCall(emailId, _callback);
        }

        /**
         * Execute validateEmail request
         * @return ValidationDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ValidationDto execute() throws ApiException {
            ApiResponse<ValidationDto> localVarResp = validateEmailWithHttpInfo(emailId);
            return localVarResp.getData();
        }

        /**
         * Execute validateEmail request with HTTP info returned
         * @return ApiResponse&lt;ValidationDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ValidationDto> executeWithHttpInfo() throws ApiException {
            return validateEmailWithHttpInfo(emailId);
        }

        /**
         * Execute validateEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ValidationDto> _callback) throws ApiException {
            return validateEmailAsync(emailId, _callback);
        }
    }

    /**
     * Validate email HTML contents
     * Validate the HTML content of email if HTML is found. Considered valid if no HTML is present.
     * @param emailId ID of email (required)
     * @return APIvalidateEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIvalidateEmailRequest validateEmail(@javax.annotation.Nonnull UUID emailId) {
        return new APIvalidateEmailRequest(emailId);
    }
}
