/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CountDto;
import com.mailslurp.models.CreateInboxDto;
import com.mailslurp.models.CreateInboxRulesetOptions;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailAvailableResult;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.FlushExpiredInboxesResult;
import com.mailslurp.models.ImapAccessDetails;
import com.mailslurp.models.ImapSmtpAccessDetails;
import com.mailslurp.models.ImapSmtpAccessServers;
import com.mailslurp.models.InboxByEmailAddressResult;
import com.mailslurp.models.InboxByNameResult;
import com.mailslurp.models.InboxDto;
import com.mailslurp.models.InboxExistsDto;
import com.mailslurp.models.InboxIdsResult;
import com.mailslurp.models.InboxRulesetDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageDeliveryStatus;
import com.mailslurp.models.PageEmailPreview;
import com.mailslurp.models.PageInboxProjection;
import com.mailslurp.models.PageInboxRulesetDto;
import com.mailslurp.models.PageInboxTags;
import com.mailslurp.models.PageOrganizationInboxProjection;
import com.mailslurp.models.PagePlusAddressProjection;
import com.mailslurp.models.PageScheduledJobs;
import com.mailslurp.models.PageSentEmailProjection;
import com.mailslurp.models.PageTrackingPixelProjection;
import com.mailslurp.models.PlusAddressDto;
import com.mailslurp.models.ScheduledJobDto;
import com.mailslurp.models.SearchInboxesOptions;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SendSMTPEnvelopeOptions;
import com.mailslurp.models.SentEmailDto;
import com.mailslurp.models.SetInboxFavouritedOptions;
import com.mailslurp.models.SmtpAccessDetails;
import java.util.UUID;
import com.mailslurp.models.UpdateImapAccessOptions;
import com.mailslurp.models.UpdateInboxOptions;
import com.mailslurp.models.UpdateSmtpAccessOptions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboxControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public InboxControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboxControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call cancelScheduledJobCall(@javax.annotation.Nonnull UUID jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/scheduled-jobs/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelScheduledJobValidateBeforeCall(@javax.annotation.Nonnull UUID jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling cancelScheduledJob(Async)");
        }

        return cancelScheduledJobCall(jobId, _callback);

    }


    private ApiResponse<ScheduledJobDto> cancelScheduledJobWithHttpInfo(@javax.annotation.Nonnull UUID jobId) throws ApiException {
        okhttp3.Call localVarCall = cancelScheduledJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<ScheduledJobDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call cancelScheduledJobAsync(@javax.annotation.Nonnull UUID jobId, final ApiCallback<ScheduledJobDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelScheduledJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<ScheduledJobDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcancelScheduledJobRequest {
        @javax.annotation.Nonnull
        private final UUID jobId;

        private APIcancelScheduledJobRequest(@javax.annotation.Nonnull UUID jobId) {
            this.jobId = jobId;
        }

        /**
         * Build call for cancelScheduledJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return cancelScheduledJobCall(jobId, _callback);
        }

        /**
         * Execute cancelScheduledJob request
         * @return ScheduledJobDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduledJobDto execute() throws ApiException {
            ApiResponse<ScheduledJobDto> localVarResp = cancelScheduledJobWithHttpInfo(jobId);
            return localVarResp.getData();
        }

        /**
         * Execute cancelScheduledJob request with HTTP info returned
         * @return ApiResponse&lt;ScheduledJobDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduledJobDto> executeWithHttpInfo() throws ApiException {
            return cancelScheduledJobWithHttpInfo(jobId);
        }

        /**
         * Execute cancelScheduledJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduledJobDto> _callback) throws ApiException {
            return cancelScheduledJobAsync(jobId, _callback);
        }
    }

    /**
     * Cancel a scheduled email job
     * Get a scheduled email job and cancel it. Will fail if status of job is already cancelled, failed, or complete.
     * @param jobId  (required)
     * @return APIcancelScheduledJobRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcancelScheduledJobRequest cancelScheduledJob(@javax.annotation.Nonnull UUID jobId) {
        return new APIcancelScheduledJobRequest(jobId);
    }
    private okhttp3.Call createInboxCall(@javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String name, @javax.annotation.Nullable String description, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable String prefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (useDomainPool != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDomainPool", useDomainPool));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (expiresAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresAt", expiresAt));
        }

        if (expiresIn != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("expiresIn", expiresIn));
        }

        if (allowTeamAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowTeamAccess", allowTeamAccess));
        }

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        if (virtualInbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("virtualInbox", virtualInbox));
        }

        if (useShortAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useShortAddress", useShortAddress));
        }

        if (domainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainId", domainId));
        }

        if (domainName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainName", domainName));
        }

        if (prefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("prefix", prefix));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboxValidateBeforeCall(@javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String name, @javax.annotation.Nullable String description, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable String prefix, final ApiCallback _callback) throws ApiException {
        return createInboxCall(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix, _callback);

    }


    private ApiResponse<InboxDto> createInboxWithHttpInfo(@javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String name, @javax.annotation.Nullable String description, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable String prefix) throws ApiException {
        okhttp3.Call localVarCall = createInboxValidateBeforeCall(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInboxAsync(@javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable List<String> tags, @javax.annotation.Nullable String name, @javax.annotation.Nullable String description, @javax.annotation.Nullable Boolean useDomainPool, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable OffsetDateTime expiresAt, @javax.annotation.Nullable Long expiresIn, @javax.annotation.Nullable Boolean allowTeamAccess, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable Boolean virtualInbox, @javax.annotation.Nullable Boolean useShortAddress, @javax.annotation.Nullable UUID domainId, @javax.annotation.Nullable String domainName, @javax.annotation.Nullable String prefix, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboxValidateBeforeCall(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInboxRequest {
        @javax.annotation.Nullable
        private String emailAddress;
        @javax.annotation.Nullable
        private List<String> tags;
        @javax.annotation.Nullable
        private String name;
        @javax.annotation.Nullable
        private String description;
        @javax.annotation.Nullable
        private Boolean useDomainPool;
        @javax.annotation.Nullable
        private Boolean favourite;
        @javax.annotation.Nullable
        private OffsetDateTime expiresAt;
        @javax.annotation.Nullable
        private Long expiresIn;
        @javax.annotation.Nullable
        private Boolean allowTeamAccess;
        @javax.annotation.Nullable
        private String inboxType;
        @javax.annotation.Nullable
        private Boolean virtualInbox;
        @javax.annotation.Nullable
        private Boolean useShortAddress;
        @javax.annotation.Nullable
        private UUID domainId;
        @javax.annotation.Nullable
        private String domainName;
        @javax.annotation.Nullable
        private String prefix;

        private APIcreateInboxRequest() {
        }

        /**
         * Set emailAddress
         * @param emailAddress A custom email address to use with the inbox. Defaults to null. When null MailSlurp will assign a random email address to the inbox such as &#x60;123@mailslurp.com&#x60;. If you use the &#x60;useDomainPool&#x60; option when the email address is null it will generate an email address with a more varied domain ending such as &#x60;123@mailslurp.info&#x60; or &#x60;123@mailslurp.biz&#x60;. When a custom email address is provided the address is split into a domain and the domain is queried against your user. If you have created the domain in the MailSlurp dashboard and verified it you can use any email address that ends with the domain. Note domain types must match the inbox type - so &#x60;SMTP&#x60; inboxes will only work with &#x60;SMTP&#x60; type domains. Avoid &#x60;SMTP&#x60; inboxes if you need to send emails as they can only receive. Send an email to this address and the inbox will receive and store it for you. To retrieve the email use the Inbox and Email Controller endpoints with the inbox ID. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest emailAddress(@javax.annotation.Nullable String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Set tags
         * @param tags Tags that inbox has been tagged with. Tags can be added to inboxes to group different inboxes within an account. You can also search for inboxes by tag in the dashboard UI. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest tags(@javax.annotation.Nullable List<String> tags) {
            this.tags = tags;
            return this;
        }

        /**
         * Set name
         * @param name Optional name of the inbox. Displayed in the dashboard for easier search and used as the sender name when sending emails. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest name(@javax.annotation.Nullable String name) {
            this.name = name;
            return this;
        }

        /**
         * Set description
         * @param description Optional description of the inbox for labelling purposes. Is shown in the dashboard and can be used with (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest description(@javax.annotation.Nullable String description) {
            this.description = description;
            return this;
        }

        /**
         * Set useDomainPool
         * @param useDomainPool Use the MailSlurp domain name pool with this inbox when creating the email address. Defaults to null. If enabled the inbox will be an email address with a domain randomly chosen from a list of the MailSlurp domains. This is useful when the default &#x60;@mailslurp.com&#x60; email addresses used with inboxes are blocked or considered spam by a provider or receiving service. When domain pool is enabled an email address will be generated ending in &#x60;@mailslurp.{world,info,xyz,...}&#x60; . This means a TLD is randomly selecting from a list of &#x60;.biz&#x60;, &#x60;.info&#x60;, &#x60;.xyz&#x60; etc to add variance to the generated email addresses. When null or false MailSlurp uses the default behavior of &#x60;@mailslurp.com&#x60; or custom email address provided by the emailAddress field. Note this feature is only available for &#x60;HTTP&#x60; inbox types. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest useDomainPool(@javax.annotation.Nullable Boolean useDomainPool) {
            this.useDomainPool = useDomainPool;
            return this;
        }

        /**
         * Set favourite
         * @param favourite Is the inbox a favorite. Marking an inbox as a favorite is typically done in the dashboard for quick access or filtering (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Set expiresAt
         * @param expiresAt Optional inbox expiration date. If null then this inbox is permanent and the emails in it won&#39;t be deleted. If an expiration date is provided or is required by your plan the inbox will be closed when the expiration time is reached. Expired inboxes still contain their emails but can no longer send or receive emails. An ExpiredInboxRecord is created when an inbox and the email address and inbox ID are recorded. The expiresAt property is a timestamp string in ISO DateTime Format yyyy-MM-dd&#39;T&#39;HH:mm:ss.SSSXXX. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
            this.expiresAt = expiresAt;
            return this;
        }

        /**
         * Set expiresIn
         * @param expiresIn Number of milliseconds that inbox should exist for (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest expiresIn(@javax.annotation.Nullable Long expiresIn) {
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * Set allowTeamAccess
         * @param allowTeamAccess DEPRECATED (team access is always true). Grant team access to this inbox and the emails that belong to it for team members of your organization. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest allowTeamAccess(@javax.annotation.Nullable Boolean allowTeamAccess) {
            this.allowTeamAccess = allowTeamAccess;
            return this;
        }

        /**
         * Set inboxType
         * @param inboxType HTTP (default) or SMTP inbox type. HTTP inboxes are default and best solution for most cases. SMTP inboxes are more reliable for public inbound email consumption (but do not support sending emails). When using custom domains the domain type must match the inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use a custom mail server running at &#x60;mxslurp.click&#x60;. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Set virtualInbox
         * @param virtualInbox Virtual inbox prevents any outbound emails from being sent. It creates sent email records but will never send real emails to recipients. Great for testing and faking email sending. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest virtualInbox(@javax.annotation.Nullable Boolean virtualInbox) {
            this.virtualInbox = virtualInbox;
            return this;
        }

        /**
         * Set useShortAddress
         * @param useShortAddress Use a shorter email address under 31 characters (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest useShortAddress(@javax.annotation.Nullable Boolean useShortAddress) {
            this.useShortAddress = useShortAddress;
            return this;
        }

        /**
         * Set domainId
         * @param domainId ID of custom domain to use for email address. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest domainId(@javax.annotation.Nullable UUID domainId) {
            this.domainId = domainId;
            return this;
        }

        /**
         * Set domainName
         * @param domainName FQDN domain name for the domain you have verified. Will be appended with a randomly assigned recipient name. Use the &#x60;emailAddress&#x60; option instead to specify the full custom inbox. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest domainName(@javax.annotation.Nullable String domainName) {
            this.domainName = domainName;
            return this;
        }

        /**
         * Set prefix
         * @param prefix Prefix to add before the email address for easier labelling or identification. (optional)
         * @return APIcreateInboxRequest
         */
        public APIcreateInboxRequest prefix(@javax.annotation.Nullable String prefix) {
            this.prefix = prefix;
            return this;
        }

        /**
         * Build call for createInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInboxCall(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix, _callback);
        }

        /**
         * Execute createInbox request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = createInboxWithHttpInfo(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix);
            return localVarResp.getData();
        }

        /**
         * Execute createInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return createInboxWithHttpInfo(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix);
        }

        /**
         * Execute createInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return createInboxAsync(emailAddress, tags, name, description, useDomainPool, favourite, expiresAt, expiresIn, allowTeamAccess, inboxType, virtualInbox, useShortAddress, domainId, domainName, prefix, _callback);
        }
    }

    /**
     * Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     * @return APIcreateInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInboxRequest createInbox() {
        return new APIcreateInboxRequest();
    }
    private okhttp3.Call createInboxRulesetCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboxRulesetOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/rulesets"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboxRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling createInboxRuleset(Async)");
        }

        // verify the required parameter 'createInboxRulesetOptions' is set
        if (createInboxRulesetOptions == null) {
            throw new ApiException("Missing the required parameter 'createInboxRulesetOptions' when calling createInboxRuleset(Async)");
        }

        return createInboxRulesetCall(inboxId, createInboxRulesetOptions, _callback);

    }


    private ApiResponse<InboxRulesetDto> createInboxRulesetWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) throws ApiException {
        okhttp3.Call localVarCall = createInboxRulesetValidateBeforeCall(inboxId, createInboxRulesetOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInboxRulesetAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions, final ApiCallback<InboxRulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboxRulesetValidateBeforeCall(inboxId, createInboxRulesetOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInboxRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final CreateInboxRulesetOptions createInboxRulesetOptions;

        private APIcreateInboxRulesetRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) {
            this.inboxId = inboxId;
            this.createInboxRulesetOptions = createInboxRulesetOptions;
        }

        /**
         * Build call for createInboxRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInboxRulesetCall(inboxId, createInboxRulesetOptions, _callback);
        }

        /**
         * Execute createInboxRuleset request
         * @return InboxRulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetDto execute() throws ApiException {
            ApiResponse<InboxRulesetDto> localVarResp = createInboxRulesetWithHttpInfo(inboxId, createInboxRulesetOptions);
            return localVarResp.getData();
        }

        /**
         * Execute createInboxRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetDto> executeWithHttpInfo() throws ApiException {
            return createInboxRulesetWithHttpInfo(inboxId, createInboxRulesetOptions);
        }

        /**
         * Execute createInboxRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetDto> _callback) throws ApiException {
            return createInboxRulesetAsync(inboxId, createInboxRulesetOptions, _callback);
        }
    }

    /**
     * Create an inbox ruleset
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     * @param inboxId inboxId (required)
     * @param createInboxRulesetOptions  (required)
     * @return APIcreateInboxRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInboxRulesetRequest createInboxRuleset(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull CreateInboxRulesetOptions createInboxRulesetOptions) {
        return new APIcreateInboxRulesetRequest(inboxId, createInboxRulesetOptions);
    }
    private okhttp3.Call createInboxWithDefaultsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/withDefaults";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboxWithDefaultsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return createInboxWithDefaultsCall(_callback);

    }


    private ApiResponse<InboxDto> createInboxWithDefaultsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = createInboxWithDefaultsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInboxWithDefaultsAsync(final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboxWithDefaultsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInboxWithDefaultsRequest {

        private APIcreateInboxWithDefaultsRequest() {
        }

        /**
         * Build call for createInboxWithDefaults
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInboxWithDefaultsCall(_callback);
        }

        /**
         * Execute createInboxWithDefaults request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = createInboxWithDefaultsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute createInboxWithDefaults request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return createInboxWithDefaultsWithHttpInfo();
        }

        /**
         * Execute createInboxWithDefaults request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return createInboxWithDefaultsAsync(_callback);
        }
    }

    /**
     * Create an inbox with default options. Uses MailSlurp domain pool address and is private.
     * 
     * @return APIcreateInboxWithDefaultsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInboxWithDefaultsRequest createInboxWithDefaults() {
        return new APIcreateInboxWithDefaultsRequest();
    }
    private okhttp3.Call createInboxWithOptionsCall(@javax.annotation.Nonnull CreateInboxDto createInboxDto, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createInboxDto;

        // create path and map variables
        String localVarPath = "/inboxes/withOptions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createInboxWithOptionsValidateBeforeCall(@javax.annotation.Nonnull CreateInboxDto createInboxDto, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createInboxDto' is set
        if (createInboxDto == null) {
            throw new ApiException("Missing the required parameter 'createInboxDto' when calling createInboxWithOptions(Async)");
        }

        return createInboxWithOptionsCall(createInboxDto, _callback);

    }


    private ApiResponse<InboxDto> createInboxWithOptionsWithHttpInfo(@javax.annotation.Nonnull CreateInboxDto createInboxDto) throws ApiException {
        okhttp3.Call localVarCall = createInboxWithOptionsValidateBeforeCall(createInboxDto, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createInboxWithOptionsAsync(@javax.annotation.Nonnull CreateInboxDto createInboxDto, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createInboxWithOptionsValidateBeforeCall(createInboxDto, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateInboxWithOptionsRequest {
        @javax.annotation.Nonnull
        private final CreateInboxDto createInboxDto;

        private APIcreateInboxWithOptionsRequest(@javax.annotation.Nonnull CreateInboxDto createInboxDto) {
            this.createInboxDto = createInboxDto;
        }

        /**
         * Build call for createInboxWithOptions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createInboxWithOptionsCall(createInboxDto, _callback);
        }

        /**
         * Execute createInboxWithOptions request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = createInboxWithOptionsWithHttpInfo(createInboxDto);
            return localVarResp.getData();
        }

        /**
         * Execute createInboxWithOptions request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return createInboxWithOptionsWithHttpInfo(createInboxDto);
        }

        /**
         * Execute createInboxWithOptions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return createInboxWithOptionsAsync(createInboxDto, _callback);
        }
    }

    /**
     * Create an inbox with options. Extended options for inbox creation.
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     * @param createInboxDto  (required)
     * @return APIcreateInboxWithOptionsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateInboxWithOptionsRequest createInboxWithOptions(@javax.annotation.Nonnull CreateInboxDto createInboxDto) {
        return new APIcreateInboxWithOptionsRequest(createInboxDto);
    }
    private okhttp3.Call deleteAllInboxEmailsCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/deleteAllInboxEmails"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllInboxEmailsValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling deleteAllInboxEmails(Async)");
        }

        return deleteAllInboxEmailsCall(inboxId, _callback);

    }


    private ApiResponse<Void> deleteAllInboxEmailsWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = deleteAllInboxEmailsValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllInboxEmailsAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllInboxEmailsValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllInboxEmailsRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIdeleteAllInboxEmailsRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for deleteAllInboxEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllInboxEmailsCall(inboxId, _callback);
        }

        /**
         * Execute deleteAllInboxEmails request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllInboxEmailsWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteAllInboxEmails request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllInboxEmailsWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteAllInboxEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllInboxEmailsAsync(inboxId, _callback);
        }
    }

    /**
     * Delete all emails in a given inboxes.
     * Deletes all emails in an inbox. Be careful as emails cannot be recovered
     * @param inboxId  (required)
     * @return APIdeleteAllInboxEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllInboxEmailsRequest deleteAllInboxEmails(@javax.annotation.Nonnull UUID inboxId) {
        return new APIdeleteAllInboxEmailsRequest(inboxId);
    }
    private okhttp3.Call deleteAllInboxesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllInboxesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return deleteAllInboxesCall(_callback);

    }


    private ApiResponse<Void> deleteAllInboxesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = deleteAllInboxesValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllInboxesAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllInboxesValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllInboxesRequest {

        private APIdeleteAllInboxesRequest() {
        }

        /**
         * Build call for deleteAllInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllInboxesCall(_callback);
        }

        /**
         * Execute deleteAllInboxes request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllInboxesWithHttpInfo();
        }

        /**
         * Execute deleteAllInboxes request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllInboxesWithHttpInfo();
        }

        /**
         * Execute deleteAllInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllInboxesAsync(_callback);
        }
    }

    /**
     * Delete all inboxes
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     * @return APIdeleteAllInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllInboxesRequest deleteAllInboxes() {
        return new APIdeleteAllInboxesRequest();
    }
    private okhttp3.Call deleteAllInboxesByDescriptionCall(@javax.annotation.Nonnull String description, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/by-description";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllInboxesByDescriptionValidateBeforeCall(@javax.annotation.Nonnull String description, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'description' is set
        if (description == null) {
            throw new ApiException("Missing the required parameter 'description' when calling deleteAllInboxesByDescription(Async)");
        }

        return deleteAllInboxesByDescriptionCall(description, _callback);

    }


    private ApiResponse<Void> deleteAllInboxesByDescriptionWithHttpInfo(@javax.annotation.Nonnull String description) throws ApiException {
        okhttp3.Call localVarCall = deleteAllInboxesByDescriptionValidateBeforeCall(description, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllInboxesByDescriptionAsync(@javax.annotation.Nonnull String description, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllInboxesByDescriptionValidateBeforeCall(description, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllInboxesByDescriptionRequest {
        @javax.annotation.Nonnull
        private final String description;

        private APIdeleteAllInboxesByDescriptionRequest(@javax.annotation.Nonnull String description) {
            this.description = description;
        }

        /**
         * Build call for deleteAllInboxesByDescription
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllInboxesByDescriptionCall(description, _callback);
        }

        /**
         * Execute deleteAllInboxesByDescription request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllInboxesByDescriptionWithHttpInfo(description);
        }

        /**
         * Execute deleteAllInboxesByDescription request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllInboxesByDescriptionWithHttpInfo(description);
        }

        /**
         * Execute deleteAllInboxesByDescription request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllInboxesByDescriptionAsync(description, _callback);
        }
    }

    /**
     * Delete inboxes by description
     * Permanently delete all inboxes by description
     * @param description  (required)
     * @return APIdeleteAllInboxesByDescriptionRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllInboxesByDescriptionRequest deleteAllInboxesByDescription(@javax.annotation.Nonnull String description) {
        return new APIdeleteAllInboxesByDescriptionRequest(description);
    }
    private okhttp3.Call deleteAllInboxesByNameCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/by-name";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllInboxesByNameValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling deleteAllInboxesByName(Async)");
        }

        return deleteAllInboxesByNameCall(name, _callback);

    }


    private ApiResponse<Void> deleteAllInboxesByNameWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = deleteAllInboxesByNameValidateBeforeCall(name, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllInboxesByNameAsync(@javax.annotation.Nonnull String name, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllInboxesByNameValidateBeforeCall(name, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllInboxesByNameRequest {
        @javax.annotation.Nonnull
        private final String name;

        private APIdeleteAllInboxesByNameRequest(@javax.annotation.Nonnull String name) {
            this.name = name;
        }

        /**
         * Build call for deleteAllInboxesByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllInboxesByNameCall(name, _callback);
        }

        /**
         * Execute deleteAllInboxesByName request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllInboxesByNameWithHttpInfo(name);
        }

        /**
         * Execute deleteAllInboxesByName request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllInboxesByNameWithHttpInfo(name);
        }

        /**
         * Execute deleteAllInboxesByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllInboxesByNameAsync(name, _callback);
        }
    }

    /**
     * Delete inboxes by name
     * Permanently delete all inboxes by name
     * @param name  (required)
     * @return APIdeleteAllInboxesByNameRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllInboxesByNameRequest deleteAllInboxesByName(@javax.annotation.Nonnull String name) {
        return new APIdeleteAllInboxesByNameRequest(name);
    }
    private okhttp3.Call deleteAllInboxesByTagCall(@javax.annotation.Nonnull String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/by-tag";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAllInboxesByTagValidateBeforeCall(@javax.annotation.Nonnull String tag, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling deleteAllInboxesByTag(Async)");
        }

        return deleteAllInboxesByTagCall(tag, _callback);

    }


    private ApiResponse<Void> deleteAllInboxesByTagWithHttpInfo(@javax.annotation.Nonnull String tag) throws ApiException {
        okhttp3.Call localVarCall = deleteAllInboxesByTagValidateBeforeCall(tag, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteAllInboxesByTagAsync(@javax.annotation.Nonnull String tag, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAllInboxesByTagValidateBeforeCall(tag, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteAllInboxesByTagRequest {
        @javax.annotation.Nonnull
        private final String tag;

        private APIdeleteAllInboxesByTagRequest(@javax.annotation.Nonnull String tag) {
            this.tag = tag;
        }

        /**
         * Build call for deleteAllInboxesByTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteAllInboxesByTagCall(tag, _callback);
        }

        /**
         * Execute deleteAllInboxesByTag request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteAllInboxesByTagWithHttpInfo(tag);
        }

        /**
         * Execute deleteAllInboxesByTag request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteAllInboxesByTagWithHttpInfo(tag);
        }

        /**
         * Execute deleteAllInboxesByTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteAllInboxesByTagAsync(tag, _callback);
        }
    }

    /**
     * Delete inboxes by tag
     * Permanently delete all inboxes by tag
     * @param tag  (required)
     * @return APIdeleteAllInboxesByTagRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteAllInboxesByTagRequest deleteAllInboxesByTag(@javax.annotation.Nonnull String tag) {
        return new APIdeleteAllInboxesByTagRequest(tag);
    }
    private okhttp3.Call deleteInboxCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling deleteInbox(Async)");
        }

        return deleteInboxCall(inboxId, _callback);

    }


    private ApiResponse<Void> deleteInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = deleteInboxValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteInboxAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteInboxValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIdeleteInboxRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for deleteInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteInboxCall(inboxId, _callback);
        }

        /**
         * Execute deleteInbox request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteInboxWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInbox request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteInboxWithHttpInfo(inboxId);
        }

        /**
         * Execute deleteInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteInboxAsync(inboxId, _callback);
        }
    }

    /**
     * Delete inbox
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     * @param inboxId  (required)
     * @return APIdeleteInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteInboxRequest deleteInbox(@javax.annotation.Nonnull UUID inboxId) {
        return new APIdeleteInboxRequest(inboxId);
    }
    private okhttp3.Call doesInboxExistCall(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Boolean allowCatchAll, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/exists";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (allowCatchAll != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("allowCatchAll", allowCatchAll));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doesInboxExistValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Boolean allowCatchAll, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling doesInboxExist(Async)");
        }

        return doesInboxExistCall(emailAddress, allowCatchAll, _callback);

    }


    private ApiResponse<InboxExistsDto> doesInboxExistWithHttpInfo(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Boolean allowCatchAll) throws ApiException {
        okhttp3.Call localVarCall = doesInboxExistValidateBeforeCall(emailAddress, allowCatchAll, null);
        Type localVarReturnType = new TypeToken<InboxExistsDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call doesInboxExistAsync(@javax.annotation.Nonnull String emailAddress, @javax.annotation.Nullable Boolean allowCatchAll, final ApiCallback<InboxExistsDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = doesInboxExistValidateBeforeCall(emailAddress, allowCatchAll, _callback);
        Type localVarReturnType = new TypeToken<InboxExistsDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIdoesInboxExistRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;
        @javax.annotation.Nullable
        private Boolean allowCatchAll;

        private APIdoesInboxExistRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Set allowCatchAll
         * @param allowCatchAll  (optional)
         * @return APIdoesInboxExistRequest
         */
        public APIdoesInboxExistRequest allowCatchAll(@javax.annotation.Nullable Boolean allowCatchAll) {
            this.allowCatchAll = allowCatchAll;
            return this;
        }

        /**
         * Build call for doesInboxExist
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return doesInboxExistCall(emailAddress, allowCatchAll, _callback);
        }

        /**
         * Execute doesInboxExist request
         * @return InboxExistsDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxExistsDto execute() throws ApiException {
            ApiResponse<InboxExistsDto> localVarResp = doesInboxExistWithHttpInfo(emailAddress, allowCatchAll);
            return localVarResp.getData();
        }

        /**
         * Execute doesInboxExist request with HTTP info returned
         * @return ApiResponse&lt;InboxExistsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxExistsDto> executeWithHttpInfo() throws ApiException {
            return doesInboxExistWithHttpInfo(emailAddress, allowCatchAll);
        }

        /**
         * Execute doesInboxExist request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxExistsDto> _callback) throws ApiException {
            return doesInboxExistAsync(emailAddress, allowCatchAll, _callback);
        }
    }

    /**
     * Does inbox exist
     * Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
     * @param emailAddress Email address (required)
     * @return APIdoesInboxExistRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIdoesInboxExistRequest doesInboxExist(@javax.annotation.Nonnull String emailAddress) {
        return new APIdoesInboxExistRequest(emailAddress);
    }
    private okhttp3.Call doesInboxHaveAutomationsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/automations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call doesInboxHaveAutomationsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return doesInboxHaveAutomationsCall(_callback);

    }


    private ApiResponse<Void> doesInboxHaveAutomationsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = doesInboxHaveAutomationsValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call doesInboxHaveAutomationsAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = doesInboxHaveAutomationsValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdoesInboxHaveAutomationsRequest {

        private APIdoesInboxHaveAutomationsRequest() {
        }

        /**
         * Build call for doesInboxHaveAutomations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return doesInboxHaveAutomationsCall(_callback);
        }

        /**
         * Execute doesInboxHaveAutomations request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            doesInboxHaveAutomationsWithHttpInfo();
        }

        /**
         * Execute doesInboxHaveAutomations request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return doesInboxHaveAutomationsWithHttpInfo();
        }

        /**
         * Execute doesInboxHaveAutomations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return doesInboxHaveAutomationsAsync(_callback);
        }
    }

    /**
     * Does inbox have automations
     * Check if an inbox has automations.
     * @return APIdoesInboxHaveAutomationsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIdoesInboxHaveAutomationsRequest doesInboxHaveAutomations() {
        return new APIdoesInboxHaveAutomationsRequest();
    }
    private okhttp3.Call flushExpiredCall(@javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/expired";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call flushExpiredValidateBeforeCall(@javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return flushExpiredCall(before, _callback);

    }


    private ApiResponse<FlushExpiredInboxesResult> flushExpiredWithHttpInfo(@javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = flushExpiredValidateBeforeCall(before, null);
        Type localVarReturnType = new TypeToken<FlushExpiredInboxesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call flushExpiredAsync(@javax.annotation.Nullable OffsetDateTime before, final ApiCallback<FlushExpiredInboxesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = flushExpiredValidateBeforeCall(before, _callback);
        Type localVarReturnType = new TypeToken<FlushExpiredInboxesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIflushExpiredRequest {
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIflushExpiredRequest() {
        }

        /**
         * Set before
         * @param before Optional expired at before flag to flush expired inboxes that have expired before the given time (optional)
         * @return APIflushExpiredRequest
         */
        public APIflushExpiredRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for flushExpired
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return flushExpiredCall(before, _callback);
        }

        /**
         * Execute flushExpired request
         * @return FlushExpiredInboxesResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public FlushExpiredInboxesResult execute() throws ApiException {
            ApiResponse<FlushExpiredInboxesResult> localVarResp = flushExpiredWithHttpInfo(before);
            return localVarResp.getData();
        }

        /**
         * Execute flushExpired request with HTTP info returned
         * @return ApiResponse&lt;FlushExpiredInboxesResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FlushExpiredInboxesResult> executeWithHttpInfo() throws ApiException {
            return flushExpiredWithHttpInfo(before);
        }

        /**
         * Execute flushExpired request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FlushExpiredInboxesResult> _callback) throws ApiException {
            return flushExpiredAsync(before, _callback);
        }
    }

    /**
     * Remove expired inboxes
     * Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
     * @return APIflushExpiredRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIflushExpiredRequest flushExpired() {
        return new APIflushExpiredRequest();
    }
    private okhttp3.Call getAllInboxesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (teamAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamAccess", teamAccess));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        if (inboxFunction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxFunction", inboxFunction));
        }

        if (domainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainId", domainId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInboxesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId, final ApiCallback _callback) throws ApiException {
        return getAllInboxesCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);

    }


    private ApiResponse<PageInboxProjection> getAllInboxesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId) throws ApiException {
        okhttp3.Call localVarCall = getAllInboxesValidateBeforeCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, null);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInboxesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId, final ApiCallback<PageInboxProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInboxesValidateBeforeCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllInboxesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Boolean favourite;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private String tag;
        @javax.annotation.Nullable
        private Boolean teamAccess;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String inboxType;
        @javax.annotation.Nullable
        private String inboxFunction;
        @javax.annotation.Nullable
        private UUID domainId;

        private APIgetAllInboxesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set favourite
         * @param favourite Optionally filter results for favourites only (optional, default to false)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Set search
         * @param search Optionally filter by search words partial matching ID, tags, name, and email address (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set tag
         * @param tag Optionally filter by tags. Will return inboxes that include given tags (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest tag(@javax.annotation.Nullable String tag) {
            this.tag = tag;
            return this;
        }

        /**
         * Set teamAccess
         * @param teamAccess DEPRECATED. Optionally filter by team access. (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest teamAccess(@javax.annotation.Nullable Boolean teamAccess) {
            this.teamAccess = teamAccess;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxType
         * @param inboxType Optional filter by inbox type (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Set inboxFunction
         * @param inboxFunction Optional filter by inbox function (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest inboxFunction(@javax.annotation.Nullable String inboxFunction) {
            this.inboxFunction = inboxFunction;
            return this;
        }

        /**
         * Set domainId
         * @param domainId Optional domain ID filter (optional)
         * @return APIgetAllInboxesRequest
         */
        public APIgetAllInboxesRequest domainId(@javax.annotation.Nullable UUID domainId) {
            this.domainId = domainId;
            return this;
        }

        /**
         * Build call for getAllInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInboxesCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);
        }

        /**
         * Execute getAllInboxes request
         * @return PageInboxProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxProjection execute() throws ApiException {
            ApiResponse<PageInboxProjection> localVarResp = getAllInboxesWithHttpInfo(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllInboxes request with HTTP info returned
         * @return ApiResponse&lt;PageInboxProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxProjection> executeWithHttpInfo() throws ApiException {
            return getAllInboxesWithHttpInfo(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId);
        }

        /**
         * Execute getAllInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxProjection> _callback) throws ApiException {
            return getAllInboxesAsync(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);
        }
    }

    /**
     * List All Inboxes Paginated
     * List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     * @return APIgetAllInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllInboxesRequest getAllInboxes() {
        return new APIgetAllInboxesRequest();
    }
    private okhttp3.Call getAllInboxesOffsetPaginatedCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/offset-paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (favourite != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("favourite", favourite));
        }

        if (search != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search", search));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        if (teamAccess != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("teamAccess", teamAccess));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxType", inboxType));
        }

        if (inboxFunction != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxFunction", inboxFunction));
        }

        if (domainId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("domainId", domainId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllInboxesOffsetPaginatedValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId, final ApiCallback _callback) throws ApiException {
        return getAllInboxesOffsetPaginatedCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);

    }


    private ApiResponse<PageInboxProjection> getAllInboxesOffsetPaginatedWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId) throws ApiException {
        okhttp3.Call localVarCall = getAllInboxesOffsetPaginatedValidateBeforeCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, null);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllInboxesOffsetPaginatedAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Boolean favourite, @javax.annotation.Nullable String search, @javax.annotation.Nullable String tag, @javax.annotation.Nullable Boolean teamAccess, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable String inboxType, @javax.annotation.Nullable String inboxFunction, @javax.annotation.Nullable UUID domainId, final ApiCallback<PageInboxProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllInboxesOffsetPaginatedValidateBeforeCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllInboxesOffsetPaginatedRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Boolean favourite;
        @javax.annotation.Nullable
        private String search;
        @javax.annotation.Nullable
        private String tag;
        @javax.annotation.Nullable
        private Boolean teamAccess;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private String inboxType;
        @javax.annotation.Nullable
        private String inboxFunction;
        @javax.annotation.Nullable
        private UUID domainId;

        private APIgetAllInboxesOffsetPaginatedRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set favourite
         * @param favourite Optionally filter results for favourites only (optional, default to false)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest favourite(@javax.annotation.Nullable Boolean favourite) {
            this.favourite = favourite;
            return this;
        }

        /**
         * Set search
         * @param search Optionally filter by search words partial matching ID, tags, name, and email address (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest search(@javax.annotation.Nullable String search) {
            this.search = search;
            return this;
        }

        /**
         * Set tag
         * @param tag Optionally filter by tags. Will return inboxes that include given tags (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest tag(@javax.annotation.Nullable String tag) {
            this.tag = tag;
            return this;
        }

        /**
         * Set teamAccess
         * @param teamAccess DEPRECATED. Optionally filter by team access. (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest teamAccess(@javax.annotation.Nullable Boolean teamAccess) {
            this.teamAccess = teamAccess;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxType
         * @param inboxType Optional filter by inbox type (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest inboxType(@javax.annotation.Nullable String inboxType) {
            this.inboxType = inboxType;
            return this;
        }

        /**
         * Set inboxFunction
         * @param inboxFunction Optional filter by inbox function (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest inboxFunction(@javax.annotation.Nullable String inboxFunction) {
            this.inboxFunction = inboxFunction;
            return this;
        }

        /**
         * Set domainId
         * @param domainId Optional domain ID filter (optional)
         * @return APIgetAllInboxesOffsetPaginatedRequest
         */
        public APIgetAllInboxesOffsetPaginatedRequest domainId(@javax.annotation.Nullable UUID domainId) {
            this.domainId = domainId;
            return this;
        }

        /**
         * Build call for getAllInboxesOffsetPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllInboxesOffsetPaginatedCall(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);
        }

        /**
         * Execute getAllInboxesOffsetPaginated request
         * @return PageInboxProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxProjection execute() throws ApiException {
            ApiResponse<PageInboxProjection> localVarResp = getAllInboxesOffsetPaginatedWithHttpInfo(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllInboxesOffsetPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageInboxProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxProjection> executeWithHttpInfo() throws ApiException {
            return getAllInboxesOffsetPaginatedWithHttpInfo(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId);
        }

        /**
         * Execute getAllInboxesOffsetPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxProjection> _callback) throws ApiException {
            return getAllInboxesOffsetPaginatedAsync(page, size, sort, favourite, search, tag, teamAccess, since, before, inboxType, inboxFunction, domainId, _callback);
        }
    }

    /**
     * List All Inboxes Offset Paginated
     * List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     * @return APIgetAllInboxesOffsetPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllInboxesOffsetPaginatedRequest getAllInboxesOffsetPaginated() {
        return new APIgetAllInboxesOffsetPaginatedRequest();
    }
    private okhttp3.Call getAllPlusAddressesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/plus-addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllPlusAddressesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getAllPlusAddressesCall(page, size, sort, inboxId, _callback);

    }


    private ApiResponse<PagePlusAddressProjection> getAllPlusAddressesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getAllPlusAddressesValidateBeforeCall(page, size, sort, inboxId, null);
        Type localVarReturnType = new TypeToken<PagePlusAddressProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllPlusAddressesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable UUID inboxId, final ApiCallback<PagePlusAddressProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllPlusAddressesValidateBeforeCall(page, size, sort, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PagePlusAddressProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllPlusAddressesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetAllPlusAddressesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in inbox tracking pixel list pagination (optional, default to 0)
         * @return APIgetAllPlusAddressesRequest
         */
        public APIgetAllPlusAddressesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox tracking pixel list pagination (optional, default to 20)
         * @return APIgetAllPlusAddressesRequest
         */
        public APIgetAllPlusAddressesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllPlusAddressesRequest
         */
        public APIgetAllPlusAddressesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId Optional inboxId filter (optional)
         * @return APIgetAllPlusAddressesRequest
         */
        public APIgetAllPlusAddressesRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getAllPlusAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllPlusAddressesCall(page, size, sort, inboxId, _callback);
        }

        /**
         * Execute getAllPlusAddresses request
         * @return PagePlusAddressProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PagePlusAddressProjection execute() throws ApiException {
            ApiResponse<PagePlusAddressProjection> localVarResp = getAllPlusAddressesWithHttpInfo(page, size, sort, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllPlusAddresses request with HTTP info returned
         * @return ApiResponse&lt;PagePlusAddressProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagePlusAddressProjection> executeWithHttpInfo() throws ApiException {
            return getAllPlusAddressesWithHttpInfo(page, size, sort, inboxId);
        }

        /**
         * Execute getAllPlusAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagePlusAddressProjection> _callback) throws ApiException {
            return getAllPlusAddressesAsync(page, size, sort, inboxId, _callback);
        }
    }

    /**
     * Get all sub address plus address aliases for an inbox
     * Returns paginated list of all plus alias addresses found for in account based on received emails that used the inbox address with a +xyz alias.
     * @return APIgetAllPlusAddressesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllPlusAddressesRequest getAllPlusAddresses() {
        return new APIgetAllPlusAddressesRequest();
    }
    private okhttp3.Call getAllScheduledJobsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/scheduled-jobs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllScheduledJobsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getAllScheduledJobsCall(page, size, sort, since, before, inboxId, _callback);

    }


    private ApiResponse<PageScheduledJobs> getAllScheduledJobsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getAllScheduledJobsValidateBeforeCall(page, size, sort, since, before, inboxId, null);
        Type localVarReturnType = new TypeToken<PageScheduledJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllScheduledJobsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable UUID inboxId, final ApiCallback<PageScheduledJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllScheduledJobsValidateBeforeCall(page, size, sort, since, before, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PageScheduledJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetAllScheduledJobsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetAllScheduledJobsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in scheduled job list pagination (optional, default to 0)
         * @return APIgetAllScheduledJobsRequest
         */
        public APIgetAllScheduledJobsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in scheduled job list pagination (optional, default to 20)
         * @return APIgetAllScheduledJobsRequest
         */
        public APIgetAllScheduledJobsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetAllScheduledJobsRequest
         */
        public APIgetAllScheduledJobsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetAllScheduledJobsRequest
         */
        public APIgetAllScheduledJobsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetAllScheduledJobsRequest
         */
        public APIgetAllScheduledJobsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set inboxId
         * @param inboxId  (optional)
         * @return APIgetAllScheduledJobsRequest
         */
        public APIgetAllScheduledJobsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getAllScheduledJobs
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllScheduledJobsCall(page, size, sort, since, before, inboxId, _callback);
        }

        /**
         * Execute getAllScheduledJobs request
         * @return PageScheduledJobs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageScheduledJobs execute() throws ApiException {
            ApiResponse<PageScheduledJobs> localVarResp = getAllScheduledJobsWithHttpInfo(page, size, sort, since, before, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getAllScheduledJobs request with HTTP info returned
         * @return ApiResponse&lt;PageScheduledJobs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageScheduledJobs> executeWithHttpInfo() throws ApiException {
            return getAllScheduledJobsWithHttpInfo(page, size, sort, since, before, inboxId);
        }

        /**
         * Execute getAllScheduledJobs request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageScheduledJobs> _callback) throws ApiException {
            return getAllScheduledJobsAsync(page, size, sort, since, before, inboxId, _callback);
        }
    }

    /**
     * Get all scheduled email sending jobs for account
     * Schedule sending of emails using scheduled jobs. These can be inbox or account level.
     * @return APIgetAllScheduledJobsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetAllScheduledJobsRequest getAllScheduledJobs() {
        return new APIgetAllScheduledJobsRequest();
    }
    private okhttp3.Call getDeliveryStatusesByInboxIdCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/delivery-status"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDeliveryStatusesByInboxIdValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getDeliveryStatusesByInboxId(Async)");
        }

        return getDeliveryStatusesByInboxIdCall(inboxId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageDeliveryStatus> getDeliveryStatusesByInboxIdWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getDeliveryStatusesByInboxIdValidateBeforeCall(inboxId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageDeliveryStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDeliveryStatusesByInboxIdAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageDeliveryStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDeliveryStatusesByInboxIdValidateBeforeCall(inboxId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageDeliveryStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetDeliveryStatusesByInboxIdRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetDeliveryStatusesByInboxIdRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in delivery status list pagination (optional, default to 0)
         * @return APIgetDeliveryStatusesByInboxIdRequest
         */
        public APIgetDeliveryStatusesByInboxIdRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in delivery status list pagination (optional, default to 20)
         * @return APIgetDeliveryStatusesByInboxIdRequest
         */
        public APIgetDeliveryStatusesByInboxIdRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetDeliveryStatusesByInboxIdRequest
         */
        public APIgetDeliveryStatusesByInboxIdRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetDeliveryStatusesByInboxIdRequest
         */
        public APIgetDeliveryStatusesByInboxIdRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetDeliveryStatusesByInboxIdRequest
         */
        public APIgetDeliveryStatusesByInboxIdRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getDeliveryStatusesByInboxId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDeliveryStatusesByInboxIdCall(inboxId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getDeliveryStatusesByInboxId request
         * @return PageDeliveryStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public PageDeliveryStatus execute() throws ApiException {
            ApiResponse<PageDeliveryStatus> localVarResp = getDeliveryStatusesByInboxIdWithHttpInfo(inboxId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getDeliveryStatusesByInboxId request with HTTP info returned
         * @return ApiResponse&lt;PageDeliveryStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<PageDeliveryStatus> executeWithHttpInfo() throws ApiException {
            return getDeliveryStatusesByInboxIdWithHttpInfo(inboxId, page, size, sort, since, before);
        }

        /**
         * Execute getDeliveryStatusesByInboxId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<PageDeliveryStatus> _callback) throws ApiException {
            return getDeliveryStatusesByInboxIdAsync(inboxId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * 
     * Get all email delivery statuses for an inbox
     * @param inboxId  (required)
     * @return APIgetDeliveryStatusesByInboxIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetDeliveryStatusesByInboxIdRequest getDeliveryStatusesByInboxId(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetDeliveryStatusesByInboxIdRequest(inboxId);
    }
    private okhttp3.Call getEmailsCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Long retryTimeout, @javax.annotation.Nullable Long delayTimeout, @javax.annotation.Nullable Long minCount, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime since, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/emails"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (retryTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("retryTimeout", retryTimeout));
        }

        if (delayTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("delayTimeout", delayTimeout));
        }

        if (minCount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minCount", minCount));
        }

        if (unreadOnly != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unreadOnly", unreadOnly));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEmailsValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Long retryTimeout, @javax.annotation.Nullable Long delayTimeout, @javax.annotation.Nullable Long minCount, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime since, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getEmails(Async)");
        }

        return getEmailsCall(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since, _callback);

    }


    private ApiResponse<List<EmailPreview>> getEmailsWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Long retryTimeout, @javax.annotation.Nullable Long delayTimeout, @javax.annotation.Nullable Long minCount, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime since) throws ApiException {
        okhttp3.Call localVarCall = getEmailsValidateBeforeCall(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since, null);
        Type localVarReturnType = new TypeToken<List<EmailPreview>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getEmailsAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable Integer limit, @javax.annotation.Nullable String sort, @javax.annotation.Nullable Long retryTimeout, @javax.annotation.Nullable Long delayTimeout, @javax.annotation.Nullable Long minCount, @javax.annotation.Nullable Boolean unreadOnly, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable OffsetDateTime since, final ApiCallback<List<EmailPreview>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEmailsValidateBeforeCall(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since, _callback);
        Type localVarReturnType = new TypeToken<List<EmailPreview>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetEmailsRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private Integer limit;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private Long retryTimeout;
        @javax.annotation.Nullable
        private Long delayTimeout;
        @javax.annotation.Nullable
        private Long minCount;
        @javax.annotation.Nullable
        private Boolean unreadOnly;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private OffsetDateTime since;

        private APIgetEmailsRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set size
         * @param size Alias for limit. Assessed first before assessing any passed limit. (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set limit
         * @param limit Limit the result set, ordered by received date time sort direction. Maximum 100. For more listing options see the email controller (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest limit(@javax.annotation.Nullable Integer limit) {
            this.limit = limit;
            return this;
        }

        /**
         * Set sort
         * @param sort Sort the results by received date and direction ASC or DESC (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set retryTimeout
         * @param retryTimeout Maximum milliseconds to spend retrying inbox database until minCount emails are returned (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest retryTimeout(@javax.annotation.Nullable Long retryTimeout) {
            this.retryTimeout = retryTimeout;
            return this;
        }

        /**
         * Set delayTimeout
         * @param delayTimeout  (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest delayTimeout(@javax.annotation.Nullable Long delayTimeout) {
            this.delayTimeout = delayTimeout;
            return this;
        }

        /**
         * Set minCount
         * @param minCount Minimum acceptable email count. Will cause request to hang (and retry) until minCount is satisfied or retryTimeout is reached. (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest minCount(@javax.annotation.Nullable Long minCount) {
            this.minCount = minCount;
            return this;
        }

        /**
         * Set unreadOnly
         * @param unreadOnly  (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest unreadOnly(@javax.annotation.Nullable Boolean unreadOnly) {
            this.unreadOnly = unreadOnly;
            return this;
        }

        /**
         * Set before
         * @param before Exclude emails received after this ISO 8601 date time (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set since
         * @param since Exclude emails received before this ISO 8601 date time (optional)
         * @return APIgetEmailsRequest
         */
        public APIgetEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Build call for getEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getEmailsCall(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since, _callback);
        }

        /**
         * Execute getEmails request
         * @return List&lt;EmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<EmailPreview> execute() throws ApiException {
            ApiResponse<List<EmailPreview>> localVarResp = getEmailsWithHttpInfo(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since);
            return localVarResp.getData();
        }

        /**
         * Execute getEmails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmailPreview&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmailPreview>> executeWithHttpInfo() throws ApiException {
            return getEmailsWithHttpInfo(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since);
        }

        /**
         * Execute getEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmailPreview>> _callback) throws ApiException {
            return getEmailsAsync(inboxId, size, limit, sort, retryTimeout, delayTimeout, minCount, unreadOnly, before, since, _callback);
        }
    }

    /**
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     * List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
     * @param inboxId Id of inbox that emails belongs to (required)
     * @return APIgetEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetEmailsRequest getEmails(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetEmailsRequest(inboxId);
    }
    private okhttp3.Call getImapAccessCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/imap-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImapAccessValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getImapAccessCall(inboxId, _callback);

    }


    private ApiResponse<ImapAccessDetails> getImapAccessWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getImapAccessValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<ImapAccessDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImapAccessAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapAccessDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImapAccessValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapAccessDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetImapAccessRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetImapAccessRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIgetImapAccessRequest
         */
        public APIgetImapAccessRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getImapAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImapAccessCall(inboxId, _callback);
        }

        /**
         * Execute getImapAccess request
         * @return ImapAccessDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapAccessDetails execute() throws ApiException {
            ApiResponse<ImapAccessDetails> localVarResp = getImapAccessWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getImapAccess request with HTTP info returned
         * @return ApiResponse&lt;ImapAccessDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapAccessDetails> executeWithHttpInfo() throws ApiException {
            return getImapAccessWithHttpInfo(inboxId);
        }

        /**
         * Execute getImapAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapAccessDetails> _callback) throws ApiException {
            return getImapAccessAsync(inboxId, _callback);
        }
    }

    /**
     * 
     * Get IMAP access usernames and passwords
     * @return APIgetImapAccessRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetImapAccessRequest getImapAccess() {
        return new APIgetImapAccessRequest();
    }
    private okhttp3.Call getImapSmtpAccessCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/imap-smtp-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImapSmtpAccessValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getImapSmtpAccessCall(inboxId, _callback);

    }


    private ApiResponse<ImapSmtpAccessDetails> getImapSmtpAccessWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getImapSmtpAccessValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<ImapSmtpAccessDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImapSmtpAccessAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<ImapSmtpAccessDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImapSmtpAccessValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<ImapSmtpAccessDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetImapSmtpAccessRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetImapSmtpAccessRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIgetImapSmtpAccessRequest
         */
        public APIgetImapSmtpAccessRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getImapSmtpAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImapSmtpAccessCall(inboxId, _callback);
        }

        /**
         * Execute getImapSmtpAccess request
         * @return ImapSmtpAccessDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapSmtpAccessDetails execute() throws ApiException {
            ApiResponse<ImapSmtpAccessDetails> localVarResp = getImapSmtpAccessWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getImapSmtpAccess request with HTTP info returned
         * @return ApiResponse&lt;ImapSmtpAccessDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapSmtpAccessDetails> executeWithHttpInfo() throws ApiException {
            return getImapSmtpAccessWithHttpInfo(inboxId);
        }

        /**
         * Execute getImapSmtpAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapSmtpAccessDetails> _callback) throws ApiException {
            return getImapSmtpAccessAsync(inboxId, _callback);
        }
    }

    /**
     * 
     * Get IMAP and SMTP access usernames and passwords
     * @return APIgetImapSmtpAccessRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetImapSmtpAccessRequest getImapSmtpAccess() {
        return new APIgetImapSmtpAccessRequest();
    }
    private okhttp3.Call getImapSmtpAccessEnvCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/imap-smtp-access/env";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImapSmtpAccessEnvValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getImapSmtpAccessEnvCall(inboxId, _callback);

    }


    private ApiResponse<String> getImapSmtpAccessEnvWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getImapSmtpAccessEnvValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImapSmtpAccessEnvAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImapSmtpAccessEnvValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetImapSmtpAccessEnvRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetImapSmtpAccessEnvRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIgetImapSmtpAccessEnvRequest
         */
        public APIgetImapSmtpAccessEnvRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getImapSmtpAccessEnv
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImapSmtpAccessEnvCall(inboxId, _callback);
        }

        /**
         * Execute getImapSmtpAccessEnv request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = getImapSmtpAccessEnvWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getImapSmtpAccessEnv request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return getImapSmtpAccessEnvWithHttpInfo(inboxId);
        }

        /**
         * Execute getImapSmtpAccessEnv request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return getImapSmtpAccessEnvAsync(inboxId, _callback);
        }
    }

    /**
     * 
     * Get IMAP and SMTP access details in .env format
     * @return APIgetImapSmtpAccessEnvRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetImapSmtpAccessEnvRequest getImapSmtpAccessEnv() {
        return new APIgetImapSmtpAccessEnvRequest();
    }
    private okhttp3.Call getImapSmtpAccessServersCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/imap-smtp-access/servers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImapSmtpAccessServersValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getImapSmtpAccessServersCall(_callback);

    }


    private ApiResponse<ImapSmtpAccessServers> getImapSmtpAccessServersWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getImapSmtpAccessServersValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<ImapSmtpAccessServers>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getImapSmtpAccessServersAsync(final ApiCallback<ImapSmtpAccessServers> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImapSmtpAccessServersValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<ImapSmtpAccessServers>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetImapSmtpAccessServersRequest {

        private APIgetImapSmtpAccessServersRequest() {
        }

        /**
         * Build call for getImapSmtpAccessServers
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getImapSmtpAccessServersCall(_callback);
        }

        /**
         * Execute getImapSmtpAccessServers request
         * @return ImapSmtpAccessServers
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ImapSmtpAccessServers execute() throws ApiException {
            ApiResponse<ImapSmtpAccessServers> localVarResp = getImapSmtpAccessServersWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getImapSmtpAccessServers request with HTTP info returned
         * @return ApiResponse&lt;ImapSmtpAccessServers&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ImapSmtpAccessServers> executeWithHttpInfo() throws ApiException {
            return getImapSmtpAccessServersWithHttpInfo();
        }

        /**
         * Execute getImapSmtpAccessServers request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ImapSmtpAccessServers> _callback) throws ApiException {
            return getImapSmtpAccessServersAsync(_callback);
        }
    }

    /**
     * 
     * Get IMAP and SMTP server hosts
     * @return APIgetImapSmtpAccessServersRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetImapSmtpAccessServersRequest getImapSmtpAccessServers() {
        return new APIgetImapSmtpAccessServersRequest();
    }
    private okhttp3.Call getInboxCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInbox(Async)");
        }

        return getInboxCall(inboxId, _callback);

    }


    private ApiResponse<InboxDto> getInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getInboxValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetInboxRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxCall(inboxId, _callback);
        }

        /**
         * Execute getInbox request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = getInboxWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return getInboxWithHttpInfo(inboxId);
        }

        /**
         * Execute getInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return getInboxAsync(inboxId, _callback);
        }
    }

    /**
     * Get Inbox. Returns properties of an inbox.
     * Returns an inbox&#39;s properties, including its email address and ID.
     * @param inboxId  (required)
     * @return APIgetInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxRequest getInbox(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxRequest(inboxId);
    }
    private okhttp3.Call getInboxByEmailAddressCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/byEmailAddress";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxByEmailAddressValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling getInboxByEmailAddress(Async)");
        }

        return getInboxByEmailAddressCall(emailAddress, _callback);

    }


    private ApiResponse<InboxByEmailAddressResult> getInboxByEmailAddressWithHttpInfo(@javax.annotation.Nonnull String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = getInboxByEmailAddressValidateBeforeCall(emailAddress, null);
        Type localVarReturnType = new TypeToken<InboxByEmailAddressResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxByEmailAddressAsync(@javax.annotation.Nonnull String emailAddress, final ApiCallback<InboxByEmailAddressResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxByEmailAddressValidateBeforeCall(emailAddress, _callback);
        Type localVarReturnType = new TypeToken<InboxByEmailAddressResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxByEmailAddressRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;

        private APIgetInboxByEmailAddressRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Build call for getInboxByEmailAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxByEmailAddressCall(emailAddress, _callback);
        }

        /**
         * Execute getInboxByEmailAddress request
         * @return InboxByEmailAddressResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxByEmailAddressResult execute() throws ApiException {
            ApiResponse<InboxByEmailAddressResult> localVarResp = getInboxByEmailAddressWithHttpInfo(emailAddress);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxByEmailAddress request with HTTP info returned
         * @return ApiResponse&lt;InboxByEmailAddressResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxByEmailAddressResult> executeWithHttpInfo() throws ApiException {
            return getInboxByEmailAddressWithHttpInfo(emailAddress);
        }

        /**
         * Execute getInboxByEmailAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxByEmailAddressResult> _callback) throws ApiException {
            return getInboxByEmailAddressAsync(emailAddress, _callback);
        }
    }

    /**
     * Search for an inbox with the provided email address
     * Get a inbox result by email address
     * @param emailAddress  (required)
     * @return APIgetInboxByEmailAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxByEmailAddressRequest getInboxByEmailAddress(@javax.annotation.Nonnull String emailAddress) {
        return new APIgetInboxByEmailAddressRequest(emailAddress);
    }
    private okhttp3.Call getInboxByNameCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/byName";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxByNameValidateBeforeCall(@javax.annotation.Nonnull String name, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling getInboxByName(Async)");
        }

        return getInboxByNameCall(name, _callback);

    }


    private ApiResponse<InboxByNameResult> getInboxByNameWithHttpInfo(@javax.annotation.Nonnull String name) throws ApiException {
        okhttp3.Call localVarCall = getInboxByNameValidateBeforeCall(name, null);
        Type localVarReturnType = new TypeToken<InboxByNameResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxByNameAsync(@javax.annotation.Nonnull String name, final ApiCallback<InboxByNameResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxByNameValidateBeforeCall(name, _callback);
        Type localVarReturnType = new TypeToken<InboxByNameResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxByNameRequest {
        @javax.annotation.Nonnull
        private final String name;

        private APIgetInboxByNameRequest(@javax.annotation.Nonnull String name) {
            this.name = name;
        }

        /**
         * Build call for getInboxByName
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxByNameCall(name, _callback);
        }

        /**
         * Execute getInboxByName request
         * @return InboxByNameResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxByNameResult execute() throws ApiException {
            ApiResponse<InboxByNameResult> localVarResp = getInboxByNameWithHttpInfo(name);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxByName request with HTTP info returned
         * @return ApiResponse&lt;InboxByNameResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxByNameResult> executeWithHttpInfo() throws ApiException {
            return getInboxByNameWithHttpInfo(name);
        }

        /**
         * Execute getInboxByName request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxByNameResult> _callback) throws ApiException {
            return getInboxByNameAsync(name, _callback);
        }
    }

    /**
     * Search for an inbox with the given name
     * Get a inbox result by name
     * @param name  (required)
     * @return APIgetInboxByNameRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxByNameRequest getInboxByName(@javax.annotation.Nonnull String name) {
        return new APIgetInboxByNameRequest(name);
    }
    private okhttp3.Call getInboxCountCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/count";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxCountValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getInboxCountCall(_callback);

    }


    private ApiResponse<CountDto> getInboxCountWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getInboxCountValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxCountAsync(final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxCountValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxCountRequest {

        private APIgetInboxCountRequest() {
        }

        /**
         * Build call for getInboxCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxCountCall(_callback);
        }

        /**
         * Execute getInboxCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getInboxCountWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getInboxCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getInboxCountWithHttpInfo();
        }

        /**
         * Execute getInboxCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getInboxCountAsync(_callback);
        }
    }

    /**
     * Get total inbox count
     * 
     * @return APIgetInboxCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxCountRequest getInboxCount() {
        return new APIgetInboxCountRequest();
    }
    private okhttp3.Call getInboxEmailCountCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/emails/count"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxEmailCountValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxEmailCount(Async)");
        }

        return getInboxEmailCountCall(inboxId, _callback);

    }


    private ApiResponse<CountDto> getInboxEmailCountWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getInboxEmailCountValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxEmailCountAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxEmailCountValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxEmailCountRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetInboxEmailCountRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getInboxEmailCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxEmailCountCall(inboxId, _callback);
        }

        /**
         * Execute getInboxEmailCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getInboxEmailCountWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxEmailCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getInboxEmailCountWithHttpInfo(inboxId);
        }

        /**
         * Execute getInboxEmailCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getInboxEmailCountAsync(inboxId, _callback);
        }
    }

    /**
     * Get email count in inbox
     * 
     * @param inboxId Id of inbox that emails belongs to (required)
     * @return APIgetInboxEmailCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxEmailCountRequest getInboxEmailCount(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxEmailCountRequest(inboxId);
    }
    private okhttp3.Call getInboxEmailsPaginatedCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/emails/paginated"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (syncConnectors != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("syncConnectors", syncConnectors));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxEmailsPaginatedValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxEmailsPaginated(Async)");
        }

        return getInboxEmailsPaginatedCall(inboxId, page, size, sort, since, before, syncConnectors, _callback);

    }


    private ApiResponse<PageEmailPreview> getInboxEmailsPaginatedWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors) throws ApiException {
        okhttp3.Call localVarCall = getInboxEmailsPaginatedValidateBeforeCall(inboxId, page, size, sort, since, before, syncConnectors, null);
        Type localVarReturnType = new TypeToken<PageEmailPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxEmailsPaginatedAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable Boolean syncConnectors, final ApiCallback<PageEmailPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxEmailsPaginatedValidateBeforeCall(inboxId, page, size, sort, since, before, syncConnectors, _callback);
        Type localVarReturnType = new TypeToken<PageEmailPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxEmailsPaginatedRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private Boolean syncConnectors;

        private APIgetInboxEmailsPaginatedRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox emails list pagination (optional, default to 0)
         * @return APIgetInboxEmailsPaginatedRequest
         */
        public APIgetInboxEmailsPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox emails list pagination (optional, default to 20)
         * @return APIgetInboxEmailsPaginatedRequest
         */
        public APIgetInboxEmailsPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxEmailsPaginatedRequest
         */
        public APIgetInboxEmailsPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by received after given date time (optional)
         * @return APIgetInboxEmailsPaginatedRequest
         */
        public APIgetInboxEmailsPaginatedRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by received before given date time (optional)
         * @return APIgetInboxEmailsPaginatedRequest
         */
        public APIgetInboxEmailsPaginatedRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set syncConnectors
         * @param syncConnectors Sync connectors before fetching emails (optional)
         * @return APIgetInboxEmailsPaginatedRequest
         */
        public APIgetInboxEmailsPaginatedRequest syncConnectors(@javax.annotation.Nullable Boolean syncConnectors) {
            this.syncConnectors = syncConnectors;
            return this;
        }

        /**
         * Build call for getInboxEmailsPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxEmailsPaginatedCall(inboxId, page, size, sort, since, before, syncConnectors, _callback);
        }

        /**
         * Execute getInboxEmailsPaginated request
         * @return PageEmailPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailPreview execute() throws ApiException {
            ApiResponse<PageEmailPreview> localVarResp = getInboxEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, since, before, syncConnectors);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxEmailsPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageEmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailPreview> executeWithHttpInfo() throws ApiException {
            return getInboxEmailsPaginatedWithHttpInfo(inboxId, page, size, sort, since, before, syncConnectors);
        }

        /**
         * Execute getInboxEmailsPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailPreview> _callback) throws ApiException {
            return getInboxEmailsPaginatedAsync(inboxId, page, size, sort, since, before, syncConnectors, _callback);
        }
    }

    /**
     * Get inbox emails paginated
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     * @param inboxId Id of inbox that emails belongs to (required)
     * @return APIgetInboxEmailsPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxEmailsPaginatedRequest getInboxEmailsPaginated(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxEmailsPaginatedRequest(inboxId);
    }
    private okhttp3.Call getInboxIdsCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxIdsValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getInboxIdsCall(_callback);

    }


    private ApiResponse<InboxIdsResult> getInboxIdsWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getInboxIdsValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<InboxIdsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxIdsAsync(final ApiCallback<InboxIdsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxIdsValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<InboxIdsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxIdsRequest {

        private APIgetInboxIdsRequest() {
        }

        /**
         * Build call for getInboxIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxIdsCall(_callback);
        }

        /**
         * Execute getInboxIds request
         * @return InboxIdsResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public InboxIdsResult execute() throws ApiException {
            ApiResponse<InboxIdsResult> localVarResp = getInboxIdsWithHttpInfo();
            return localVarResp.getData();
        }

        /**
         * Execute getInboxIds request with HTTP info returned
         * @return ApiResponse&lt;InboxIdsResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<InboxIdsResult> executeWithHttpInfo() throws ApiException {
            return getInboxIdsWithHttpInfo();
        }

        /**
         * Execute getInboxIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<InboxIdsResult> _callback) throws ApiException {
            return getInboxIdsAsync(_callback);
        }
    }

    /**
     * Get all inbox IDs
     * Get list of inbox IDs
     * @return APIgetInboxIdsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetInboxIdsRequest getInboxIds() {
        return new APIgetInboxIdsRequest();
    }
    private okhttp3.Call getInboxPlusAddressCall(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/plus-addresses/{plusAddressId}"
            .replace("{" + "plusAddressId" + "}", localVarApiClient.escapeString(plusAddressId.toString()))
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxPlusAddressValidateBeforeCall(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'plusAddressId' is set
        if (plusAddressId == null) {
            throw new ApiException("Missing the required parameter 'plusAddressId' when calling getInboxPlusAddress(Async)");
        }

        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxPlusAddress(Async)");
        }

        return getInboxPlusAddressCall(plusAddressId, inboxId, _callback);

    }


    private ApiResponse<PlusAddressDto> getInboxPlusAddressWithHttpInfo(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getInboxPlusAddressValidateBeforeCall(plusAddressId, inboxId, null);
        Type localVarReturnType = new TypeToken<PlusAddressDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxPlusAddressAsync(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, final ApiCallback<PlusAddressDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxPlusAddressValidateBeforeCall(plusAddressId, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PlusAddressDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxPlusAddressRequest {
        @javax.annotation.Nonnull
        private final UUID plusAddressId;
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetInboxPlusAddressRequest(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId) {
            this.plusAddressId = plusAddressId;
            this.inboxId = inboxId;
        }

        /**
         * Build call for getInboxPlusAddress
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxPlusAddressCall(plusAddressId, inboxId, _callback);
        }

        /**
         * Execute getInboxPlusAddress request
         * @return PlusAddressDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PlusAddressDto execute() throws ApiException {
            ApiResponse<PlusAddressDto> localVarResp = getInboxPlusAddressWithHttpInfo(plusAddressId, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxPlusAddress request with HTTP info returned
         * @return ApiResponse&lt;PlusAddressDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlusAddressDto> executeWithHttpInfo() throws ApiException {
            return getInboxPlusAddressWithHttpInfo(plusAddressId, inboxId);
        }

        /**
         * Execute getInboxPlusAddress request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlusAddressDto> _callback) throws ApiException {
            return getInboxPlusAddressAsync(plusAddressId, inboxId, _callback);
        }
    }

    /**
     * Get sub address plus address for an inbox
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     * @param plusAddressId ID of the plus address you want to fetch (required)
     * @param inboxId ID of the inbox you want to fetch (required)
     * @return APIgetInboxPlusAddressRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxPlusAddressRequest getInboxPlusAddress(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxPlusAddressRequest(plusAddressId, inboxId);
    }
    private okhttp3.Call getInboxPlusAddressByIdCall(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/plus-addresses/{plusAddressId}"
            .replace("{" + "plusAddressId" + "}", localVarApiClient.escapeString(plusAddressId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxPlusAddressByIdValidateBeforeCall(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'plusAddressId' is set
        if (plusAddressId == null) {
            throw new ApiException("Missing the required parameter 'plusAddressId' when calling getInboxPlusAddressById(Async)");
        }

        return getInboxPlusAddressByIdCall(plusAddressId, inboxId, _callback);

    }


    private ApiResponse<PlusAddressDto> getInboxPlusAddressByIdWithHttpInfo(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getInboxPlusAddressByIdValidateBeforeCall(plusAddressId, inboxId, null);
        Type localVarReturnType = new TypeToken<PlusAddressDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxPlusAddressByIdAsync(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nullable UUID inboxId, final ApiCallback<PlusAddressDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxPlusAddressByIdValidateBeforeCall(plusAddressId, inboxId, _callback);
        Type localVarReturnType = new TypeToken<PlusAddressDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxPlusAddressByIdRequest {
        @javax.annotation.Nonnull
        private final UUID plusAddressId;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetInboxPlusAddressByIdRequest(@javax.annotation.Nonnull UUID plusAddressId) {
            this.plusAddressId = plusAddressId;
        }

        /**
         * Set inboxId
         * @param inboxId ID of the inbox you want to filter for (optional)
         * @return APIgetInboxPlusAddressByIdRequest
         */
        public APIgetInboxPlusAddressByIdRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getInboxPlusAddressById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxPlusAddressByIdCall(plusAddressId, inboxId, _callback);
        }

        /**
         * Execute getInboxPlusAddressById request
         * @return PlusAddressDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PlusAddressDto execute() throws ApiException {
            ApiResponse<PlusAddressDto> localVarResp = getInboxPlusAddressByIdWithHttpInfo(plusAddressId, inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxPlusAddressById request with HTTP info returned
         * @return ApiResponse&lt;PlusAddressDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PlusAddressDto> executeWithHttpInfo() throws ApiException {
            return getInboxPlusAddressByIdWithHttpInfo(plusAddressId, inboxId);
        }

        /**
         * Execute getInboxPlusAddressById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PlusAddressDto> _callback) throws ApiException {
            return getInboxPlusAddressByIdAsync(plusAddressId, inboxId, _callback);
        }
    }

    /**
     * Get sub address plus address by ID
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     * @param plusAddressId ID of the plus address you want to fetch (required)
     * @return APIgetInboxPlusAddressByIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxPlusAddressByIdRequest getInboxPlusAddressById(@javax.annotation.Nonnull UUID plusAddressId) {
        return new APIgetInboxPlusAddressByIdRequest(plusAddressId);
    }
    private okhttp3.Call getInboxPlusAddressEmailsCall(@javax.annotation.Nonnull String plusAddress, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/plus-addresses/emails"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (plusAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("plusAddress", plusAddress));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxPlusAddressEmailsValidateBeforeCall(@javax.annotation.Nonnull String plusAddress, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'plusAddress' is set
        if (plusAddress == null) {
            throw new ApiException("Missing the required parameter 'plusAddress' when calling getInboxPlusAddressEmails(Async)");
        }

        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxPlusAddressEmails(Async)");
        }

        return getInboxPlusAddressEmailsCall(plusAddress, inboxId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageEmailPreview> getInboxPlusAddressEmailsWithHttpInfo(@javax.annotation.Nonnull String plusAddress, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getInboxPlusAddressEmailsValidateBeforeCall(plusAddress, inboxId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageEmailPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxPlusAddressEmailsAsync(@javax.annotation.Nonnull String plusAddress, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageEmailPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxPlusAddressEmailsValidateBeforeCall(plusAddress, inboxId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageEmailPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxPlusAddressEmailsRequest {
        @javax.annotation.Nonnull
        private final String plusAddress;
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetInboxPlusAddressEmailsRequest(@javax.annotation.Nonnull String plusAddress, @javax.annotation.Nonnull UUID inboxId) {
            this.plusAddress = plusAddress;
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox tracking pixel list pagination (optional, default to 0)
         * @return APIgetInboxPlusAddressEmailsRequest
         */
        public APIgetInboxPlusAddressEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox tracking pixel list pagination (optional, default to 20)
         * @return APIgetInboxPlusAddressEmailsRequest
         */
        public APIgetInboxPlusAddressEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxPlusAddressEmailsRequest
         */
        public APIgetInboxPlusAddressEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIgetInboxPlusAddressEmailsRequest
         */
        public APIgetInboxPlusAddressEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIgetInboxPlusAddressEmailsRequest
         */
        public APIgetInboxPlusAddressEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getInboxPlusAddressEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxPlusAddressEmailsCall(plusAddress, inboxId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getInboxPlusAddressEmails request
         * @return PageEmailPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailPreview execute() throws ApiException {
            ApiResponse<PageEmailPreview> localVarResp = getInboxPlusAddressEmailsWithHttpInfo(plusAddress, inboxId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxPlusAddressEmails request with HTTP info returned
         * @return ApiResponse&lt;PageEmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailPreview> executeWithHttpInfo() throws ApiException {
            return getInboxPlusAddressEmailsWithHttpInfo(plusAddress, inboxId, page, size, sort, since, before);
        }

        /**
         * Execute getInboxPlusAddressEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailPreview> _callback) throws ApiException {
            return getInboxPlusAddressEmailsAsync(plusAddress, inboxId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get emails for a given inbox plus address
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * @param plusAddress The plus address to fetch emails for. If your inbox address is &#x60;123@test.com&#x60; and the email was sent to &#x60;123+abc@test.com&#x60; then the plus address is &#x60;abc&#x60; (required)
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @return APIgetInboxPlusAddressEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxPlusAddressEmailsRequest getInboxPlusAddressEmails(@javax.annotation.Nonnull String plusAddress, @javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxPlusAddressEmailsRequest(plusAddress, inboxId);
    }
    private okhttp3.Call getInboxPlusAddressEmailsForPlusAddressIdCall(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/plus-addresses/{plusAddressId}/emails"
            .replace("{" + "plusAddressId" + "}", localVarApiClient.escapeString(plusAddressId.toString()))
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxPlusAddressEmailsForPlusAddressIdValidateBeforeCall(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'plusAddressId' is set
        if (plusAddressId == null) {
            throw new ApiException("Missing the required parameter 'plusAddressId' when calling getInboxPlusAddressEmailsForPlusAddressId(Async)");
        }

        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxPlusAddressEmailsForPlusAddressId(Async)");
        }

        return getInboxPlusAddressEmailsForPlusAddressIdCall(plusAddressId, inboxId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageEmailPreview> getInboxPlusAddressEmailsForPlusAddressIdWithHttpInfo(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getInboxPlusAddressEmailsForPlusAddressIdValidateBeforeCall(plusAddressId, inboxId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageEmailPreview>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxPlusAddressEmailsForPlusAddressIdAsync(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageEmailPreview> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxPlusAddressEmailsForPlusAddressIdValidateBeforeCall(plusAddressId, inboxId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageEmailPreview>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxPlusAddressEmailsForPlusAddressIdRequest {
        @javax.annotation.Nonnull
        private final UUID plusAddressId;
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetInboxPlusAddressEmailsForPlusAddressIdRequest(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId) {
            this.plusAddressId = plusAddressId;
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox tracking pixel list pagination (optional, default to 0)
         * @return APIgetInboxPlusAddressEmailsForPlusAddressIdRequest
         */
        public APIgetInboxPlusAddressEmailsForPlusAddressIdRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox tracking pixel list pagination (optional, default to 20)
         * @return APIgetInboxPlusAddressEmailsForPlusAddressIdRequest
         */
        public APIgetInboxPlusAddressEmailsForPlusAddressIdRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxPlusAddressEmailsForPlusAddressIdRequest
         */
        public APIgetInboxPlusAddressEmailsForPlusAddressIdRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIgetInboxPlusAddressEmailsForPlusAddressIdRequest
         */
        public APIgetInboxPlusAddressEmailsForPlusAddressIdRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIgetInboxPlusAddressEmailsForPlusAddressIdRequest
         */
        public APIgetInboxPlusAddressEmailsForPlusAddressIdRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getInboxPlusAddressEmailsForPlusAddressId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxPlusAddressEmailsForPlusAddressIdCall(plusAddressId, inboxId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getInboxPlusAddressEmailsForPlusAddressId request
         * @return PageEmailPreview
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageEmailPreview execute() throws ApiException {
            ApiResponse<PageEmailPreview> localVarResp = getInboxPlusAddressEmailsForPlusAddressIdWithHttpInfo(plusAddressId, inboxId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxPlusAddressEmailsForPlusAddressId request with HTTP info returned
         * @return ApiResponse&lt;PageEmailPreview&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageEmailPreview> executeWithHttpInfo() throws ApiException {
            return getInboxPlusAddressEmailsForPlusAddressIdWithHttpInfo(plusAddressId, inboxId, page, size, sort, since, before);
        }

        /**
         * Execute getInboxPlusAddressEmailsForPlusAddressId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageEmailPreview> _callback) throws ApiException {
            return getInboxPlusAddressEmailsForPlusAddressIdAsync(plusAddressId, inboxId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get emails for a given inbox plus address
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * @param plusAddressId The plus address ID to fetch emails for. (required)
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @return APIgetInboxPlusAddressEmailsForPlusAddressIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxPlusAddressEmailsForPlusAddressIdRequest getInboxPlusAddressEmailsForPlusAddressId(@javax.annotation.Nonnull UUID plusAddressId, @javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxPlusAddressEmailsForPlusAddressIdRequest(plusAddressId, inboxId);
    }
    private okhttp3.Call getInboxPlusAddressesCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/plus-addresses"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxPlusAddressesValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxPlusAddresses(Async)");
        }

        return getInboxPlusAddressesCall(inboxId, page, size, sort, _callback);

    }


    private ApiResponse<PagePlusAddressProjection> getInboxPlusAddressesWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getInboxPlusAddressesValidateBeforeCall(inboxId, page, size, sort, null);
        Type localVarReturnType = new TypeToken<PagePlusAddressProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxPlusAddressesAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PagePlusAddressProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxPlusAddressesValidateBeforeCall(inboxId, page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PagePlusAddressProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxPlusAddressesRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetInboxPlusAddressesRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox tracking pixel list pagination (optional, default to 0)
         * @return APIgetInboxPlusAddressesRequest
         */
        public APIgetInboxPlusAddressesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox tracking pixel list pagination (optional, default to 20)
         * @return APIgetInboxPlusAddressesRequest
         */
        public APIgetInboxPlusAddressesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxPlusAddressesRequest
         */
        public APIgetInboxPlusAddressesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getInboxPlusAddresses
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxPlusAddressesCall(inboxId, page, size, sort, _callback);
        }

        /**
         * Execute getInboxPlusAddresses request
         * @return PagePlusAddressProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PagePlusAddressProjection execute() throws ApiException {
            ApiResponse<PagePlusAddressProjection> localVarResp = getInboxPlusAddressesWithHttpInfo(inboxId, page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxPlusAddresses request with HTTP info returned
         * @return ApiResponse&lt;PagePlusAddressProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PagePlusAddressProjection> executeWithHttpInfo() throws ApiException {
            return getInboxPlusAddressesWithHttpInfo(inboxId, page, size, sort);
        }

        /**
         * Execute getInboxPlusAddresses request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PagePlusAddressProjection> _callback) throws ApiException {
            return getInboxPlusAddressesAsync(inboxId, page, size, sort, _callback);
        }
    }

    /**
     * Get sub address plus address aliases for an inbox
     * Returns paginated list of all plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @return APIgetInboxPlusAddressesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxPlusAddressesRequest getInboxPlusAddresses(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxPlusAddressesRequest(inboxId);
    }
    private okhttp3.Call getInboxSentCountCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/sent/count"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxSentCountValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxSentCount(Async)");
        }

        return getInboxSentCountCall(inboxId, _callback);

    }


    private ApiResponse<CountDto> getInboxSentCountWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getInboxSentCountValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxSentCountAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<CountDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxSentCountValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<CountDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxSentCountRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIgetInboxSentCountRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for getInboxSentCount
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxSentCountCall(inboxId, _callback);
        }

        /**
         * Execute getInboxSentCount request
         * @return CountDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public CountDto execute() throws ApiException {
            ApiResponse<CountDto> localVarResp = getInboxSentCountWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxSentCount request with HTTP info returned
         * @return ApiResponse&lt;CountDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<CountDto> executeWithHttpInfo() throws ApiException {
            return getInboxSentCountWithHttpInfo(inboxId);
        }

        /**
         * Execute getInboxSentCount request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<CountDto> _callback) throws ApiException {
            return getInboxSentCountAsync(inboxId, _callback);
        }
    }

    /**
     * Get sent email count in inbox
     * 
     * @param inboxId Id of inbox that emails were sent from (required)
     * @return APIgetInboxSentCountRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxSentCountRequest getInboxSentCount(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxSentCountRequest(inboxId);
    }
    private okhttp3.Call getInboxSentEmailsCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/sent"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxSentEmailsValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getInboxSentEmails(Async)");
        }

        return getInboxSentEmailsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageSentEmailProjection> getInboxSentEmailsWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getInboxSentEmailsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageSentEmailProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxSentEmailsAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageSentEmailProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxSentEmailsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageSentEmailProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxSentEmailsRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetInboxSentEmailsRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox sent email list pagination (optional, default to 0)
         * @return APIgetInboxSentEmailsRequest
         */
        public APIgetInboxSentEmailsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox sent email list pagination (optional, default to 20)
         * @return APIgetInboxSentEmailsRequest
         */
        public APIgetInboxSentEmailsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxSentEmailsRequest
         */
        public APIgetInboxSentEmailsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional sent email search (optional)
         * @return APIgetInboxSentEmailsRequest
         */
        public APIgetInboxSentEmailsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by sent after given date time (optional)
         * @return APIgetInboxSentEmailsRequest
         */
        public APIgetInboxSentEmailsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by sent before given date time (optional)
         * @return APIgetInboxSentEmailsRequest
         */
        public APIgetInboxSentEmailsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getInboxSentEmails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxSentEmailsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getInboxSentEmails request
         * @return PageSentEmailProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public PageSentEmailProjection execute() throws ApiException {
            ApiResponse<PageSentEmailProjection> localVarResp = getInboxSentEmailsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxSentEmails request with HTTP info returned
         * @return ApiResponse&lt;PageSentEmailProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<PageSentEmailProjection> executeWithHttpInfo() throws ApiException {
            return getInboxSentEmailsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getInboxSentEmails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<PageSentEmailProjection> _callback) throws ApiException {
            return getInboxSentEmailsAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * Get Inbox Sent Emails
     * Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     * @param inboxId  (required)
     * @return APIgetInboxSentEmailsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetInboxSentEmailsRequest getInboxSentEmails(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetInboxSentEmailsRequest(inboxId);
    }
    private okhttp3.Call getInboxTagsCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/tags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxTagsValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        return getInboxTagsCall(page, size, sort, searchFilter, _callback);

    }


    private ApiResponse<List<String>> getInboxTagsWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter) throws ApiException {
        okhttp3.Call localVarCall = getInboxTagsValidateBeforeCall(page, size, sort, searchFilter, null);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxTagsAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback<List<String>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxTagsValidateBeforeCall(page, size, sort, searchFilter, _callback);
        Type localVarReturnType = new TypeToken<List<String>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxTagsRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;

        private APIgetInboxTagsRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetInboxTagsRequest
         */
        public APIgetInboxTagsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetInboxTagsRequest
         */
        public APIgetInboxTagsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxTagsRequest
         */
        public APIgetInboxTagsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetInboxTagsRequest
         */
        public APIgetInboxTagsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Build call for getInboxTags
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxTagsCall(page, size, sort, searchFilter, _callback);
        }

        /**
         * Execute getInboxTags request
         * @return List&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<String> execute() throws ApiException {
            ApiResponse<List<String>> localVarResp = getInboxTagsWithHttpInfo(page, size, sort, searchFilter);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxTags request with HTTP info returned
         * @return ApiResponse&lt;List&lt;String&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<String>> executeWithHttpInfo() throws ApiException {
            return getInboxTagsWithHttpInfo(page, size, sort, searchFilter);
        }

        /**
         * Execute getInboxTags request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<String>> _callback) throws ApiException {
            return getInboxTagsAsync(page, size, sort, searchFilter, _callback);
        }
    }

    /**
     * Get inbox tags
     * Get all inbox tags
     * @return APIgetInboxTagsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxTagsRequest getInboxTags() {
        return new APIgetInboxTagsRequest();
    }
    private okhttp3.Call getInboxTagsPaginatedCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/tags/paginated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxTagsPaginatedValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        return getInboxTagsPaginatedCall(page, size, sort, searchFilter, _callback);

    }


    private ApiResponse<PageInboxTags> getInboxTagsPaginatedWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter) throws ApiException {
        okhttp3.Call localVarCall = getInboxTagsPaginatedValidateBeforeCall(page, size, sort, searchFilter, null);
        Type localVarReturnType = new TypeToken<PageInboxTags>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxTagsPaginatedAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback<PageInboxTags> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxTagsPaginatedValidateBeforeCall(page, size, sort, searchFilter, _callback);
        Type localVarReturnType = new TypeToken<PageInboxTags>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxTagsPaginatedRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;

        private APIgetInboxTagsPaginatedRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetInboxTagsPaginatedRequest
         */
        public APIgetInboxTagsPaginatedRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetInboxTagsPaginatedRequest
         */
        public APIgetInboxTagsPaginatedRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxTagsPaginatedRequest
         */
        public APIgetInboxTagsPaginatedRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetInboxTagsPaginatedRequest
         */
        public APIgetInboxTagsPaginatedRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Build call for getInboxTagsPaginated
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxTagsPaginatedCall(page, size, sort, searchFilter, _callback);
        }

        /**
         * Execute getInboxTagsPaginated request
         * @return PageInboxTags
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxTags execute() throws ApiException {
            ApiResponse<PageInboxTags> localVarResp = getInboxTagsPaginatedWithHttpInfo(page, size, sort, searchFilter);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxTagsPaginated request with HTTP info returned
         * @return ApiResponse&lt;PageInboxTags&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxTags> executeWithHttpInfo() throws ApiException {
            return getInboxTagsPaginatedWithHttpInfo(page, size, sort, searchFilter);
        }

        /**
         * Execute getInboxTagsPaginated request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxTags> _callback) throws ApiException {
            return getInboxTagsPaginatedAsync(page, size, sort, searchFilter, _callback);
        }
    }

    /**
     * Get inbox tags paginated
     * Get all inbox tags paginated
     * @return APIgetInboxTagsPaginatedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxTagsPaginatedRequest getInboxTagsPaginated() {
        return new APIgetInboxTagsPaginatedRequest();
    }
    private okhttp3.Call getInboxesCall(@javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Boolean excludeCatchAllInboxes, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<UUID> include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (excludeCatchAllInboxes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("excludeCatchAllInboxes", excludeCatchAllInboxes));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        if (include != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "include", include));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxesValidateBeforeCall(@javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Boolean excludeCatchAllInboxes, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<UUID> include, final ApiCallback _callback) throws ApiException {
        return getInboxesCall(size, sort, since, excludeCatchAllInboxes, before, include, _callback);

    }


    private ApiResponse<List<InboxDto>> getInboxesWithHttpInfo(@javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Boolean excludeCatchAllInboxes, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<UUID> include) throws ApiException {
        okhttp3.Call localVarCall = getInboxesValidateBeforeCall(size, sort, since, excludeCatchAllInboxes, before, include, null);
        Type localVarReturnType = new TypeToken<List<InboxDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxesAsync(@javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable Boolean excludeCatchAllInboxes, @javax.annotation.Nullable OffsetDateTime before, @javax.annotation.Nullable List<UUID> include, final ApiCallback<List<InboxDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxesValidateBeforeCall(size, sort, since, excludeCatchAllInboxes, before, include, _callback);
        Type localVarReturnType = new TypeToken<List<InboxDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxesRequest {
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private Boolean excludeCatchAllInboxes;
        @javax.annotation.Nullable
        private OffsetDateTime before;
        @javax.annotation.Nullable
        private List<UUID> include;

        private APIgetInboxesRequest() {
        }

        /**
         * Set size
         * @param size Optional result size limit. Note an automatic limit of 100 results is applied. See the paginated &#x60;getAllEmails&#x60; for larger queries. (optional, default to 100)
         * @return APIgetInboxesRequest
         */
        public APIgetInboxesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxesRequest
         */
        public APIgetInboxesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIgetInboxesRequest
         */
        public APIgetInboxesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set excludeCatchAllInboxes
         * @param excludeCatchAllInboxes Optional exclude catch all inboxes (optional)
         * @return APIgetInboxesRequest
         */
        public APIgetInboxesRequest excludeCatchAllInboxes(@javax.annotation.Nullable Boolean excludeCatchAllInboxes) {
            this.excludeCatchAllInboxes = excludeCatchAllInboxes;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIgetInboxesRequest
         */
        public APIgetInboxesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Set include
         * @param include Optional inboxIds to include in result (optional)
         * @return APIgetInboxesRequest
         */
        public APIgetInboxesRequest include(@javax.annotation.Nullable List<UUID> include) {
            this.include = include;
            return this;
        }

        /**
         * Build call for getInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxesCall(size, sort, since, excludeCatchAllInboxes, before, include, _callback);
        }

        /**
         * Execute getInboxes request
         * @return List&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public List<InboxDto> execute() throws ApiException {
            ApiResponse<List<InboxDto>> localVarResp = getInboxesWithHttpInfo(size, sort, since, excludeCatchAllInboxes, before, include);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxes request with HTTP info returned
         * @return ApiResponse&lt;List&lt;InboxDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<List<InboxDto>> executeWithHttpInfo() throws ApiException {
            return getInboxesWithHttpInfo(size, sort, since, excludeCatchAllInboxes, before, include);
        }

        /**
         * Execute getInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<List<InboxDto>> _callback) throws ApiException {
            return getInboxesAsync(size, sort, since, excludeCatchAllInboxes, before, include, _callback);
        }
    }

    /**
     * List Inboxes and email addresses
     * List the inboxes you have created. Note use of the more advanced &#x60;getAllInboxes&#x60; is recommended and allows paginated access using a limit and sort parameter.
     * @return APIgetInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetInboxesRequest getInboxes() {
        return new APIgetInboxesRequest();
    }
    private okhttp3.Call getInboxesByTagCall(@javax.annotation.Nonnull String tag, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/tags/inboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInboxesByTagValidateBeforeCall(@javax.annotation.Nonnull String tag, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tag' is set
        if (tag == null) {
            throw new ApiException("Missing the required parameter 'tag' when calling getInboxesByTag(Async)");
        }

        return getInboxesByTagCall(tag, page, size, sort, searchFilter, _callback);

    }


    private ApiResponse<PageInboxProjection> getInboxesByTagWithHttpInfo(@javax.annotation.Nonnull String tag, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter) throws ApiException {
        okhttp3.Call localVarCall = getInboxesByTagValidateBeforeCall(tag, page, size, sort, searchFilter, null);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getInboxesByTagAsync(@javax.annotation.Nonnull String tag, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, final ApiCallback<PageInboxProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInboxesByTagValidateBeforeCall(tag, page, size, sort, searchFilter, _callback);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetInboxesByTagRequest {
        @javax.annotation.Nonnull
        private final String tag;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;

        private APIgetInboxesByTagRequest(@javax.annotation.Nonnull String tag) {
            this.tag = tag;
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetInboxesByTagRequest
         */
        public APIgetInboxesByTagRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetInboxesByTagRequest
         */
        public APIgetInboxesByTagRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetInboxesByTagRequest
         */
        public APIgetInboxesByTagRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetInboxesByTagRequest
         */
        public APIgetInboxesByTagRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Build call for getInboxesByTag
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getInboxesByTagCall(tag, page, size, sort, searchFilter, _callback);
        }

        /**
         * Execute getInboxesByTag request
         * @return PageInboxProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxProjection execute() throws ApiException {
            ApiResponse<PageInboxProjection> localVarResp = getInboxesByTagWithHttpInfo(tag, page, size, sort, searchFilter);
            return localVarResp.getData();
        }

        /**
         * Execute getInboxesByTag request with HTTP info returned
         * @return ApiResponse&lt;PageInboxProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxProjection> executeWithHttpInfo() throws ApiException {
            return getInboxesByTagWithHttpInfo(tag, page, size, sort, searchFilter);
        }

        /**
         * Execute getInboxesByTag request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxProjection> _callback) throws ApiException {
            return getInboxesByTagAsync(tag, page, size, sort, searchFilter, _callback);
        }
    }

    /**
     * Get inboxes for a tag
     * Get all inboxes for a given inbox tag
     * @param tag Tag to filter by (required)
     * @return APIgetInboxesByTagRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetInboxesByTagRequest getInboxesByTag(@javax.annotation.Nonnull String tag) {
        return new APIgetInboxesByTagRequest(tag);
    }
    private okhttp3.Call getLatestEmailInInboxCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Long timeoutMillis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/getLatestEmail";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (timeoutMillis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeoutMillis", timeoutMillis));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLatestEmailInInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Long timeoutMillis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getLatestEmailInInbox(Async)");
        }

        // verify the required parameter 'timeoutMillis' is set
        if (timeoutMillis == null) {
            throw new ApiException("Missing the required parameter 'timeoutMillis' when calling getLatestEmailInInbox(Async)");
        }

        return getLatestEmailInInboxCall(inboxId, timeoutMillis, _callback);

    }


    private ApiResponse<Email> getLatestEmailInInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Long timeoutMillis) throws ApiException {
        okhttp3.Call localVarCall = getLatestEmailInInboxValidateBeforeCall(inboxId, timeoutMillis, null);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLatestEmailInInboxAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Long timeoutMillis, final ApiCallback<Email> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLatestEmailInInboxValidateBeforeCall(inboxId, timeoutMillis, _callback);
        Type localVarReturnType = new TypeToken<Email>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetLatestEmailInInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final Long timeoutMillis;

        private APIgetLatestEmailInInboxRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Long timeoutMillis) {
            this.inboxId = inboxId;
            this.timeoutMillis = timeoutMillis;
        }

        /**
         * Build call for getLatestEmailInInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getLatestEmailInInboxCall(inboxId, timeoutMillis, _callback);
        }

        /**
         * Execute getLatestEmailInInbox request
         * @return Email
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public Email execute() throws ApiException {
            ApiResponse<Email> localVarResp = getLatestEmailInInboxWithHttpInfo(inboxId, timeoutMillis);
            return localVarResp.getData();
        }

        /**
         * Execute getLatestEmailInInbox request with HTTP info returned
         * @return ApiResponse&lt;Email&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Email> executeWithHttpInfo() throws ApiException {
            return getLatestEmailInInboxWithHttpInfo(inboxId, timeoutMillis);
        }

        /**
         * Execute getLatestEmailInInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Email> _callback) throws ApiException {
            return getLatestEmailInInboxAsync(inboxId, timeoutMillis, _callback);
        }
    }

    /**
     * Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
     * Get the newest email in an inbox or wait for one to arrive
     * @param inboxId ID of the inbox you want to get the latest email from (required)
     * @param timeoutMillis Timeout milliseconds to wait for latest email (required)
     * @return APIgetLatestEmailInInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetLatestEmailInInboxRequest getLatestEmailInInbox(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Long timeoutMillis) {
        return new APIgetLatestEmailInInboxRequest(inboxId, timeoutMillis);
    }
    private okhttp3.Call getOrganizationInboxesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/organization";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationInboxesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getOrganizationInboxesCall(page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageOrganizationInboxProjection> getOrganizationInboxesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationInboxesValidateBeforeCall(page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageOrganizationInboxProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOrganizationInboxesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageOrganizationInboxProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationInboxesValidateBeforeCall(page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageOrganizationInboxProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOrganizationInboxesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetOrganizationInboxesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetOrganizationInboxesRequest
         */
        public APIgetOrganizationInboxesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetOrganizationInboxesRequest
         */
        public APIgetOrganizationInboxesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetOrganizationInboxesRequest
         */
        public APIgetOrganizationInboxesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetOrganizationInboxesRequest
         */
        public APIgetOrganizationInboxesRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIgetOrganizationInboxesRequest
         */
        public APIgetOrganizationInboxesRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIgetOrganizationInboxesRequest
         */
        public APIgetOrganizationInboxesRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getOrganizationInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOrganizationInboxesCall(page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getOrganizationInboxes request
         * @return PageOrganizationInboxProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public PageOrganizationInboxProjection execute() throws ApiException {
            ApiResponse<PageOrganizationInboxProjection> localVarResp = getOrganizationInboxesWithHttpInfo(page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getOrganizationInboxes request with HTTP info returned
         * @return ApiResponse&lt;PageOrganizationInboxProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public ApiResponse<PageOrganizationInboxProjection> executeWithHttpInfo() throws ApiException {
            return getOrganizationInboxesWithHttpInfo(page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getOrganizationInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         * @deprecated
         */
        @Deprecated
        public okhttp3.Call executeAsync(final ApiCallback<PageOrganizationInboxProjection> _callback) throws ApiException {
            return getOrganizationInboxesAsync(page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * List Organization Inboxes Paginated
     * List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
     * @return APIgetOrganizationInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public APIgetOrganizationInboxesRequest getOrganizationInboxes() {
        return new APIgetOrganizationInboxesRequest();
    }
    private okhttp3.Call getOutboxesCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/outboxes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOutboxesValidateBeforeCall(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback _callback) throws ApiException {
        return getOutboxesCall(page, size, sort, _callback);

    }


    private ApiResponse<PageInboxProjection> getOutboxesWithHttpInfo(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort) throws ApiException {
        okhttp3.Call localVarCall = getOutboxesValidateBeforeCall(page, size, sort, null);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getOutboxesAsync(@javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, final ApiCallback<PageInboxProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOutboxesValidateBeforeCall(page, size, sort, _callback);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetOutboxesRequest {
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;

        private APIgetOutboxesRequest() {
        }

        /**
         * Set page
         * @param page Optional page index in list pagination (optional, default to 0)
         * @return APIgetOutboxesRequest
         */
        public APIgetOutboxesRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in list pagination (optional, default to 20)
         * @return APIgetOutboxesRequest
         */
        public APIgetOutboxesRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetOutboxesRequest
         */
        public APIgetOutboxesRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Build call for getOutboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getOutboxesCall(page, size, sort, _callback);
        }

        /**
         * Execute getOutboxes request
         * @return PageInboxProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxProjection execute() throws ApiException {
            ApiResponse<PageInboxProjection> localVarResp = getOutboxesWithHttpInfo(page, size, sort);
            return localVarResp.getData();
        }

        /**
         * Execute getOutboxes request with HTTP info returned
         * @return ApiResponse&lt;PageInboxProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxProjection> executeWithHttpInfo() throws ApiException {
            return getOutboxesWithHttpInfo(page, size, sort);
        }

        /**
         * Execute getOutboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxProjection> _callback) throws ApiException {
            return getOutboxesAsync(page, size, sort, _callback);
        }
    }

    /**
     * List all inboxes with sent emails
     * List inboxes that have sent emails
     * @return APIgetOutboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetOutboxesRequest getOutboxes() {
        return new APIgetOutboxesRequest();
    }
    private okhttp3.Call getScheduledJobCall(@javax.annotation.Nonnull UUID jobId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/scheduled-jobs/{jobId}"
            .replace("{" + "jobId" + "}", localVarApiClient.escapeString(jobId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScheduledJobValidateBeforeCall(@javax.annotation.Nonnull UUID jobId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'jobId' is set
        if (jobId == null) {
            throw new ApiException("Missing the required parameter 'jobId' when calling getScheduledJob(Async)");
        }

        return getScheduledJobCall(jobId, _callback);

    }


    private ApiResponse<ScheduledJobDto> getScheduledJobWithHttpInfo(@javax.annotation.Nonnull UUID jobId) throws ApiException {
        okhttp3.Call localVarCall = getScheduledJobValidateBeforeCall(jobId, null);
        Type localVarReturnType = new TypeToken<ScheduledJobDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScheduledJobAsync(@javax.annotation.Nonnull UUID jobId, final ApiCallback<ScheduledJobDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScheduledJobValidateBeforeCall(jobId, _callback);
        Type localVarReturnType = new TypeToken<ScheduledJobDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetScheduledJobRequest {
        @javax.annotation.Nonnull
        private final UUID jobId;

        private APIgetScheduledJobRequest(@javax.annotation.Nonnull UUID jobId) {
            this.jobId = jobId;
        }

        /**
         * Build call for getScheduledJob
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScheduledJobCall(jobId, _callback);
        }

        /**
         * Execute getScheduledJob request
         * @return ScheduledJobDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ScheduledJobDto execute() throws ApiException {
            ApiResponse<ScheduledJobDto> localVarResp = getScheduledJobWithHttpInfo(jobId);
            return localVarResp.getData();
        }

        /**
         * Execute getScheduledJob request with HTTP info returned
         * @return ApiResponse&lt;ScheduledJobDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduledJobDto> executeWithHttpInfo() throws ApiException {
            return getScheduledJobWithHttpInfo(jobId);
        }

        /**
         * Execute getScheduledJob request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduledJobDto> _callback) throws ApiException {
            return getScheduledJobAsync(jobId, _callback);
        }
    }

    /**
     * Get a scheduled email job
     * Get a scheduled email job details.
     * @param jobId  (required)
     * @return APIgetScheduledJobRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetScheduledJobRequest getScheduledJob(@javax.annotation.Nonnull UUID jobId) {
        return new APIgetScheduledJobRequest(jobId);
    }
    private okhttp3.Call getScheduledJobsByInboxIdCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/scheduled-jobs"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getScheduledJobsByInboxIdValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling getScheduledJobsByInboxId(Async)");
        }

        return getScheduledJobsByInboxIdCall(inboxId, page, size, sort, since, before, _callback);

    }


    private ApiResponse<PageScheduledJobs> getScheduledJobsByInboxIdWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getScheduledJobsByInboxIdValidateBeforeCall(inboxId, page, size, sort, since, before, null);
        Type localVarReturnType = new TypeToken<PageScheduledJobs>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getScheduledJobsByInboxIdAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageScheduledJobs> _callback) throws ApiException {

        okhttp3.Call localVarCall = getScheduledJobsByInboxIdValidateBeforeCall(inboxId, page, size, sort, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageScheduledJobs>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetScheduledJobsByInboxIdRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetScheduledJobsByInboxIdRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in scheduled job list pagination (optional, default to 0)
         * @return APIgetScheduledJobsByInboxIdRequest
         */
        public APIgetScheduledJobsByInboxIdRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in scheduled job list pagination (optional, default to 20)
         * @return APIgetScheduledJobsByInboxIdRequest
         */
        public APIgetScheduledJobsByInboxIdRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetScheduledJobsByInboxIdRequest
         */
        public APIgetScheduledJobsByInboxIdRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetScheduledJobsByInboxIdRequest
         */
        public APIgetScheduledJobsByInboxIdRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetScheduledJobsByInboxIdRequest
         */
        public APIgetScheduledJobsByInboxIdRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getScheduledJobsByInboxId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getScheduledJobsByInboxIdCall(inboxId, page, size, sort, since, before, _callback);
        }

        /**
         * Execute getScheduledJobsByInboxId request
         * @return PageScheduledJobs
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageScheduledJobs execute() throws ApiException {
            ApiResponse<PageScheduledJobs> localVarResp = getScheduledJobsByInboxIdWithHttpInfo(inboxId, page, size, sort, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getScheduledJobsByInboxId request with HTTP info returned
         * @return ApiResponse&lt;PageScheduledJobs&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageScheduledJobs> executeWithHttpInfo() throws ApiException {
            return getScheduledJobsByInboxIdWithHttpInfo(inboxId, page, size, sort, since, before);
        }

        /**
         * Execute getScheduledJobsByInboxId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageScheduledJobs> _callback) throws ApiException {
            return getScheduledJobsByInboxIdAsync(inboxId, page, size, sort, since, before, _callback);
        }
    }

    /**
     * Get all scheduled email sending jobs for the inbox
     * Schedule sending of emails using scheduled jobs.
     * @param inboxId  (required)
     * @return APIgetScheduledJobsByInboxIdRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetScheduledJobsByInboxIdRequest getScheduledJobsByInboxId(@javax.annotation.Nonnull UUID inboxId) {
        return new APIgetScheduledJobsByInboxIdRequest(inboxId);
    }
    private okhttp3.Call getSmtpAccessCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/smtp-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSmtpAccessValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        return getSmtpAccessCall(inboxId, _callback);

    }


    private ApiResponse<SmtpAccessDetails> getSmtpAccessWithHttpInfo(@javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = getSmtpAccessValidateBeforeCall(inboxId, null);
        Type localVarReturnType = new TypeToken<SmtpAccessDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSmtpAccessAsync(@javax.annotation.Nullable UUID inboxId, final ApiCallback<SmtpAccessDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSmtpAccessValidateBeforeCall(inboxId, _callback);
        Type localVarReturnType = new TypeToken<SmtpAccessDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetSmtpAccessRequest {
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIgetSmtpAccessRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIgetSmtpAccessRequest
         */
        public APIgetSmtpAccessRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for getSmtpAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSmtpAccessCall(inboxId, _callback);
        }

        /**
         * Execute getSmtpAccess request
         * @return SmtpAccessDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public SmtpAccessDetails execute() throws ApiException {
            ApiResponse<SmtpAccessDetails> localVarResp = getSmtpAccessWithHttpInfo(inboxId);
            return localVarResp.getData();
        }

        /**
         * Execute getSmtpAccess request with HTTP info returned
         * @return ApiResponse&lt;SmtpAccessDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SmtpAccessDetails> executeWithHttpInfo() throws ApiException {
            return getSmtpAccessWithHttpInfo(inboxId);
        }

        /**
         * Execute getSmtpAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SmtpAccessDetails> _callback) throws ApiException {
            return getSmtpAccessAsync(inboxId, _callback);
        }
    }

    /**
     * 
     * Get SMTP access usernames and passwords
     * @return APIgetSmtpAccessRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetSmtpAccessRequest getSmtpAccess() {
        return new APIgetSmtpAccessRequest();
    }
    private okhttp3.Call isEmailAddressAvailableCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/available";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call isEmailAddressAvailableValidateBeforeCall(@javax.annotation.Nonnull String emailAddress, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'emailAddress' is set
        if (emailAddress == null) {
            throw new ApiException("Missing the required parameter 'emailAddress' when calling isEmailAddressAvailable(Async)");
        }

        return isEmailAddressAvailableCall(emailAddress, _callback);

    }


    private ApiResponse<EmailAvailableResult> isEmailAddressAvailableWithHttpInfo(@javax.annotation.Nonnull String emailAddress) throws ApiException {
        okhttp3.Call localVarCall = isEmailAddressAvailableValidateBeforeCall(emailAddress, null);
        Type localVarReturnType = new TypeToken<EmailAvailableResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call isEmailAddressAvailableAsync(@javax.annotation.Nonnull String emailAddress, final ApiCallback<EmailAvailableResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = isEmailAddressAvailableValidateBeforeCall(emailAddress, _callback);
        Type localVarReturnType = new TypeToken<EmailAvailableResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIisEmailAddressAvailableRequest {
        @javax.annotation.Nonnull
        private final String emailAddress;

        private APIisEmailAddressAvailableRequest(@javax.annotation.Nonnull String emailAddress) {
            this.emailAddress = emailAddress;
        }

        /**
         * Build call for isEmailAddressAvailable
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return isEmailAddressAvailableCall(emailAddress, _callback);
        }

        /**
         * Execute isEmailAddressAvailable request
         * @return EmailAvailableResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public EmailAvailableResult execute() throws ApiException {
            ApiResponse<EmailAvailableResult> localVarResp = isEmailAddressAvailableWithHttpInfo(emailAddress);
            return localVarResp.getData();
        }

        /**
         * Execute isEmailAddressAvailable request with HTTP info returned
         * @return ApiResponse&lt;EmailAvailableResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmailAvailableResult> executeWithHttpInfo() throws ApiException {
            return isEmailAddressAvailableWithHttpInfo(emailAddress);
        }

        /**
         * Execute isEmailAddressAvailable request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmailAvailableResult> _callback) throws ApiException {
            return isEmailAddressAvailableAsync(emailAddress, _callback);
        }
    }

    /**
     * Is email address available
     * Returns whether an email address is available
     * @param emailAddress  (required)
     * @return APIisEmailAddressAvailableRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIisEmailAddressAvailableRequest isEmailAddressAvailable(@javax.annotation.Nonnull String emailAddress) {
        return new APIisEmailAddressAvailableRequest(emailAddress);
    }
    private okhttp3.Call listInboxRulesetsCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/rulesets"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboxRulesetsValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling listInboxRulesets(Async)");
        }

        return listInboxRulesetsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageInboxRulesetDto> listInboxRulesetsWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = listInboxRulesetsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageInboxRulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInboxRulesetsAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageInboxRulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboxRulesetsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageInboxRulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistInboxRulesetsRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIlistInboxRulesetsRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox ruleset list pagination (optional, default to 0)
         * @return APIlistInboxRulesetsRequest
         */
        public APIlistInboxRulesetsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox ruleset list pagination (optional, default to 20)
         * @return APIlistInboxRulesetsRequest
         */
        public APIlistInboxRulesetsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIlistInboxRulesetsRequest
         */
        public APIlistInboxRulesetsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIlistInboxRulesetsRequest
         */
        public APIlistInboxRulesetsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIlistInboxRulesetsRequest
         */
        public APIlistInboxRulesetsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIlistInboxRulesetsRequest
         */
        public APIlistInboxRulesetsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for listInboxRulesets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInboxRulesetsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute listInboxRulesets request
         * @return PageInboxRulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxRulesetDto execute() throws ApiException {
            ApiResponse<PageInboxRulesetDto> localVarResp = listInboxRulesetsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute listInboxRulesets request with HTTP info returned
         * @return ApiResponse&lt;PageInboxRulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxRulesetDto> executeWithHttpInfo() throws ApiException {
            return listInboxRulesetsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute listInboxRulesets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxRulesetDto> _callback) throws ApiException {
            return listInboxRulesetsAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * List inbox rulesets
     * List all rulesets attached to an inbox
     * @param inboxId  (required)
     * @return APIlistInboxRulesetsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistInboxRulesetsRequest listInboxRulesets(@javax.annotation.Nonnull UUID inboxId) {
        return new APIlistInboxRulesetsRequest(inboxId);
    }
    private okhttp3.Call listInboxTrackingPixelsCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/tracking-pixels"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listInboxTrackingPixelsValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling listInboxTrackingPixels(Async)");
        }

        return listInboxTrackingPixelsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageTrackingPixelProjection> listInboxTrackingPixelsWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = listInboxTrackingPixelsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageTrackingPixelProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listInboxTrackingPixelsAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageTrackingPixelProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = listInboxTrackingPixelsValidateBeforeCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageTrackingPixelProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIlistInboxTrackingPixelsRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIlistInboxTrackingPixelsRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Set page
         * @param page Optional page index in inbox tracking pixel list pagination (optional, default to 0)
         * @return APIlistInboxTrackingPixelsRequest
         */
        public APIlistInboxTrackingPixelsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox tracking pixel list pagination (optional, default to 20)
         * @return APIlistInboxTrackingPixelsRequest
         */
        public APIlistInboxTrackingPixelsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIlistInboxTrackingPixelsRequest
         */
        public APIlistInboxTrackingPixelsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIlistInboxTrackingPixelsRequest
         */
        public APIlistInboxTrackingPixelsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Optional filter by created after given date time (optional)
         * @return APIlistInboxTrackingPixelsRequest
         */
        public APIlistInboxTrackingPixelsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Optional filter by created before given date time (optional)
         * @return APIlistInboxTrackingPixelsRequest
         */
        public APIlistInboxTrackingPixelsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for listInboxTrackingPixels
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listInboxTrackingPixelsCall(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute listInboxTrackingPixels request
         * @return PageTrackingPixelProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageTrackingPixelProjection execute() throws ApiException {
            ApiResponse<PageTrackingPixelProjection> localVarResp = listInboxTrackingPixelsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute listInboxTrackingPixels request with HTTP info returned
         * @return ApiResponse&lt;PageTrackingPixelProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageTrackingPixelProjection> executeWithHttpInfo() throws ApiException {
            return listInboxTrackingPixelsWithHttpInfo(inboxId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute listInboxTrackingPixels request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageTrackingPixelProjection> _callback) throws ApiException {
            return listInboxTrackingPixelsAsync(inboxId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * List inbox tracking pixels
     * List all tracking pixels sent from an inbox
     * @param inboxId  (required)
     * @return APIlistInboxTrackingPixelsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIlistInboxTrackingPixelsRequest listInboxTrackingPixels(@javax.annotation.Nonnull UUID inboxId) {
        return new APIlistInboxTrackingPixelsRequest(inboxId);
    }
    private okhttp3.Call searchInboxesCall(@javax.annotation.Nonnull SearchInboxesOptions searchInboxesOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchInboxesOptions;

        // create path and map variables
        String localVarPath = "/inboxes/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchInboxesValidateBeforeCall(@javax.annotation.Nonnull SearchInboxesOptions searchInboxesOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchInboxesOptions' is set
        if (searchInboxesOptions == null) {
            throw new ApiException("Missing the required parameter 'searchInboxesOptions' when calling searchInboxes(Async)");
        }

        return searchInboxesCall(searchInboxesOptions, _callback);

    }


    private ApiResponse<PageInboxProjection> searchInboxesWithHttpInfo(@javax.annotation.Nonnull SearchInboxesOptions searchInboxesOptions) throws ApiException {
        okhttp3.Call localVarCall = searchInboxesValidateBeforeCall(searchInboxesOptions, null);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call searchInboxesAsync(@javax.annotation.Nonnull SearchInboxesOptions searchInboxesOptions, final ApiCallback<PageInboxProjection> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchInboxesValidateBeforeCall(searchInboxesOptions, _callback);
        Type localVarReturnType = new TypeToken<PageInboxProjection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsearchInboxesRequest {
        @javax.annotation.Nonnull
        private final SearchInboxesOptions searchInboxesOptions;

        private APIsearchInboxesRequest(@javax.annotation.Nonnull SearchInboxesOptions searchInboxesOptions) {
            this.searchInboxesOptions = searchInboxesOptions;
        }

        /**
         * Build call for searchInboxes
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return searchInboxesCall(searchInboxesOptions, _callback);
        }

        /**
         * Execute searchInboxes request
         * @return PageInboxProjection
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageInboxProjection execute() throws ApiException {
            ApiResponse<PageInboxProjection> localVarResp = searchInboxesWithHttpInfo(searchInboxesOptions);
            return localVarResp.getData();
        }

        /**
         * Execute searchInboxes request with HTTP info returned
         * @return ApiResponse&lt;PageInboxProjection&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageInboxProjection> executeWithHttpInfo() throws ApiException {
            return searchInboxesWithHttpInfo(searchInboxesOptions);
        }

        /**
         * Execute searchInboxes request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageInboxProjection> _callback) throws ApiException {
            return searchInboxesAsync(searchInboxesOptions, _callback);
        }
    }

    /**
     * Search all inboxes and return matching inboxes
     * Search inboxes and return in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     * @param searchInboxesOptions  (required)
     * @return APIsearchInboxesRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsearchInboxesRequest searchInboxes(@javax.annotation.Nonnull SearchInboxesOptions searchInboxesOptions) {
        return new APIsearchInboxesRequest(searchInboxesOptions);
    }
    private okhttp3.Call sendEmailCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling sendEmail(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendEmail(Async)");
        }

        return sendEmailCall(inboxId, sendEmailOptions, _callback);

    }


    private ApiResponse<Void> sendEmailWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = sendEmailValidateBeforeCall(inboxId, sendEmailOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailValidateBeforeCall(inboxId, sendEmailOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsendEmailRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;

        private APIsendEmailRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.inboxId = inboxId;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Build call for sendEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailCall(inboxId, sendEmailOptions, _callback);
        }

        /**
         * Execute sendEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendEmailWithHttpInfo(inboxId, sendEmailOptions);
        }

        /**
         * Execute sendEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendEmailWithHttpInfo(inboxId, sendEmailOptions);
        }

        /**
         * Execute sendEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendEmailAsync(inboxId, sendEmailOptions, _callback);
        }
    }

    /**
     * Send Email
     * Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @param sendEmailOptions  (required)
     * @return APIsendEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailRequest sendEmail(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendEmailRequest(inboxId, sendEmailOptions);
    }
    private okhttp3.Call sendEmailAndConfirmCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/confirm"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailAndConfirmValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling sendEmailAndConfirm(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendEmailAndConfirm(Async)");
        }

        return sendEmailAndConfirmCall(inboxId, sendEmailOptions, _callback);

    }


    private ApiResponse<SentEmailDto> sendEmailAndConfirmWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = sendEmailAndConfirmValidateBeforeCall(inboxId, sendEmailOptions, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendEmailAndConfirmAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailAndConfirmValidateBeforeCall(inboxId, sendEmailOptions, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendEmailAndConfirmRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;

        private APIsendEmailAndConfirmRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.inboxId = inboxId;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Build call for sendEmailAndConfirm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailAndConfirmCall(inboxId, sendEmailOptions, _callback);
        }

        /**
         * Execute sendEmailAndConfirm request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = sendEmailAndConfirmWithHttpInfo(inboxId, sendEmailOptions);
            return localVarResp.getData();
        }

        /**
         * Execute sendEmailAndConfirm request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return sendEmailAndConfirmWithHttpInfo(inboxId, sendEmailOptions);
        }

        /**
         * Execute sendEmailAndConfirm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return sendEmailAndConfirmAsync(inboxId, sendEmailOptions, _callback);
        }
    }

    /**
     * Send email and return sent confirmation
     * Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @param sendEmailOptions  (required)
     * @return APIsendEmailAndConfirmRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailAndConfirmRequest sendEmailAndConfirm(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendEmailAndConfirmRequest(inboxId, sendEmailOptions);
    }
    private okhttp3.Call sendEmailWithQueueCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Boolean validateBeforeEnqueue, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/with-queue"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (validateBeforeEnqueue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateBeforeEnqueue", validateBeforeEnqueue));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendEmailWithQueueValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Boolean validateBeforeEnqueue, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling sendEmailWithQueue(Async)");
        }

        // verify the required parameter 'validateBeforeEnqueue' is set
        if (validateBeforeEnqueue == null) {
            throw new ApiException("Missing the required parameter 'validateBeforeEnqueue' when calling sendEmailWithQueue(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendEmailWithQueue(Async)");
        }

        return sendEmailWithQueueCall(inboxId, validateBeforeEnqueue, sendEmailOptions, _callback);

    }


    private ApiResponse<Void> sendEmailWithQueueWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Boolean validateBeforeEnqueue, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) throws ApiException {
        okhttp3.Call localVarCall = sendEmailWithQueueValidateBeforeCall(inboxId, validateBeforeEnqueue, sendEmailOptions, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendEmailWithQueueAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Boolean validateBeforeEnqueue, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendEmailWithQueueValidateBeforeCall(inboxId, validateBeforeEnqueue, sendEmailOptions, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsendEmailWithQueueRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final Boolean validateBeforeEnqueue;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;

        private APIsendEmailWithQueueRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Boolean validateBeforeEnqueue, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.inboxId = inboxId;
            this.validateBeforeEnqueue = validateBeforeEnqueue;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Build call for sendEmailWithQueue
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendEmailWithQueueCall(inboxId, validateBeforeEnqueue, sendEmailOptions, _callback);
        }

        /**
         * Execute sendEmailWithQueue request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendEmailWithQueueWithHttpInfo(inboxId, validateBeforeEnqueue, sendEmailOptions);
        }

        /**
         * Execute sendEmailWithQueue request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendEmailWithQueueWithHttpInfo(inboxId, validateBeforeEnqueue, sendEmailOptions);
        }

        /**
         * Execute sendEmailWithQueue request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendEmailWithQueueAsync(inboxId, validateBeforeEnqueue, sendEmailOptions, _callback);
        }
    }

    /**
     * Send email with queue
     * Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @param validateBeforeEnqueue Validate before adding to queue (required)
     * @param sendEmailOptions  (required)
     * @return APIsendEmailWithQueueRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendEmailWithQueueRequest sendEmailWithQueue(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull Boolean validateBeforeEnqueue, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendEmailWithQueueRequest(inboxId, validateBeforeEnqueue, sendEmailOptions);
    }
    private okhttp3.Call sendSmtpEnvelopeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendSMTPEnvelopeOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/smtp-envelope"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendSmtpEnvelopeValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling sendSmtpEnvelope(Async)");
        }

        // verify the required parameter 'sendSMTPEnvelopeOptions' is set
        if (sendSMTPEnvelopeOptions == null) {
            throw new ApiException("Missing the required parameter 'sendSMTPEnvelopeOptions' when calling sendSmtpEnvelope(Async)");
        }

        return sendSmtpEnvelopeCall(inboxId, sendSMTPEnvelopeOptions, _callback);

    }


    private ApiResponse<SentEmailDto> sendSmtpEnvelopeWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions) throws ApiException {
        okhttp3.Call localVarCall = sendSmtpEnvelopeValidateBeforeCall(inboxId, sendSMTPEnvelopeOptions, null);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendSmtpEnvelopeAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions, final ApiCallback<SentEmailDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendSmtpEnvelopeValidateBeforeCall(inboxId, sendSMTPEnvelopeOptions, _callback);
        Type localVarReturnType = new TypeToken<SentEmailDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendSmtpEnvelopeRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions;

        private APIsendSmtpEnvelopeRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions) {
            this.inboxId = inboxId;
            this.sendSMTPEnvelopeOptions = sendSMTPEnvelopeOptions;
        }

        /**
         * Build call for sendSmtpEnvelope
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendSmtpEnvelopeCall(inboxId, sendSMTPEnvelopeOptions, _callback);
        }

        /**
         * Execute sendSmtpEnvelope request
         * @return SentEmailDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public SentEmailDto execute() throws ApiException {
            ApiResponse<SentEmailDto> localVarResp = sendSmtpEnvelopeWithHttpInfo(inboxId, sendSMTPEnvelopeOptions);
            return localVarResp.getData();
        }

        /**
         * Execute sendSmtpEnvelope request with HTTP info returned
         * @return ApiResponse&lt;SentEmailDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<SentEmailDto> executeWithHttpInfo() throws ApiException {
            return sendSmtpEnvelopeWithHttpInfo(inboxId, sendSMTPEnvelopeOptions);
        }

        /**
         * Execute sendSmtpEnvelope request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<SentEmailDto> _callback) throws ApiException {
            return sendSmtpEnvelopeAsync(inboxId, sendSMTPEnvelopeOptions, _callback);
        }
    }

    /**
     * Send email using an SMTP mail envelope and message body and return sent confirmation
     * Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @param sendSMTPEnvelopeOptions  (required)
     * @return APIsendSmtpEnvelopeRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendSmtpEnvelopeRequest sendSmtpEnvelope(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions) {
        return new APIsendSmtpEnvelopeRequest(inboxId, sendSMTPEnvelopeOptions);
    }
    private okhttp3.Call sendTestEmailCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/send-test-email"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendTestEmailValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling sendTestEmail(Async)");
        }

        return sendTestEmailCall(inboxId, _callback);

    }


    private ApiResponse<Void> sendTestEmailWithHttpInfo(@javax.annotation.Nonnull UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = sendTestEmailValidateBeforeCall(inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call sendTestEmailAsync(@javax.annotation.Nonnull UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendTestEmailValidateBeforeCall(inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIsendTestEmailRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;

        private APIsendTestEmailRequest(@javax.annotation.Nonnull UUID inboxId) {
            this.inboxId = inboxId;
        }

        /**
         * Build call for sendTestEmail
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendTestEmailCall(inboxId, _callback);
        }

        /**
         * Execute sendTestEmail request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            sendTestEmailWithHttpInfo(inboxId);
        }

        /**
         * Execute sendTestEmail request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return sendTestEmailWithHttpInfo(inboxId);
        }

        /**
         * Execute sendTestEmail request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return sendTestEmailAsync(inboxId, _callback);
        }
    }

    /**
     * Send a test email to inbox
     * Send an inbox a test email to test email receiving is working
     * @param inboxId  (required)
     * @return APIsendTestEmailRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIsendTestEmailRequest sendTestEmail(@javax.annotation.Nonnull UUID inboxId) {
        return new APIsendTestEmailRequest(inboxId);
    }
    private okhttp3.Call sendWithScheduleCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable OffsetDateTime sendAtTimestamp, @javax.annotation.Nullable Long sendAtNowPlusSeconds, @javax.annotation.Nullable Boolean validateBeforeEnqueue, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendEmailOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/with-schedule"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sendAtTimestamp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendAtTimestamp", sendAtTimestamp));
        }

        if (sendAtNowPlusSeconds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sendAtNowPlusSeconds", sendAtNowPlusSeconds));
        }

        if (validateBeforeEnqueue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("validateBeforeEnqueue", validateBeforeEnqueue));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendWithScheduleValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable OffsetDateTime sendAtTimestamp, @javax.annotation.Nullable Long sendAtNowPlusSeconds, @javax.annotation.Nullable Boolean validateBeforeEnqueue, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling sendWithSchedule(Async)");
        }

        // verify the required parameter 'sendEmailOptions' is set
        if (sendEmailOptions == null) {
            throw new ApiException("Missing the required parameter 'sendEmailOptions' when calling sendWithSchedule(Async)");
        }

        return sendWithScheduleCall(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue, _callback);

    }


    private ApiResponse<ScheduledJobDto> sendWithScheduleWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable OffsetDateTime sendAtTimestamp, @javax.annotation.Nullable Long sendAtNowPlusSeconds, @javax.annotation.Nullable Boolean validateBeforeEnqueue) throws ApiException {
        okhttp3.Call localVarCall = sendWithScheduleValidateBeforeCall(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue, null);
        Type localVarReturnType = new TypeToken<ScheduledJobDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call sendWithScheduleAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions, @javax.annotation.Nullable OffsetDateTime sendAtTimestamp, @javax.annotation.Nullable Long sendAtNowPlusSeconds, @javax.annotation.Nullable Boolean validateBeforeEnqueue, final ApiCallback<ScheduledJobDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendWithScheduleValidateBeforeCall(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue, _callback);
        Type localVarReturnType = new TypeToken<ScheduledJobDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsendWithScheduleRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final SendEmailOptions sendEmailOptions;
        @javax.annotation.Nullable
        private OffsetDateTime sendAtTimestamp;
        @javax.annotation.Nullable
        private Long sendAtNowPlusSeconds;
        @javax.annotation.Nullable
        private Boolean validateBeforeEnqueue;

        private APIsendWithScheduleRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
            this.inboxId = inboxId;
            this.sendEmailOptions = sendEmailOptions;
        }

        /**
         * Set sendAtTimestamp
         * @param sendAtTimestamp Sending timestamp (optional)
         * @return APIsendWithScheduleRequest
         */
        public APIsendWithScheduleRequest sendAtTimestamp(@javax.annotation.Nullable OffsetDateTime sendAtTimestamp) {
            this.sendAtTimestamp = sendAtTimestamp;
            return this;
        }

        /**
         * Set sendAtNowPlusSeconds
         * @param sendAtNowPlusSeconds Send after n seconds (optional)
         * @return APIsendWithScheduleRequest
         */
        public APIsendWithScheduleRequest sendAtNowPlusSeconds(@javax.annotation.Nullable Long sendAtNowPlusSeconds) {
            this.sendAtNowPlusSeconds = sendAtNowPlusSeconds;
            return this;
        }

        /**
         * Set validateBeforeEnqueue
         * @param validateBeforeEnqueue Validate before adding to queue (optional)
         * @return APIsendWithScheduleRequest
         */
        public APIsendWithScheduleRequest validateBeforeEnqueue(@javax.annotation.Nullable Boolean validateBeforeEnqueue) {
            this.validateBeforeEnqueue = validateBeforeEnqueue;
            return this;
        }

        /**
         * Build call for sendWithSchedule
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return sendWithScheduleCall(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue, _callback);
        }

        /**
         * Execute sendWithSchedule request
         * @return ScheduledJobDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ScheduledJobDto execute() throws ApiException {
            ApiResponse<ScheduledJobDto> localVarResp = sendWithScheduleWithHttpInfo(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue);
            return localVarResp.getData();
        }

        /**
         * Execute sendWithSchedule request with HTTP info returned
         * @return ApiResponse&lt;ScheduledJobDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ScheduledJobDto> executeWithHttpInfo() throws ApiException {
            return sendWithScheduleWithHttpInfo(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue);
        }

        /**
         * Execute sendWithSchedule request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ScheduledJobDto> _callback) throws ApiException {
            return sendWithScheduleAsync(inboxId, sendEmailOptions, sendAtTimestamp, sendAtNowPlusSeconds, validateBeforeEnqueue, _callback);
        }
    }

    /**
     * Send email with with delay or schedule
     * Send an email using a delay. Will place the email onto a scheduler that will then be processed and sent. Use delays to schedule email sending.
     * @param inboxId ID of the inbox you want to send the email from (required)
     * @param sendEmailOptions  (required)
     * @return APIsendWithScheduleRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public APIsendWithScheduleRequest sendWithSchedule(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SendEmailOptions sendEmailOptions) {
        return new APIsendWithScheduleRequest(inboxId, sendEmailOptions);
    }
    private okhttp3.Call setInboxFavouritedCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SetInboxFavouritedOptions setInboxFavouritedOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = setInboxFavouritedOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}/favourite"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setInboxFavouritedValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SetInboxFavouritedOptions setInboxFavouritedOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling setInboxFavourited(Async)");
        }

        // verify the required parameter 'setInboxFavouritedOptions' is set
        if (setInboxFavouritedOptions == null) {
            throw new ApiException("Missing the required parameter 'setInboxFavouritedOptions' when calling setInboxFavourited(Async)");
        }

        return setInboxFavouritedCall(inboxId, setInboxFavouritedOptions, _callback);

    }


    private ApiResponse<InboxDto> setInboxFavouritedWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SetInboxFavouritedOptions setInboxFavouritedOptions) throws ApiException {
        okhttp3.Call localVarCall = setInboxFavouritedValidateBeforeCall(inboxId, setInboxFavouritedOptions, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call setInboxFavouritedAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SetInboxFavouritedOptions setInboxFavouritedOptions, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = setInboxFavouritedValidateBeforeCall(inboxId, setInboxFavouritedOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsetInboxFavouritedRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final SetInboxFavouritedOptions setInboxFavouritedOptions;

        private APIsetInboxFavouritedRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SetInboxFavouritedOptions setInboxFavouritedOptions) {
            this.inboxId = inboxId;
            this.setInboxFavouritedOptions = setInboxFavouritedOptions;
        }

        /**
         * Build call for setInboxFavourited
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return setInboxFavouritedCall(inboxId, setInboxFavouritedOptions, _callback);
        }

        /**
         * Execute setInboxFavourited request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = setInboxFavouritedWithHttpInfo(inboxId, setInboxFavouritedOptions);
            return localVarResp.getData();
        }

        /**
         * Execute setInboxFavourited request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return setInboxFavouritedWithHttpInfo(inboxId, setInboxFavouritedOptions);
        }

        /**
         * Execute setInboxFavourited request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return setInboxFavouritedAsync(inboxId, setInboxFavouritedOptions, _callback);
        }
    }

    /**
     * Set inbox favourited state
     * Set and return new favorite state for an inbox
     * @param inboxId ID of inbox to set favourite state (required)
     * @param setInboxFavouritedOptions  (required)
     * @return APIsetInboxFavouritedRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsetInboxFavouritedRequest setInboxFavourited(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull SetInboxFavouritedOptions setInboxFavouritedOptions) {
        return new APIsetInboxFavouritedRequest(inboxId, setInboxFavouritedOptions);
    }
    private okhttp3.Call updateImapAccessCall(@javax.annotation.Nonnull UpdateImapAccessOptions updateImapAccessOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateImapAccessOptions;

        // create path and map variables
        String localVarPath = "/inboxes/imap-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateImapAccessValidateBeforeCall(@javax.annotation.Nonnull UpdateImapAccessOptions updateImapAccessOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateImapAccessOptions' is set
        if (updateImapAccessOptions == null) {
            throw new ApiException("Missing the required parameter 'updateImapAccessOptions' when calling updateImapAccess(Async)");
        }

        return updateImapAccessCall(updateImapAccessOptions, inboxId, _callback);

    }


    private ApiResponse<Void> updateImapAccessWithHttpInfo(@javax.annotation.Nonnull UpdateImapAccessOptions updateImapAccessOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = updateImapAccessValidateBeforeCall(updateImapAccessOptions, inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateImapAccessAsync(@javax.annotation.Nonnull UpdateImapAccessOptions updateImapAccessOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateImapAccessValidateBeforeCall(updateImapAccessOptions, inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupdateImapAccessRequest {
        @javax.annotation.Nonnull
        private final UpdateImapAccessOptions updateImapAccessOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIupdateImapAccessRequest(@javax.annotation.Nonnull UpdateImapAccessOptions updateImapAccessOptions) {
            this.updateImapAccessOptions = updateImapAccessOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIupdateImapAccessRequest
         */
        public APIupdateImapAccessRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for updateImapAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateImapAccessCall(updateImapAccessOptions, inboxId, _callback);
        }

        /**
         * Execute updateImapAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateImapAccessWithHttpInfo(updateImapAccessOptions, inboxId);
        }

        /**
         * Execute updateImapAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateImapAccessWithHttpInfo(updateImapAccessOptions, inboxId);
        }

        /**
         * Execute updateImapAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateImapAccessAsync(updateImapAccessOptions, inboxId, _callback);
        }
    }

    /**
     * 
     * Update IMAP access usernames and passwords
     * @param updateImapAccessOptions  (required)
     * @return APIupdateImapAccessRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateImapAccessRequest updateImapAccess(@javax.annotation.Nonnull UpdateImapAccessOptions updateImapAccessOptions) {
        return new APIupdateImapAccessRequest(updateImapAccessOptions);
    }
    private okhttp3.Call updateInboxCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UpdateInboxOptions updateInboxOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateInboxOptions;

        // create path and map variables
        String localVarPath = "/inboxes/{inboxId}"
            .replace("{" + "inboxId" + "}", localVarApiClient.escapeString(inboxId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UpdateInboxOptions updateInboxOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling updateInbox(Async)");
        }

        // verify the required parameter 'updateInboxOptions' is set
        if (updateInboxOptions == null) {
            throw new ApiException("Missing the required parameter 'updateInboxOptions' when calling updateInbox(Async)");
        }

        return updateInboxCall(inboxId, updateInboxOptions, _callback);

    }


    private ApiResponse<InboxDto> updateInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UpdateInboxOptions updateInboxOptions) throws ApiException {
        okhttp3.Call localVarCall = updateInboxValidateBeforeCall(inboxId, updateInboxOptions, null);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateInboxAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UpdateInboxOptions updateInboxOptions, final ApiCallback<InboxDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateInboxValidateBeforeCall(inboxId, updateInboxOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIupdateInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final UpdateInboxOptions updateInboxOptions;

        private APIupdateInboxRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UpdateInboxOptions updateInboxOptions) {
            this.inboxId = inboxId;
            this.updateInboxOptions = updateInboxOptions;
        }

        /**
         * Build call for updateInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateInboxCall(inboxId, updateInboxOptions, _callback);
        }

        /**
         * Execute updateInbox request
         * @return InboxDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxDto execute() throws ApiException {
            ApiResponse<InboxDto> localVarResp = updateInboxWithHttpInfo(inboxId, updateInboxOptions);
            return localVarResp.getData();
        }

        /**
         * Execute updateInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxDto> executeWithHttpInfo() throws ApiException {
            return updateInboxWithHttpInfo(inboxId, updateInboxOptions);
        }

        /**
         * Execute updateInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxDto> _callback) throws ApiException {
            return updateInboxAsync(inboxId, updateInboxOptions, _callback);
        }
    }

    /**
     * Update Inbox. Change name and description. Email address is not editable.
     * Update editable fields on an inbox
     * @param inboxId  (required)
     * @param updateInboxOptions  (required)
     * @return APIupdateInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateInboxRequest updateInbox(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull UpdateInboxOptions updateInboxOptions) {
        return new APIupdateInboxRequest(inboxId, updateInboxOptions);
    }
    private okhttp3.Call updateSmtpAccessCall(@javax.annotation.Nonnull UpdateSmtpAccessOptions updateSmtpAccessOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateSmtpAccessOptions;

        // create path and map variables
        String localVarPath = "/inboxes/smtp-access";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSmtpAccessValidateBeforeCall(@javax.annotation.Nonnull UpdateSmtpAccessOptions updateSmtpAccessOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'updateSmtpAccessOptions' is set
        if (updateSmtpAccessOptions == null) {
            throw new ApiException("Missing the required parameter 'updateSmtpAccessOptions' when calling updateSmtpAccess(Async)");
        }

        return updateSmtpAccessCall(updateSmtpAccessOptions, inboxId, _callback);

    }


    private ApiResponse<Void> updateSmtpAccessWithHttpInfo(@javax.annotation.Nonnull UpdateSmtpAccessOptions updateSmtpAccessOptions, @javax.annotation.Nullable UUID inboxId) throws ApiException {
        okhttp3.Call localVarCall = updateSmtpAccessValidateBeforeCall(updateSmtpAccessOptions, inboxId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call updateSmtpAccessAsync(@javax.annotation.Nonnull UpdateSmtpAccessOptions updateSmtpAccessOptions, @javax.annotation.Nullable UUID inboxId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateSmtpAccessValidateBeforeCall(updateSmtpAccessOptions, inboxId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIupdateSmtpAccessRequest {
        @javax.annotation.Nonnull
        private final UpdateSmtpAccessOptions updateSmtpAccessOptions;
        @javax.annotation.Nullable
        private UUID inboxId;

        private APIupdateSmtpAccessRequest(@javax.annotation.Nonnull UpdateSmtpAccessOptions updateSmtpAccessOptions) {
            this.updateSmtpAccessOptions = updateSmtpAccessOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox ID (optional)
         * @return APIupdateSmtpAccessRequest
         */
        public APIupdateSmtpAccessRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Build call for updateSmtpAccess
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return updateSmtpAccessCall(updateSmtpAccessOptions, inboxId, _callback);
        }

        /**
         * Execute updateSmtpAccess request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            updateSmtpAccessWithHttpInfo(updateSmtpAccessOptions, inboxId);
        }

        /**
         * Execute updateSmtpAccess request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return updateSmtpAccessWithHttpInfo(updateSmtpAccessOptions, inboxId);
        }

        /**
         * Execute updateSmtpAccess request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return updateSmtpAccessAsync(updateSmtpAccessOptions, inboxId, _callback);
        }
    }

    /**
     * 
     * Update SMTP access usernames and passwords
     * @param updateSmtpAccessOptions  (required)
     * @return APIupdateSmtpAccessRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIupdateSmtpAccessRequest updateSmtpAccess(@javax.annotation.Nonnull UpdateSmtpAccessOptions updateSmtpAccessOptions) {
        return new APIupdateSmtpAccessRequest(updateSmtpAccessOptions);
    }
}
