/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FormControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FormControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FormControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call submitFormCall(@javax.annotation.Nullable String to, @javax.annotation.Nullable String subject, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String successMessage, @javax.annotation.Nullable String spamCheck, @javax.annotation.Nullable String otherParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/forms";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (to != null) {
            localVarFormParams.put("_to", to);
        }

        if (subject != null) {
            localVarFormParams.put("_subject", subject);
        }

        if (emailAddress != null) {
            localVarFormParams.put("_emailAddress", emailAddress);
        }

        if (successMessage != null) {
            localVarFormParams.put("_successMessage", successMessage);
        }

        if (spamCheck != null) {
            localVarFormParams.put("_spamCheck", spamCheck);
        }

        if (otherParameters != null) {
            localVarFormParams.put("otherParameters", otherParameters);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call submitFormValidateBeforeCall(@javax.annotation.Nullable String to, @javax.annotation.Nullable String subject, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String successMessage, @javax.annotation.Nullable String spamCheck, @javax.annotation.Nullable String otherParameters, final ApiCallback _callback) throws ApiException {
        return submitFormCall(to, subject, emailAddress, successMessage, spamCheck, otherParameters, _callback);

    }


    private ApiResponse<String> submitFormWithHttpInfo(@javax.annotation.Nullable String to, @javax.annotation.Nullable String subject, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String successMessage, @javax.annotation.Nullable String spamCheck, @javax.annotation.Nullable String otherParameters) throws ApiException {
        okhttp3.Call localVarCall = submitFormValidateBeforeCall(to, subject, emailAddress, successMessage, spamCheck, otherParameters, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call submitFormAsync(@javax.annotation.Nullable String to, @javax.annotation.Nullable String subject, @javax.annotation.Nullable String emailAddress, @javax.annotation.Nullable String successMessage, @javax.annotation.Nullable String spamCheck, @javax.annotation.Nullable String otherParameters, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = submitFormValidateBeforeCall(to, subject, emailAddress, successMessage, spamCheck, otherParameters, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIsubmitFormRequest {
        @javax.annotation.Nullable
        private String to;
        @javax.annotation.Nullable
        private String subject;
        @javax.annotation.Nullable
        private String emailAddress;
        @javax.annotation.Nullable
        private String successMessage;
        @javax.annotation.Nullable
        private String spamCheck;
        @javax.annotation.Nullable
        private String otherParameters;

        private APIsubmitFormRequest() {
        }

        /**
         * Set to
         * @param to The email address that submitted form should be sent to. (optional)
         * @return APIsubmitFormRequest
         */
        public APIsubmitFormRequest to(@javax.annotation.Nullable String to) {
            this.to = to;
            return this;
        }

        /**
         * Set subject
         * @param subject Optional subject of the email that will be sent. (optional)
         * @return APIsubmitFormRequest
         */
        public APIsubmitFormRequest subject(@javax.annotation.Nullable String subject) {
            this.subject = subject;
            return this;
        }

        /**
         * Set emailAddress
         * @param emailAddress Email address of the submitting user. Include this if you wish to record the submitters email address and reply to it later. (optional)
         * @return APIsubmitFormRequest
         */
        public APIsubmitFormRequest emailAddress(@javax.annotation.Nullable String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Set successMessage
         * @param successMessage Optional success message to display if no _redirectTo present. (optional)
         * @return APIsubmitFormRequest
         */
        public APIsubmitFormRequest successMessage(@javax.annotation.Nullable String successMessage) {
            this.successMessage = successMessage;
            return this;
        }

        /**
         * Set spamCheck
         * @param spamCheck Optional but recommended field that catches spammers out. Include as a hidden form field but LEAVE EMPTY. Spam-bots will usually fill every field. If the _spamCheck field is filled the form submission will be ignored. (optional)
         * @return APIsubmitFormRequest
         */
        public APIsubmitFormRequest spamCheck(@javax.annotation.Nullable String spamCheck) {
            this.spamCheck = spamCheck;
            return this;
        }

        /**
         * Set otherParameters
         * @param otherParameters All other parameters or fields will be accepted and attached to the sent email. This includes files and any HTML form field with a name. These fields will become the body of the email that is sent. (optional)
         * @return APIsubmitFormRequest
         */
        public APIsubmitFormRequest otherParameters(@javax.annotation.Nullable String otherParameters) {
            this.otherParameters = otherParameters;
            return this;
        }

        /**
         * Build call for submitForm
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return submitFormCall(to, subject, emailAddress, successMessage, spamCheck, otherParameters, _callback);
        }

        /**
         * Execute submitForm request
         * @return String
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public String execute() throws ApiException {
            ApiResponse<String> localVarResp = submitFormWithHttpInfo(to, subject, emailAddress, successMessage, spamCheck, otherParameters);
            return localVarResp.getData();
        }

        /**
         * Execute submitForm request with HTTP info returned
         * @return ApiResponse&lt;String&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<String> executeWithHttpInfo() throws ApiException {
            return submitFormWithHttpInfo(to, subject, emailAddress, successMessage, spamCheck, otherParameters);
        }

        /**
         * Execute submitForm request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<String> _callback) throws ApiException {
            return submitFormAsync(to, subject, emailAddress, successMessage, spamCheck, otherParameters, _callback);
        }
    }

    /**
     * Submit a form to be parsed and sent as an email to an address determined by the form fields
     * This endpoint allows you to submit HTML forms and receive the field values and files via email.   #### Parameters The endpoint looks for special meta parameters in the form fields OR in the URL request parameters. The meta parameters can be used to specify the behaviour of the email.   You must provide at-least a &#x60;_to&#x60; email address to tell the endpoint where the form should be emailed. These can be submitted as hidden HTML input fields with the corresponding &#x60;name&#x60; attributes or as URL query parameters such as &#x60;?_to&#x3D;test@example.com&#x60;  The endpoint takes all other form fields that are named and includes them in the message body of the email. Files are sent as attachments.  #### Submitting This endpoint accepts form submission via POST method. It accepts &#x60;application/x-www-form-urlencoded&#x60;, and &#x60;multipart/form-data&#x60; content-types.  #### HTML Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://java.api.mailslurp.com/forms\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;input name&#x3D;\&quot;_to\&quot; type&#x3D;\&quot;hidden\&quot; value&#x3D;\&quot;test@example.com\&quot;/&gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;  #### URL Example &#x60;&#x60;&#x60;html &lt;form    action&#x3D;\&quot;https://java.api.mailslurp.com/forms?_to&#x3D;test@example.com\&quot;   method&#x3D;\&quot;post\&quot; &gt;   &lt;textarea name&#x3D;\&quot;feedback\&quot;&gt;&lt;/textarea&gt;   &lt;button type&#x3D;\&quot;submit\&quot;&gt;Submit&lt;/button&gt; &lt;/form&gt; &#x60;&#x60;&#x60;    The email address is specified by a &#x60;_to&#x60; field OR is extracted from an email alias specified by a &#x60;_toAlias&#x60; field (see the alias controller for more information).  Endpoint accepts .  You can specify a content type in HTML forms using the &#x60;enctype&#x60; attribute, for instance: &#x60;&lt;form enctype&#x3D;\&quot;multipart/form-data\&quot;&gt;&#x60;.  
     * @return APIsubmitFormRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIsubmitFormRequest submitForm() {
        return new APIsubmitFormRequest();
    }
}
