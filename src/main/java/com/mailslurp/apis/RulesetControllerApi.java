/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiCallback;
import com.mailslurp.clients.ApiClient;
import com.mailslurp.clients.ApiException;
import com.mailslurp.clients.ApiResponse;
import com.mailslurp.clients.Configuration;
import com.mailslurp.clients.Pair;
import com.mailslurp.clients.ProgressRequestBody;
import com.mailslurp.clients.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mailslurp.models.CreateRulesetOptions;
import com.mailslurp.models.InboxRulesetTestResult;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageRulesetDto;
import com.mailslurp.models.RulesetDto;
import com.mailslurp.models.RulesetTestOptions;
import com.mailslurp.models.TestInboxRulesetSendingOptions;
import com.mailslurp.models.TestNewInboxRulesetOptions;
import com.mailslurp.models.TestRulesetReceivingOptions;
import com.mailslurp.models.TestRulesetReceivingResult;
import com.mailslurp.models.TestRulesetSendingResult;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RulesetControllerApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RulesetControllerApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RulesetControllerApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createNewRulesetCall(@javax.annotation.Nonnull CreateRulesetOptions createRulesetOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createRulesetOptions;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createNewRulesetValidateBeforeCall(@javax.annotation.Nonnull CreateRulesetOptions createRulesetOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createRulesetOptions' is set
        if (createRulesetOptions == null) {
            throw new ApiException("Missing the required parameter 'createRulesetOptions' when calling createNewRuleset(Async)");
        }

        return createNewRulesetCall(createRulesetOptions, inboxId, phoneId, _callback);

    }


    private ApiResponse<RulesetDto> createNewRulesetWithHttpInfo(@javax.annotation.Nonnull CreateRulesetOptions createRulesetOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId) throws ApiException {
        okhttp3.Call localVarCall = createNewRulesetValidateBeforeCall(createRulesetOptions, inboxId, phoneId, null);
        Type localVarReturnType = new TypeToken<RulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createNewRulesetAsync(@javax.annotation.Nonnull CreateRulesetOptions createRulesetOptions, @javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, final ApiCallback<RulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = createNewRulesetValidateBeforeCall(createRulesetOptions, inboxId, phoneId, _callback);
        Type localVarReturnType = new TypeToken<RulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIcreateNewRulesetRequest {
        @javax.annotation.Nonnull
        private final CreateRulesetOptions createRulesetOptions;
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID phoneId;

        private APIcreateNewRulesetRequest(@javax.annotation.Nonnull CreateRulesetOptions createRulesetOptions) {
            this.createRulesetOptions = createRulesetOptions;
        }

        /**
         * Set inboxId
         * @param inboxId Inbox id to attach ruleset to (optional)
         * @return APIcreateNewRulesetRequest
         */
        public APIcreateNewRulesetRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Phone id to attach ruleset to (optional)
         * @return APIcreateNewRulesetRequest
         */
        public APIcreateNewRulesetRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Build call for createNewRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return createNewRulesetCall(createRulesetOptions, inboxId, phoneId, _callback);
        }

        /**
         * Execute createNewRuleset request
         * @return RulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RulesetDto execute() throws ApiException {
            ApiResponse<RulesetDto> localVarResp = createNewRulesetWithHttpInfo(createRulesetOptions, inboxId, phoneId);
            return localVarResp.getData();
        }

        /**
         * Execute createNewRuleset request with HTTP info returned
         * @return ApiResponse&lt;RulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesetDto> executeWithHttpInfo() throws ApiException {
            return createNewRulesetWithHttpInfo(createRulesetOptions, inboxId, phoneId);
        }

        /**
         * Execute createNewRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesetDto> _callback) throws ApiException {
            return createNewRulesetAsync(createRulesetOptions, inboxId, phoneId, _callback);
        }
    }

    /**
     * Create a ruleset
     * Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
     * @param createRulesetOptions  (required)
     * @return APIcreateNewRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIcreateNewRulesetRequest createNewRuleset(@javax.annotation.Nonnull CreateRulesetOptions createRulesetOptions) {
        return new APIcreateNewRulesetRequest(createRulesetOptions);
    }
    private okhttp3.Call deleteRulesetCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteRuleset(Async)");
        }

        return deleteRulesetCall(id, _callback);

    }


    private ApiResponse<Void> deleteRulesetWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = deleteRulesetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRulesetAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRulesetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIdeleteRulesetRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for deleteRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRulesetCall(id, _callback);
        }

        /**
         * Execute deleteRuleset request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRulesetWithHttpInfo(id);
        }

        /**
         * Execute deleteRuleset request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRulesetWithHttpInfo(id);
        }

        /**
         * Execute deleteRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRulesetAsync(id, _callback);
        }
    }

    /**
     * Delete a ruleset
     * Delete ruleset
     * @param id ID of ruleset (required)
     * @return APIdeleteRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRulesetRequest deleteRuleset(@javax.annotation.Nonnull UUID id) {
        return new APIdeleteRulesetRequest(id);
    }
    private okhttp3.Call deleteRulesetsCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteRulesetsValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, final ApiCallback _callback) throws ApiException {
        return deleteRulesetsCall(inboxId, phoneId, _callback);

    }


    private ApiResponse<Void> deleteRulesetsWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId) throws ApiException {
        okhttp3.Call localVarCall = deleteRulesetsValidateBeforeCall(inboxId, phoneId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteRulesetsAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteRulesetsValidateBeforeCall(inboxId, phoneId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class APIdeleteRulesetsRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID phoneId;

        private APIdeleteRulesetsRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to attach ruleset to (optional)
         * @return APIdeleteRulesetsRequest
         */
        public APIdeleteRulesetsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId  (optional)
         * @return APIdeleteRulesetsRequest
         */
        public APIdeleteRulesetsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Build call for deleteRulesets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteRulesetsCall(inboxId, phoneId, _callback);
        }

        /**
         * Execute deleteRulesets request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteRulesetsWithHttpInfo(inboxId, phoneId);
        }

        /**
         * Execute deleteRulesets request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteRulesetsWithHttpInfo(inboxId, phoneId);
        }

        /**
         * Execute deleteRulesets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteRulesetsAsync(inboxId, phoneId, _callback);
        }
    }

    /**
     * Delete rulesets
     * Delete rulesets. Accepts optional inboxId or phoneId filters.
     * @return APIdeleteRulesetsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> No Content </td><td>  -  </td></tr>
     </table>
     */
    public APIdeleteRulesetsRequest deleteRulesets() {
        return new APIdeleteRulesetsRequest();
    }
    private okhttp3.Call getRulesetCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getRuleset(Async)");
        }

        return getRulesetCall(id, _callback);

    }


    private ApiResponse<RulesetDto> getRulesetWithHttpInfo(@javax.annotation.Nonnull UUID id) throws ApiException {
        okhttp3.Call localVarCall = getRulesetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<RulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRulesetAsync(@javax.annotation.Nonnull UUID id, final ApiCallback<RulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRulesetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<RulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID id;

        private APIgetRulesetRequest(@javax.annotation.Nonnull UUID id) {
            this.id = id;
        }

        /**
         * Build call for getRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRulesetCall(id, _callback);
        }

        /**
         * Execute getRuleset request
         * @return RulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public RulesetDto execute() throws ApiException {
            ApiResponse<RulesetDto> localVarResp = getRulesetWithHttpInfo(id);
            return localVarResp.getData();
        }

        /**
         * Execute getRuleset request with HTTP info returned
         * @return ApiResponse&lt;RulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<RulesetDto> executeWithHttpInfo() throws ApiException {
            return getRulesetWithHttpInfo(id);
        }

        /**
         * Execute getRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<RulesetDto> _callback) throws ApiException {
            return getRulesetAsync(id, _callback);
        }
    }

    /**
     * Get a ruleset
     * Get ruleset
     * @param id ID of ruleset (required)
     * @return APIgetRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRulesetRequest getRuleset(@javax.annotation.Nonnull UUID id) {
        return new APIgetRulesetRequest(id);
    }
    private okhttp3.Call getRulesetsCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        if (phoneId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("phoneId", phoneId));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (searchFilter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("searchFilter", searchFilter));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (before != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("before", before));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRulesetsValidateBeforeCall(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback _callback) throws ApiException {
        return getRulesetsCall(inboxId, phoneId, page, size, sort, searchFilter, since, before, _callback);

    }


    private ApiResponse<PageRulesetDto> getRulesetsWithHttpInfo(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before) throws ApiException {
        okhttp3.Call localVarCall = getRulesetsValidateBeforeCall(inboxId, phoneId, page, size, sort, searchFilter, since, before, null);
        Type localVarReturnType = new TypeToken<PageRulesetDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getRulesetsAsync(@javax.annotation.Nullable UUID inboxId, @javax.annotation.Nullable UUID phoneId, @javax.annotation.Nullable Integer page, @javax.annotation.Nullable Integer size, @javax.annotation.Nullable String sort, @javax.annotation.Nullable String searchFilter, @javax.annotation.Nullable OffsetDateTime since, @javax.annotation.Nullable OffsetDateTime before, final ApiCallback<PageRulesetDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRulesetsValidateBeforeCall(inboxId, phoneId, page, size, sort, searchFilter, since, before, _callback);
        Type localVarReturnType = new TypeToken<PageRulesetDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APIgetRulesetsRequest {
        @javax.annotation.Nullable
        private UUID inboxId;
        @javax.annotation.Nullable
        private UUID phoneId;
        @javax.annotation.Nullable
        private Integer page;
        @javax.annotation.Nullable
        private Integer size;
        @javax.annotation.Nullable
        private String sort;
        @javax.annotation.Nullable
        private String searchFilter;
        @javax.annotation.Nullable
        private OffsetDateTime since;
        @javax.annotation.Nullable
        private OffsetDateTime before;

        private APIgetRulesetsRequest() {
        }

        /**
         * Set inboxId
         * @param inboxId Optional inbox id to get rulesets from (optional)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest inboxId(@javax.annotation.Nullable UUID inboxId) {
            this.inboxId = inboxId;
            return this;
        }

        /**
         * Set phoneId
         * @param phoneId Optional phone id to get rulesets from (optional)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest phoneId(@javax.annotation.Nullable UUID phoneId) {
            this.phoneId = phoneId;
            return this;
        }

        /**
         * Set page
         * @param page Optional page index in inbox ruleset list pagination (optional, default to 0)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest page(@javax.annotation.Nullable Integer page) {
            this.page = page;
            return this;
        }

        /**
         * Set size
         * @param size Optional page size in inbox ruleset list pagination (optional, default to 20)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest size(@javax.annotation.Nullable Integer size) {
            this.size = size;
            return this;
        }

        /**
         * Set sort
         * @param sort Optional createdAt sort direction ASC or DESC (optional, default to ASC)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest sort(@javax.annotation.Nullable String sort) {
            this.sort = sort;
            return this;
        }

        /**
         * Set searchFilter
         * @param searchFilter Optional search filter (optional)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest searchFilter(@javax.annotation.Nullable String searchFilter) {
            this.searchFilter = searchFilter;
            return this;
        }

        /**
         * Set since
         * @param since Filter by created at after the given timestamp (optional)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest since(@javax.annotation.Nullable OffsetDateTime since) {
            this.since = since;
            return this;
        }

        /**
         * Set before
         * @param before Filter by created at before the given timestamp (optional)
         * @return APIgetRulesetsRequest
         */
        public APIgetRulesetsRequest before(@javax.annotation.Nullable OffsetDateTime before) {
            this.before = before;
            return this;
        }

        /**
         * Build call for getRulesets
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getRulesetsCall(inboxId, phoneId, page, size, sort, searchFilter, since, before, _callback);
        }

        /**
         * Execute getRulesets request
         * @return PageRulesetDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public PageRulesetDto execute() throws ApiException {
            ApiResponse<PageRulesetDto> localVarResp = getRulesetsWithHttpInfo(inboxId, phoneId, page, size, sort, searchFilter, since, before);
            return localVarResp.getData();
        }

        /**
         * Execute getRulesets request with HTTP info returned
         * @return ApiResponse&lt;PageRulesetDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PageRulesetDto> executeWithHttpInfo() throws ApiException {
            return getRulesetsWithHttpInfo(inboxId, phoneId, page, size, sort, searchFilter, since, before);
        }

        /**
         * Execute getRulesets request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PageRulesetDto> _callback) throws ApiException {
            return getRulesetsAsync(inboxId, phoneId, page, size, sort, searchFilter, since, before, _callback);
        }
    }

    /**
     * List rulesets block and allow lists
     * List all rulesets attached to an inbox or phone or account
     * @return APIgetRulesetsRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APIgetRulesetsRequest getRulesets() {
        return new APIgetRulesetsRequest();
    }
    private okhttp3.Call testInboxRulesetsForInboxCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rulesetTestOptions;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (inboxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("inboxId", inboxId));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testInboxRulesetsForInboxValidateBeforeCall(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'inboxId' is set
        if (inboxId == null) {
            throw new ApiException("Missing the required parameter 'inboxId' when calling testInboxRulesetsForInbox(Async)");
        }

        // verify the required parameter 'rulesetTestOptions' is set
        if (rulesetTestOptions == null) {
            throw new ApiException("Missing the required parameter 'rulesetTestOptions' when calling testInboxRulesetsForInbox(Async)");
        }

        return testInboxRulesetsForInboxCall(inboxId, rulesetTestOptions, _callback);

    }


    private ApiResponse<InboxRulesetTestResult> testInboxRulesetsForInboxWithHttpInfo(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions) throws ApiException {
        okhttp3.Call localVarCall = testInboxRulesetsForInboxValidateBeforeCall(inboxId, rulesetTestOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testInboxRulesetsForInboxAsync(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions, final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testInboxRulesetsForInboxValidateBeforeCall(inboxId, rulesetTestOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestInboxRulesetsForInboxRequest {
        @javax.annotation.Nonnull
        private final UUID inboxId;
        @javax.annotation.Nonnull
        private final RulesetTestOptions rulesetTestOptions;

        private APItestInboxRulesetsForInboxRequest(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions) {
            this.inboxId = inboxId;
            this.rulesetTestOptions = rulesetTestOptions;
        }

        /**
         * Build call for testInboxRulesetsForInbox
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testInboxRulesetsForInboxCall(inboxId, rulesetTestOptions, _callback);
        }

        /**
         * Execute testInboxRulesetsForInbox request
         * @return InboxRulesetTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetTestResult execute() throws ApiException {
            ApiResponse<InboxRulesetTestResult> localVarResp = testInboxRulesetsForInboxWithHttpInfo(inboxId, rulesetTestOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testInboxRulesetsForInbox request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetTestResult> executeWithHttpInfo() throws ApiException {
            return testInboxRulesetsForInboxWithHttpInfo(inboxId, rulesetTestOptions);
        }

        /**
         * Execute testInboxRulesetsForInbox request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {
            return testInboxRulesetsForInboxAsync(inboxId, rulesetTestOptions, _callback);
        }
    }

    /**
     * Test inbox rulesets for inbox
     * Test inbox rulesets for inbox
     * @param inboxId ID of inbox (required)
     * @param rulesetTestOptions  (required)
     * @return APItestInboxRulesetsForInboxRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestInboxRulesetsForInboxRequest testInboxRulesetsForInbox(@javax.annotation.Nonnull UUID inboxId, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions) {
        return new APItestInboxRulesetsForInboxRequest(inboxId, rulesetTestOptions);
    }
    private okhttp3.Call testNewRulesetCall(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testNewInboxRulesetOptions;

        // create path and map variables
        String localVarPath = "/rulesets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testNewRulesetValidateBeforeCall(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testNewInboxRulesetOptions' is set
        if (testNewInboxRulesetOptions == null) {
            throw new ApiException("Missing the required parameter 'testNewInboxRulesetOptions' when calling testNewRuleset(Async)");
        }

        return testNewRulesetCall(testNewInboxRulesetOptions, _callback);

    }


    private ApiResponse<InboxRulesetTestResult> testNewRulesetWithHttpInfo(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions) throws ApiException {
        okhttp3.Call localVarCall = testNewRulesetValidateBeforeCall(testNewInboxRulesetOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testNewRulesetAsync(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions, final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testNewRulesetValidateBeforeCall(testNewInboxRulesetOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestNewRulesetRequest {
        @javax.annotation.Nonnull
        private final TestNewInboxRulesetOptions testNewInboxRulesetOptions;

        private APItestNewRulesetRequest(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions) {
            this.testNewInboxRulesetOptions = testNewInboxRulesetOptions;
        }

        /**
         * Build call for testNewRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testNewRulesetCall(testNewInboxRulesetOptions, _callback);
        }

        /**
         * Execute testNewRuleset request
         * @return InboxRulesetTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetTestResult execute() throws ApiException {
            ApiResponse<InboxRulesetTestResult> localVarResp = testNewRulesetWithHttpInfo(testNewInboxRulesetOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testNewRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetTestResult> executeWithHttpInfo() throws ApiException {
            return testNewRulesetWithHttpInfo(testNewInboxRulesetOptions);
        }

        /**
         * Execute testNewRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {
            return testNewRulesetAsync(testNewInboxRulesetOptions, _callback);
        }
    }

    /**
     * Test new ruleset
     * Test new ruleset
     * @param testNewInboxRulesetOptions  (required)
     * @return APItestNewRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestNewRulesetRequest testNewRuleset(@javax.annotation.Nonnull TestNewInboxRulesetOptions testNewInboxRulesetOptions) {
        return new APItestNewRulesetRequest(testNewInboxRulesetOptions);
    }
    private okhttp3.Call testRulesetCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = rulesetTestOptions;

        // create path and map variables
        String localVarPath = "/rulesets/{id}/test"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testRulesetValidateBeforeCall(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling testRuleset(Async)");
        }

        // verify the required parameter 'rulesetTestOptions' is set
        if (rulesetTestOptions == null) {
            throw new ApiException("Missing the required parameter 'rulesetTestOptions' when calling testRuleset(Async)");
        }

        return testRulesetCall(id, rulesetTestOptions, _callback);

    }


    private ApiResponse<InboxRulesetTestResult> testRulesetWithHttpInfo(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions) throws ApiException {
        okhttp3.Call localVarCall = testRulesetValidateBeforeCall(id, rulesetTestOptions, null);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testRulesetAsync(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions, final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testRulesetValidateBeforeCall(id, rulesetTestOptions, _callback);
        Type localVarReturnType = new TypeToken<InboxRulesetTestResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestRulesetRequest {
        @javax.annotation.Nonnull
        private final UUID id;
        @javax.annotation.Nonnull
        private final RulesetTestOptions rulesetTestOptions;

        private APItestRulesetRequest(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions) {
            this.id = id;
            this.rulesetTestOptions = rulesetTestOptions;
        }

        /**
         * Build call for testRuleset
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testRulesetCall(id, rulesetTestOptions, _callback);
        }

        /**
         * Execute testRuleset request
         * @return InboxRulesetTestResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public InboxRulesetTestResult execute() throws ApiException {
            ApiResponse<InboxRulesetTestResult> localVarResp = testRulesetWithHttpInfo(id, rulesetTestOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testRuleset request with HTTP info returned
         * @return ApiResponse&lt;InboxRulesetTestResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<InboxRulesetTestResult> executeWithHttpInfo() throws ApiException {
            return testRulesetWithHttpInfo(id, rulesetTestOptions);
        }

        /**
         * Execute testRuleset request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<InboxRulesetTestResult> _callback) throws ApiException {
            return testRulesetAsync(id, rulesetTestOptions, _callback);
        }
    }

    /**
     * Test a ruleset
     * Test an inbox or phone ruleset
     * @param id ID of ruleset (required)
     * @param rulesetTestOptions  (required)
     * @return APItestRulesetRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestRulesetRequest testRuleset(@javax.annotation.Nonnull UUID id, @javax.annotation.Nonnull RulesetTestOptions rulesetTestOptions) {
        return new APItestRulesetRequest(id, rulesetTestOptions);
    }
    private okhttp3.Call testRulesetReceivingCall(@javax.annotation.Nonnull TestRulesetReceivingOptions testRulesetReceivingOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testRulesetReceivingOptions;

        // create path and map variables
        String localVarPath = "/rulesets/test-receiving";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testRulesetReceivingValidateBeforeCall(@javax.annotation.Nonnull TestRulesetReceivingOptions testRulesetReceivingOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testRulesetReceivingOptions' is set
        if (testRulesetReceivingOptions == null) {
            throw new ApiException("Missing the required parameter 'testRulesetReceivingOptions' when calling testRulesetReceiving(Async)");
        }

        return testRulesetReceivingCall(testRulesetReceivingOptions, _callback);

    }


    private ApiResponse<TestRulesetReceivingResult> testRulesetReceivingWithHttpInfo(@javax.annotation.Nonnull TestRulesetReceivingOptions testRulesetReceivingOptions) throws ApiException {
        okhttp3.Call localVarCall = testRulesetReceivingValidateBeforeCall(testRulesetReceivingOptions, null);
        Type localVarReturnType = new TypeToken<TestRulesetReceivingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testRulesetReceivingAsync(@javax.annotation.Nonnull TestRulesetReceivingOptions testRulesetReceivingOptions, final ApiCallback<TestRulesetReceivingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testRulesetReceivingValidateBeforeCall(testRulesetReceivingOptions, _callback);
        Type localVarReturnType = new TypeToken<TestRulesetReceivingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestRulesetReceivingRequest {
        @javax.annotation.Nonnull
        private final TestRulesetReceivingOptions testRulesetReceivingOptions;

        private APItestRulesetReceivingRequest(@javax.annotation.Nonnull TestRulesetReceivingOptions testRulesetReceivingOptions) {
            this.testRulesetReceivingOptions = testRulesetReceivingOptions;
        }

        /**
         * Build call for testRulesetReceiving
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testRulesetReceivingCall(testRulesetReceivingOptions, _callback);
        }

        /**
         * Execute testRulesetReceiving request
         * @return TestRulesetReceivingResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TestRulesetReceivingResult execute() throws ApiException {
            ApiResponse<TestRulesetReceivingResult> localVarResp = testRulesetReceivingWithHttpInfo(testRulesetReceivingOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testRulesetReceiving request with HTTP info returned
         * @return ApiResponse&lt;TestRulesetReceivingResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TestRulesetReceivingResult> executeWithHttpInfo() throws ApiException {
            return testRulesetReceivingWithHttpInfo(testRulesetReceivingOptions);
        }

        /**
         * Execute testRulesetReceiving request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TestRulesetReceivingResult> _callback) throws ApiException {
            return testRulesetReceivingAsync(testRulesetReceivingOptions, _callback);
        }
    }

    /**
     * Test receiving with rulesets
     * Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
     * @param testRulesetReceivingOptions  (required)
     * @return APItestRulesetReceivingRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestRulesetReceivingRequest testRulesetReceiving(@javax.annotation.Nonnull TestRulesetReceivingOptions testRulesetReceivingOptions) {
        return new APItestRulesetReceivingRequest(testRulesetReceivingOptions);
    }
    private okhttp3.Call testRulesetSendingCall(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = testInboxRulesetSendingOptions;

        // create path and map variables
        String localVarPath = "/rulesets/test-sending";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_KEY" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call testRulesetSendingValidateBeforeCall(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'testInboxRulesetSendingOptions' is set
        if (testInboxRulesetSendingOptions == null) {
            throw new ApiException("Missing the required parameter 'testInboxRulesetSendingOptions' when calling testRulesetSending(Async)");
        }

        return testRulesetSendingCall(testInboxRulesetSendingOptions, _callback);

    }


    private ApiResponse<TestRulesetSendingResult> testRulesetSendingWithHttpInfo(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions) throws ApiException {
        okhttp3.Call localVarCall = testRulesetSendingValidateBeforeCall(testInboxRulesetSendingOptions, null);
        Type localVarReturnType = new TypeToken<TestRulesetSendingResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call testRulesetSendingAsync(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions, final ApiCallback<TestRulesetSendingResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = testRulesetSendingValidateBeforeCall(testInboxRulesetSendingOptions, _callback);
        Type localVarReturnType = new TypeToken<TestRulesetSendingResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class APItestRulesetSendingRequest {
        @javax.annotation.Nonnull
        private final TestInboxRulesetSendingOptions testInboxRulesetSendingOptions;

        private APItestRulesetSendingRequest(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions) {
            this.testInboxRulesetSendingOptions = testInboxRulesetSendingOptions;
        }

        /**
         * Build call for testRulesetSending
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return testRulesetSendingCall(testInboxRulesetSendingOptions, _callback);
        }

        /**
         * Execute testRulesetSending request
         * @return TestRulesetSendingResult
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TestRulesetSendingResult execute() throws ApiException {
            ApiResponse<TestRulesetSendingResult> localVarResp = testRulesetSendingWithHttpInfo(testInboxRulesetSendingOptions);
            return localVarResp.getData();
        }

        /**
         * Execute testRulesetSending request with HTTP info returned
         * @return ApiResponse&lt;TestRulesetSendingResult&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TestRulesetSendingResult> executeWithHttpInfo() throws ApiException {
            return testRulesetSendingWithHttpInfo(testInboxRulesetSendingOptions);
        }

        /**
         * Execute testRulesetSending request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table border="1">
       <caption>Response Details</caption>
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TestRulesetSendingResult> _callback) throws ApiException {
            return testRulesetSendingAsync(testInboxRulesetSendingOptions, _callback);
        }
    }

    /**
     * Test sending with rulesets
     * Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
     * @param testInboxRulesetSendingOptions  (required)
     * @return APItestRulesetSendingRequest
     * @http.response.details
     <table border="1">
       <caption>Response Details</caption>
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public APItestRulesetSendingRequest testRulesetSending(@javax.annotation.Nonnull TestInboxRulesetSendingOptions testInboxRulesetSendingOptions) {
        return new APItestRulesetSendingRequest(testInboxRulesetSendingOptions);
    }
}
