/*
 * MailSlurp API
 * ## Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.Email;
import com.mailslurp.models.ForwardEmailOptions;
import com.mailslurp.models.PageEmailProjection;
import java.util.UUID;
import com.mailslurp.models.ValidationDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailControllerApi
 */
@Ignore
public class EmailControllerApiTest {

    private final EmailControllerApi api = new EmailControllerApi();

    
    /**
     * Delete all emails
     *
     * Deletes all emails
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllEmailsTest() throws ApiException {
        api.deleteAllEmails();

        // TODO: test validations
    }
    
    /**
     * Delete Email
     *
     * Deletes an email and removes it from the inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailTest() throws ApiException {
        UUID emailId = null;
        api.deleteEmail(emailId);

        // TODO: test validations
    }
    
    /**
     * Get email attachment
     *
     * Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadAttachmentTest() throws ApiException {
        String attachmentId = null;
        UUID emailId = null;
        String apiKey = null;
        byte[] response = api.downloadAttachment(attachmentId, emailId, apiKey);

        // TODO: test validations
    }
    
    /**
     * Forward Email
     *
     * Forward email content to given recipients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forwardEmailTest() throws ApiException {
        UUID emailId = null;
        ForwardEmailOptions forwardEmailOptions = null;
        api.forwardEmail(emailId, forwardEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Get email attachment metadata
     *
     * Returns the metadata such as name and content-type for a given attachment and email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentMetaDataTest() throws ApiException {
        String attachmentId = null;
        UUID emailId = null;
        AttachmentMetaData response = api.getAttachmentMetaData(attachmentId, emailId);

        // TODO: test validations
    }
    
    /**
     * Get all email attachment metadata
     *
     * Returns an array of attachment metadata such as name and content-type for a given email if present.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        UUID emailId = null;
        List<AttachmentMetaData> response = api.getAttachments(emailId);

        // TODO: test validations
    }
    
    /**
     * Get Email Content
     *
     * Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailTest() throws ApiException {
        UUID emailId = null;
        Email response = api.getEmail(emailId);

        // TODO: test validations
    }
    
    /**
     * Get all emails
     *
     * Responses are paginated
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsPaginatedTest() throws ApiException {
        List<UUID> inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        PageEmailProjection response = api.getEmailsPaginated(inboxId, page, size, sort, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Get Raw Email Content
     *
     * Returns a raw, unparsed and unprocessed email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawEmailContentsTest() throws ApiException {
        UUID emailId = null;
        String response = api.getRawEmailContents(emailId);

        // TODO: test validations
    }
    
    /**
     * Validate email
     *
     * Validate HTML content of email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateEmailTest() throws ApiException {
        UUID emailId = null;
        ValidationDto response = api.validateEmail(emailId);

        // TODO: test validations
    }
    
}
