/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Overview  #### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  #### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  #### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ## Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}``.  ## Explore     
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.Email;
import com.mailslurp.models.ForwardEmailOptions;
import com.mailslurp.models.PageEmailProjection;
import java.util.UUID;
import com.mailslurp.models.ValidationDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailControllerApi
 */
@Ignore
public class EmailControllerApiTest {

    private final EmailControllerApi api = new EmailControllerApi();

    
    /**
     * Delete all emails
     *
     * Deletes all emails
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllEmailsTest() throws ApiException {
        api.deleteAllEmails();

        // TODO: test validations
    }
    
    /**
     * Delete Email
     *
     * Deletes an email and removes it from the inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailTest() throws ApiException {
        UUID emailId = null;
        api.deleteEmail(emailId);

        // TODO: test validations
    }
    
    /**
     * Get email attachment
     *
     * Returns the specified attachment for a given email as a byte stream (file download). Get the attachmentId from the email response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadAttachmentTest() throws ApiException {
        String attachmentId = null;
        UUID emailId = null;
        String apiKey = null;
        byte[] response = api.downloadAttachment(attachmentId, emailId, apiKey);

        // TODO: test validations
    }
    
    /**
     * Forward Email
     *
     * Forward email content to given recipients
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forwardEmailTest() throws ApiException {
        UUID emailId = null;
        ForwardEmailOptions forwardEmailOptions = null;
        api.forwardEmail(emailId, forwardEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Get email attachment metadata
     *
     * Returns the metadata such as name and content-type for a given attachment and email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentMetaDataTest() throws ApiException {
        String attachmentId = null;
        UUID emailId = null;
        AttachmentMetaData response = api.getAttachmentMetaData(attachmentId, emailId);

        // TODO: test validations
    }
    
    /**
     * Get all email attachment metadata
     *
     * Returns an array of attachment metadata such as name and content-type for a given email if present.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        UUID emailId = null;
        List<AttachmentMetaData> response = api.getAttachments(emailId);

        // TODO: test validations
    }
    
    /**
     * Get Email Content
     *
     * Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawMessage endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailTest() throws ApiException {
        UUID emailId = null;
        Email response = api.getEmail(emailId);

        // TODO: test validations
    }
    
    /**
     * Get all emails
     *
     * Responses are paginated
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsPaginatedTest() throws ApiException {
        List<UUID> inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        PageEmailProjection response = api.getEmailsPaginated(inboxId, page, size, sort, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Get Raw Email Content
     *
     * Returns a raw, unparsed and unprocessed email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawEmailContentsTest() throws ApiException {
        UUID emailId = null;
        String response = api.getRawEmailContents(emailId);

        // TODO: test validations
    }
    
    /**
     * Validate email
     *
     * Validate HTML content of email
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateEmailTest() throws ApiException {
        UUID emailId = null;
        ValidationDto response = api.validateEmail(emailId);

        // TODO: test validations
    }
    
}
