/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.Email;
import com.mailslurp.models.ForwardEmailOptions;
import com.mailslurp.models.PageEmailProjection;
import com.mailslurp.models.RawEmailJson;
import java.util.UUID;
import com.mailslurp.models.UnreadCount;
import com.mailslurp.models.ValidationDto;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailControllerApi
 */
@Ignore
public class EmailControllerApiTest {

    private final EmailControllerApi api = new EmailControllerApi();

    
    /**
     * Delete all emails
     *
     * Deletes all emails in your account. Be careful as emails cannot be recovered
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllEmailsTest() throws ApiException {
        api.deleteAllEmails();

        // TODO: test validations
    }
    
    /**
     * Delete an email
     *
     * Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteEmailTest() throws ApiException {
        UUID emailId = null;
        api.deleteEmail(emailId);

        // TODO: test validations
    }
    
    /**
     * Get email attachment bytes
     *
     * Returns the specified attachment for a given email as a byte stream (file download). You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void downloadAttachmentTest() throws ApiException {
        String attachmentId = null;
        UUID emailId = null;
        String apiKey = null;
        byte[] response = api.downloadAttachment(attachmentId, emailId, apiKey);

        // TODO: test validations
    }
    
    /**
     * Forward email
     *
     * Forward an existing email to new recipients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void forwardEmailTest() throws ApiException {
        UUID emailId = null;
        ForwardEmailOptions forwardEmailOptions = null;
        api.forwardEmail(emailId, forwardEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Get email attachment metadata
     *
     * Returns the metadata such as name and content-type for a given attachment and email.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentMetaDataTest() throws ApiException {
        String attachmentId = null;
        UUID emailId = null;
        AttachmentMetaData response = api.getAttachmentMetaData(attachmentId, emailId);

        // TODO: test validations
    }
    
    /**
     * Get all email attachment metadata
     *
     * Returns an array of attachment metadata such as name and content-type for a given email if present.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        UUID emailId = null;
        List<AttachmentMetaData> response = api.getAttachments(emailId);

        // TODO: test validations
    }
    
    /**
     * Get email content
     *
     * Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailTest() throws ApiException {
        UUID emailId = null;
        Boolean decode = null;
        Email response = api.getEmail(emailId, decode);

        // TODO: test validations
    }
    
    /**
     * Get email content as HTML
     *
     * Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailHTMLTest() throws ApiException {
        UUID emailId = null;
        Boolean decode = null;
        String response = api.getEmailHTML(emailId, decode);

        // TODO: test validations
    }
    
    /**
     * Get all emails
     *
     * By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsPaginatedTest() throws ApiException {
        List<UUID> inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        PageEmailProjection response = api.getEmailsPaginated(inboxId, page, size, sort, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Get raw email string
     *
     * Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawEmailContentsTest() throws ApiException {
        UUID emailId = null;
        String response = api.getRawEmailContents(emailId);

        // TODO: test validations
    }
    
    /**
     * Get raw email in JSON
     *
     * Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawEmailJsonTest() throws ApiException {
        UUID emailId = null;
        RawEmailJson response = api.getRawEmailJson(emailId);

        // TODO: test validations
    }
    
    /**
     * Get unread email count
     *
     * Get number of emails unread
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnreadEmailCountTest() throws ApiException {
        UnreadCount response = api.getUnreadEmailCount();

        // TODO: test validations
    }
    
    /**
     * Validate email
     *
     * Validate the HTML content of email if HTML is found. Considered valid if no HTML.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateEmailTest() throws ApiException {
        UUID emailId = null;
        ValidationDto response = api.validateEmail(emailId);

        // TODO: test validations
    }
    
}
