/*
 * MailSlurp API
 * ## Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.Inbox;
import org.threeten.bp.OffsetDateTime;
import com.mailslurp.models.PageEmailPreview;
import com.mailslurp.models.PageInboxProjection;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SetInboxFavouritedOptions;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxControllerApi
 */
@Ignore
public class InboxControllerApiTest {

    private final InboxControllerApi api = new InboxControllerApi();

    
    /**
     * Create an Inbox (email address)
     *
     * Create a new inbox and with a ranmdomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInboxTest() throws ApiException {
        String description = null;
        String emailAddress = null;
        OffsetDateTime expiresAt = null;
        Boolean favourite = null;
        String name = null;
        List<String> tags = null;
        Inbox response = api.createInbox(description, emailAddress, expiresAt, favourite, name, tags);

        // TODO: test validations
    }
    
    /**
     * Delete all inboxes
     *
     * Permanently delete all inboxes and associated email addresses and all emails within the given inboxes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllInboxesTest() throws ApiException {
        api.deleteAllInboxes();

        // TODO: test validations
    }
    
    /**
     * Delete Inbox / Email Address
     *
     * Permanently delete an inbox and associated email address and all emails within the given inboxes
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboxTest() throws ApiException {
        UUID inboxId = null;
        api.deleteInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * List Inboxes Paginated
     *
     * List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllInboxesTest() throws ApiException {
        Boolean favourite = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        String sort = null;
        PageInboxProjection response = api.getAllInboxes(favourite, page, search, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get emails in an Inbox
     *
     * List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer limit = null;
        Long minCount = null;
        Long retryTimeout = null;
        OffsetDateTime since = null;
        String sort = null;
        List<EmailPreview> response = api.getEmails(inboxId, limit, minCount, retryTimeout, since, sort);

        // TODO: test validations
    }
    
    /**
     * Get Inbox / EmailAddress
     *
     * Returns an inbox&#39;s properties, including its email address and ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxTest() throws ApiException {
        UUID inboxId = null;
        Inbox response = api.getInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * Get inbox emails paginated
     *
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxEmailsPaginatedTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageEmailPreview response = api.getInboxEmailsPaginated(inboxId, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * List Inboxes / Email Addresses
     *
     * List the inboxes you have created
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxesTest() throws ApiException {
        List<Inbox> response = api.getInboxes();

        // TODO: test validations
    }
    
    /**
     * Send Email
     *
     * Send an email from the inbox&#39;s email address. Specify the email recipients and contents in the request body. See the &#x60;SendEmailOptions&#x60; for more information. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id NOT its email address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        api.sendEmail(inboxId, sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Set inbox favourited state
     *
     * Set and return new favourite state for an inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setInboxFavouritedTest() throws ApiException {
        UUID inboxId = null;
        SetInboxFavouritedOptions setInboxFavouritedOptions = null;
        Inbox response = api.setInboxFavourited(inboxId, setInboxFavouritedOptions);

        // TODO: test validations
    }
    
}
