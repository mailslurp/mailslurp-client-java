/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.Inbox;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageEmailPreview;
import com.mailslurp.models.PageInboxProjection;
import com.mailslurp.models.PageSentEmailProjection;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SetInboxFavouritedOptions;
import java.util.UUID;
import com.mailslurp.models.UpdateInboxOptions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxControllerApi
 */
@Ignore
public class InboxControllerApiTest {

    private final InboxControllerApi api = new InboxControllerApi();

    
    /**
     * Create an Inbox (email address)
     *
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInboxTest() throws ApiException {
        String description = null;
        String emailAddress = null;
        OffsetDateTime expiresAt = null;
        Boolean favourite = null;
        String name = null;
        List<String> tags = null;
        Inbox response = api.createInbox(description, emailAddress, expiresAt, favourite, name, tags);

        // TODO: test validations
    }
    
    /**
     * Delete all inboxes
     *
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllInboxesTest() throws ApiException {
        api.deleteAllInboxes();

        // TODO: test validations
    }
    
    /**
     * Delete inbox
     *
     * Permanently delete an inbox and associated email address aswell as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboxTest() throws ApiException {
        UUID inboxId = null;
        api.deleteInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * List Inboxes Paginated
     *
     * List inboxes in paginated form. Allows for page index, page size, and sort direction. Can also filter by favourited or email address like pattern.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllInboxesTest() throws ApiException {
        Boolean favourite = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        String sort = null;
        String tag = null;
        PageInboxProjection response = api.getAllInboxes(favourite, page, search, size, sort, tag);

        // TODO: test validations
    }
    
    /**
     * Get emails in an Inbox
     *
     * List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer limit = null;
        Long minCount = null;
        Long retryTimeout = null;
        OffsetDateTime since = null;
        String sort = null;
        List<EmailPreview> response = api.getEmails(inboxId, limit, minCount, retryTimeout, since, sort);

        // TODO: test validations
    }
    
    /**
     * Get Inbox
     *
     * Returns an inbox&#39;s properties, including its email address and ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxTest() throws ApiException {
        UUID inboxId = null;
        Inbox response = api.getInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * Get inbox emails paginated
     *
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxEmailsPaginatedTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageEmailPreview response = api.getInboxEmailsPaginated(inboxId, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get Inbox Sent Emails
     *
     * Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxSentEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageSentEmailProjection response = api.getInboxSentEmails(inboxId, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get inbox tags
     *
     * Get all inbox tags
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxTagsTest() throws ApiException {
        List<String> response = api.getInboxTags();

        // TODO: test validations
    }
    
    /**
     * List Inboxes / Email Addresses
     *
     * List the inboxes you have created
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxesTest() throws ApiException {
        List<Inbox> response = api.getInboxes();

        // TODO: test validations
    }
    
    /**
     * Send Email
     *
     * Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        api.sendEmail(inboxId, sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Set inbox favourited state
     *
     * Set and return new favourite state for an inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setInboxFavouritedTest() throws ApiException {
        UUID inboxId = null;
        SetInboxFavouritedOptions setInboxFavouritedOptions = null;
        Inbox response = api.setInboxFavourited(inboxId, setInboxFavouritedOptions);

        // TODO: test validations
    }
    
    /**
     * Update Inbox
     *
     * Update editable fields on an inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInboxTest() throws ApiException {
        UUID inboxId = null;
        UpdateInboxOptions updateInboxOptions = null;
        Inbox response = api.updateInbox(inboxId, updateInboxOptions);

        // TODO: test validations
    }
    
}
