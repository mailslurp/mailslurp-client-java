/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository  ## Basic Concepts  ### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  ### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  ### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ### Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}`.  > You can do a lot more with MailSlurp so see the included documentation for more information.  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.Inbox;
import com.mailslurp.models.MatchOptions;
import com.mailslurp.models.SendEmailOptions;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommonActionsControllerApi
 */
@Ignore
public class CommonActionsControllerApiTest {

    private final CommonActionsControllerApi api = new CommonActionsControllerApi();

    
    /**
     * Create new random inbox
     *
     * Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewEmailAddressTest() throws ApiException {
        Inbox response = api.createNewEmailAddress();

        // TODO: test validations
    }
    
    /**
     * Delete all emails in an inbox
     *
     * Deletes all emails
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emptyInboxTest() throws ApiException {
        UUID inboxId = null;
        api.emptyInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * Send an email from a random email address
     *
     * To specify an email address first create an inbox and use that with the other send email methods
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailSimpleTest() throws ApiException {
        SendEmailOptions sendEmailOptions = null;
        api.sendEmailSimple(sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Wait for and return count number of emails 
     *
     * Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForEmailCountTest() throws ApiException {
        Integer count = null;
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        List<EmailPreview> response = api.waitForEmailCount(count, inboxId, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Fetch inbox&#39;s latest email or if empty wait for email to arrive
     *
     * Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForLatestEmailTest() throws ApiException {
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        Email response = api.waitForLatestEmail(inboxId, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Wait or return list of emails that match simple matching patterns
     *
     * Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForMatchingEmailTest() throws ApiException {
        MatchOptions matchOptions = null;
        Integer count = null;
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        List<EmailPreview> response = api.waitForMatchingEmail(matchOptions, count, inboxId, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Wait for or fetch the email with a given index in the inbox specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForNthEmailTest() throws ApiException {
        UUID inboxId = null;
        Integer index = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        Email response = api.waitForNthEmail(inboxId, index, timeout, unreadOnly);

        // TODO: test validations
    }
    
}
