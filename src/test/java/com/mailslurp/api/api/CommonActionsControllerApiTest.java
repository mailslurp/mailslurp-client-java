/*
 * MailSlurp API
 * ## Introduction  [MailSlurp](https://www.mailslurp.com) is an Email API for developers and QA testers. It let's users: - create emails addresses on demand - receive emails and attachments in code - send templated HTML emails  ## About  This page contains the REST API documentation for MailSlurp. All requests require API Key authentication passed as an `x-api-key` header.  Create an account to [get your free API Key](https://app.mailslurp.com/sign-up/).  ## Resources - üîë [Get API Key](https://app.mailslurp.com/sign-up/)                    - üéì [Developer Portal](https://www.mailslurp.com/docs/)           - üì¶ [Library SDKs](https://www.mailslurp.com/docs/) - ‚úçÔ∏è [Code Examples](https://www.mailslurp.com/examples) - ‚ö†Ô∏è [Report an issue](https://drift.me/mailslurp)  ## Explore  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.api.api;

import com.mailslurp.client.ApiException;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.Inbox;
import com.mailslurp.models.MatchOptions;
import com.mailslurp.models.SendEmailOptions;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommonActionsControllerApi
 */
@Ignore
public class CommonActionsControllerApiTest {

    private final CommonActionsControllerApi api = new CommonActionsControllerApi();

    
    /**
     * Create new random inbox
     *
     * Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewEmailAddressTest() throws ApiException {
        Inbox response = api.createNewEmailAddress();

        // TODO: test validations
    }
    
    /**
     * Delete all emails in an inbox
     *
     * Deletes all emails
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emptyInboxTest() throws ApiException {
        UUID inboxId = null;
        api.emptyInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * Send an email from a random email address
     *
     * To specify an email address first create an inbox and use that with the other send email methods
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailSimpleTest() throws ApiException {
        SendEmailOptions sendEmailOptions = null;
        api.sendEmailSimple(sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Wait for and return count number of emails 
     *
     * Will only wait if count is greater that the found emails in given inbox.If you need to wait for an email for a non-empty inbox see the other receive methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForEmailCountTest() throws ApiException {
        Integer count = null;
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        List<EmailPreview> response = api.waitForEmailCount(count, inboxId, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Fetch inbox&#39;s latest email or if empty wait for email to arrive
     *
     * Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox see the other receive methods.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForLatestEmailTest() throws ApiException {
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        Email response = api.waitForLatestEmail(inboxId, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Wait or return list of emails that match simple matching patterns
     *
     * Results must also meet provided count. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForMatchingEmailTest() throws ApiException {
        MatchOptions matchOptions = null;
        Integer count = null;
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        List<EmailPreview> response = api.waitForMatchingEmail(matchOptions, count, inboxId, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Wait for or fetch the email with a given index in the inbox specified
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForNthEmailTest() throws ApiException {
        UUID inboxId = null;
        Integer index = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        Email response = api.waitForNthEmail(inboxId, index, timeout, unreadOnly);

        // TODO: test validations
    }
    
}
