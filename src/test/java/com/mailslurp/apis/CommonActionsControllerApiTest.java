/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.InboxDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.SimpleSendEmailOptions;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CommonActionsControllerApi
 */
@Disabled
public class CommonActionsControllerApiTest {

    private final CommonActionsControllerApi api = new CommonActionsControllerApi();

    /**
     * Create new random inbox
     *
     * Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewEmailAddressTest() throws ApiException {
        Boolean allowTeamAccess = null;
        Boolean useDomainPool = null;
        OffsetDateTime expiresAt = null;
        Long expiresIn = null;
        String emailAddress = null;
        String inboxType = null;
        String description = null;
        String name = null;
        List<String> tags = null;
        Boolean favourite = null;
        Boolean virtualInbox = null;
        Boolean useShortAddress = null;
        String domainName = null;
        UUID domainId = null;
        String prefix = null;
        InboxDto response = api.createNewEmailAddress()
                .allowTeamAccess(allowTeamAccess)
                .useDomainPool(useDomainPool)
                .expiresAt(expiresAt)
                .expiresIn(expiresIn)
                .emailAddress(emailAddress)
                .inboxType(inboxType)
                .description(description)
                .name(name)
                .tags(tags)
                .favourite(favourite)
                .virtualInbox(virtualInbox)
                .useShortAddress(useShortAddress)
                .domainName(domainName)
                .domainId(domainId)
                .prefix(prefix)
                .execute();
        // TODO: test validations
    }

    /**
     * Create new random inbox
     *
     * Returns an Inbox with an &#x60;id&#x60; and an &#x60;emailAddress&#x60;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createRandomInboxTest() throws ApiException {
        Boolean allowTeamAccess = null;
        Boolean useDomainPool = null;
        OffsetDateTime expiresAt = null;
        Long expiresIn = null;
        String emailAddress = null;
        String inboxType = null;
        String description = null;
        String name = null;
        List<String> tags = null;
        Boolean favourite = null;
        Boolean virtualInbox = null;
        Boolean useShortAddress = null;
        String domainName = null;
        UUID domainId = null;
        String prefix = null;
        InboxDto response = api.createRandomInbox()
                .allowTeamAccess(allowTeamAccess)
                .useDomainPool(useDomainPool)
                .expiresAt(expiresAt)
                .expiresIn(expiresIn)
                .emailAddress(emailAddress)
                .inboxType(inboxType)
                .description(description)
                .name(name)
                .tags(tags)
                .favourite(favourite)
                .virtualInbox(virtualInbox)
                .useShortAddress(useShortAddress)
                .domainName(domainName)
                .domainId(domainId)
                .prefix(prefix)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete inbox email address by inbox id
     *
     * Deletes inbox email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailAddressTest() throws ApiException {
        UUID inboxId = null;
        api.deleteEmailAddress(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all emails in an inbox
     *
     * Deletes all emails
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void emptyInboxTest() throws ApiException {
        UUID inboxId = null;
        api.emptyInbox(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send an email using query parameters
     *
     * If no senderId or inboxId provided a random email address will be used to send from. Ensure your parameters are URL encoded.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailQueryTest() throws ApiException {
        String to = null;
        UUID senderId = null;
        String body = null;
        String subject = null;
        api.sendEmailQuery(to)
                .senderId(senderId)
                .body(body)
                .subject(subject)
                .execute();
        // TODO: test validations
    }

    /**
     * Send an email
     *
     * If no senderId or inboxId provided a random email address will be used to send from.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailSimpleTest() throws ApiException {
        SimpleSendEmailOptions simpleSendEmailOptions = null;
        api.sendEmailSimple(simpleSendEmailOptions)
                .execute();
        // TODO: test validations
    }

}
