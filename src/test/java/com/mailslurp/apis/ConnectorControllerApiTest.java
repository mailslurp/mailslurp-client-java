/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.ConnectorDto;
import com.mailslurp.models.ConnectorEventDto;
import com.mailslurp.models.ConnectorImapConnectionDto;
import com.mailslurp.models.ConnectorImapConnectionTestResult;
import com.mailslurp.models.ConnectorProviderSettingsDto;
import com.mailslurp.models.ConnectorSmtpConnectionDto;
import com.mailslurp.models.ConnectorSmtpConnectionTestResult;
import com.mailslurp.models.ConnectorSyncRequestResult;
import com.mailslurp.models.ConnectorSyncSettingsDto;
import com.mailslurp.models.CreateConnectorImapConnectionOptions;
import com.mailslurp.models.CreateConnectorOptions;
import com.mailslurp.models.CreateConnectorSmtpConnectionOptions;
import com.mailslurp.models.CreateConnectorSyncSettingsOptions;
import com.mailslurp.models.CreateConnectorWithOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.OptionalConnectorDto;
import com.mailslurp.models.OptionalConnectorImapConnectionDto;
import com.mailslurp.models.OptionalConnectorSmtpConnectionDto;
import com.mailslurp.models.OptionalConnectorSyncSettingsDto;
import com.mailslurp.models.PageConnector;
import com.mailslurp.models.PageConnectorEvents;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ConnectorControllerApi
 */
@Disabled
public class ConnectorControllerApiTest {

    private final ConnectorControllerApi api = new ConnectorControllerApi();

    /**
     * Create an inbox connector
     *
     * Sync emails between external mailboxes and MailSlurp inboxes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorTest() throws ApiException {
        CreateConnectorOptions createConnectorOptions = null;
        UUID inboxId = null;
        ConnectorDto response = api.createConnector(createConnectorOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox connector IMAP connection
     *
     * Allows the reading of emails in an external mailbox and syncing to a MailSlurp inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorImapConnectionTest() throws ApiException {
        UUID id = null;
        CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
        ConnectorImapConnectionDto response = api.createConnectorImapConnection(id, createConnectorImapConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox connector SMTP connection
     *
     * Allows sending via connector and email is routed to connected inbox and sent via SMTP
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorSmtpConnectionTest() throws ApiException {
        UUID id = null;
        CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
        ConnectorSmtpConnectionDto response = api.createConnectorSmtpConnection(id, createConnectorSmtpConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox connector sync settings
     *
     * Configure automatic pull or emails from external inboxes using an interval or schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorSyncSettingsTest() throws ApiException {
        UUID id = null;
        CreateConnectorSyncSettingsOptions createConnectorSyncSettingsOptions = null;
        ConnectorSyncSettingsDto response = api.createConnectorSyncSettings(id, createConnectorSyncSettingsOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox connector with options
     *
     * Sync emails between external mailboxes and MailSlurp inboxes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createConnectorWithOptionsTest() throws ApiException {
        CreateConnectorWithOptions createConnectorWithOptions = null;
        UUID inboxId = null;
        ConnectorDto response = api.createConnectorWithOptions(createConnectorWithOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all inbox connectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllConnectorTest() throws ApiException {
        api.deleteAllConnector()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an inbox connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorTest() throws ApiException {
        UUID id = null;
        api.deleteConnector(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an inbox connector IMAP connection
     *
     * Delete IMAP connection for external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorImapConnectionTest() throws ApiException {
        UUID id = null;
        api.deleteConnectorImapConnection(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an inbox connector SMTP connection
     *
     * Delete SMTP connection for external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorSmtpConnectionTest() throws ApiException {
        UUID id = null;
        api.deleteConnectorSmtpConnection(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox connector sync settings
     *
     * Configure automatic pull or emails from external inboxes using an interval or schedule
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteConnectorSyncSettingsTest() throws ApiException {
        UUID id = null;
        api.deleteConnectorSyncSettings(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all inbox connector events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllConnectorEventsTest() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String eventType = null;
        PageConnectorEvents response = api.getAllConnectorEvents()
                .id(id)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .eventType(eventType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorTest() throws ApiException {
        UUID id = null;
        ConnectorDto response = api.getConnector(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get connector by email address
     *
     * Find an inbox connector by email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorByEmailAddressTest() throws ApiException {
        String emailAddress = null;
        OptionalConnectorDto response = api.getConnectorByEmailAddress(emailAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Get connector by inbox ID
     *
     * Find an inbox connector by inbox ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorByInboxIdTest() throws ApiException {
        UUID inboxId = null;
        OptionalConnectorDto response = api.getConnectorByInboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get connector by name
     *
     * Find an inbox connector by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorByNameTest() throws ApiException {
        String name = null;
        OptionalConnectorDto response = api.getConnectorByName(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox connector event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorEventTest() throws ApiException {
        UUID id = null;
        ConnectorEventDto response = api.getConnectorEvent(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox connector events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorEventsTest() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String eventType = null;
        PageConnectorEvents response = api.getConnectorEvents(id)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .eventType(eventType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox connector IMAP connection
     *
     * Get IMAP connection for external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorImapConnectionTest() throws ApiException {
        UUID id = null;
        OptionalConnectorImapConnectionDto response = api.getConnectorImapConnection(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get SMTP and IMAP connection settings for common mail providers
     *
     * Get common mail provider SMTP and IMAP connection settings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorProviderSettingsTest() throws ApiException {
        ConnectorProviderSettingsDto response = api.getConnectorProviderSettings()
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox connector SMTP connection
     *
     * Get SMTP connection for external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorSmtpConnectionTest() throws ApiException {
        UUID id = null;
        OptionalConnectorSmtpConnectionDto response = api.getConnectorSmtpConnection(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox connector sync settings
     *
     * Get sync settings for connection with external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorSyncSettingsTest() throws ApiException {
        UUID id = null;
        OptionalConnectorSyncSettingsDto response = api.getConnectorSyncSettings(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get inbox connectors
     *
     * List inbox connectors that sync external emails to MailSlurp inboxes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConnectorsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageConnector response = api.getConnectors()
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Send from an inbox connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailFromConnectorTest() throws ApiException {
        UUID id = null;
        SendEmailOptions sendEmailOptions = null;
        Boolean useFallback = null;
        SentEmailDto response = api.sendEmailFromConnector(id, sendEmailOptions)
                .useFallback(useFallback)
                .execute();
        // TODO: test validations
    }

    /**
     * Sync an inbox connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void syncConnectorTest() throws ApiException {
        UUID id = null;
        OffsetDateTime since = null;
        String folder = null;
        Boolean logging = null;
        ConnectorSyncRequestResult response = api.syncConnector(id)
                .since(since)
                .folder(folder)
                .logging(logging)
                .execute();
        // TODO: test validations
    }

    /**
     * Test an inbox connector IMAP connection
     *
     * Test the IMAP connection for a connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testConnectorImapConnectionTest() throws ApiException {
        UUID id = null;
        CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
        ConnectorImapConnectionTestResult response = api.testConnectorImapConnection(id)
                .createConnectorImapConnectionOptions(createConnectorImapConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test an inbox connector IMAP connection options
     *
     * Test the IMAP connection options for a connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testConnectorImapConnectionOptionsTest() throws ApiException {
        CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
        ConnectorImapConnectionTestResult response = api.testConnectorImapConnectionOptions(createConnectorImapConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test an inbox connector SMTP connection
     *
     * Test the SMTP connection for a connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testConnectorSmtpConnectionTest() throws ApiException {
        UUID id = null;
        CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
        ConnectorSmtpConnectionTestResult response = api.testConnectorSmtpConnection(id)
                .createConnectorSmtpConnectionOptions(createConnectorSmtpConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test an inbox connector SMTP connection options
     *
     * Test the SMTP connection options for a connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testConnectorSmtpConnectionOptionsTest() throws ApiException {
        CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
        ConnectorSmtpConnectionTestResult response = api.testConnectorSmtpConnectionOptions(createConnectorSmtpConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an inbox connector
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorTest() throws ApiException {
        UUID id = null;
        CreateConnectorOptions createConnectorOptions = null;
        ConnectorDto response = api.updateConnector(id, createConnectorOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an inbox connector IMAP connection
     *
     * Update IMAP connection for external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorImapConnectionTest() throws ApiException {
        UUID id = null;
        CreateConnectorImapConnectionOptions createConnectorImapConnectionOptions = null;
        ConnectorImapConnectionDto response = api.updateConnectorImapConnection(id, createConnectorImapConnectionOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an inbox connector SMTP connection
     *
     * Update SMTP connection for external inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateConnectorSmtpConnectionTest() throws ApiException {
        UUID id = null;
        CreateConnectorSmtpConnectionOptions createConnectorSmtpConnectionOptions = null;
        ConnectorSmtpConnectionDto response = api.updateConnectorSmtpConnection(id, createConnectorSmtpConnectionOptions)
                .execute();
        // TODO: test validations
    }

}
