/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.AITransformCreateOptions;
import com.mailslurp.models.AITransformDto;
import com.mailslurp.models.AITransformMappingDto;
import com.mailslurp.models.AITransformResultDto;
import com.mailslurp.models.ConditionalStructuredContentResult;
import com.mailslurp.models.CreateAITransformerMappingOptions;
import com.mailslurp.models.GenerateStructuredContentAttachmentOptions;
import com.mailslurp.models.GenerateStructuredContentEmailOptions;
import com.mailslurp.models.GenerateStructuredContentSmsOptions;
import com.mailslurp.models.InvokeTransformerOptions;
import com.mailslurp.models.PageAITransformMappingProjection;
import com.mailslurp.models.PageAITransformProjection;
import com.mailslurp.models.PageAITransformResultProjection;
import com.mailslurp.models.StructuredContentResultDto;
import com.mailslurp.models.StructuredOutputSchema;
import com.mailslurp.models.StructuredOutputSchemaValidation;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AiControllerApi
 */
@Disabled
public class AiControllerApiTest {

    private final AiControllerApi api = new AiControllerApi();

    /**
     * Create a transformer for reuse in automations
     *
     * Save an AI transform instructions and schema for use with webhooks and automations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransformerTest() throws ApiException {
        AITransformCreateOptions aiTransformCreateOptions = null;
        AITransformDto response = api.createTransformer(aiTransformCreateOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create transformer mapping
     *
     * Create AI transformer mappings to other entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransformerMappingsTest() throws ApiException {
        CreateAITransformerMappingOptions createAITransformerMappingOptions = null;
        AITransformMappingDto response = api.createTransformerMappings(createAITransformerMappingOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all transformer mapping
     *
     * Delete all AI transformer mappings
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllTransformerMappingsTest() throws ApiException {
        api.deleteAllTransformerMappings()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a transformer
     *
     * Delete an AI transformer and schemas by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransformerTest() throws ApiException {
        UUID id = null;
        api.deleteTransformer(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete transformer mapping
     *
     * Delete an AI transformer mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransformerMappingTest() throws ApiException {
        UUID id = null;
        api.deleteTransformerMapping(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all transformers
     *
     * Delete all AI transformers and schemas
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTransformersTest() throws ApiException {
        api.deleteTransformers()
                .execute();
        // TODO: test validations
    }

    /**
     * Generate structured content for an attachment
     *
     * Use output schemas to extract data from an attachment using AI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateStructuredContentFromAttachmentTest() throws ApiException {
        GenerateStructuredContentAttachmentOptions generateStructuredContentAttachmentOptions = null;
        StructuredContentResultDto response = api.generateStructuredContentFromAttachment(generateStructuredContentAttachmentOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate structured content for an email
     *
     * Use output schemas to extract data from an email using AI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateStructuredContentFromEmailTest() throws ApiException {
        GenerateStructuredContentEmailOptions generateStructuredContentEmailOptions = null;
        StructuredContentResultDto response = api.generateStructuredContentFromEmail(generateStructuredContentEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Generate structured content for a TXT message
     *
     * Use output schemas to extract data from an SMS using AI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateStructuredContentFromSmsTest() throws ApiException {
        GenerateStructuredContentSmsOptions generateStructuredContentSmsOptions = null;
        StructuredContentResultDto response = api.generateStructuredContentFromSms(generateStructuredContentSmsOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a transformer
     *
     * Get AI transformer and schemas by ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformerTest() throws ApiException {
        UUID id = null;
        AITransformDto response = api.getTransformer(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get transformer mapping
     *
     * Get an AI transformer mapping
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformerMappingTest() throws ApiException {
        UUID id = null;
        AITransformMappingDto response = api.getTransformerMapping(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get transformer mappings
     *
     * Get AI transformer mappings to other entities
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformerMappingsTest() throws ApiException {
        UUID aiTransformId = null;
        UUID entityId = null;
        String entityType = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageAITransformMappingProjection response = api.getTransformerMappings()
                .aiTransformId(aiTransformId)
                .entityId(entityId)
                .entityType(entityType)
                .page(page)
                .size(size)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get transformer result
     *
     * Get AI transformer result
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformerResultTest() throws ApiException {
        UUID id = null;
        AITransformResultDto response = api.getTransformerResult(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get transformer results
     *
     * Get AI transformer results
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformerResultsTest() throws ApiException {
        UUID aiTransformId = null;
        UUID aiTransformMappingId = null;
        UUID entityId = null;
        String entityType = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageAITransformResultProjection response = api.getTransformerResults()
                .aiTransformId(aiTransformId)
                .aiTransformMappingId(aiTransformMappingId)
                .entityId(entityId)
                .entityType(entityType)
                .page(page)
                .size(size)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * List transformers
     *
     * List all AI transforms
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransformersTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        List<UUID> include = null;
        PageAITransformProjection response = api.getTransformers()
                .page(page)
                .size(size)
                .sort(sort)
                .include(include)
                .execute();
        // TODO: test validations
    }

    /**
     * Invoke a transformer
     *
     * Execute an AI transformer to generate structured content
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void invokeTransformerTest() throws ApiException {
        InvokeTransformerOptions invokeTransformerOptions = null;
        ConditionalStructuredContentResult response = api.invokeTransformer(invokeTransformerOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate structured content schema
     *
     * Check if a schema is valid and can be used to extract data using AI
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateStructuredOutputSchemaTest() throws ApiException {
        StructuredOutputSchema structuredOutputSchema = null;
        StructuredOutputSchemaValidation response = api.validateStructuredOutputSchema(structuredOutputSchema)
                .execute();
        // TODO: test validations
    }

}
