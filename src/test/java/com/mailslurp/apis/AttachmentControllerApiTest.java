/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import java.io.File;
import com.mailslurp.models.UploadAttachmentOptions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttachmentControllerApi
 */
@Ignore
public class AttachmentControllerApiTest {

    private final AttachmentControllerApi api = new AttachmentControllerApi();

    
    /**
     * Upload an attachment for sending using base64 file encoding
     *
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAttachmentTest() throws ApiException {
        UploadAttachmentOptions uploadOptions = null;
        List<String> response = api.uploadAttachment(uploadOptions);

        // TODO: test validations
    }
    
    /**
     * Upload an attachment for sending using file byte stream input octet stream
     *
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadAttachmentBytesTest() throws ApiException {
        String filename = null;
        List<String> response = api.uploadAttachmentBytes(filename);

        // TODO: test validations
    }
    
    /**
     * Upload an attachment for sending using Multipart Form
     *
     * When sending emails with attachments first upload each attachment with this endpoint. Record the returned attachment IDs. Then use these attachment IDs in the SendEmailOptions when sending an email. This means that attachments can easily be reused.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadMultipartFormTest() throws ApiException {
        File file = null;
        String contentType = null;
        String filename = null;
        String xFilename = null;
        List<String> response = api.uploadMultipartForm(file, contentType, filename, xFilename);

        // TODO: test validations
    }
    
}
