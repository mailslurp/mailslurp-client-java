/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.AttachmentEntity;
import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.DownloadAttachmentDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageAttachmentEntity;
import com.mailslurp.models.UploadAttachmentBytesRequest;
import com.mailslurp.models.UploadAttachmentOptions;
import com.mailslurp.models.UploadMultipartFormRequest;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AttachmentControllerApi
 */
@Disabled
public class AttachmentControllerApiTest {

    private final AttachmentControllerApi api = new AttachmentControllerApi();

    /**
     * Delete all attachments
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllAttachmentsTest() throws ApiException {
        api.deleteAllAttachments();
        // TODO: test validations
    }

    /**
     * Delete an attachment
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAttachmentTest() throws ApiException {
        String attachmentId = null;
        api.deleteAttachment(attachmentId);
        // TODO: test validations
    }

    /**
     * Get email attachment as base64 encoded string as alternative to binary responses. To read the content decode the Base64 encoded contents.
     *
     * Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadAttachmentAsBase64EncodedTest() throws ApiException {
        String attachmentId = null;
        DownloadAttachmentDto response = api.downloadAttachmentAsBase64Encoded(attachmentId);
        // TODO: test validations
    }

    /**
     * Download attachments. Get email attachment bytes. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints.
     *
     * Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadAttachmentAsBytesTest() throws ApiException {
        String attachmentId = null;
        byte[] response = api.downloadAttachmentAsBytes(attachmentId);
        // TODO: test validations
    }

    /**
     * Get an attachment entity
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentTest() throws ApiException {
        String attachmentId = null;
        AttachmentEntity response = api.getAttachment(attachmentId);
        // TODO: test validations
    }

    /**
     * Get email attachment metadata information
     *
     * Returns the metadata for an attachment. It is saved separately to the content of the attachment. Contains properties &#x60;name&#x60; and &#x60;content-type&#x60; and &#x60;content-length&#x60; in bytes for a given attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentInfoTest() throws ApiException {
        String attachmentId = null;
        AttachmentMetaData response = api.getAttachmentInfo(attachmentId);
        // TODO: test validations
    }

    /**
     * Get email attachments
     *
     * Get all attachments in paginated response. Each entity contains meta data for the attachment such as &#x60;name&#x60; and &#x60;content-type&#x60;. Use the &#x60;attachmentId&#x60; and the download endpoints to get the file contents.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String fileNameFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageAttachmentEntity response = api.getAttachments(page, size, sort, fileNameFilter, since, before);
        // TODO: test validations
    }

    /**
     * Upload an attachment for sending using base64 file encoding. Returns an array whose first element is the ID of the uploaded attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadAttachmentTest() throws ApiException {
        UploadAttachmentOptions uploadAttachmentOptions = null;
        List<String> response = api.uploadAttachment(uploadAttachmentOptions);
        // TODO: test validations
    }

    /**
     * Upload an attachment for sending using file byte stream input octet stream. Returns an array whose first element is the ID of the uploaded attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadAttachmentBytesTest() throws ApiException {
        UploadAttachmentBytesRequest uploadAttachmentBytesRequest = null;
        String contentType = null;
        String filename = null;
        List<String> response = api.uploadAttachmentBytes(uploadAttachmentBytesRequest, contentType, filename);
        // TODO: test validations
    }

    /**
     * Upload an attachment for sending using a Multipart Form request. Returns an array whose first element is the ID of the uploaded attachment.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadMultipartFormTest() throws ApiException {
        String contentType = null;
        String filename = null;
        String xFilename = null;
        UploadMultipartFormRequest uploadMultipartFormRequest = null;
        List<String> response = api.uploadMultipartForm(contentType, filename, xFilename, uploadMultipartFormRequest);
        // TODO: test validations
    }

}
