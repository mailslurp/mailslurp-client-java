/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CreateTotpDeviceOtpAuthUrlOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.TotpDeviceCodeDto;
import com.mailslurp.models.TotpDeviceDto;
import com.mailslurp.models.TotpDeviceOptionalDto;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for MfaControllerApi
 */
@Disabled
public class MfaControllerApiTest {

    private final MfaControllerApi api = new MfaControllerApi();

    /**
     * Create a TOTP device from custom options
     *
     * Create a virtual TOTP device for custom options specifying all parameters of the TOTP device.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTotpDeviceForCustomTest() throws ApiException {
        CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions = null;
        TotpDeviceDto response = api.createTotpDeviceForCustom(createTotpDeviceOtpAuthUrlOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a TOTP device from an OTP Auth URL
     *
     * Create a virtual TOTP device for a given OTP Auth URL such as otpauth://totp/MyApp:alice@example.com?secret&#x3D;ABC123&amp;issuer&#x3D;MyApp&amp;period&#x3D;30&amp;digits&#x3D;6&amp;algorithm&#x3D;SHA1. You can provider overrides in the options for each component of the URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTotpDeviceForOtpAuthUrlTest() throws ApiException {
        CreateTotpDeviceOtpAuthUrlOptions createTotpDeviceOtpAuthUrlOptions = null;
        TotpDeviceDto response = api.createTotpDeviceForOtpAuthUrl(createTotpDeviceOtpAuthUrlOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a TOTP device by ID
     *
     * Get Time-Based One-Time Password (TOTP) device by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTotpDeviceTest() throws ApiException {
        UUID id = null;
        TotpDeviceDto response = api.getTotpDevice(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a TOTP device by username, issuer, or name. Returns empty if not found.
     *
     * Get Time-Based One-Time Password (TOTP) device by its username and issuer mapping.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTotpDeviceByTest() throws ApiException {
        String name = null;
        String issuer = null;
        String username = null;
        TotpDeviceOptionalDto response = api.getTotpDeviceBy()
                .name(name)
                .issuer(issuer)
                .username(username)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a TOTP device code by device ID
     *
     * Get Time-Based One-Time Password for a device by its ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTotpDeviceCodeTest() throws ApiException {
        UUID id = null;
        OffsetDateTime at = null;
        TotpDeviceCodeDto response = api.getTotpDeviceCode(id)
                .at(at)
                .execute();
        // TODO: test validations
    }

}
