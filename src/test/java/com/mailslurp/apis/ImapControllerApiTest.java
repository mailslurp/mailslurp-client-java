/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.ImapServerFetchResult;
import com.mailslurp.models.ImapServerGetResult;
import com.mailslurp.models.ImapServerListOptions;
import com.mailslurp.models.ImapServerListResult;
import com.mailslurp.models.ImapServerMailboxResult;
import com.mailslurp.models.ImapServerSearchOptions;
import com.mailslurp.models.ImapServerSearchResult;
import com.mailslurp.models.ImapServerStatusOptions;
import com.mailslurp.models.ImapServerStatusResult;
import com.mailslurp.models.ImapUpdateFlagsOptions;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImapControllerApi
 */
@Disabled
public class ImapControllerApiTest {

    private final ImapControllerApi api = new ImapControllerApi();

    /**
     * Fetch message in an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerFetchTest() throws ApiException {
        Long seqNum = null;
        UUID inboxId = null;
        ImapServerFetchResult response = api.imapServerFetch(seqNum)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a message by email ID
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerGetTest() throws ApiException {
        UUID emailId = null;
        UUID inboxId = null;
        ImapServerGetResult response = api.imapServerGet(emailId)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * List messages in an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerListTest() throws ApiException {
        ImapServerListOptions imapServerListOptions = null;
        UUID inboxId = null;
        ImapServerListResult response = api.imapServerList(imapServerListOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create a new mailbox if possible
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerMailboxTest() throws ApiException {
        String name = null;
        ImapServerMailboxResult response = api.imapServerMailbox(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Search messages in an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerSearchTest() throws ApiException {
        ImapServerSearchOptions imapServerSearchOptions = null;
        UUID inboxId = null;
        ImapServerSearchResult response = api.imapServerSearch(imapServerSearchOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get status for mailbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerStatusTest() throws ApiException {
        ImapServerStatusOptions imapServerStatusOptions = null;
        UUID inboxId = null;
        ImapServerStatusResult response = api.imapServerStatus(imapServerStatusOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update message flags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void imapServerUpdateFlagsTest() throws ApiException {
        ImapUpdateFlagsOptions imapUpdateFlagsOptions = null;
        UUID inboxId = null;
        api.imapServerUpdateFlags(imapUpdateFlagsOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

}
