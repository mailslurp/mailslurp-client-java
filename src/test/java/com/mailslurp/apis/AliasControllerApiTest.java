/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.Alias;
import com.mailslurp.models.AliasDto;
import com.mailslurp.models.CreateAliasOptions;
import com.mailslurp.models.PageAlias;
import java.util.UUID;
import com.mailslurp.models.UpdateAliasOptions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AliasControllerApi
 */
@Ignore
public class AliasControllerApiTest {

    private final AliasControllerApi api = new AliasControllerApi();

    
    /**
     * Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     *
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAliasTest() throws ApiException {
        CreateAliasOptions createAliasOptions = null;
        AliasDto response = api.createAlias(createAliasOptions);

        // TODO: test validations
    }
    
    /**
     * Delete an email alias
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAliasTest() throws ApiException {
        UUID aliasId = null;
        api.deleteAlias(aliasId);

        // TODO: test validations
    }
    
    /**
     * Get an email alias
     *
     * Get an email alias by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAliasTest() throws ApiException {
        UUID aliasId = null;
        AliasDto response = api.getAlias(aliasId);

        // TODO: test validations
    }
    
    /**
     * Get all email aliases you have created
     *
     * Get all email aliases in paginated form
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAliasesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageAlias response = api.getAliases(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Update an email alias
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAliasTest() throws ApiException {
        UUID aliasId = null;
        UpdateAliasOptions updateAliasOptions = null;
        api.updateAlias(aliasId, updateAliasOptions);

        // TODO: test validations
    }
    
}
