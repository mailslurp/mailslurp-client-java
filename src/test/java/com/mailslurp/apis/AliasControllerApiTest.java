/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.AliasDto;
import com.mailslurp.models.CreateAliasOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageAlias;
import com.mailslurp.models.PageEmailProjection;
import com.mailslurp.models.PageThreadProjection;
import com.mailslurp.models.ReplyToAliasEmailOptions;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;
import com.mailslurp.models.UpdateAliasOptions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AliasControllerApi
 */
@Ignore
public class AliasControllerApiTest {

    private final AliasControllerApi api = new AliasControllerApi();

    
    /**
     * Create an email alias. Must be verified by clicking link inside verification email that will be sent to the address. Once verified the alias will be active.
     *
     * Email aliases use a MailSlurp randomly generated email address (or a custom domain inbox that you provide) to mask or proxy a real email address. Emails sent to the alias address will be forwarded to the hidden email address it was created for. If you want to send a reply use the threadId attached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createAliasTest() throws ApiException {
        CreateAliasOptions createAliasOptions = null;
        AliasDto response = api.createAlias(createAliasOptions);

        // TODO: test validations
    }
    
    /**
     * Delete an email alias
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAliasTest() throws ApiException {
        UUID aliasId = null;
        api.deleteAlias(aliasId);

        // TODO: test validations
    }
    
    /**
     * Get an email alias
     *
     * Get an email alias by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAliasTest() throws ApiException {
        UUID aliasId = null;
        AliasDto response = api.getAlias(aliasId);

        // TODO: test validations
    }
    
    /**
     * Get emails for an alias
     *
     * Get paginated emails for an alias by ID
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAliasEmailsTest() throws ApiException {
        UUID aliasId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageEmailProjection response = api.getAliasEmails(aliasId, page, size, sort, since, before);

        // TODO: test validations
    }
    
    /**
     * Get threads created for an alias
     *
     * Returns threads created for an email alias in paginated form
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAliasThreadsTest() throws ApiException {
        UUID aliasId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageThreadProjection response = api.getAliasThreads(aliasId, page, size, sort, since, before);

        // TODO: test validations
    }
    
    /**
     * Get all email aliases you have created
     *
     * Get all email aliases in paginated form
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAliasesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageAlias response = api.getAliases(page, size, sort, since, before);

        // TODO: test validations
    }
    
    /**
     * Reply to an email
     *
     * Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void replyToAliasEmailTest() throws ApiException {
        UUID aliasId = null;
        UUID emailId = null;
        ReplyToAliasEmailOptions replyToAliasEmailOptions = null;
        SentEmailDto response = api.replyToAliasEmail(aliasId, emailId, replyToAliasEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Send an email from an alias inbox
     *
     * Send an email from an alias. Replies to the email will be forwarded to the alias masked email address
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendAliasEmailTest() throws ApiException {
        UUID aliasId = null;
        SendEmailOptions sendEmailOptions = null;
        SentEmailDto response = api.sendAliasEmail(aliasId, sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Update an email alias
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateAliasTest() throws ApiException {
        UUID aliasId = null;
        UpdateAliasOptions updateAliasOptions = null;
        AliasDto response = api.updateAlias(aliasId, updateAliasOptions);

        // TODO: test validations
    }
    
}
