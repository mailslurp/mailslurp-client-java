/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.ContactDto;
import com.mailslurp.models.ContactProjection;
import com.mailslurp.models.CreateContactOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageContactProjection;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ContactControllerApi
 */
@Ignore
public class ContactControllerApiTest {

    private final ContactControllerApi api = new ContactControllerApi();

    
    /**
     * Create a contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createContactTest() throws ApiException {
        CreateContactOptions createContactOptions = null;
        ContactDto response = api.createContact(createContactOptions);

        // TODO: test validations
    }
    
    /**
     * Delete contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteContactTest() throws ApiException {
        UUID contactId = null;
        api.deleteContact(contactId);

        // TODO: test validations
    }
    
    /**
     * Get all contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllContactsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageContactProjection response = api.getAllContacts(page, size, sort, since, before);

        // TODO: test validations
    }
    
    /**
     * Get contact
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactTest() throws ApiException {
        UUID contactId = null;
        ContactDto response = api.getContact(contactId);

        // TODO: test validations
    }
    
    /**
     * Get contact vCard vcf file
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactVCardTest() throws ApiException {
        UUID contactId = null;
        List<byte[]> response = api.getContactVCard(contactId);

        // TODO: test validations
    }
    
    /**
     * Get all contacts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getContactsTest() throws ApiException {
        List<ContactProjection> response = api.getContacts();

        // TODO: test validations
    }
    
}
