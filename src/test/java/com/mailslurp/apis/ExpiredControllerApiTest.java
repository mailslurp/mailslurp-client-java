/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.ExpirationDefaults;
import com.mailslurp.models.ExpiredInboxDto;
import com.mailslurp.models.PageExpiredInboxRecordProjection;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ExpiredControllerApi
 */
@Ignore
public class ExpiredControllerApiTest {

    private final ExpiredControllerApi api = new ExpiredControllerApi();

    
    /**
     * Get default expiration settings
     *
     * Return default times used for inbox expiration
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpirationDefaultsTest() throws ApiException {
        ExpirationDefaults response = api.getExpirationDefaults();

        // TODO: test validations
    }
    
    /**
     * Get expired inbox record for a previously existing inbox
     *
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpiredInboxByInboxIdTest() throws ApiException {
        UUID inboxId = null;
        ExpiredInboxDto response = api.getExpiredInboxByInboxId(inboxId);

        // TODO: test validations
    }
    
    /**
     * Get an expired inbox record
     *
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpiredInboxRecordTest() throws ApiException {
        UUID expiredId = null;
        ExpiredInboxDto response = api.getExpiredInboxRecord(expiredId);

        // TODO: test validations
    }
    
    /**
     * List records of expired inboxes
     *
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpiredInboxesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageExpiredInboxRecordProjection response = api.getExpiredInboxes(page, size, sort);

        // TODO: test validations
    }
    
}
