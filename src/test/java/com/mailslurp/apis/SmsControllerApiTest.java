/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageSmsProjection;
import com.mailslurp.models.SmsDto;
import java.util.UUID;
import com.mailslurp.models.UnreadCount;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmsControllerApi
 */
@Ignore
public class SmsControllerApiTest {

    private final SmsControllerApi api = new SmsControllerApi();

    
    /**
     * Delete SMS message.
     *
     * Delete an SMS message
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmsMessageTest() throws ApiException {
        UUID smsId = null;
        api.deleteSmsMessage(smsId);

        // TODO: test validations
    }
    
    /**
     * Delete all SMS messages
     *
     * Delete all SMS messages or all messages for a given phone number
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSmsMessagesTest() throws ApiException {
        UUID phoneNumberId = null;
        api.deleteSmsMessages(phoneNumberId);

        // TODO: test validations
    }
    
    /**
     * Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
     *
     * Returns a SMS summary object with content.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsMessageTest() throws ApiException {
        UUID smsId = null;
        SmsDto response = api.getSmsMessage(smsId);

        // TODO: test validations
    }
    
    /**
     * Get all SMS messages in all phone numbers in paginated form. .
     *
     * By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSmsMessagesPaginatedTest() throws ApiException {
        UUID phoneNumber = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageSmsProjection response = api.getSmsMessagesPaginated(phoneNumber, page, size, sort, unreadOnly, since, before);

        // TODO: test validations
    }
    
    /**
     * Get unread SMS count
     *
     * Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getUnreadSmsCountTest() throws ApiException {
        UnreadCount response = api.getUnreadSmsCount();

        // TODO: test validations
    }
    
}
