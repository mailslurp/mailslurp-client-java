/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CountDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageSentSmsProjection;
import com.mailslurp.models.PageSmsProjection;
import com.mailslurp.models.ReplyForSms;
import com.mailslurp.models.SentSmsDto;
import com.mailslurp.models.SmsDto;
import com.mailslurp.models.SmsReplyOptions;
import com.mailslurp.models.SmsSendOptions;
import java.util.UUID;
import com.mailslurp.models.UnreadCount;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SmsControllerApi
 */
@Disabled
public class SmsControllerApiTest {

    private final SmsControllerApi api = new SmsControllerApi();

    /**
     * Delete sent SMS message.
     *
     * Delete a sent SMS message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSentSmsMessageTest() throws ApiException {
        UUID sentSmsId = null;
        api.deleteSentSmsMessage(sentSmsId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all sent SMS messages
     *
     * Delete all sent SMS messages or all messages for a given phone number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSentSmsMessagesTest() throws ApiException {
        UUID phoneNumberId = null;
        api.deleteSentSmsMessages()
                .phoneNumberId(phoneNumberId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete SMS message.
     *
     * Delete an SMS message
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSmsMessageTest() throws ApiException {
        UUID smsId = null;
        api.deleteSmsMessage(smsId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all SMS messages
     *
     * Delete all SMS messages or all messages for a given phone number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteSmsMessagesTest() throws ApiException {
        UUID phoneNumberId = null;
        api.deleteSmsMessages()
                .phoneNumberId(phoneNumberId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllSmsMessagesTest() throws ApiException {
        UUID phoneNumber = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String search = null;
        Boolean favourite = null;
        List<UUID> include = null;
        PageSmsProjection response = api.getAllSmsMessages()
                .phoneNumber(phoneNumber)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .search(search)
                .favourite(favourite)
                .include(include)
                .execute();
        // TODO: test validations
    }

    /**
     * Get reply for an SMS message
     *
     * Get reply for an SMS message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getReplyForSmsMessageTest() throws ApiException {
        UUID smsId = null;
        ReplyForSms response = api.getReplyForSmsMessage(smsId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sent SMS count
     *
     * Get number of sent SMS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSentSmsCountTest() throws ApiException {
        CountDto response = api.getSentSmsCount()
                .execute();
        // TODO: test validations
    }

    /**
     * Get sent SMS content including body. Expects sent SMS to exist by ID.
     *
     * Returns an SMS summary object with content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSentSmsMessageTest() throws ApiException {
        UUID sentSmsId = null;
        SentSmsDto response = api.getSentSmsMessage(sentSmsId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all SMS messages in all phone numbers in paginated form. .
     *
     * By default returns all SMS messages across all phone numbers sorted by ascending created at date. Responses are paginated. You can restrict results to a list of phone number IDs. You can also filter out read messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSentSmsMessagesPaginatedTest() throws ApiException {
        UUID phoneNumber = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String search = null;
        PageSentSmsProjection response = api.getSentSmsMessagesPaginated()
                .phoneNumber(phoneNumber)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .search(search)
                .execute();
        // TODO: test validations
    }

    /**
     * Get SMS count
     *
     * Get number of SMS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSmsCountTest() throws ApiException {
        CountDto response = api.getSmsCount()
                .execute();
        // TODO: test validations
    }

    /**
     * Get SMS content including body. Expects SMS to exist by ID. For SMS that may not have arrived yet use the WaitForController.
     *
     * Returns a SMS summary object with content.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSmsMessageTest() throws ApiException {
        UUID smsId = null;
        SmsDto response = api.getSmsMessage(smsId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get unread SMS count
     *
     * Get number of SMS unread. Unread means has not been viewed in dashboard or returned in an email API response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnreadSmsCountTest() throws ApiException {
        UnreadCount response = api.getUnreadSmsCount()
                .execute();
        // TODO: test validations
    }

    /**
     * Send a reply to a received SMS message. Replies are sent from the receiving number.
     *
     * Reply to an SMS message.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replyToSmsMessageTest() throws ApiException {
        UUID smsId = null;
        SmsReplyOptions smsReplyOptions = null;
        SentSmsDto response = api.replyToSmsMessage(smsId, smsReplyOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendSmsTest() throws ApiException {
        SmsSendOptions smsSendOptions = null;
        String fromPhoneNumber = null;
        UUID fromPhoneId = null;
        SentSmsDto response = api.sendSms(smsSendOptions)
                .fromPhoneNumber(fromPhoneNumber)
                .fromPhoneId(fromPhoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setSmsFavouritedTest() throws ApiException {
        UUID smsId = null;
        Boolean favourited = null;
        SmsDto response = api.setSmsFavourited(smsId, favourited)
                .execute();
        // TODO: test validations
    }

}
