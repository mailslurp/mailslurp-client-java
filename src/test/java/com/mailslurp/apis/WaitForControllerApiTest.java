/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.MatchOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.SmsDto;
import com.mailslurp.models.SmsPreview;
import java.util.UUID;
import com.mailslurp.models.WaitForConditions;
import com.mailslurp.models.WaitForSingleSmsOptions;
import com.mailslurp.models.WaitForSmsConditions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WaitForControllerApi
 */
@Ignore
public class WaitForControllerApiTest {

    private final WaitForControllerApi api = new WaitForControllerApi();

    
    /**
     * Wait for an email to match the provided filter conditions such as subject contains keyword.
     *
     * Generic waitFor method that will wait until an inbox meets given conditions or return immediately if already met
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForTest() throws ApiException {
        WaitForConditions waitForConditions = null;
        List<EmailPreview> response = api.waitFor(waitForConditions);

        // TODO: test validations
    }
    
    /**
     * Wait for and return count number of emails. Hold connection until inbox count matches expected or timeout occurs
     *
     * If inbox contains count or more emails at time of request then return count worth of emails. If not wait until the count is reached and return those or return an error if timeout is exceeded.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForEmailCountTest() throws ApiException {
        UUID inboxId = null;
        Integer count = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        OffsetDateTime before = null;
        OffsetDateTime since = null;
        String sort = null;
        Long delay = null;
        List<EmailPreview> response = api.waitForEmailCount(inboxId, count, timeout, unreadOnly, before, since, sort, delay);

        // TODO: test validations
    }
    
    /**
     * Fetch inbox&#39;s latest email or if empty wait for an email to arrive
     *
     * Will return either the last received email or wait for an email to arrive and return that. If you need to wait for an email for a non-empty inbox set &#x60;unreadOnly&#x3D;true&#x60; or see the other receive methods such as &#x60;waitForNthEmail&#x60; or &#x60;waitForEmailCount&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForLatestEmailTest() throws ApiException {
        UUID inboxId = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        OffsetDateTime before = null;
        OffsetDateTime since = null;
        String sort = null;
        Long delay = null;
        Email response = api.waitForLatestEmail(inboxId, timeout, unreadOnly, before, since, sort, delay);

        // TODO: test validations
    }
    
    /**
     * Wait for the latest SMS message to match the provided filter conditions such as body contains keyword.
     *
     * Wait until a phone number meets given conditions or return immediately if already met
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForLatestSmsTest() throws ApiException {
        WaitForSingleSmsOptions waitForSingleSmsOptions = null;
        SmsDto response = api.waitForLatestSms(waitForSingleSmsOptions);

        // TODO: test validations
    }
    
    /**
     * Wait or return list of emails that match simple matching patterns
     *
     * Perform a search of emails in an inbox with the given patterns. If results match expected count then return or else retry the search until results are found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForMatchingEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer count = null;
        MatchOptions matchOptions = null;
        OffsetDateTime before = null;
        OffsetDateTime since = null;
        String sort = null;
        Long delay = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        List<EmailPreview> response = api.waitForMatchingEmails(inboxId, count, matchOptions, before, since, sort, delay, timeout, unreadOnly);

        // TODO: test validations
    }
    
    /**
     * Wait for or return the first email that matches provided MatchOptions array
     *
     * Perform a search of emails in an inbox with the given patterns. If a result if found then return or else retry the search until a result is found or timeout is reached. Match options allow simple CONTAINS or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the &#x60;MatchOptions&#x60; object for options. An example payload is &#x60;{ matches: [{field: &#39;SUBJECT&#39;,should:&#39;CONTAIN&#39;,value:&#39;needle&#39;}] }&#x60;. You can use an array of matches and they will be applied sequentially to filter out emails. If you want to perform matches and extractions of content using Regex patterns see the EmailController &#x60;getEmailContentMatch&#x60; method.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForMatchingFirstEmailTest() throws ApiException {
        UUID inboxId = null;
        MatchOptions matchOptions = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String sort = null;
        Long delay = null;
        Email response = api.waitForMatchingFirstEmail(inboxId, matchOptions, timeout, unreadOnly, since, before, sort, delay);

        // TODO: test validations
    }
    
    /**
     * Wait for or fetch the email with a given index in the inbox specified. If index doesn&#39;t exist waits for it to exist or timeout to occur.
     *
     * If nth email is already present in inbox then return it. If not hold the connection open until timeout expires or the nth email is received and returned.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForNthEmailTest() throws ApiException {
        UUID inboxId = null;
        Integer index = null;
        Long timeout = null;
        Boolean unreadOnly = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String sort = null;
        Long delay = null;
        Email response = api.waitForNthEmail(inboxId, index, timeout, unreadOnly, since, before, sort, delay);

        // TODO: test validations
    }
    
    /**
     * Wait for an SMS message to match the provided filter conditions such as body contains keyword.
     *
     * Generic waitFor method that will wait until a phone number meets given conditions or return immediately if already met
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void waitForSmsTest() throws ApiException {
        WaitForSmsConditions waitForSmsConditions = null;
        List<SmsPreview> response = api.waitForSms(waitForSmsConditions);

        // TODO: test validations
    }
    
}
