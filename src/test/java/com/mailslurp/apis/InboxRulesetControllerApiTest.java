/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CreateInboxRulesetOptions;
import com.mailslurp.models.InboxRulesetDto;
import com.mailslurp.models.PageInboxRulesetProjection;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxRulesetControllerApi
 */
@Ignore
public class InboxRulesetControllerApiTest {

    private final InboxRulesetControllerApi api = new InboxRulesetControllerApi();

    
    /**
     * Create an inbox ruleset
     *
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createNewInboxRulesetTest() throws ApiException {
        CreateInboxRulesetOptions createInboxRulesetOptions = null;
        UUID inboxId = null;
        InboxRulesetDto response = api.createNewInboxRuleset(createInboxRulesetOptions, inboxId);

        // TODO: test validations
    }
    
    /**
     * Delete an inbox ruleset
     *
     * Delete inbox ruleset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboxRulesetTest() throws ApiException {
        UUID id = null;
        api.deleteInboxRuleset(id);

        // TODO: test validations
    }
    
    /**
     * Delete inbox rulesets
     *
     * Delete inbox rulesets. Accepts optional inboxId filter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboxRulesetsTest() throws ApiException {
        UUID inboxId = null;
        api.deleteInboxRulesets(inboxId);

        // TODO: test validations
    }
    
    /**
     * Get an inbox ruleset
     *
     * Get inbox ruleset
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxRulesetTest() throws ApiException {
        UUID id = null;
        InboxRulesetDto response = api.getInboxRuleset(id);

        // TODO: test validations
    }
    
    /**
     * List inbox rulesets
     *
     * List all rulesets attached to an inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxRulesetsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageInboxRulesetProjection response = api.getInboxRulesets(inboxId, page, size, sort);

        // TODO: test validations
    }
    
}
