/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.AttachmentMetaData;
import com.mailslurp.models.CanSendEmailResults;
import com.mailslurp.models.CheckEmailBodyFeatureSupportResults;
import com.mailslurp.models.CheckEmailBodyResults;
import com.mailslurp.models.CheckEmailClientSupportOptions;
import com.mailslurp.models.CheckEmailClientSupportResults;
import com.mailslurp.models.ContentMatchOptions;
import com.mailslurp.models.CountDto;
import com.mailslurp.models.DownloadAttachmentDto;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailContentMatchResult;
import com.mailslurp.models.EmailContentPartResult;
import com.mailslurp.models.EmailHtmlDto;
import com.mailslurp.models.EmailLinksResult;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.EmailPreviewUrls;
import com.mailslurp.models.EmailScreenshotResult;
import com.mailslurp.models.EmailTextLinesResult;
import com.mailslurp.models.EmailThreadDto;
import com.mailslurp.models.EmailThreadItemsDto;
import com.mailslurp.models.ForwardEmailOptions;
import com.mailslurp.models.GetEmailScreenshotOptions;
import com.mailslurp.models.GravatarUrl;
import com.mailslurp.models.ImapFlagOperationOptions;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageEmailProjection;
import com.mailslurp.models.PageEmailThreadProjection;
import com.mailslurp.models.RawEmailJson;
import com.mailslurp.models.ReplyToEmailOptions;
import com.mailslurp.models.SearchEmailsOptions;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;
import com.mailslurp.models.UnreadCount;
import com.mailslurp.models.ValidationDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmailControllerApi
 */
@Disabled
public class EmailControllerApiTest {

    private final EmailControllerApi api = new EmailControllerApi();

    /**
     * Set IMAP flags associated with a message. Only supports &#39;\\Seen&#39; flag.
     *
     * Apply RFC3501 section-2.3.2 IMAP flag operations on an email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void applyImapFlagOperationTest() throws ApiException {
        UUID emailId = null;
        ImapFlagOperationOptions imapFlagOperationOptions = null;
        EmailPreview response = api.applyImapFlagOperation(emailId, imapFlagOperationOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Check if email can be sent and options are valid.
     *
     * Can user send email to given recipient or is the recipient blocked
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void canSendTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        CanSendEmailResults response = api.canSend(inboxId, sendEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Detect broken links, spelling, and images in email content
     *
     * Find dead links, broken images, and spelling mistakes in email body. Will call included links via HTTP so do not invoke if your links are sensitive or stateful. Any resource that returns a 4xx or 5xx response or is not reachable via HEAD or GET HTTP operations will be considered unhealthy.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkEmailBodyTest() throws ApiException {
        UUID emailId = null;
        CheckEmailBodyResults response = api.checkEmailBody(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Show which mail clients support the HTML and CSS features used in an email body.
     *
     * Detect HTML and CSS features inside an email body and return a report of email client support across different platforms and versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkEmailBodyFeatureSupportTest() throws ApiException {
        UUID emailId = null;
        CheckEmailBodyFeatureSupportResults response = api.checkEmailBodyFeatureSupport(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Show which email programs and devices support the features used in an email body.
     *
     * Evaluate the features used in an email body and return a report of email client support across different platforms and versions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void checkEmailClientSupportTest() throws ApiException {
        CheckEmailClientSupportOptions checkEmailClientSupportOptions = null;
        CheckEmailClientSupportResults response = api.checkEmailClientSupport(checkEmailClientSupportOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all emails in all inboxes.
     *
     * Deletes all emails in your account. Be careful as emails cannot be recovered
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllEmailsTest() throws ApiException {
        api.deleteAllEmails()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an email
     *
     * Deletes an email and removes it from the inbox. Deleted emails cannot be recovered.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEmailTest() throws ApiException {
        UUID emailId = null;
        api.deleteEmail(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email attachment bytes. Returned as &#x60;octet-stream&#x60; with content type header. If you have trouble with byte responses try the &#x60;downloadAttachmentBase64&#x60; response endpoints and convert the base 64 encoded content to a file or string.
     *
     * Returns the specified attachment for a given email as a stream / array of bytes. You can find attachment ids in email responses endpoint responses. The response type is application/octet-stream.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadAttachmentTest() throws ApiException {
        UUID emailId = null;
        String attachmentId = null;
        String apiKey = null;
        byte[] response = api.downloadAttachment(emailId, attachmentId)
                .apiKey(apiKey)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email attachment as base64 encoded string as an alternative to binary responses. Decode the &#x60;base64FileContents&#x60; as a &#x60;utf-8&#x60; encoded string or array of bytes depending on the &#x60;contentType&#x60;.
     *
     * Returns the specified attachment for a given email as a base 64 encoded string. The response type is application/json. This method is similar to the &#x60;downloadAttachment&#x60; method but allows some clients to get around issues with binary responses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadAttachmentBase64Test() throws ApiException {
        UUID emailId = null;
        String attachmentId = null;
        DownloadAttachmentDto response = api.downloadAttachmentBase64(emailId, attachmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email body as string. Returned as &#x60;plain/text&#x60; with content type header.
     *
     * Returns the specified email body for a given email as a string
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadBodyTest() throws ApiException {
        UUID emailId = null;
        String response = api.downloadBody(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email body in bytes. Returned as &#x60;octet-stream&#x60; with content type header.
     *
     * Returns the specified email body for a given email as a stream / array of bytes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadBodyBytesTest() throws ApiException {
        UUID emailId = null;
        byte[] response = api.downloadBodyBytes(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Forward email to recipients
     *
     * Forward an existing email to new recipients. The sender of the email will be the inbox that received the email you are forwarding. You can override the sender with the &#x60;from&#x60; option. Note you must have access to the from address in MailSlurp to use the override. For more control consider fetching the email and sending it a new using the send email endpoints.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void forwardEmailTest() throws ApiException {
        UUID emailId = null;
        ForwardEmailOptions forwardEmailOptions = null;
        SentEmailDto response = api.forwardEmail(emailId, forwardEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email attachment metadata. This is the &#x60;contentType&#x60; and &#x60;contentLength&#x60; of an attachment. To get the individual attachments  use the &#x60;downloadAttachment&#x60; methods.
     *
     * Returns the metadata such as name and content-type for a given attachment and email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAttachmentMetaDataTest() throws ApiException {
        UUID emailId = null;
        String attachmentId = null;
        AttachmentMetaData response = api.getAttachmentMetaData(emailId, attachmentId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email content including headers and body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     *
     * Returns a email summary object with headers and content. To retrieve the raw unparsed email use the getRawEmail endpoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTest() throws ApiException {
        UUID emailId = null;
        Email response = api.getEmail(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all email attachment metadata. Metadata includes name and size of attachments.
     *
     * Returns an array of attachment metadata such as name and content-type for a given email if present.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailAttachmentsTest() throws ApiException {
        UUID emailId = null;
        List<AttachmentMetaData> response = api.getEmailAttachments(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email content regex pattern match results. Runs regex against email body and returns match groups.
     *
     * Return the matches for a given Java style regex pattern. Do not include the typical &#x60;/&#x60; at start or end of regex in some languages. Given an example &#x60;your code is: 12345&#x60; the pattern to extract match looks like &#x60;code is: (\\d{6})&#x60;. This will return an array of matches with the first matching the entire pattern and the subsequent matching the groups: &#x60;[&#39;code is: 123456&#39;, &#39;123456&#39;]&#x60; See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html for more information of available patterns. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailContentMatchTest() throws ApiException {
        UUID emailId = null;
        ContentMatchOptions contentMatchOptions = null;
        EmailContentMatchResult response = api.getEmailContentMatch(emailId, contentMatchOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email content part by content type
     *
     * Get email body content parts from a multipart email message for a given content type
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailContentPartTest() throws ApiException {
        UUID emailId = null;
        String contentType = null;
        Boolean strict = null;
        Integer index = null;
        EmailContentPartResult response = api.getEmailContentPart(emailId, contentType)
                .strict(strict)
                .index(index)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email content part by content type raw response
     *
     * Get email body content parts from a multipart email message for a given content type and return as response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailContentPartContentTest() throws ApiException {
        UUID emailId = null;
        String contentType = null;
        Boolean strict = null;
        Integer index = null;
        String response = api.getEmailContentPartContent(emailId, contentType)
                .strict(strict)
                .index(index)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailCountTest() throws ApiException {
        UUID inboxId = null;
        CountDto response = api.getEmailCount()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email content as HTML. For displaying emails in browser context.
     *
     * Retrieve email content as HTML response for viewing in browsers. Decodes quoted-printable entities and converts charset to UTF-8. Pass your API KEY as a request parameter when viewing in a browser: &#x60;?apiKey&#x3D;xxx&#x60;. Returns content-type &#x60;text/html;charset&#x3D;utf-8&#x60; so you must call expecting that content response not JSON. For JSON response see the &#x60;getEmailHTMLJson&#x60; method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailHTMLTest() throws ApiException {
        UUID emailId = null;
        Boolean replaceCidImages = null;
        String response = api.getEmailHTML(emailId)
                .replaceCidImages(replaceCidImages)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email content as HTML in JSON wrapper. For fetching entity decoded HTML content
     *
     * Retrieve email content as HTML response. Decodes quoted-printable entities and converts charset to UTF-8. Returns content-type &#x60;application/json;charset&#x3D;utf-8&#x60; so you must call expecting that content response not JSON.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailHTMLJsonTest() throws ApiException {
        UUID emailId = null;
        Boolean replaceCidImages = null;
        EmailHtmlDto response = api.getEmailHTMLJson(emailId)
                .replaceCidImages(replaceCidImages)
                .execute();
        // TODO: test validations
    }

    /**
     * Parse and return text from an email, stripping HTML and decoding encoded characters
     *
     * Parse an email body and return the content as an array of text. HTML parsing uses JSoup which supports JQuery/CSS style selectors
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailHTMLQueryTest() throws ApiException {
        UUID emailId = null;
        String htmlSelector = null;
        EmailTextLinesResult response = api.getEmailHTMLQuery(emailId, htmlSelector)
                .execute();
        // TODO: test validations
    }

    /**
     * Parse and return list of links found in an email (only works for HTML content)
     *
     * HTML parsing uses JSoup and UNIX line separators. Searches content for href attributes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailLinksTest() throws ApiException {
        UUID emailId = null;
        String selector = null;
        EmailLinksResult response = api.getEmailLinks(emailId)
                .selector(selector)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email URLs for viewing in browser or downloading
     *
     * Get a list of URLs for email content as text/html or raw SMTP message for viewing the message in a browser.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailPreviewURLsTest() throws ApiException {
        UUID emailId = null;
        EmailPreviewUrls response = api.getEmailPreviewURLs(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Take a screenshot of an email in a browser and return base64 encoded string
     *
     * Capture image of email screenshot and return as base64 encoded string. Useful for embedding in HTML. Be careful as this may contain sensitive information.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailScreenshotAsBase64Test() throws ApiException {
        UUID emailId = null;
        GetEmailScreenshotOptions getEmailScreenshotOptions = null;
        EmailScreenshotResult response = api.getEmailScreenshotAsBase64(emailId, getEmailScreenshotOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Take a screenshot of an email in a browser
     *
     * Returns binary octet-stream of screenshot of the given email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailScreenshotAsBinaryTest() throws ApiException {
        UUID emailId = null;
        GetEmailScreenshotOptions getEmailScreenshotOptions = null;
        api.getEmailScreenshotAsBinary(emailId, getEmailScreenshotOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get email data including headers but not body. Expects email to exist by ID. For emails that may not have arrived yet use the WaitForController.
     *
     * Returns a email summary object with headers. To retrieve the body see getEmail and to get raw unparsed email use the getRawEmail endpoints
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailSummaryTest() throws ApiException {
        UUID emailId = null;
        Boolean decode = null;
        EmailPreview response = api.getEmailSummary(emailId)
                .decode(decode)
                .execute();
        // TODO: test validations
    }

    /**
     * Parse and return text from an email, stripping HTML and decoding encoded characters
     *
     * Parse an email body and return the content as an array of strings. HTML parsing uses JSoup and UNIX line separators.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailTextLinesTest() throws ApiException {
        UUID emailId = null;
        Boolean decodeHtmlEntities = null;
        String lineSeparator = null;
        EmailTextLinesResult response = api.getEmailTextLines(emailId)
                .decodeHtmlEntities(decodeHtmlEntities)
                .lineSeparator(lineSeparator)
                .execute();
        // TODO: test validations
    }

    /**
     * Return email thread information. Use items endpoints to get messages for thread.
     *
     * Return email message thread summary from Message-ID, In-Reply-To, and References header. Get messages using items endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailThreadTest() throws ApiException {
        UUID threadId = null;
        EmailThreadDto response = api.getEmailThread(threadId)
                .execute();
        // TODO: test validations
    }

    /**
     * Return email thread items.
     *
     * Return email thread messages based on Message-ID, In-Reply-To, and References header
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailThreadItemsTest() throws ApiException {
        UUID threadId = null;
        String sort = null;
        EmailThreadItemsDto response = api.getEmailThreadItems(threadId)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Return email threads in paginated form
     *
     * Return email message chains built from Message-ID, In-Reply-To, and References header.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailThreadsTest() throws ApiException {
        UUID htmlSelector = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageEmailThreadProjection response = api.getEmailThreads()
                .htmlSelector(htmlSelector)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all emails in all inboxes in paginated form. Email API list all.
     *
     * By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailsOffsetPaginatedTest() throws ApiException {
        List<UUID> inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean favourited = null;
        Boolean syncConnectors = null;
        UUID plusAddressId = null;
        PageEmailProjection response = api.getEmailsOffsetPaginated()
                .inboxId(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .unreadOnly(unreadOnly)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .favourited(favourited)
                .syncConnectors(syncConnectors)
                .plusAddressId(plusAddressId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all emails in all inboxes in paginated form. Email API list all.
     *
     * By default returns all emails across all inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailsPaginatedTest() throws ApiException {
        List<UUID> inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean syncConnectors = null;
        UUID plusAddressId = null;
        Boolean favourited = null;
        PageEmailProjection response = api.getEmailsPaginated()
                .inboxId(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .unreadOnly(unreadOnly)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .syncConnectors(syncConnectors)
                .plusAddressId(plusAddressId)
                .favourited(favourited)
                .execute();
        // TODO: test validations
    }

    /**
     * Get gravatar url for email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getGravatarUrlForEmailAddressTest() throws ApiException {
        String emailAddress = null;
        String size = null;
        GravatarUrl response = api.getGravatarUrlForEmailAddress(emailAddress)
                .size(size)
                .execute();
        // TODO: test validations
    }

    /**
     * Get latest email in all inboxes. Most recently received.
     *
     * Get the newest email in all inboxes or in a passed set of inbox IDs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestEmailTest() throws ApiException {
        List<UUID> inboxIds = null;
        Email response = api.getLatestEmail()
                .inboxIds(inboxIds)
                .execute();
        // TODO: test validations
    }

    /**
     * Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
     *
     * Get the newest email in all inboxes or in a passed set of inbox IDs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestEmailInInbox1Test() throws ApiException {
        UUID inboxId = null;
        Email response = api.getLatestEmailInInbox1(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all organization emails. List team or shared test email accounts
     *
     * By default returns all emails across all team inboxes sorted by ascending created at date. Responses are paginated. You can restrict results to a list of inbox IDs. You can also filter out read messages
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationEmailsPaginatedTest() throws ApiException {
        List<UUID> inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean unreadOnly = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean syncConnectors = null;
        Boolean favourited = null;
        UUID plusAddressId = null;
        PageEmailProjection response = api.getOrganizationEmailsPaginated()
                .inboxId(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .unreadOnly(unreadOnly)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .syncConnectors(syncConnectors)
                .favourited(favourited)
                .plusAddressId(plusAddressId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get raw email string. Returns unparsed raw SMTP message with headers and body.
     *
     * Returns a raw, unparsed, and unprocessed email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawEmailJson endpoint
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRawEmailContentsTest() throws ApiException {
        UUID emailId = null;
        api.getRawEmailContents(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
     *
     * Returns a raw, unparsed, and unprocessed email wrapped in a JSON response object for easier handling when compared with the getRawEmail text/plain response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRawEmailJsonTest() throws ApiException {
        UUID emailId = null;
        RawEmailJson response = api.getRawEmailJson(emailId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get unread email count
     *
     * Get number of emails unread. Unread means has not been viewed in dashboard or returned in an email API response
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUnreadEmailCountTest() throws ApiException {
        UUID inboxId = null;
        UnreadCount response = api.getUnreadEmailCount()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Mark all emails as read or unread
     *
     * Marks all emails as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAllAsReadTest() throws ApiException {
        Boolean read = null;
        UUID inboxId = null;
        api.markAllAsRead()
                .read(read)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Mark an email as read or unread
     *
     * Marks an email as read or unread. Pass boolean read flag to set value. This is useful if you want to read an email but keep it as unread
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void markAsReadTest() throws ApiException {
        UUID emailId = null;
        Boolean read = null;
        EmailPreview response = api.markAsRead(emailId)
                .read(read)
                .execute();
        // TODO: test validations
    }

    /**
     * Reply to an email
     *
     * Send the reply to the email sender or reply-to and include same subject cc bcc etc. Reply to an email and the contents will be sent with the existing subject to the emails &#x60;to&#x60;, &#x60;cc&#x60;, and &#x60;bcc&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void replyToEmailTest() throws ApiException {
        UUID emailId = null;
        ReplyToEmailOptions replyToEmailOptions = null;
        SentEmailDto response = api.replyToEmail(emailId, replyToEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all emails by search criteria. Return in paginated form.
     *
     * Search emails by given criteria return matches in paginated format. Searches against email recipients, sender, subject, email address and ID. Does not search email body
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchEmailsTest() throws ApiException {
        SearchEmailsOptions searchEmailsOptions = null;
        Boolean syncConnectors = null;
        Boolean favourited = null;
        UUID plusAddressId = null;
        PageEmailProjection response = api.searchEmails(searchEmailsOptions)
                .syncConnectors(syncConnectors)
                .favourited(favourited)
                .plusAddressId(plusAddressId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send email
     *
     * Alias for &#x60;InboxController.sendEmail&#x60; method - see original method for full details. Sends an email from a given inbox that you have created. If no inbox is supplied a random inbox will be created for you and used to send the email.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailSourceOptionalTest() throws ApiException {
        SendEmailOptions sendEmailOptions = null;
        UUID inboxId = null;
        Boolean useDomainPool = null;
        Boolean virtualSend = null;
        api.sendEmailSourceOptional(sendEmailOptions)
                .inboxId(inboxId)
                .useDomainPool(useDomainPool)
                .virtualSend(virtualSend)
                .execute();
        // TODO: test validations
    }

    /**
     * Set email favourited state
     *
     * Set and return new favorite state for an email
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setEmailFavouritedTest() throws ApiException {
        UUID emailId = null;
        Boolean favourited = null;
        api.setEmailFavourited(emailId, favourited)
                .execute();
        // TODO: test validations
    }

    /**
     * Validate email HTML contents
     *
     * Validate the HTML content of email if HTML is found. Considered valid if no HTML is present.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateEmailTest() throws ApiException {
        UUID emailId = null;
        ValidationDto response = api.validateEmail(emailId)
                .execute();
        // TODO: test validations
    }

}
