/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CreateInboxDto;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.ExpiredInboxDto;
import com.mailslurp.models.Inbox;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageEmailPreview;
import com.mailslurp.models.PageExpiredInboxRecordProjection;
import com.mailslurp.models.PageInboxProjection;
import com.mailslurp.models.PageSentEmailProjection;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SentEmailDto;
import com.mailslurp.models.SetInboxFavouritedOptions;
import java.util.UUID;
import com.mailslurp.models.UpdateInboxOptions;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxControllerApi
 */
@Ignore
public class InboxControllerApiTest {

    private final InboxControllerApi api = new InboxControllerApi();

    
    /**
     * Create an Inbox (email address)
     *
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInboxTest() throws ApiException {
        String description = null;
        String emailAddress = null;
        OffsetDateTime expiresAt = null;
        Long expiresIn = null;
        Boolean favourite = null;
        String name = null;
        List<String> tags = null;
        Boolean useDomainPool = null;
        Inbox response = api.createInbox(description, emailAddress, expiresAt, expiresIn, favourite, name, tags, useDomainPool);

        // TODO: test validations
    }
    
    /**
     * Create an inbox with additional options
     *
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInboxWithOptionsTest() throws ApiException {
        CreateInboxDto createInboxDto = null;
        Inbox response = api.createInboxWithOptions(createInboxDto);

        // TODO: test validations
    }
    
    /**
     * Delete all inboxes
     *
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllInboxesTest() throws ApiException {
        api.deleteAllInboxes();

        // TODO: test validations
    }
    
    /**
     * Delete inbox
     *
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteInboxTest() throws ApiException {
        UUID inboxId = null;
        api.deleteInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * List All Inboxes Paginated
     *
     * List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return(, and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllInboxesTest() throws ApiException {
        Boolean favourite = null;
        Integer page = null;
        String search = null;
        Integer size = null;
        String sort = null;
        String tag = null;
        PageInboxProjection response = api.getAllInboxes(favourite, page, search, size, sort, tag);

        // TODO: test validations
    }
    
    /**
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     *
     * List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer limit = null;
        Long minCount = null;
        Long retryTimeout = null;
        OffsetDateTime since = null;
        Integer size = null;
        String sort = null;
        List<EmailPreview> response = api.getEmails(inboxId, limit, minCount, retryTimeout, since, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get an expired inbox record
     *
     * Inboxes created with an expiration date will expire after the given date and be moved to an ExpiredInbox entity. You can still read emails in the inbox but it can no longer send or receive emails. Fetch the expired inboxes to view the old inboxes properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpiredInboxRecordByIdTest() throws ApiException {
        UUID expiredId = null;
        ExpiredInboxDto response = api.getExpiredInboxRecordById(expiredId);

        // TODO: test validations
    }
    
    /**
     * Get expired inbox record for a previously existing inbox
     *
     * Use the inboxId to return an ExpiredInboxRecord if an inbox has expired. Inboxes expire and are disabled if an expiration date is set or plan requires. Returns 404 if no expired inbox is found for the inboxId
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpiredInboxRecordByInboxIdTest() throws ApiException {
        UUID inboxId = null;
        ExpiredInboxDto response = api.getExpiredInboxRecordByInboxId(inboxId);

        // TODO: test validations
    }
    
    /**
     * List records of expired inboxes
     *
     * Inboxes created with an expiration date will expire after the given date. An ExpiredInboxRecord is created that records the inboxes old ID and email address. You can still read emails in the inbox (using the inboxes old ID) but the email address associated with the inbox can no longer send or receive emails. Fetch expired inbox records to view the old inboxes properties
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getExpiredInboxRecordsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageExpiredInboxRecordProjection response = api.getExpiredInboxRecords(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get Inbox
     *
     * Returns an inbox&#39;s properties, including its email address and ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxTest() throws ApiException {
        UUID inboxId = null;
        Inbox response = api.getInbox(inboxId);

        // TODO: test validations
    }
    
    /**
     * Get inbox emails paginated
     *
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxEmailsPaginatedTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageEmailPreview response = api.getInboxEmailsPaginated(inboxId, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get Inbox Sent Emails
     *
     * Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxSentEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageSentEmailProjection response = api.getInboxSentEmails(inboxId, page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get inbox tags
     *
     * Get all inbox tags
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxTagsTest() throws ApiException {
        List<String> response = api.getInboxTags();

        // TODO: test validations
    }
    
    /**
     * List Inboxes / Email Addresses
     *
     * List the inboxes you have created. Note use of the more advanced &#x60;getAllEmails&#x60; is recommended. You can provide a limit and sort parameter.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInboxesTest() throws ApiException {
        Integer size = null;
        String sort = null;
        List<Inbox> response = api.getInboxes(size, sort);

        // TODO: test validations
    }
    
    /**
     * Send Email
     *
     * Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        api.sendEmail(inboxId, sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Send email and return sent confirmation
     *
     * Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with link the the sent object created for it.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendEmailAndConfirmTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        SentEmailDto response = api.sendEmailAndConfirm(inboxId, sendEmailOptions);

        // TODO: test validations
    }
    
    /**
     * Set inbox favourited state
     *
     * Set and return new favourite state for an inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void setInboxFavouritedTest() throws ApiException {
        UUID inboxId = null;
        SetInboxFavouritedOptions setInboxFavouritedOptions = null;
        Inbox response = api.setInboxFavourited(inboxId, setInboxFavouritedOptions);

        // TODO: test validations
    }
    
    /**
     * Update Inbox
     *
     * Update editable fields on an inbox
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInboxTest() throws ApiException {
        UUID inboxId = null;
        UpdateInboxOptions updateInboxOptions = null;
        Inbox response = api.updateInbox(inboxId, updateInboxOptions);

        // TODO: test validations
    }
    
}
