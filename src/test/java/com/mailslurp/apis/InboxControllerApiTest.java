/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CountDto;
import com.mailslurp.models.CreateInboxDto;
import com.mailslurp.models.CreateInboxRulesetOptions;
import com.mailslurp.models.Email;
import com.mailslurp.models.EmailAvailableResult;
import com.mailslurp.models.EmailPreview;
import com.mailslurp.models.FlushExpiredInboxesResult;
import com.mailslurp.models.ImapAccessDetails;
import com.mailslurp.models.ImapSmtpAccessDetails;
import com.mailslurp.models.ImapSmtpAccessServers;
import com.mailslurp.models.InboxByEmailAddressResult;
import com.mailslurp.models.InboxByNameResult;
import com.mailslurp.models.InboxDto;
import com.mailslurp.models.InboxExistsDto;
import com.mailslurp.models.InboxIdsResult;
import com.mailslurp.models.InboxRulesetDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageDeliveryStatus;
import com.mailslurp.models.PageEmailPreview;
import com.mailslurp.models.PageInboxProjection;
import com.mailslurp.models.PageInboxRulesetDto;
import com.mailslurp.models.PageInboxTags;
import com.mailslurp.models.PageOrganizationInboxProjection;
import com.mailslurp.models.PagePlusAddressProjection;
import com.mailslurp.models.PageScheduledJobs;
import com.mailslurp.models.PageSentEmailProjection;
import com.mailslurp.models.PageTrackingPixelProjection;
import com.mailslurp.models.PlusAddressDto;
import com.mailslurp.models.ScheduledJobDto;
import com.mailslurp.models.SearchInboxesOptions;
import com.mailslurp.models.SendEmailOptions;
import com.mailslurp.models.SendSMTPEnvelopeOptions;
import com.mailslurp.models.SentEmailDto;
import com.mailslurp.models.SetInboxFavouritedOptions;
import com.mailslurp.models.SmtpAccessDetails;
import java.util.UUID;
import com.mailslurp.models.UpdateImapAccessOptions;
import com.mailslurp.models.UpdateInboxOptions;
import com.mailslurp.models.UpdateSmtpAccessOptions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxControllerApi
 */
@Disabled
public class InboxControllerApiTest {

    private final InboxControllerApi api = new InboxControllerApi();

    /**
     * Cancel a scheduled email job
     *
     * Get a scheduled email job and cancel it. Will fail if status of job is already cancelled, failed, or complete.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelScheduledJobTest() throws ApiException {
        UUID jobId = null;
        ScheduledJobDto response = api.cancelScheduledJob(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox email address. An inbox has a real email address and can send and receive emails. Inboxes can be either &#x60;SMTP&#x60; or &#x60;HTTP&#x60; inboxes.
     *
     * Create a new inbox and with a randomized email address to send and receive from. Pass emailAddress parameter if you wish to use a specific email address. Creating an inbox is required before sending or receiving emails. If writing tests it is recommended that you create a new inbox during each test method so that it is unique and empty. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInboxTest() throws ApiException {
        String emailAddress = null;
        List<String> tags = null;
        String name = null;
        String description = null;
        Boolean useDomainPool = null;
        Boolean favourite = null;
        OffsetDateTime expiresAt = null;
        Long expiresIn = null;
        Boolean allowTeamAccess = null;
        String inboxType = null;
        Boolean virtualInbox = null;
        Boolean useShortAddress = null;
        UUID domainId = null;
        String domainName = null;
        String prefix = null;
        InboxDto response = api.createInbox()
                .emailAddress(emailAddress)
                .tags(tags)
                .name(name)
                .description(description)
                .useDomainPool(useDomainPool)
                .favourite(favourite)
                .expiresAt(expiresAt)
                .expiresIn(expiresIn)
                .allowTeamAccess(allowTeamAccess)
                .inboxType(inboxType)
                .virtualInbox(virtualInbox)
                .useShortAddress(useShortAddress)
                .domainId(domainId)
                .domainName(domainName)
                .prefix(prefix)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox ruleset
     *
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInboxRulesetTest() throws ApiException {
        UUID inboxId = null;
        CreateInboxRulesetOptions createInboxRulesetOptions = null;
        InboxRulesetDto response = api.createInboxRuleset(inboxId, createInboxRulesetOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox with default options. Uses MailSlurp domain pool address and is private.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInboxWithDefaultsTest() throws ApiException {
        InboxDto response = api.createInboxWithDefaults()
                .execute();
        // TODO: test validations
    }

    /**
     * Create an inbox with options. Extended options for inbox creation.
     *
     * Additional endpoint that allows inbox creation with request body options. Can be more flexible that other methods for some clients.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createInboxWithOptionsTest() throws ApiException {
        CreateInboxDto createInboxDto = null;
        InboxDto response = api.createInboxWithOptions(createInboxDto)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all emails in a given inboxes.
     *
     * Deletes all emails in an inbox. Be careful as emails cannot be recovered
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllInboxEmailsTest() throws ApiException {
        UUID inboxId = null;
        api.deleteAllInboxEmails(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all inboxes
     *
     * Permanently delete all inboxes and associated email addresses. This will also delete all emails within the inboxes. Be careful as inboxes cannot be recovered once deleted. Note: deleting inboxes will not impact your usage limits. Monthly inbox creation limits are based on how many inboxes were created in the last 30 days, not how many inboxes you currently have.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllInboxesTest() throws ApiException {
        api.deleteAllInboxes()
                .execute();
        // TODO: test validations
    }

    /**
     * Delete inboxes by description
     *
     * Permanently delete all inboxes by description
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllInboxesByDescriptionTest() throws ApiException {
        String description = null;
        api.deleteAllInboxesByDescription(description)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete inboxes by name
     *
     * Permanently delete all inboxes by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllInboxesByNameTest() throws ApiException {
        String name = null;
        api.deleteAllInboxesByName(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete inboxes by tag
     *
     * Permanently delete all inboxes by tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllInboxesByTagTest() throws ApiException {
        String tag = null;
        api.deleteAllInboxesByTag(tag)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete inbox
     *
     * Permanently delete an inbox and associated email address as well as all emails within the given inbox. This action cannot be undone. Note: deleting an inbox will not affect your account usage. Monthly inbox usage is based on how many inboxes you create within 30 days, not how many exist at time of request.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInboxTest() throws ApiException {
        UUID inboxId = null;
        api.deleteInbox(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Does inbox exist
     *
     * Check if inboxes exist by email address. Useful if you are sending emails to mailslurp addresses
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doesInboxExistTest() throws ApiException {
        String emailAddress = null;
        Boolean allowCatchAll = null;
        String ipAddress = null;
        String sender = null;
        InboxExistsDto response = api.doesInboxExist(emailAddress)
                .allowCatchAll(allowCatchAll)
                .ipAddress(ipAddress)
                .sender(sender)
                .execute();
        // TODO: test validations
    }

    /**
     * Does inbox have automations
     *
     * Check if an inbox has automations.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void doesInboxHaveAutomationsTest() throws ApiException {
        api.doesInboxHaveAutomations()
                .execute();
        // TODO: test validations
    }

    /**
     * Remove expired inboxes
     *
     * Remove any expired inboxes for your account (instead of waiting for scheduled removal on server)
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void flushExpiredTest() throws ApiException {
        OffsetDateTime before = null;
        FlushExpiredInboxesResult response = api.flushExpired()
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * List All Inboxes Paginated
     *
     * List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInboxesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean favourite = null;
        String search = null;
        String tag = null;
        Boolean teamAccess = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String inboxType = null;
        String inboxFunction = null;
        UUID domainId = null;
        PageInboxProjection response = api.getAllInboxes()
                .page(page)
                .size(size)
                .sort(sort)
                .favourite(favourite)
                .search(search)
                .tag(tag)
                .teamAccess(teamAccess)
                .since(since)
                .before(before)
                .inboxType(inboxType)
                .inboxFunction(inboxFunction)
                .domainId(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * List All Inboxes Offset Paginated
     *
     * List inboxes in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInboxesOffsetPaginatedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        Boolean favourite = null;
        String search = null;
        String tag = null;
        Boolean teamAccess = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String inboxType = null;
        String inboxFunction = null;
        UUID domainId = null;
        PageInboxProjection response = api.getAllInboxesOffsetPaginated()
                .page(page)
                .size(size)
                .sort(sort)
                .favourite(favourite)
                .search(search)
                .tag(tag)
                .teamAccess(teamAccess)
                .since(since)
                .before(before)
                .inboxType(inboxType)
                .inboxFunction(inboxFunction)
                .domainId(domainId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all sub address plus address aliases for an inbox
     *
     * Returns paginated list of all plus alias addresses found for in account based on received emails that used the inbox address with a +xyz alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllPlusAddressesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        UUID inboxId = null;
        PagePlusAddressProjection response = api.getAllPlusAddresses()
                .page(page)
                .size(size)
                .sort(sort)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all scheduled email sending jobs for account
     *
     * Schedule sending of emails using scheduled jobs. These can be inbox or account level.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllScheduledJobsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        UUID inboxId = null;
        PageScheduledJobs response = api.getAllScheduledJobs()
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all email delivery statuses for an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getDeliveryStatusesByInboxIdTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageDeliveryStatus response = api.getDeliveryStatusesByInboxId(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get emails in an Inbox. This method is not idempotent as it allows retries and waits if you want certain conditions to be met before returning. For simple listing and sorting of known emails use the email controller instead.
     *
     * List emails that an inbox has received. Only emails that are sent to the inbox&#39;s email address will appear in the inbox. It may take several seconds for any email you send to an inbox&#39;s email address to appear in the inbox. To make this endpoint wait for a minimum number of emails use the &#x60;minCount&#x60; parameter. The server will retry the inbox database until the &#x60;minCount&#x60; is satisfied or the &#x60;retryTimeout&#x60; is reached
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer size = null;
        Integer limit = null;
        String sort = null;
        Long retryTimeout = null;
        Long delayTimeout = null;
        Long minCount = null;
        Boolean unreadOnly = null;
        OffsetDateTime before = null;
        OffsetDateTime since = null;
        List<EmailPreview> response = api.getEmails(inboxId)
                .size(size)
                .limit(limit)
                .sort(sort)
                .retryTimeout(retryTimeout)
                .delayTimeout(delayTimeout)
                .minCount(minCount)
                .unreadOnly(unreadOnly)
                .before(before)
                .since(since)
                .execute();
        // TODO: test validations
    }

    /**
     * Get IMAP access usernames and passwords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImapAccessTest() throws ApiException {
        UUID inboxId = null;
        ImapAccessDetails response = api.getImapAccess()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get IMAP and SMTP access usernames and passwords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImapSmtpAccessTest() throws ApiException {
        UUID inboxId = null;
        ImapSmtpAccessDetails response = api.getImapSmtpAccess()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get IMAP and SMTP access details in .env format
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImapSmtpAccessEnvTest() throws ApiException {
        UUID inboxId = null;
        String response = api.getImapSmtpAccessEnv()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get IMAP and SMTP server hosts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImapSmtpAccessServersTest() throws ApiException {
        ImapSmtpAccessServers response = api.getImapSmtpAccessServers()
                .execute();
        // TODO: test validations
    }

    /**
     * Get Inbox. Returns properties of an inbox.
     *
     * Returns an inbox&#39;s properties, including its email address and ID.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxTest() throws ApiException {
        UUID inboxId = null;
        InboxDto response = api.getInbox(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for an inbox with the provided email address
     *
     * Get a inbox result by email address
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxByEmailAddressTest() throws ApiException {
        String emailAddress = null;
        InboxByEmailAddressResult response = api.getInboxByEmailAddress(emailAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * Search for an inbox with the given name
     *
     * Get a inbox result by name
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxByNameTest() throws ApiException {
        String name = null;
        InboxByNameResult response = api.getInboxByName(name)
                .execute();
        // TODO: test validations
    }

    /**
     * Get total inbox count
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxCountTest() throws ApiException {
        CountDto response = api.getInboxCount()
                .execute();
        // TODO: test validations
    }

    /**
     * Get email count in inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxEmailCountTest() throws ApiException {
        UUID inboxId = null;
        CountDto response = api.getInboxEmailCount(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get inbox emails paginated
     *
     * Get a paginated list of emails in an inbox. Does not hold connections open.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxEmailsPaginatedTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean syncConnectors = null;
        PageEmailPreview response = api.getInboxEmailsPaginated(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .syncConnectors(syncConnectors)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all inbox IDs
     *
     * Get list of inbox IDs
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxIdsTest() throws ApiException {
        InboxIdsResult response = api.getInboxIds()
                .execute();
        // TODO: test validations
    }

    /**
     * Get sub address plus address for an inbox
     *
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxPlusAddressTest() throws ApiException {
        UUID plusAddressId = null;
        UUID inboxId = null;
        PlusAddressDto response = api.getInboxPlusAddress(plusAddressId, inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sub address plus address by ID
     *
     * Returns a plus address object based on emails that used the inbox address with a +xyz alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxPlusAddressByIdTest() throws ApiException {
        UUID plusAddressId = null;
        UUID inboxId = null;
        PlusAddressDto response = api.getInboxPlusAddressById(plusAddressId)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get emails for a given inbox plus address
     *
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxPlusAddressEmailsTest() throws ApiException {
        String plusAddress = null;
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageEmailPreview response = api.getInboxPlusAddressEmails(plusAddress, inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get emails for a given inbox plus address
     *
     * Returns paginated list of all emails for a given plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxPlusAddressEmailsForPlusAddressIdTest() throws ApiException {
        UUID plusAddressId = null;
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageEmailPreview response = api.getInboxPlusAddressEmailsForPlusAddressId(plusAddressId, inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sub address plus address aliases for an inbox
     *
     * Returns paginated list of all plus alias addresses found for an inbox based on received emails that used the inbox address with a +xyz alias.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxPlusAddressesTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PagePlusAddressProjection response = api.getInboxPlusAddresses(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get sent email count in inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxSentCountTest() throws ApiException {
        UUID inboxId = null;
        CountDto response = api.getInboxSentCount(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get Inbox Sent Emails
     *
     * Returns an inbox&#39;s sent email receipts. Call individual sent email endpoints for more details. Note for privacy reasons the full body of sent emails is never stored. An MD5 hash hex is available for comparison instead.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxSentEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageSentEmailProjection response = api.getInboxSentEmails(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get inbox tags
     *
     * Get all inbox tags
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxTagsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        List<String> response = api.getInboxTags()
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .execute();
        // TODO: test validations
    }

    /**
     * Get inbox tags paginated
     *
     * Get all inbox tags paginated
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxTagsPaginatedTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        PageInboxTags response = api.getInboxTagsPaginated()
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .execute();
        // TODO: test validations
    }

    /**
     * List Inboxes and email addresses
     *
     * List the inboxes you have created. Note use of the more advanced &#x60;getAllInboxes&#x60; is recommended and allows paginated access using a limit and sort parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxesTest() throws ApiException {
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        Boolean excludeCatchAllInboxes = null;
        OffsetDateTime before = null;
        List<UUID> include = null;
        List<InboxDto> response = api.getInboxes()
                .size(size)
                .sort(sort)
                .since(since)
                .excludeCatchAllInboxes(excludeCatchAllInboxes)
                .before(before)
                .include(include)
                .execute();
        // TODO: test validations
    }

    /**
     * Get inboxes for a tag
     *
     * Get all inboxes for a given inbox tag
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxesByTagTest() throws ApiException {
        String tag = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        PageInboxProjection response = api.getInboxesByTag(tag)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .execute();
        // TODO: test validations
    }

    /**
     * Get latest email in an inbox. Use &#x60;WaitForController&#x60; to get emails that may not have arrived yet.
     *
     * Get the newest email in an inbox or wait for one to arrive
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLatestEmailInInboxTest() throws ApiException {
        UUID inboxId = null;
        Long timeoutMillis = null;
        Email response = api.getLatestEmailInInbox(inboxId, timeoutMillis)
                .execute();
        // TODO: test validations
    }

    /**
     * List Organization Inboxes Paginated
     *
     * List organization inboxes in paginated form. These are inboxes created with &#x60;allowTeamAccess&#x60; flag enabled. Organization inboxes are &#x60;readOnly&#x60; for non-admin users. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOrganizationInboxesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageOrganizationInboxProjection response = api.getOrganizationInboxes()
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * List all inboxes with sent emails
     *
     * List inboxes that have sent emails
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getOutboxesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageInboxProjection response = api.getOutboxes()
                .page(page)
                .size(size)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a scheduled email job
     *
     * Get a scheduled email job details.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScheduledJobTest() throws ApiException {
        UUID jobId = null;
        ScheduledJobDto response = api.getScheduledJob(jobId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all scheduled email sending jobs for the inbox
     *
     * Schedule sending of emails using scheduled jobs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getScheduledJobsByInboxIdTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageScheduledJobs response = api.getScheduledJobsByInboxId(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Get SMTP access usernames and passwords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getSmtpAccessTest() throws ApiException {
        UUID inboxId = null;
        SmtpAccessDetails response = api.getSmtpAccess()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Is email address available
     *
     * Returns whether an email address is available
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void isEmailAddressAvailableTest() throws ApiException {
        String emailAddress = null;
        EmailAvailableResult response = api.isEmailAddressAvailable(emailAddress)
                .execute();
        // TODO: test validations
    }

    /**
     * List inbox rulesets
     *
     * List all rulesets attached to an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboxRulesetsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageInboxRulesetDto response = api.listInboxRulesets(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * List inbox tracking pixels
     *
     * List all tracking pixels sent from an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInboxTrackingPixelsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageTrackingPixelProjection response = api.listInboxTrackingPixels(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Search all inboxes and return matching inboxes
     *
     * Search inboxes and return in paginated form. The results are available on the &#x60;content&#x60; property of the returned object. This method allows for page index (zero based), page size (how many results to return), and a sort direction (based on createdAt time). You Can also filter by whether an inbox is favorited or use email address pattern. This method is the recommended way to query inboxes. The alternative &#x60;getInboxes&#x60; method returns a full list of inboxes but is limited to 100 results.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchInboxesTest() throws ApiException {
        SearchInboxesOptions searchInboxesOptions = null;
        PageInboxProjection response = api.searchInboxes(searchInboxesOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Send Email
     *
     * Send an email from an inbox&#39;s email address.  The request body should contain the &#x60;SendEmailOptions&#x60; that include recipients, attachments, body etc. See &#x60;SendEmailOptions&#x60; for all available properties. Note the &#x60;inboxId&#x60; refers to the inbox&#39;s id not the inbox&#39;s email address. See https://www.mailslurp.com/guides/ for more information on how to send emails. This method does not return a sent email entity due to legacy reasons. To send and get a sent email as returned response use the sister method &#x60;sendEmailAndConfirm&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        api.sendEmail(inboxId, sendEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Send email and return sent confirmation
     *
     * Sister method for standard &#x60;sendEmail&#x60; method with the benefit of returning a &#x60;SentEmail&#x60; entity confirming the successful sending of the email with a link to the sent object created for it.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailAndConfirmTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        SentEmailDto response = api.sendEmailAndConfirm(inboxId, sendEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Send email with queue
     *
     * Send an email using a queue. Will place the email onto a queue that will then be processed and sent. Use this queue method to enable any failed email sending to be recovered. This will prevent lost emails when sending if your account encounters a block or payment issue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendEmailWithQueueTest() throws ApiException {
        UUID inboxId = null;
        Boolean validateBeforeEnqueue = null;
        SendEmailOptions sendEmailOptions = null;
        api.sendEmailWithQueue(inboxId, validateBeforeEnqueue, sendEmailOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Send email using an SMTP mail envelope and message body and return sent confirmation
     *
     * Send email using an SMTP envelope containing RCPT TO, MAIL FROM, and a SMTP BODY.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendSmtpEnvelopeTest() throws ApiException {
        UUID inboxId = null;
        SendSMTPEnvelopeOptions sendSMTPEnvelopeOptions = null;
        SentEmailDto response = api.sendSmtpEnvelope(inboxId, sendSMTPEnvelopeOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Send a test email to inbox
     *
     * Send an inbox a test email to test email receiving is working
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTestEmailTest() throws ApiException {
        UUID inboxId = null;
        api.sendTestEmail(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send email with with delay or schedule
     *
     * Send an email using a delay. Will place the email onto a scheduler that will then be processed and sent. Use delays to schedule email sending.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendWithScheduleTest() throws ApiException {
        UUID inboxId = null;
        SendEmailOptions sendEmailOptions = null;
        OffsetDateTime sendAtTimestamp = null;
        Long sendAtNowPlusSeconds = null;
        Boolean validateBeforeEnqueue = null;
        ScheduledJobDto response = api.sendWithSchedule(inboxId, sendEmailOptions)
                .sendAtTimestamp(sendAtTimestamp)
                .sendAtNowPlusSeconds(sendAtNowPlusSeconds)
                .validateBeforeEnqueue(validateBeforeEnqueue)
                .execute();
        // TODO: test validations
    }

    /**
     * Set inbox favourited state
     *
     * Set and return new favorite state for an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void setInboxFavouritedTest() throws ApiException {
        UUID inboxId = null;
        SetInboxFavouritedOptions setInboxFavouritedOptions = null;
        InboxDto response = api.setInboxFavourited(inboxId, setInboxFavouritedOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update IMAP access usernames and passwords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateImapAccessTest() throws ApiException {
        UpdateImapAccessOptions updateImapAccessOptions = null;
        UUID inboxId = null;
        api.updateImapAccess(updateImapAccessOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update Inbox. Change name and description. Email address is not editable.
     *
     * Update editable fields on an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInboxTest() throws ApiException {
        UUID inboxId = null;
        UpdateInboxOptions updateInboxOptions = null;
        InboxDto response = api.updateInbox(inboxId, updateInboxOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update SMTP access usernames and passwords
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateSmtpAccessTest() throws ApiException {
        UpdateSmtpAccessOptions updateSmtpAccessOptions = null;
        UUID inboxId = null;
        api.updateSmtpAccess(updateSmtpAccessOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

}
