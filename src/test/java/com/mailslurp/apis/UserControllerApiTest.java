/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageEntityAutomationItems;
import com.mailslurp.models.PageEntityEventItems;
import com.mailslurp.models.PageEntityFavouriteItems;
import java.util.UUID;
import com.mailslurp.models.UserInfoDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for UserControllerApi
 */
@Disabled
public class UserControllerApiTest {

    private final UserControllerApi api = new UserControllerApi();

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityAutomationsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        UUID inboxId = null;
        UUID phoneId = null;
        String filter = null;
        PageEntityAutomationItems response = api.getEntityAutomations()
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .inboxId(inboxId)
                .phoneId(phoneId)
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityEventsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        UUID inboxId = null;
        UUID emailId = null;
        UUID phoneId = null;
        UUID smsId = null;
        UUID attachmentId = null;
        String filter = null;
        PageEntityEventItems response = api.getEntityEvents()
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .inboxId(inboxId)
                .emailId(emailId)
                .phoneId(phoneId)
                .smsId(smsId)
                .attachmentId(attachmentId)
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEntityFavoritesTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String filter = null;
        PageEntityFavouriteItems response = api.getEntityFavorites()
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .filter(filter)
                .execute();
        // TODO: test validations
    }

    /**
     * Utility function to extract properties from JSON objects in language where this is cumbersome.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJsonPropertyAsStringTest() throws ApiException {
        String property = null;
        Object body = null;
        String response = api.getJsonPropertyAsString(property, body)
                .execute();
        // TODO: test validations
    }

    /**
     * Get account information for your user
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUserInfoTest() throws ApiException {
        UserInfoDto response = api.getUserInfo()
                .execute();
        // TODO: test validations
    }

}
