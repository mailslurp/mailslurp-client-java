/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.EmailPreviewUrls;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageSentEmailProjection;
import com.mailslurp.models.PageTrackingPixelProjection;
import com.mailslurp.models.RawEmailJson;
import com.mailslurp.models.SentEmailDto;
import java.util.UUID;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SentEmailsControllerApi
 */
@Ignore
public class SentEmailsControllerApiTest {

    private final SentEmailsControllerApi api = new SentEmailsControllerApi();

    
    /**
     * Delete all sent email receipts
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteAllSentEmailsTest() throws ApiException {
        api.deleteAllSentEmails();

        // TODO: test validations
    }
    
    /**
     * Delete sent email receipt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteSentEmailTest() throws ApiException {
        UUID id = null;
        api.deleteSentEmail(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all sent email tracking pixels in paginated form
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSentTrackingPixelsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageTrackingPixelProjection response = api.getAllSentTrackingPixels(page, size, sort, searchFilter, since, before);

        // TODO: test validations
    }
    
    /**
     * Get raw sent email string. Returns unparsed raw SMTP message with headers and body.
     *
     * Returns a raw, unparsed, and unprocessed sent email. If your client has issues processing the response it is likely due to the response content-type which is text/plain. If you need a JSON response content-type use the getRawSentEmailJson endpoint
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawSentEmailContentsTest() throws ApiException {
        UUID emailId = null;
        String response = api.getRawSentEmailContents(emailId);

        // TODO: test validations
    }
    
    /**
     * Get raw sent email in JSON. Unparsed SMTP message in JSON wrapper format.
     *
     * Returns a raw, unparsed, and unprocessed sent email wrapped in a JSON response object for easier handling when compared with the getRawSentEmail text/plain response
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getRawSentEmailJsonTest() throws ApiException {
        UUID emailId = null;
        RawEmailJson response = api.getRawSentEmailJson(emailId);

        // TODO: test validations
    }
    
    /**
     * Get sent email receipt
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentEmailTest() throws ApiException {
        UUID id = null;
        SentEmailDto response = api.getSentEmail(id);

        // TODO: test validations
    }
    
    /**
     * Get sent email HTML content
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentEmailHTMLContentTest() throws ApiException {
        UUID id = null;
        String response = api.getSentEmailHTMLContent(id);

        // TODO: test validations
    }
    
    /**
     * Get sent email URL for viewing in browser or downloading
     *
     * Get a list of URLs for sent email content as text/html or raw SMTP message for viewing the message in a browser.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentEmailPreviewURLsTest() throws ApiException {
        UUID id = null;
        EmailPreviewUrls response = api.getSentEmailPreviewURLs(id);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all tracking pixels for a sent email in paginated form
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentEmailTrackingPixelsTest() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageTrackingPixelProjection response = api.getSentEmailTrackingPixels(id, page, size, sort, searchFilter, since, before);

        // TODO: test validations
    }
    
    /**
     * Get all sent emails in paginated form
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageSentEmailProjection response = api.getSentEmails(inboxId, page, size, sort, searchFilter, since, before);

        // TODO: test validations
    }
    
    /**
     * 
     *
     * Get all sent organization emails in paginated form
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSentOrganizationEmailsTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageSentEmailProjection response = api.getSentOrganizationEmails(inboxId, page, size, sort, searchFilter, since, before);

        // TODO: test validations
    }
    
}
