/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CreateInboxForwarderOptions;
import com.mailslurp.models.InboxForwarderDto;
import com.mailslurp.models.InboxForwarderEventDto;
import com.mailslurp.models.InboxForwarderTestOptions;
import com.mailslurp.models.InboxForwarderTestResult;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageInboxForwarderDto;
import com.mailslurp.models.PageInboxForwarderEvents;
import com.mailslurp.models.TestNewInboxForwarderOptions;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InboxForwarderControllerApi
 */
@Disabled
public class InboxForwarderControllerApiTest {

    private final InboxForwarderControllerApi api = new InboxForwarderControllerApi();

    /**
     * Create an inbox forwarder
     *
     * Create a new inbox rule for forwarding, blocking, and allowing emails when sending and receiving
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewInboxForwarderTest() throws ApiException {
        CreateInboxForwarderOptions createInboxForwarderOptions = null;
        UUID inboxId = null;
        InboxForwarderDto response = api.createNewInboxForwarder(createInboxForwarderOptions)
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete an inbox forwarder
     *
     * Delete inbox forwarder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInboxForwarderTest() throws ApiException {
        UUID id = null;
        api.deleteInboxForwarder(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete inbox forwarders
     *
     * Delete inbox forwarders. Accepts optional inboxId filter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteInboxForwardersTest() throws ApiException {
        UUID inboxId = null;
        api.deleteInboxForwarders()
                .inboxId(inboxId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get all inbox forwarder events
     *
     * Get all inbox forwarder events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllInboxForwarderEventsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        UUID inboxId = null;
        UUID emailId = null;
        UUID sentId = null;
        String sort = null;
        PageInboxForwarderEvents response = api.getAllInboxForwarderEvents()
                .page(page)
                .size(size)
                .inboxId(inboxId)
                .emailId(emailId)
                .sentId(sentId)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a forwarder event
     *
     * Get forwarder event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getForwarderEventTest() throws ApiException {
        UUID eventId = null;
        InboxForwarderEventDto response = api.getForwarderEvent(eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox forwarder
     *
     * Get inbox forwarder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxForwarderTest() throws ApiException {
        UUID id = null;
        InboxForwarderDto response = api.getInboxForwarder(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox forwarder event
     *
     * Get inbox forwarder event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxForwarderEventTest() throws ApiException {
        UUID id = null;
        UUID eventId = null;
        InboxForwarderEventDto response = api.getInboxForwarderEvent(id, eventId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get an inbox forwarder event list
     *
     * Get inbox forwarder events
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxForwarderEventsTest() throws ApiException {
        UUID id = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageInboxForwarderEvents response = api.getInboxForwarderEvents(id)
                .page(page)
                .size(size)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * List inbox forwarders
     *
     * List all forwarders attached to an inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxForwardersTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageInboxForwarderDto response = api.getInboxForwarders()
                .inboxId(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Test an inbox forwarder
     *
     * Test an inbox forwarder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testInboxForwarderTest() throws ApiException {
        UUID id = null;
        InboxForwarderTestOptions inboxForwarderTestOptions = null;
        InboxForwarderTestResult response = api.testInboxForwarder(id, inboxForwarderTestOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test inbox forwarders for inbox
     *
     * Test inbox forwarders for inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testInboxForwardersForInboxTest() throws ApiException {
        UUID inboxId = null;
        InboxForwarderTestOptions inboxForwarderTestOptions = null;
        InboxForwarderTestResult response = api.testInboxForwardersForInbox(inboxId, inboxForwarderTestOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test new inbox forwarder
     *
     * Test new inbox forwarder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testNewInboxForwarderTest() throws ApiException {
        TestNewInboxForwarderOptions testNewInboxForwarderOptions = null;
        InboxForwarderTestResult response = api.testNewInboxForwarder(testNewInboxForwarderOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Update an inbox forwarder
     *
     * Update inbox forwarder
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateInboxForwarderTest() throws ApiException {
        UUID id = null;
        CreateInboxForwarderOptions createInboxForwarderOptions = null;
        InboxForwarderDto response = api.updateInboxForwarder(id, createInboxForwarderOptions)
                .execute();
        // TODO: test validations
    }

}
