/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository 
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.AbstractWebhookPayload;
import com.mailslurp.models.CreateWebhookOptions;
import com.mailslurp.models.PageWebhookProjection;
import java.util.UUID;
import com.mailslurp.models.WebhookDto;
import com.mailslurp.models.WebhookNewAttachmentPayload;
import com.mailslurp.models.WebhookNewContactPayload;
import com.mailslurp.models.WebhookNewEmailPayload;
import com.mailslurp.models.WebhookTestResult;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookControllerApi
 */
@Ignore
public class WebhookControllerApiTest {

    private final WebhookControllerApi api = new WebhookControllerApi();

    
    /**
     * Attach a WebHook URL to an inbox
     *
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        UUID inboxId = null;
        CreateWebhookOptions webhookOptions = null;
        WebhookDto response = api.createWebhook(inboxId, webhookOptions);

        // TODO: test validations
    }
    
    /**
     * Delete and disable a Webhook for an Inbox
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        UUID inboxId = null;
        UUID webhookId = null;
        api.deleteWebhook(inboxId, webhookId);

        // TODO: test validations
    }
    
    /**
     * List Webhooks Paginated
     *
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllWebhooksTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        PageWebhookProjection response = api.getAllWebhooks(page, size, sort);

        // TODO: test validations
    }
    
    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadTest() throws ApiException {
        String eventName = null;
        AbstractWebhookPayload response = api.getTestWebhookPayload(eventName);

        // TODO: test validations
    }
    
    /**
     * Get webhook test payload for new attachment event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewAttachmentTest() throws ApiException {
        WebhookNewAttachmentPayload response = api.getTestWebhookPayloadNewAttachment();

        // TODO: test validations
    }
    
    /**
     * Get webhook test payload for new contact event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewContactTest() throws ApiException {
        WebhookNewContactPayload response = api.getTestWebhookPayloadNewContact();

        // TODO: test validations
    }
    
    /**
     * Get webhook test payload for new email event
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewEmailTest() throws ApiException {
        WebhookNewEmailPayload response = api.getTestWebhookPayloadNewEmail();

        // TODO: test validations
    }
    
    /**
     * Get a webhook for an Inbox
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        UUID webhookId = null;
        WebhookDto response = api.getWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * Get all webhooks for an Inbox
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        UUID inboxId = null;
        List<WebhookDto> response = api.getWebhooks(inboxId);

        // TODO: test validations
    }
    
    /**
     * Send webhook test data
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendTestDataTest() throws ApiException {
        UUID webhookId = null;
        WebhookTestResult response = api.sendTestData(webhookId);

        // TODO: test validations
    }
    
}
