/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.AbstractWebhookPayload;
import com.mailslurp.models.CountDto;
import com.mailslurp.models.CreateWebhookOptions;
import com.mailslurp.models.JSONSchemaDto;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageWebhookEndpointProjection;
import com.mailslurp.models.PageWebhookProjection;
import com.mailslurp.models.PageWebhookResult;
import java.util.UUID;
import com.mailslurp.models.UnseenErrorCountDto;
import com.mailslurp.models.VerifyWebhookSignatureOptions;
import com.mailslurp.models.VerifyWebhookSignatureResults;
import com.mailslurp.models.WebhookBouncePayload;
import com.mailslurp.models.WebhookBounceRecipientPayload;
import com.mailslurp.models.WebhookDeliveryStatusPayload;
import com.mailslurp.models.WebhookDto;
import com.mailslurp.models.WebhookEmailOpenedPayload;
import com.mailslurp.models.WebhookEmailReadPayload;
import com.mailslurp.models.WebhookHeaders;
import com.mailslurp.models.WebhookNewAITransformResultPayload;
import com.mailslurp.models.WebhookNewAttachmentPayload;
import com.mailslurp.models.WebhookNewContactPayload;
import com.mailslurp.models.WebhookNewEmailPayload;
import com.mailslurp.models.WebhookNewSmsPayload;
import com.mailslurp.models.WebhookProjection;
import com.mailslurp.models.WebhookRedriveAllResult;
import com.mailslurp.models.WebhookRedriveResult;
import com.mailslurp.models.WebhookResultDto;
import com.mailslurp.models.WebhookTestResult;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhookControllerApi
 */
@Disabled
public class WebhookControllerApiTest {

    private final WebhookControllerApi api = new WebhookControllerApi();

    /**
     * Attach a WebHook URL to an inbox
     *
     * Get notified of account level events such as bounce and bounce recipient.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createAccountWebhookTest() throws ApiException {
        CreateWebhookOptions createWebhookOptions = null;
        WebhookDto response = api.createAccountWebhook(createWebhookOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Attach a WebHook URL to an inbox
     *
     * Get notified whenever an inbox receives an email via a WebHook URL. An emailID will be posted to this URL every time an email is received for this inbox. The URL must be publicly reachable by the MailSlurp server. You can provide basicAuth values if you wish to secure this endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookTest() throws ApiException {
        UUID inboxId = null;
        CreateWebhookOptions createWebhookOptions = null;
        WebhookDto response = api.createWebhook(inboxId, createWebhookOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Attach a WebHook URL to a phone number
     *
     * Get notified whenever a phone number receives an SMS via a WebHook URL.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createWebhookForPhoneNumberTest() throws ApiException {
        UUID phoneNumberId = null;
        CreateWebhookOptions createWebhookOptions = null;
        WebhookDto response = api.createWebhookForPhoneNumber(phoneNumberId, createWebhookOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete all webhooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteAllWebhooksTest() throws ApiException {
        OffsetDateTime before = null;
        api.deleteAllWebhooks()
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete and disable a Webhook for an Inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookTest() throws ApiException {
        UUID inboxId = null;
        UUID webhookId = null;
        api.deleteWebhook(inboxId, webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteWebhookByIdTest() throws ApiException {
        UUID webhookId = null;
        api.deleteWebhookById(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * List account webhooks Paginated
     *
     * List account webhooks in paginated form. Allows for page index, page size, and sort direction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllAccountWebhooksTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String eventType = null;
        String health = null;
        String searchFilter = null;
        PageWebhookProjection response = api.getAllAccountWebhooks()
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .eventType(eventType)
                .health(health)
                .searchFilter(searchFilter)
                .execute();
        // TODO: test validations
    }

    /**
     * List Webhooks endpoints Paginated
     *
     * List webhooks URL in paginated form. Allows for page index, page size, and sort direction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllWebhookEndpointsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        UUID inboxId = null;
        UUID phoneId = null;
        OffsetDateTime before = null;
        String health = null;
        String eventType = null;
        PageWebhookEndpointProjection response = api.getAllWebhookEndpoints()
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .inboxId(inboxId)
                .phoneId(phoneId)
                .before(before)
                .health(health)
                .eventType(eventType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get results for all webhooks
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllWebhookResultsTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean unseenOnly = null;
        String resultType = null;
        String eventName = null;
        Integer minStatusCode = null;
        Integer maxStatusCode = null;
        UUID inboxId = null;
        UUID smsId = null;
        UUID attachmentId = null;
        UUID emailId = null;
        UUID phoneId = null;
        PageWebhookResult response = api.getAllWebhookResults()
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .unseenOnly(unseenOnly)
                .resultType(resultType)
                .eventName(eventName)
                .minStatusCode(minStatusCode)
                .maxStatusCode(maxStatusCode)
                .inboxId(inboxId)
                .smsId(smsId)
                .attachmentId(attachmentId)
                .emailId(emailId)
                .phoneId(phoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * List Webhooks Paginated
     *
     * List webhooks in paginated form. Allows for page index, page size, and sort direction.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getAllWebhooksTest() throws ApiException {
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        UUID inboxId = null;
        UUID phoneId = null;
        OffsetDateTime before = null;
        String health = null;
        String eventType = null;
        String url = null;
        PageWebhookProjection response = api.getAllWebhooks()
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .inboxId(inboxId)
                .phoneId(phoneId)
                .before(before)
                .health(health)
                .eventType(eventType)
                .url(url)
                .execute();
        // TODO: test validations
    }

    /**
     * Get paginated webhooks for an Inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getInboxWebhooksPaginatedTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String health = null;
        String eventType = null;
        PageWebhookProjection response = api.getInboxWebhooksPaginated(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .health(health)
                .eventType(eventType)
                .execute();
        // TODO: test validations
    }

    /**
     * Get JSON Schema definition for webhook payload by event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJsonSchemaForWebhookEventTest() throws ApiException {
        String event = null;
        JSONSchemaDto response = api.getJsonSchemaForWebhookEvent(event)
                .execute();
        // TODO: test validations
    }

    /**
     * Get JSON Schema definition for webhook payload
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getJsonSchemaForWebhookPayloadTest() throws ApiException {
        UUID webhookId = null;
        JSONSchemaDto response = api.getJsonSchemaForWebhookPayload(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get paginated webhooks for a phone number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPhoneNumberWebhooksPaginatedTest() throws ApiException {
        UUID phoneId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        String eventType = null;
        String searchFilter = null;
        String health = null;
        PageWebhookProjection response = api.getPhoneNumberWebhooksPaginated(phoneId)
                .page(page)
                .size(size)
                .sort(sort)
                .since(since)
                .before(before)
                .eventType(eventType)
                .searchFilter(searchFilter)
                .health(health)
                .execute();
        // TODO: test validations
    }

    /**
     * Get test webhook payload example. Response content depends on eventName passed. Uses &#x60;EMAIL_RECEIVED&#x60; as default.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadTest() throws ApiException {
        String eventName = null;
        AbstractWebhookPayload response = api.getTestWebhookPayload()
                .eventName(eventName)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for bounce
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadBounceTest() throws ApiException {
        WebhookBouncePayload response = api.getTestWebhookPayloadBounce()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for bounce recipient
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadBounceRecipientTest() throws ApiException {
        WebhookBounceRecipientPayload response = api.getTestWebhookPayloadBounceRecipient()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for delivery status event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadDeliveryStatusTest() throws ApiException {
        WebhookDeliveryStatusPayload response = api.getTestWebhookPayloadDeliveryStatus()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for email opened event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadEmailOpenedTest() throws ApiException {
        WebhookEmailOpenedPayload response = api.getTestWebhookPayloadEmailOpened()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for email opened event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadEmailReadTest() throws ApiException {
        WebhookEmailReadPayload response = api.getTestWebhookPayloadEmailRead()
                .execute();
        // TODO: test validations
    }

    /**
     * Get example payload for webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadForWebhookTest() throws ApiException {
        UUID webhookId = null;
        AbstractWebhookPayload response = api.getTestWebhookPayloadForWebhook(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for new ai transform result event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewAITransformResultTest() throws ApiException {
        WebhookNewAITransformResultPayload response = api.getTestWebhookPayloadNewAITransformResult()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for new attachment event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewAttachmentTest() throws ApiException {
        WebhookNewAttachmentPayload response = api.getTestWebhookPayloadNewAttachment()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for new contact event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewContactTest() throws ApiException {
        WebhookNewContactPayload response = api.getTestWebhookPayloadNewContact()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for new email event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewEmailTest() throws ApiException {
        WebhookNewEmailPayload response = api.getTestWebhookPayloadNewEmail()
                .execute();
        // TODO: test validations
    }

    /**
     * Get webhook test payload for new sms event
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTestWebhookPayloadNewSmsTest() throws ApiException {
        WebhookNewSmsPayload response = api.getTestWebhookPayloadNewSms()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        UUID webhookId = null;
        WebhookDto response = api.getWebhook(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook result for a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookResultTest() throws ApiException {
        UUID webhookResultId = null;
        WebhookResultDto response = api.getWebhookResult(webhookResultId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook results for a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookResultsTest() throws ApiException {
        UUID webhookId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        Boolean unseenOnly = null;
        String resultType = null;
        String eventName = null;
        Integer minStatusCode = null;
        Integer maxStatusCode = null;
        UUID inboxId = null;
        UUID smsId = null;
        UUID attachmentId = null;
        UUID emailId = null;
        UUID phoneId = null;
        PageWebhookResult response = api.getWebhookResults(webhookId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .unseenOnly(unseenOnly)
                .resultType(resultType)
                .eventName(eventName)
                .minStatusCode(minStatusCode)
                .maxStatusCode(maxStatusCode)
                .inboxId(inboxId)
                .smsId(smsId)
                .attachmentId(attachmentId)
                .emailId(emailId)
                .phoneId(phoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook results count for a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookResultsCountTest() throws ApiException {
        UUID webhookId = null;
        CountDto response = api.getWebhookResultsCount(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get count of unseen webhook results with error status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhookResultsUnseenErrorCountTest() throws ApiException {
        UnseenErrorCountDto response = api.getWebhookResultsUnseenErrorCount()
                .execute();
        // TODO: test validations
    }

    /**
     * Get all webhooks for an Inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWebhooksTest() throws ApiException {
        UUID inboxId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        List<WebhookProjection> response = api.getWebhooks(inboxId)
                .page(page)
                .size(size)
                .sort(sort)
                .execute();
        // TODO: test validations
    }

    /**
     * Redrive all webhook results that have failed status
     *
     * Allows you to resend webhook payloads for any recorded webhook result that failed to deliver the payload.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redriveAllWebhookResultsTest() throws ApiException {
        WebhookRedriveAllResult response = api.redriveAllWebhookResults()
                .execute();
        // TODO: test validations
    }

    /**
     * Get a webhook result and try to resend the original webhook payload
     *
     * Allows you to resend a webhook payload that was already sent. Webhooks that fail are retried automatically for 24 hours and then put in a dead letter queue. You can retry results manually using this method.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void redriveWebhookResultTest() throws ApiException {
        UUID webhookResultId = null;
        WebhookRedriveResult response = api.redriveWebhookResult(webhookResultId)
                .execute();
        // TODO: test validations
    }

    /**
     * Send webhook test data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sendTestDataTest() throws ApiException {
        UUID webhookId = null;
        WebhookTestResult response = api.sendTestData(webhookId)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookTest() throws ApiException {
        UUID webhookId = null;
        CreateWebhookOptions createWebhookOptions = null;
        UUID inboxId = null;
        UUID phoneNumberId = null;
        Boolean overrideAuth = null;
        WebhookDto response = api.updateWebhook(webhookId, createWebhookOptions)
                .inboxId(inboxId)
                .phoneNumberId(phoneNumberId)
                .overrideAuth(overrideAuth)
                .execute();
        // TODO: test validations
    }

    /**
     * Update a webhook request headers
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateWebhookHeadersTest() throws ApiException {
        UUID webhookId = null;
        WebhookHeaders webhookHeaders = null;
        WebhookDto response = api.updateWebhookHeaders(webhookId, webhookHeaders)
                .execute();
        // TODO: test validations
    }

    /**
     * Verify a webhook payload signature
     *
     * Verify a webhook payload using the messageId and signature. This allows you to be sure that MailSlurp sent the payload and not another server.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void verifyWebhookSignatureTest() throws ApiException {
        VerifyWebhookSignatureOptions verifyWebhookSignatureOptions = null;
        VerifyWebhookSignatureResults response = api.verifyWebhookSignature(verifyWebhookSignatureOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Wait for webhook results for a webhook
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void waitForWebhookResultsTest() throws ApiException {
        UUID webhookId = null;
        Integer expectedCount = null;
        Integer timeout = null;
        List<WebhookResultDto> response = api.waitForWebhookResults(webhookId, expectedCount, timeout)
                .execute();
        // TODO: test validations
    }

}
