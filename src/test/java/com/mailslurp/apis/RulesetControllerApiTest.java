/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails and SMS from dynamically allocated email addresses and phone numbers. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.  ## Resources  - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://docs.mailslurp.com/) - [Examples](https://github.com/mailslurp/examples) repository
 *
 * The version of the OpenAPI document: 6.5.2
 * Contact: contact@mailslurp.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.apis;

import com.mailslurp.clients.ApiException;
import com.mailslurp.models.CreateRulesetOptions;
import com.mailslurp.models.InboxRulesetTestResult;
import java.time.OffsetDateTime;
import com.mailslurp.models.PageRulesetDto;
import com.mailslurp.models.RulesetDto;
import com.mailslurp.models.RulesetTestOptions;
import com.mailslurp.models.TestInboxRulesetSendingOptions;
import com.mailslurp.models.TestNewInboxRulesetOptions;
import com.mailslurp.models.TestRulesetReceivingOptions;
import com.mailslurp.models.TestRulesetReceivingResult;
import com.mailslurp.models.TestRulesetSendingResult;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RulesetControllerApi
 */
@Disabled
public class RulesetControllerApiTest {

    private final RulesetControllerApi api = new RulesetControllerApi();

    /**
     * Create a ruleset
     *
     * Create a new inbox or phone number rule for forwarding, blocking, and allowing emails or SMS when sending and receiving
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createNewRulesetTest() throws ApiException {
        CreateRulesetOptions createRulesetOptions = null;
        UUID inboxId = null;
        UUID phoneId = null;
        RulesetDto response = api.createNewRuleset(createRulesetOptions)
                .inboxId(inboxId)
                .phoneId(phoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a ruleset
     *
     * Delete ruleset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRulesetTest() throws ApiException {
        UUID id = null;
        api.deleteRuleset(id)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete rulesets
     *
     * Delete rulesets. Accepts optional inboxId or phoneId filters.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteRulesetsTest() throws ApiException {
        UUID inboxId = null;
        UUID phoneId = null;
        api.deleteRulesets()
                .inboxId(inboxId)
                .phoneId(phoneId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a ruleset
     *
     * Get ruleset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRulesetTest() throws ApiException {
        UUID id = null;
        RulesetDto response = api.getRuleset(id)
                .execute();
        // TODO: test validations
    }

    /**
     * List rulesets block and allow lists
     *
     * List all rulesets attached to an inbox or phone or account
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getRulesetsTest() throws ApiException {
        UUID inboxId = null;
        UUID phoneId = null;
        Integer page = null;
        Integer size = null;
        String sort = null;
        String searchFilter = null;
        OffsetDateTime since = null;
        OffsetDateTime before = null;
        PageRulesetDto response = api.getRulesets()
                .inboxId(inboxId)
                .phoneId(phoneId)
                .page(page)
                .size(size)
                .sort(sort)
                .searchFilter(searchFilter)
                .since(since)
                .before(before)
                .execute();
        // TODO: test validations
    }

    /**
     * Test inbox rulesets for inbox
     *
     * Test inbox rulesets for inbox
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testInboxRulesetsForInboxTest() throws ApiException {
        UUID inboxId = null;
        RulesetTestOptions rulesetTestOptions = null;
        InboxRulesetTestResult response = api.testInboxRulesetsForInbox(inboxId, rulesetTestOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test new ruleset
     *
     * Test new ruleset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testNewRulesetTest() throws ApiException {
        TestNewInboxRulesetOptions testNewInboxRulesetOptions = null;
        InboxRulesetTestResult response = api.testNewRuleset(testNewInboxRulesetOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test a ruleset
     *
     * Test an inbox or phone ruleset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testRulesetTest() throws ApiException {
        UUID id = null;
        RulesetTestOptions rulesetTestOptions = null;
        InboxRulesetTestResult response = api.testRuleset(id, rulesetTestOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test receiving with rulesets
     *
     * Test whether inbound emails from an email address would be blocked or allowed by inbox rulesets or test if phone number can receive SMS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testRulesetReceivingTest() throws ApiException {
        TestRulesetReceivingOptions testRulesetReceivingOptions = null;
        TestRulesetReceivingResult response = api.testRulesetReceiving(testRulesetReceivingOptions)
                .execute();
        // TODO: test validations
    }

    /**
     * Test sending with rulesets
     *
     * Test whether outbound emails to an email address would be blocked or allowed by inbox rulesets or whether a phone number can send SMS
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void testRulesetSendingTest() throws ApiException {
        TestInboxRulesetSendingOptions testInboxRulesetSendingOptions = null;
        TestRulesetSendingResult response = api.testRulesetSending(testInboxRulesetSendingOptions)
                .execute();
        // TODO: test validations
    }

}
