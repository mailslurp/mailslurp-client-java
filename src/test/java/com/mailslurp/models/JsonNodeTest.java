/*
 * MailSlurp API
 * MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and more.   ## Resources - [Homepage](https://www.mailslurp.com) - Get an [API KEY](https://app.mailslurp.com/sign-up/) - Generated [SDK Clients](https://www.mailslurp.com/docs/) - [Examples](https://github.com/mailslurp/examples) repository  ## Basic Concepts  ### Inboxes  Inboxes have real email addresses that can send and receive emails. You can create inboxes with specific email addresses (using custom domains). You can also use randomly assigned MailSlurp addresses as unique, disposable test addresses.   See the InboxController or [inbox and email address guide](https://www.mailslurp.com/guides/) for more information.  ### Receive Emails You can receive emails in a number of ways. You can fetch emails and attachments directly from an inbox. Or you can use `waitFor` endpoints to hold a connection open until an email is received that matches given criteria (such as subject or body content). You can also use webhooks to have emails from multiple inboxes forwarded to your server via HTTP POST.  InboxController methods with `waitFor` in the name have a long timeout period and instruct MailSlurp to wait until an expected email is received. You can set conditions on email counts, subject or body matches, and more.  Most receive methods only return an email ID and not the full email (to keep response sizes low). To fetch the full body or attachments for an email use the email's ID with EmailController endpoints.  See the InboxController or [receiving emails guide](https://www.mailslurp.com/guides/) for more information.  ### Send Emails You can send templated HTML emails in several ways. You must first create an inbox to send an email. An inbox can have a specific address or a randomly assigned one. You can send emails from an inbox using `to`, `cc`, and `bcc` recipient lists or with contacts and contact groups.   Emails can contain plain-text or HTML bodies. You can also use email templates that support [moustache](https://mustache.github.io/) template variables. You can send attachments by first posting files to the AttachmentController and then using the returned IDs in the `attachments` field of the send options.  See the InboxController or [sending emails guide](https://www.mailslurp.com/guides/) for more information.  ### Templates MailSlurp emails support templates. You can create templates in the dashboard or API that contain [moustache](https://mustache.github.io/) style variables: for instance `Hello {{name}}`. Then when sending emails you can pass a map of variables names and values to be used. Additionally, when sending emails with contact groups you can use properties of the contact in your templates like `{{firstName}}` and `{{lastName}}`.  > You can do a lot more with MailSlurp so see the included documentation for more information.  
 *
 * The version of the OpenAPI document: 6.5.2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mailslurp.models;

import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.junit.Assert;
import org.junit.Ignore;
import org.junit.Test;


/**
 * Model tests for JsonNode
 */
public class JsonNodeTest {
    private final JsonNode model = new JsonNode();

    /**
     * Model tests for JsonNode
     */
    @Test
    public void testJsonNode() {
        // TODO: test JsonNode
    }

    /**
     * Test the property 'array'
     */
    @Test
    public void arrayTest() {
        // TODO: test array
    }

    /**
     * Test the property 'bigDecimal'
     */
    @Test
    public void bigDecimalTest() {
        // TODO: test bigDecimal
    }

    /**
     * Test the property 'bigInteger'
     */
    @Test
    public void bigIntegerTest() {
        // TODO: test bigInteger
    }

    /**
     * Test the property 'binary'
     */
    @Test
    public void binaryTest() {
        // TODO: test binary
    }

    /**
     * Test the property '_boolean'
     */
    @Test
    public void _booleanTest() {
        // TODO: test _boolean
    }

    /**
     * Test the property 'containerNode'
     */
    @Test
    public void containerNodeTest() {
        // TODO: test containerNode
    }

    /**
     * Test the property '_double'
     */
    @Test
    public void _doubleTest() {
        // TODO: test _double
    }

    /**
     * Test the property 'empty'
     */
    @Test
    public void emptyTest() {
        // TODO: test empty
    }

    /**
     * Test the property '_float'
     */
    @Test
    public void _floatTest() {
        // TODO: test _float
    }

    /**
     * Test the property 'floatingPointNumber'
     */
    @Test
    public void floatingPointNumberTest() {
        // TODO: test floatingPointNumber
    }

    /**
     * Test the property '_int'
     */
    @Test
    public void _intTest() {
        // TODO: test _int
    }

    /**
     * Test the property 'integralNumber'
     */
    @Test
    public void integralNumberTest() {
        // TODO: test integralNumber
    }

    /**
     * Test the property '_long'
     */
    @Test
    public void _longTest() {
        // TODO: test _long
    }

    /**
     * Test the property 'missingNode'
     */
    @Test
    public void missingNodeTest() {
        // TODO: test missingNode
    }

    /**
     * Test the property 'nodeType'
     */
    @Test
    public void nodeTypeTest() {
        // TODO: test nodeType
    }

    /**
     * Test the property '_null'
     */
    @Test
    public void _nullTest() {
        // TODO: test _null
    }

    /**
     * Test the property 'number'
     */
    @Test
    public void numberTest() {
        // TODO: test number
    }

    /**
     * Test the property '_object'
     */
    @Test
    public void _objectTest() {
        // TODO: test _object
    }

    /**
     * Test the property 'pojo'
     */
    @Test
    public void pojoTest() {
        // TODO: test pojo
    }

    /**
     * Test the property '_short'
     */
    @Test
    public void _shortTest() {
        // TODO: test _short
    }

    /**
     * Test the property 'textual'
     */
    @Test
    public void textualTest() {
        // TODO: test textual
    }

    /**
     * Test the property 'valueNode'
     */
    @Test
    public void valueNodeTest() {
        // TODO: test valueNode
    }

}
