openapi: 3.0.1
info:
  description: |
    MailSlurp is an API for sending and receiving emails from dynamically allocated email addresses. It's designed for
    developers and QA teams to test applications, process inbound emails, send templated notifications, attachments, and
    more.

    ## Resources

    - [Homepage](https://www.mailslurp.com)
    - Get an [API KEY](https://app.mailslurp.com/sign-up/)
    - Generated [SDK Clients](https://www.mailslurp.com/docs/)
    - [Examples](https://github.com/mailslurp/examples) repository
  title: MailSlurp API
  version: 6.5.2
servers:
- url: https://api.mailslurp.com/
tags:
- description: "\"Endpoints for creating, listing, and deleting email aliases. Aliases\
    \ must be validated. Email aliases can be used to hide real email addresses behind\
    \ an alias. If you wish to receive emails with an alias attach an inbox to the\
    \ alias.\n       Whenever the inbox receives an email the email will be forwarded\
    \ to the alias email address. See related `threads`. Threads can be used with\
    \ aliases to enable replying to a proxied email. This means that when threads\
    \ are enabled an email alias will \n       create a new email thread for the message\
    \ and set the replyTo and from headers on the subsequently proxied email to point\
    \ to the threads unique email address. \n       By replying to this address the\
    \ thread will forward it to the original emails sender or replyTo and use the\
    \ same subject and bcc and cc contacts as the email you are replying to. For more\
    \ advanced email operations using aliases use the inboxId for the given alias.\n"
  name: Alias Controller
- description: 'Endpoints for uploading attachments. Attachments can be uploaded in
    a number of ways: as base64 encoded strings, as byte array octet streams, and
    as multipart form requests. Each upload method returns an array whose first element
    is the ID of the attachment. Use this Id to send the attachment with emails. See
    the EmailController `download` endpoints for downloading attachments. Attachment
    downloads are based on the email ID they belong to and can be downloaded using
    the email controller.'
  name: Attachment Controller
- description: Endpoints for access bounced emails and bounced recipients
  name: Bounce Controller
- description: Other endpoints including advanced receive options
  name: Bulk Actions Controller
- description: A collection of common actions. Groups together several controllers
    behind a facade with convenience methods. Not recommended. It is better in most
    cases to call the individual controllers directly as they are where many new features
    are added. The controllers are better documented too. This controller is maintained
    for backwards compatibility.
  name: Common Actions Controller
- description: Endpoints for managing contacts. Contacts can be used for sending emails
    to individuals and groups.
  name: Contact Controller
- description: Endpoints for managing custom domains. Once you create a custom domain
    you must add the returned verification records to your hosting provider. See support
    or guides for more information.
  name: Domain Controller
- description: "Endpoints for managing email entities. Send and read email using the\
    \ email API. You can fetch emails and attachments, reply to emails, and send new\
    \ emails with this controller. Emails belong to inboxes. \nEach inbox can contain\
    \ unlimited emails that are either permanent or temporary depending on your setup.\
    \ Because emails can be quite large when attachments and content are fetched most\
    \ responses only include a preview of the email and its most important features,\
    \ like subject, recipients etc and an ID. Many list results are in a paginated\
    \ form using an index (zero based) and a page size. To receive email decide on\
    \ either `waitFor` methods (such as `waitForLatestEmail` on the `WaitForController`)\
    \ to wait for emails to arrive. Use `getEmails` on `EmailController` or `getInboxEmails`\
    \ on the `InboxController` to list existing emails. To access the body or attachments\
    \ of an email you need to use the `getEmail` and `getAttachment` endpoints with\
    \ specific inbox and email IDs. The body is returned on full email entities and\
    \ contains the parsed body of the email. The email headers (such as recipients,\
    \ subject etc.) are stored on the email object. You can access the RAW SMTP message\
    \ via various `raw` methods. Attachments are treated as separate entities that\
    \ have an ID and belong to the email. To fetch email attachments first fetch the\
    \ full email then use a `downloadAttachment` method for each `attachmentID`. Attachments\
    \ are transferred in a number of ways as either `application/octect-stream` byte\
    \ arrays or as base64 encoded strings with meta data. You may prefer either depending\
    \ on the environment you are in but the base64 implementations are typically safer.\
    \ See the `AttachmentController`, `InboxController`, and `WaitForController` for\
    \ similar methods. \n    "
  name: Email Controller
- description: View and manage expired inbox records. If an inbox has an expiration
    date when it is created it will expire at that time and an ExpiredInboxRecord
    will be created for it listing the email address and inbox ID. You can still view
    emails belonging to the inbox by using the inbox ID but the inbox can no longer
    send or receive emails once expired.
  name: Expired Controller
- description: Endpoints for exporting user data to CSV, XML and other formats.
  name: Export Controller
- description: Form controller for submitting emailable forms
  name: Form Controller
- description: Endpoints for managing groups. Groups can be used for sending emails
    to individuals and groups.
  name: Group Controller
- description: "Endpoints for creating and managing inboxes. Also includes endpoints\
    \ for listing emails within inboxes. \nInboxes are a core feature of MailSlurp.\
    \ Each inbox has a unique ID and emailAddress. Inboxes can be either `HTTP` or\
    \ `SMTP` inboxes. Both are email inboxes but `HTTP` mailboxes are processed using\
    \ AWS SES while `SMTP` inboxes use a custom mail server listening at `mx.mailslurp.com`.\
    \ Use `HTTP` inboxes for testing and `SMTP` inboxes for public facing inboxes.\
    \ If your plan allows custom domains you can create inboxes with custom addresses\
    \ that end in your domain. \nBy default inboxes are assigned a random email address\
    \ ending in `@mailslurp.com`. Use the domainPool options to use a randomly selected\
    \ domain from a pool of available domains. Whenever you create an inbox MailSlurp\
    \ will register the address and store any emails sent to the address within your\
    \ inbox. \nYou can use the `InboxController` endpoints to list the emails in an\
    \ inbox. To get the contents or attachments of an email use the ID returned from\
    \ `InboxController` methods to call the `EmailController` endpoints.\"\n"
  name: Inbox Controller
- description: Endpoints for creating and managing inbox forwarders. Automatically
    forward emails received by inboxes using rules.
  name: Inbox Forwarder Controller
- description: |
    Endpoints for creating and managing inbox rulesets. Inbox rulesets are sets of rules that can be automatically applied to inbound and outbound emails for an inbox. Rulesets can have a scope, action, and target. The scope is receiving or sending emails. The action is to block, allow, or forward an email. The target is pattern or email address depending on the action. The handler can be used to handle rules silently or trigger an exception when they occur. See inbox controller for similar methods.
  name: Inbox Ruleset Controller
- description: Api Mail Server Controller
  name: MailServer Controller
- description: Endpoints for managing MissedEmails. Missed emails are saved whenever
    your account cannot persist a received email because your plan had exceeded a
    given usage at the time.
  name: MissedEmail Controller
- description: Endpoints for viewing sent email receipts. These can be used to verify
    that an email has been sent or for historical records. Email content and attachments
    are stored. For legacy reasons the default send endpoint does not return a sent
    email. Use the `sendEmailAndConfirm` methods to receive a sent email receipt after
    sending.
  name: Sent Emails Controller
- description: Endpoints for managing Templates. Templates can be used when sending
    emails and support moustache syntax template variables. Variables can be passed
    with send email options or implicitly available if Contact Groups are used.
  name: Template Controller
- description: Endpoints for managing tracking entities such as email open and read
    tracking pixels.
  name: Tracking Controller
- description: 'Endpoints for receiving emails using waitFor methods. The endpoints
    are perfect for synchronous blocking calls, long-polling, or tests (see webhooks
    if you need to respond to email events as they happen using HTTP notification).
    These wait endpoints are all built around a common idea - that you ask for an
    expected number of emails from an inbox and MailSlurp will either: A) Return the
    matching emails if they are present; B) Hold a connection open until the matching
    emails are are received or until a timeout occurs. For test suites we recommend
    that you create a new inbox for each test run  and use the waitForLatestEmail
    to hold the connection until the email you expect arrives. Note if your inbox
    is not already empty waitFor methods may return immediately depending on their
    implementation. See each endpoint for more details.'
  name: WaitFor Controller
- description: Endpoint for interacting with webhooks. Webhooks have a URL that points
    to your server. Useful for email forwarding, email API processing and more. They
    can be added to inboxes and when an inbox receives an email the email ID and inbox
    ID will be posted to the URL endpoint at your server. The schema of the webhook
    payload is available at https://api.mailslurp.com/schemas/webhook-payload or by
    calling https://api.mailslurp.com/webhooks/test. Use webhooks to react in real-time
    to inbound emails. Use the webhook payload posted to your server to fetch the
    full emails or attachments if you need them. Use the event ID as an idempotent
    record. The ID identifies the webhook payload uniquely. MailSlurp tracks webhook
    processing. It will try not to send the same event twice but it can happen. If
    you receive the same event more than once you can ignore it and assume it is the
    same. It is recommended that you use a store or database to track webhooks you
    have processed to avoid processing events more than once.
  name: Webhook Controller
paths:
  /aliases:
    get:
      deprecated: false
      description: Get all email aliases in paginated form
      operationId: getAliases
      parameters:
      - allowEmptyValue: false
        description: Optional page index in alias list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in alias list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAlias'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all email aliases you have created
      tags:
      - Alias Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Email aliases use a MailSlurp randomly generated email address
        (or a custom domain inbox that you provide) to mask or proxy a real email
        address. Emails sent to the alias address will be forwarded to the hidden
        email address it was created for. If you want to send a reply use the threadId
        attached
      operationId: createAlias
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAliasOptions'
        description: createAliasOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an email alias. Must be verified by clicking link inside verification
        email that will be sent to the address. Once verified the alias will be active.
      tags:
      - Alias Controller
      x-codegen-request-body-name: createAliasOptions
      x-contentType: application/json
      x-accepts: application/json
  /aliases/{aliasId}:
    delete:
      deprecated: false
      operationId: deleteAlias
      parameters:
      - description: aliasId
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete an email alias
      tags:
      - Alias Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: Get an email alias by ID
      operationId: getAlias
      parameters:
      - description: aliasId
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AliasDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get an email alias
      tags:
      - Alias Controller
      x-accepts: application/json
    put:
      deprecated: false
      operationId: updateAlias
      parameters:
      - description: aliasId
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAliasOptions'
        description: updateAliasOptions
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "202":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Alias'
          description: Accepted
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Update an email alias
      tags:
      - Alias Controller
      x-codegen-request-body-name: updateAliasOptions
      x-contentType: application/json
      x-accepts: application/json
  /aliases/{aliasId}/emails:
    get:
      deprecated: false
      description: Get paginated emails for an alias by ID
      operationId: getAliasEmails
      parameters:
      - description: aliasId
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index alias email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size alias email list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get emails for an alias
      tags:
      - Alias Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Send an email from an alias. Replies to the email will be forwarded
        to the alias masked email address
      operationId: sendAliasEmail
      parameters:
      - description: aliasId
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        description: Options for the email to be sent
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send an email from an alias inbox
      tags:
      - Alias Controller
      x-codegen-request-body-name: sendEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /aliases/{aliasId}/emails/{emailId}:
    put:
      deprecated: false
      description: Send the reply to the email sender or reply-to and include same
        subject cc bcc etc. Reply to an email and the contents will be sent with the
        existing subject to the emails `to`, `cc`, and `bcc`.
      operationId: replyToAliasEmail
      parameters:
      - description: ID of the alias that email belongs to
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      - description: ID of the email that should be replied to
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyToAliasEmailOptions'
        description: replyToAliasEmailOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Reply to an email
      tags:
      - Alias Controller
      x-codegen-request-body-name: replyToAliasEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /aliases/{aliasId}/threads:
    get:
      deprecated: false
      description: Returns threads created for an email alias in paginated form
      operationId: getAliasThreads
      parameters:
      - description: aliasId
        in: path
        name: aliasId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in thread list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in thread list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageThreadProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get threads created for an alias
      tags:
      - Alias Controller
      x-accepts: application/json
  /attachments:
    get:
      deprecated: false
      description: Get all attachments in paginated response. Each entity contains
        meta data for the attachment such as `name` and `content-type`. Use the `attachmentId`
        and the download endpoints to get the file contents.
      operationId: getAttachments
      parameters:
      - allowEmptyValue: false
        description: Optional file name and content type search filter
        in: query
        name: fileNameFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page index event list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size event list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAttachmentEntity'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email attachments
      tags:
      - Attachment Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Email attachments are essentially files with meta data. Files are
        byte arrays and the meta data is a content type and a filename. These properties
        allow email clients to display the filename and icon etc. When sending emails
        with attachments first upload each attachment with an upload endpoint. Record
        the returned attachment ID and use it with subsequent email sending. For legacy
        reasons the ID is returned as the first element in an array. Only a single
        ID is ever returned. To send the attachments pass a list of attachment IDs
        with `SendEmailOptions` when sending an email. Using the upload endpoints
        prior to sending mean attachments can easily be reused.
      operationId: uploadAttachment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UploadAttachmentOptions'
        description: uploadOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Upload an attachment for sending using base64 file encoding. Returns
        an array whose first element is the ID of the uploaded attachment.
      tags:
      - Attachment Controller
      x-codegen-request-body-name: uploadOptions
      x-contentType: application/json
      x-accepts: application/json
  /attachments/bytes:
    post:
      deprecated: false
      description: Email attachments are essentially files with meta data. Files are
        byte arrays and the meta data is a content type and a filename. These properties
        allow email clients to display the filename and icon etc. When sending emails
        with attachments first upload each attachment with an upload endpoint. Record
        the returned attachment ID and use it with subsequent email sending. For legacy
        reasons the ID is returned as the first element in an array. Only a single
        ID is ever returned. To send the attachments pass a list of attachment IDs
        with `SendEmailOptions` when sending an email. Using the upload endpoints
        prior to sending mean attachments can easily be reused.
      operationId: uploadAttachmentBytes
      parameters:
      - allowEmptyValue: false
        description: Optional contentType for file. For instance `application/pdf`
        in: query
        name: String
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional filename to save upload with
        in: query
        name: filename
        schema:
          type: string
      requestBody:
        content:
          application/octet-stream:
            schema:
              format: byte
              type: string
        description: Byte array request body
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Upload an attachment for sending using file byte stream input octet
        stream. Returns an array whose first element is the ID of the uploaded attachment.
      tags:
      - Attachment Controller
      x-codegen-request-body-name: byteArray
      x-contentType: application/octet-stream
      x-accepts: application/json
  /attachments/multipart:
    post:
      deprecated: false
      description: Email attachments are essentially files with meta data. Files are
        byte arrays and the meta data is a content type and a filename. These properties
        allow email clients to display the filename and icon etc. When sending emails
        with attachments first upload each attachment with an upload endpoint. Record
        the returned attachment ID and use it with subsequent email sending. For legacy
        reasons the ID is returned as the first element in an array. Only a single
        ID is ever returned. To send the attachments pass a list of attachment IDs
        with `SendEmailOptions` when sending an email. Using the upload endpoints
        prior to sending mean attachments can easily be reused.
      operationId: uploadMultipartForm
      parameters:
      - allowEmptyValue: false
        description: Optional content type of attachment
        in: query
        name: contentType
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional name of file
        in: query
        name: filename
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional content type header of attachment
        in: query
        name: x-filename
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                file:
                  description: file
                  format: binary
                  type: string
              required:
              - file
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Upload an attachment for sending using a Multipart Form request. Returns
        an array whose first element is the ID of the uploaded attachment.
      tags:
      - Attachment Controller
      x-codegen-request-body-name: contentTypeHeader
      x-contentType: multipart/form-data
      x-accepts: application/json
  /attachments/{attachmentId}:
    delete:
      deprecated: false
      description: Email attachments are essentially files with meta data. Files are
        byte arrays and the meta data is a content type and a filename. These properties
        allow email clients to display the filename and icon etc. When sending emails
        with attachments first upload each attachment with an upload endpoint. Record
        the returned attachment ID and use it with subsequent email sending. For legacy
        reasons the ID is returned as the first element in an array. Only a single
        ID is ever returned. To send the attachments pass a list of attachment IDs
        with `SendEmailOptions` when sending an email. Using the upload endpoints
        prior to sending mean attachments can easily be reused.
      operationId: deleteAttachment
      parameters:
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete an attachment
      tags:
      - Attachment Controller
      x-accepts: application/json
  /attachments/{attachmentId}/base64:
    get:
      deprecated: false
      description: Returns the specified attachment for a given email as a base 64
        encoded string. The response type is application/json. This method is similar
        to the `downloadAttachment` method but allows some clients to get around issues
        with binary responses.
      operationId: downloadAttachmentAsBase64Encoded
      parameters:
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadAttachmentDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email attachment as base64 encoded string as alternative to binary
        responses. To read the content decode the Base64 encoded contents.
      tags:
      - Attachment Controller
      x-accepts: application/json
  /attachments/{attachmentId}/bytes:
    get:
      deprecated: false
      description: Returns the specified attachment for a given email as a stream
        / array of bytes. You can find attachment ids in email responses endpoint
        responses. The response type is application/octet-stream.
      operationId: downloadAttachmentAsBytes
      parameters:
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Download attachments. Get email attachment bytes. If you have trouble
        with byte responses try the `downloadAttachmentBase64` response endpoints.
      tags:
      - Attachment Controller
      x-accepts: application/octet-stream
  /attachments/{attachmentId}/metadata:
    get:
      deprecated: false
      description: Returns the metadata for an attachment. It is saved separately
        to the content of the attachment. Contains properties `name` and `content-type`
        and `content-length` in bytes for a given attachment.
      operationId: getAttachmentInfo
      parameters:
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentMetaData'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email attachment metadata information
      tags:
      - Attachment Controller
      x-accepts: application/json
  /bounce/emails:
    get:
      deprecated: false
      description: Bounced emails are email you have sent that were rejected by a
        recipient
      operationId: getBouncedEmails
      parameters:
      - allowEmptyValue: false
        description: 'Optional page index '
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: 'Optional page size '
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBouncedEmail'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get paginated list of bounced emails.
      tags:
      - Bounce Controller
      x-accepts: application/json
  /bounce/emails/{id}:
    get:
      deprecated: false
      description: Bounced emails are email you have sent that were rejected by a
        recipient
      operationId: getBouncedEmail
      parameters:
      - description: ID of the bounced email to fetch
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bounce'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get a bounced email.
      tags:
      - Bounce Controller
      x-accepts: application/json
  /bounce/recipients:
    get:
      deprecated: false
      description: Bounced recipients are email addresses that you have sent emails
        to that did not accept the sent email. Once a recipient is bounced you cannot
        send emails to that address.
      operationId: getBouncedRecipients
      parameters:
      - allowEmptyValue: false
        description: 'Optional page index '
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: 'Optional page size '
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBouncedRecipients'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get paginated list of bounced recipients.
      tags:
      - Bounce Controller
      x-accepts: application/json
  /bounce/recipients/{id}:
    get:
      deprecated: false
      description: Bounced emails are email you have sent that were rejected by a
        recipient
      operationId: getBouncedRecipient
      parameters:
      - description: ID of the bounced recipient
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BounceRecipient'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get a bounced email.
      tags:
      - Bounce Controller
      x-accepts: application/json
  /bulk/inboxes:
    delete:
      deprecated: false
      operationId: bulkDeleteInboxes
      requestBody:
        content:
          application/json:
            schema:
              items:
                format: uuid
                type: string
              type: array
        description: ids
        required: true
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Bulk Delete Inboxes
      tags:
      - Bulk Actions Controller
      x-codegen-request-body-name: ids
      x-contentType: application/json
      x-accepts: application/json
    post:
      deprecated: false
      operationId: bulkCreateInboxes
      parameters:
      - allowEmptyValue: false
        description: Number of inboxes to be created in bulk
        in: query
        name: count
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "201":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Inbox'
                type: array
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Bulk create Inboxes (email addresses)
      tags:
      - Bulk Actions Controller
      x-accepts: application/json
  /bulk/send:
    post:
      deprecated: false
      operationId: bulkSendEmails
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkSendEmailOptions'
        description: bulkSendEmailOptions
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Bulk Send Emails
      tags:
      - Bulk Actions Controller
      x-codegen-request-body-name: bulkSendEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /contacts:
    get:
      deprecated: false
      operationId: getContacts
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ContactProjection'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all contacts
      tags:
      - Contact Controller
      x-accepts: application/json
    post:
      deprecated: false
      operationId: createContact
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateContactOptions'
        description: createContactOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create a contact
      tags:
      - Contact Controller
      x-codegen-request-body-name: createContactOptions
      x-contentType: application/json
      x-accepts: application/json
  /contacts/paginated:
    get:
      deprecated: false
      operationId: getAllContacts
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContactProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all contacts
      tags:
      - Contact Controller
      x-accepts: application/json
  /contacts/{contactId}:
    delete:
      deprecated: false
      operationId: deleteContact
      parameters:
      - description: contactId
        in: path
        name: contactId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete contact
      tags:
      - Contact Controller
      x-accepts: application/json
    get:
      deprecated: false
      operationId: getContact
      parameters:
      - description: contactId
        in: path
        name: contactId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContactDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get contact
      tags:
      - Contact Controller
      x-accepts: application/json
  /contacts/{contactId}/download:
    get:
      deprecated: false
      operationId: getContactVCard
      parameters:
      - description: contactId
        in: path
        name: contactId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get contact vCard vcf file
      tags:
      - Contact Controller
      x-accepts: application/octet-stream
  /createInbox:
    post:
      deprecated: false
      description: Returns an Inbox with an `id` and an `emailAddress`
      operationId: createNewEmailAddress
      parameters:
      - description: allowTeamAccess
        in: query
        name: allowTeamAccess
        schema:
          type: boolean
      - description: expiresAt
        in: query
        name: expiresAt
        schema:
          format: date-time
          type: string
      - description: expiresIn
        in: query
        name: expiresIn
        schema:
          format: int64
          type: integer
      - description: useDomainPool
        in: query
        name: useDomainPool
        schema:
          type: boolean
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create new random inbox
      tags:
      - Common Actions Controller
      x-accepts: application/json
  /domains:
    get:
      deprecated: false
      description: List all custom domains you have created
      operationId: getDomains
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/DomainPreview'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get domains
      tags:
      - Domain Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Link a domain that you own with MailSlurp so you can create email
        addresses using it. Endpoint returns DNS records used for validation. You
        must add these verification records to your host provider's DNS setup to verify
        the domain.
      operationId: createDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDomainOptions'
        description: domainOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create Domain
      tags:
      - Domain Controller
      x-codegen-request-body-name: domainOptions
      x-contentType: application/json
      x-accepts: application/json
  /domains/{id}:
    delete:
      deprecated: false
      description: Delete a domain. This will disable any existing inboxes that use
        this domain.
      operationId: deleteDomain
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete a domain
      tags:
      - Domain Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: Returns domain verification status and tokens for a given domain
      operationId: getDomain
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get a domain
      tags:
      - Domain Controller
      x-accepts: application/json
    put:
      deprecated: false
      description: Update values on a domain. Note you cannot change the domain name
        as it is immutable. Recreate the domain if you need to alter this.
      operationId: updateDomain
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDomainOptions'
        description: updateDomainDto
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Update a domain
      tags:
      - Domain Controller
      x-codegen-request-body-name: updateDomainDto
      x-contentType: application/json
      x-accepts: application/json
  /domains/{id}/wildcard:
    post:
      deprecated: false
      description: Add a catch all inbox to a domain so that any emails sent to it
        that cannot be matched will be sent to the catch all inbox generated
      operationId: addDomainWildcardCatchAll
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Add catch all wild card inbox to domain
      tags:
      - Domain Controller
      x-accepts: application/json
  /emails:
    delete:
      deprecated: false
      description: Deletes all emails in your account. Be careful as emails cannot
        be recovered
      operationId: deleteAllEmails
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete all emails in all inboxes.
      tags:
      - Email Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: By default returns all emails across all inboxes sorted by ascending
        created at date. Responses are paginated. You can restrict results to a list
        of inbox IDs. You can also filter out read messages
      operationId: getEmailsPaginated
      parameters:
      - allowEmptyValue: false
        description: Optional inbox ids to filter by. Can be repeated. By default
          will use all inboxes belonging to your account.
        explode: true
        in: query
        name: inboxId
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - allowEmptyValue: false
        description: Optional page index in email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter. Searches email recipients, sender, subject,
          email address and ID. Does not search email body
        in: query
        name: searchFilter
        schema:
          default: "false"
          type: string
      - allowEmptyValue: false
        description: Optional page size in email list pagination. Maximum size is
          100. Use page index and sort to page through larger results
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      - allowEmptyValue: false
        description: Optional filter for unread emails only. All emails are considered
          unread until they are viewed in the dashboard or requested directly
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all emails in all inboxes in paginated form. Email API list all.
      tags:
      - Email Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Alias for `InboxController.sendEmail` method - see original method
        for full details. Sends an email from a given inbox that you have created.
        If no inbox is supplied a random inbox will be created for you and used to
        send the email.
      operationId: sendEmailSourceOptional
      parameters:
      - allowEmptyValue: false
        description: ID of the inbox you want to send the email from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Use domain pool. Optionally create inbox to send from using the
          mailslurp domain pool.
        in: query
        name: useDomainPool
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        description: Options for the email
        required: false
      responses:
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send email
      tags:
      - Email Controller
      x-codegen-request-body-name: sendEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /emails/latest:
    get:
      deprecated: false
      description: Get the newest email in all inboxes or in a passed set of inbox
        IDs
      operationId: getLatestEmail
      parameters:
      - allowEmptyValue: false
        description: Optional set of inboxes to filter by. Only get the latest email
          from these inbox IDs
        explode: true
        in: query
        name: inboxIds
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get latest email in all inboxes. Most recently received.
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/latestIn:
    get:
      deprecated: false
      description: Get the newest email in all inboxes or in a passed set of inbox
        IDs
      operationId: getLatestEmailInInbox
      parameters:
      - allowEmptyValue: false
        description: ID of the inbox you want to get the latest email from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get latest email in an inbox. Use `WaitForController` to get emails
        that may not have arrived yet.
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/organization:
    get:
      deprecated: false
      description: By default returns all emails across all team inboxes sorted by
        ascending created at date. Responses are paginated. You can restrict results
        to a list of inbox IDs. You can also filter out read messages
      operationId: getOrganizationEmailsPaginated
      parameters:
      - allowEmptyValue: false
        description: Optional inbox ids to filter by. Can be repeated. By default
          will use all inboxes belonging to your account.
        explode: true
        in: query
        name: inboxId
        schema:
          items:
            format: uuid
            type: string
          type: array
        style: form
      - allowEmptyValue: false
        description: Optional page index in email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter search filter for emails.
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in email list pagination. Maximum size is
          100. Use page index and sort to page through larger results
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      - allowEmptyValue: false
        description: Optional filter for unread emails only. All emails are considered
          unread until they are viewed in the dashboard or requested directly
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all organization emails. List team or shared test email accounts
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/unreadCount:
    get:
      deprecated: false
      description: Get number of emails unread. Unread means has not been viewed in
        dashboard or returned in an email API response
      operationId: getUnreadEmailCount
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnreadCount'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get unread email count
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}:
    delete:
      deprecated: false
      description: Deletes an email and removes it from the inbox. Deleted emails
        cannot be recovered.
      operationId: deleteEmail
      parameters:
      - description: ID of email to delete
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete an email
      tags:
      - Email Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: Returns a email summary object with headers and content. To retrieve
        the raw unparsed email use the getRawEmail endpoints
      operationId: getEmail
      parameters:
      - allowEmptyValue: false
        description: Decode email body quoted-printable encoding to plain text. SMTP
          servers often encode text using quoted-printable format (for instance `=D7`).
          This can be a pain for testing
        in: query
        name: decode
        schema:
          default: false
          type: boolean
      - description: emailId
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email content including headers and body. Expects email to exist
        by ID. For emails that may not have arrived yet use the WaitForController.
      tags:
      - Email Controller
      x-accepts: application/json
    put:
      deprecated: false
      description: Send the reply to the email sender or reply-to and include same
        subject cc bcc etc. Reply to an email and the contents will be sent with the
        existing subject to the emails `to`, `cc`, and `bcc`.
      operationId: replyToEmail
      parameters:
      - description: ID of the email that should be replied to
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReplyToEmailOptions'
        description: replyToEmailOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Reply to an email
      tags:
      - Email Controller
      x-codegen-request-body-name: replyToEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /emails/{emailId}/attachments:
    get:
      deprecated: false
      description: Returns an array of attachment metadata such as name and content-type
        for a given email if present.
      operationId: getAttachments_1
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/AttachmentMetaData'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all email attachment metadata. Metadata includes name and size
        of attachments.
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}/attachments/{attachmentId}:
    get:
      deprecated: false
      description: Returns the specified attachment for a given email as a stream
        / array of bytes. You can find attachment ids in email responses endpoint
        responses. The response type is application/octet-stream.
      operationId: downloadAttachment
      parameters:
      - allowEmptyValue: false
        description: Can pass apiKey in url for this request if you wish to download
          the file in a browser. Content type will be set to original content type
          of the attachment file. This is so that browsers can download the file correctly.
        in: query
        name: apiKey
        schema:
          type: string
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email attachment bytes. Returned as `octet-stream` with content
        type header. If you have trouble with byte responses try the `downloadAttachmentBase64`
        response endpoints and convert the base 64 encoded content to a file or string.
      tags:
      - Email Controller
      x-accepts: application/octet-stream
  /emails/{emailId}/attachments/{attachmentId}/base64:
    get:
      deprecated: false
      description: Returns the specified attachment for a given email as a base 64
        encoded string. The response type is application/json. This method is similar
        to the `downloadAttachment` method but allows some clients to get around issues
        with binary responses.
      operationId: downloadAttachmentBase64
      parameters:
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadAttachmentDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email attachment as base64 encoded string as an alternative to
        binary responses. Decode the `base64FileContents` as a `utf-8` encoded string
        or array of bytes depending on the `contentType`.
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}/attachments/{attachmentId}/metadata:
    get:
      deprecated: false
      description: Returns the metadata such as name and content-type for a given
        attachment and email.
      operationId: getAttachmentMetaData
      parameters:
      - description: ID of attachment
        in: path
        name: attachmentId
        required: true
        schema:
          type: string
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AttachmentMetaData'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email attachment metadata. This is the `contentType` and `contentLength`
        of an attachment. To get the individual attachments  use the `downloadAttachment`
        methods.
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}/body:
    get:
      deprecated: false
      description: Returns the specified email body for a given email as a string
      operationId: downloadBody
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
            text/plain:
              schema:
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email body as string. Returned as `plain/text` with content type
        header.
      tags:
      - Email Controller
      x-accepts: text/html,text/plain
  /emails/{emailId}/body-bytes:
    get:
      deprecated: false
      description: Returns the specified email body for a given email as a stream
        / array of bytes.
      operationId: downloadBodyBytes
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/octet-stream:
              schema:
                format: byte
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email body in bytes. Returned as `octet-stream` with content type
        header.
      tags:
      - Email Controller
      x-accepts: application/octet-stream
  /emails/{emailId}/contentMatch:
    post:
      deprecated: false
      description: 'Return the matches for a given Java style regex pattern. Do not
        include the typical `/` at start or end of regex in some languages. Given
        an example `your code is: 12345` the pattern to extract match looks like `code
        is: (\d{6})`. This will return an array of matches with the first matching
        the entire pattern and the subsequent matching the groups: `[''code is: 123456'',
        ''123456'']` See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html
        for more information of available patterns. '
      operationId: getEmailContentMatch
      parameters:
      - description: ID of email to match against
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentMatchOptions'
        description: contentMatchOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailContentMatchResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email content regex pattern match results. Runs regex against email
        body and returns match groups.
      tags:
      - Email Controller
      x-codegen-request-body-name: contentMatchOptions
      x-contentType: application/json
      x-accepts: application/json
  /emails/{emailId}/forward:
    post:
      deprecated: false
      description: Forward an existing email to new recipients. The sender of the
        email will be the inbox that received the email you are forwarding. You can
        override the sender with the `from` option. Note you must have access to the
        from address in MailSlurp to use the override. For more control consider fetching
        the email and sending it a new using the send email endpoints.
      operationId: forwardEmail
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ForwardEmailOptions'
        description: forwardEmailOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Forward email to recipients
      tags:
      - Email Controller
      x-codegen-request-body-name: forwardEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /emails/{emailId}/html:
    get:
      deprecated: false
      description: 'Retrieve email content as HTML response for viewing in browsers.
        Decodes quoted-printable entities and converts charset to UTF-8. Pass your
        API KEY as a request parameter when viewing in a browser: `?apiKey=xxx`'
      operationId: getEmailHTML
      parameters:
      - description: decode
        in: query
        name: decode
        schema:
          default: false
          type: boolean
      - description: emailId
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get email content as HTML. For displaying emails in browser context.
      tags:
      - Email Controller
      x-accepts: text/html
  /emails/{emailId}/htmlQuery:
    get:
      deprecated: false
      description: Parse an email body and return the content as an array of text.
        HTML parsing uses JSoup which supports JQuery/CSS style selectors
      operationId: getEmailHTMLQuery
      parameters:
      - description: ID of email to perform HTML query on
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: HTML selector to search for. Uses JQuery/JSoup/CSS style selector
          like '.my-div' to match content. See https://jsoup.org/apidocs/org/jsoup/select/Selector.html
          for more information.
        in: query
        name: htmlSelector
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTextLinesResult'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Parse and return text from an email, stripping HTML and decoding encoded
        characters
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}/raw:
    get:
      deprecated: false
      description: Returns a raw, unparsed, and unprocessed email. If your client
        has issues processing the response it is likely due to the response content-type
        which is text/plain. If you need a JSON response content-type use the getRawEmailJson
        endpoint
      operationId: getRawEmailContents
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/plain:
              schema:
                type: string
          description: text/plain raw email
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get raw email string. Returns unparsed raw SMTP message with headers
        and body.
      tags:
      - Email Controller
      x-accepts: text/plain
  /emails/{emailId}/raw/json:
    get:
      deprecated: false
      description: Returns a raw, unparsed, and unprocessed email wrapped in a JSON
        response object for easier handling when compared with the getRawEmail text/plain
        response
      operationId: getRawEmailJson
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RawEmailJson'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get raw email in JSON. Unparsed SMTP message in JSON wrapper format.
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}/textLines:
    get:
      deprecated: false
      description: Parse an email body and return the content as an array of strings.
        HTML parsing uses JSoup and UNIX line separators.
      operationId: getEmailTextLines
      parameters:
      - allowEmptyValue: false
        description: Decode HTML entities
        in: query
        name: decodeHtmlEntities
        schema:
          type: boolean
      - description: ID of email to fetch text for
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Line separator character
        in: query
        name: lineSeparator
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailTextLinesResult'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Parse and return text from an email, stripping HTML and decoding encoded
        characters
      tags:
      - Email Controller
      x-accepts: application/json
  /emails/{emailId}/validate:
    post:
      deprecated: false
      description: Validate the HTML content of email if HTML is found. Considered
        valid if no HTML is present.
      operationId: validateEmail
      parameters:
      - description: ID of email
        in: path
        name: emailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Validate email HTML contents
      tags:
      - Email Controller
      x-accepts: application/json
  /emptyInbox:
    delete:
      deprecated: false
      description: Deletes all emails
      operationId: emptyInbox
      parameters:
      - description: inboxId
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete all emails in an inbox
      tags:
      - Common Actions Controller
      x-accepts: application/json
  /expired:
    get:
      deprecated: false
      description: Inboxes created with an expiration date will expire after the given
        date. An ExpiredInboxRecord is created that records the inboxes old ID and
        email address. You can still read emails in the inbox (using the inboxes old
        ID) but the email address associated with the inbox can no longer send or
        receive emails. Fetch expired inbox records to view the old inboxes properties
      operationId: getExpiredInboxes
      parameters:
      - allowEmptyValue: false
        description: Optional page index in inbox sent email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in inbox sent email list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageExpiredInboxRecordProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List records of expired inboxes
      tags:
      - Expired Controller
      x-accepts: application/json
  /expired/defaults:
    get:
      deprecated: false
      description: Return default times used for inbox expiration
      operationId: getExpirationDefaults
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpirationDefaults'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get default expiration settings
      tags:
      - Expired Controller
      x-accepts: application/json
  /expired/inbox/{inboxId}:
    get:
      deprecated: false
      description: Use the inboxId to return an ExpiredInboxRecord if an inbox has
        expired. Inboxes expire and are disabled if an expiration date is set or plan
        requires. Returns 404 if no expired inbox is found for the inboxId
      operationId: getExpiredInboxByInboxId
      parameters:
      - description: ID of inbox you want to retrieve (not the inbox ID)
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredInboxDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get expired inbox record for a previously existing inbox
      tags:
      - Expired Controller
      x-accepts: application/json
  /expired/{expiredId}:
    get:
      deprecated: false
      description: Inboxes created with an expiration date will expire after the given
        date and be moved to an ExpiredInbox entity. You can still read emails in
        the inbox but it can no longer send or receive emails. Fetch the expired inboxes
        to view the old inboxes properties
      operationId: getExpiredInboxRecord
      parameters:
      - description: ID of the ExpiredInboxRecord you want to retrieve. This is different
          from the ID of the inbox you are interested in. See other methods for getting
          ExpiredInboxRecord for an inbox inboxId)
        in: path
        name: expiredId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpiredInboxDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get an expired inbox record
      tags:
      - Expired Controller
      x-accepts: application/json
  /export:
    get:
      deprecated: false
      operationId: exportEntities
      parameters:
      - description: apiKey
        in: query
        name: apiKey
        required: true
        schema:
          type: string
      - description: createdEarliestTime
        in: query
        name: createdEarliestTime
        schema:
          format: date-time
          type: string
      - description: createdOldestTime
        in: query
        name: createdOldestTime
        schema:
          format: date-time
          type: string
      - description: excludePreviouslyExported
        in: query
        name: excludePreviouslyExported
        schema:
          type: boolean
      - description: exportType
        in: query
        name: exportType
        required: true
        schema:
          enum:
          - INBOXES
          - CONTACTS
          - ATTACHMENTS
          - EMAILS
          type: string
      - description: filter
        in: query
        name: filter
        schema:
          type: string
      - description: listSeparatorToken
        in: query
        name: listSeparatorToken
        schema:
          type: string
      - description: outputFormat
        in: query
        name: outputFormat
        required: true
        schema:
          enum:
          - CSV_DEFAULT
          - CSV_EXCEL
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: byte
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Export inboxes link callable via browser
      tags:
      - Export Controller
      x-accepts: application/json
    post:
      deprecated: false
      operationId: getExportLink
      parameters:
      - description: apiKey
        in: query
        name: apiKey
        schema:
          type: string
      - description: exportType
        in: query
        name: exportType
        required: true
        schema:
          enum:
          - INBOXES
          - CONTACTS
          - ATTACHMENTS
          - EMAILS
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExportOptions'
        description: exportOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExportLink'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get export link
      tags:
      - Export Controller
      x-codegen-request-body-name: exportOptions
      x-contentType: application/json
      x-accepts: application/json
  /forms:
    post:
      deprecated: false
      description: "This endpoint allows you to submit HTML forms and receive the\
        \ field values and files via email. \n\n#### Parameters\nThe endpoint looks\
        \ for special meta parameters in the form fields OR in the URL request parameters.\
        \ The meta parameters can be used to specify the behaviour of the email. \n\
        \nYou must provide at-least a `_to` email address to tell the endpoint where\
        \ the form should be emailed. These can be submitted as hidden HTML input\
        \ fields with the corresponding `name` attributes or as URL query parameters\
        \ such as `?_to=test@example.com`\n\nThe endpoint takes all other form fields\
        \ that are named and includes them in the message body of the email. Files\
        \ are sent as attachments.\n\n#### Submitting\nThis endpoint accepts form\
        \ submission via POST method. It accepts `application/x-www-form-urlencoded`,\
        \ and `multipart/form-data` content-types.\n\n#### HTML Example\n```html\n\
        <form \n  action=\"https://api.mailslurp.com/forms\"\n  method=\"post\"\n\
        >\n  <input name=\"_to\" type=\"hidden\" value=\"test@example.com\"/>\n  <textarea\
        \ name=\"feedback\"></textarea>\n  <button type=\"submit\">Submit</button>\n\
        </form>\n```\n\n#### URL Example\n```html\n<form \n  action=\"https://api.mailslurp.com/forms?_to=test@example.com\"\
        \n  method=\"post\"\n>\n  <textarea name=\"feedback\"></textarea>\n  <button\
        \ type=\"submit\">Submit</button>\n</form>\n```\n\n\n\nThe email address is\
        \ specified by a `_to` field OR is extracted from an email alias specified\
        \ by a `_toAlias` field (see the alias controller for more information). \n\
        Endpoint accepts . \nYou can specify a content type in HTML forms using the\
        \ `enctype` attribute, for instance: `<form enctype=\"multipart/form-data\"\
        >`.\n\n"
      operationId: submitForm
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                _emailAddress:
                  description: Email address of the submitting user. Include this
                    if you wish to record the submitters email address and reply to
                    it later.
                  example: test@example.com
                  type: string
                _redirectTo:
                  description: Optional URL to redirect form submitter to after submission.
                    If not present user will see a success message.
                  example: https://mysite.com/form-success
                  type: string
                _spamCheck:
                  description: Optional but recommended field that catches spammers
                    out. Include as a hidden form field but LEAVE EMPTY. Spam-bots
                    will usually fill every field. If the _spamCheck field is filled
                    the form submission will be ignored.
                  type: string
                _subject:
                  description: Optional subject of the email that will be sent.
                  example: My form submission
                  type: string
                _successMessage:
                  description: Optional success message to display if no _redirectTo
                    present.
                  example: Thanks for submitting
                  type: string
                _to:
                  description: The email address that submitted form should be sent
                    to.
                  example: test@example.com
                  type: string
                otherParameters:
                  description: All other parameters or fields will be accepted and
                    attached to the sent email. This includes files and any HTML form
                    field with a name. These fields will become the body of the email
                    that is sent.
                  type: string
          application/x-www-form-urlencoded:
            schema:
              properties:
                _emailAddress:
                  description: Email address of the submitting user. Include this
                    if you wish to record the submitters email address and reply to
                    it later.
                  example: test@example.com
                  type: string
                _redirectTo:
                  description: Optional URL to redirect form submitter to after submission.
                    If not present user will see a success message.
                  example: https://mysite.com/form-success
                  type: string
                _spamCheck:
                  description: Optional but recommended field that catches spammers
                    out. Include as a hidden form field but LEAVE EMPTY. Spam-bots
                    will usually fill every field. If the _spamCheck field is filled
                    the form submission will be ignored.
                  type: string
                _subject:
                  description: Optional subject of the email that will be sent.
                  example: My form submission
                  type: string
                _successMessage:
                  description: Optional success message to display if no _redirectTo
                    present.
                  example: Thanks for submitting
                  type: string
                _to:
                  description: The email address that submitted form should be sent
                    to.
                  example: test@example.com
                  type: string
                otherParameters:
                  description: All other parameters or fields will be accepted and
                    attached to the sent email. This includes files and any HTML form
                    field with a name. These fields will become the body of the email
                    that is sent.
                  type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Submit a form to be parsed and sent as an email to an address determined
        by the form fields
      tags:
      - Form Controller
      x-contentType: multipart/form-data
      x-accepts: application/json
  /forwarders:
    delete:
      deprecated: false
      description: Delete inbox forwarders. Accepts optional inboxId filter.
      operationId: deleteInboxForwarders
      parameters:
      - allowEmptyValue: false
        description: Optional inbox id to attach forwarder to
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete inbox forwarders
      tags:
      - Inbox Forwarder Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: List all forwarders attached to an inbox
      operationId: getInboxForwarders
      parameters:
      - allowEmptyValue: false
        description: Optional inbox id to get forwarders from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox forwarder list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in inbox forwarder list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageInboxForwarderDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List inbox forwarders
      tags:
      - Inbox Forwarder Controller
      x-accepts: application/json
    patch:
      deprecated: false
      description: Test new inbox forwarder
      operationId: testNewInboxForwarder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestNewInboxForwarderOptions'
        description: testNewInboxForwarderOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxForwarderTestResult'
          description: OK
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Test new inbox forwarder
      tags:
      - Inbox Forwarder Controller
      x-codegen-request-body-name: testNewInboxForwarderOptions
      x-contentType: application/json
      x-accepts: application/json
    post:
      deprecated: false
      description: Create a new inbox rule for forwarding, blocking, and allowing
        emails when sending and receiving
      operationId: createNewInboxForwarder
      parameters:
      - allowEmptyValue: false
        description: Inbox id to attach forwarder to
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxForwarderOptions'
        description: createInboxForwarderOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxForwarderDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an inbox forwarder
      tags:
      - Inbox Forwarder Controller
      x-codegen-request-body-name: createInboxForwarderOptions
      x-contentType: application/json
      x-accepts: application/json
    put:
      deprecated: false
      description: Test inbox forwarders for inbox
      operationId: testInboxForwardersForInbox
      parameters:
      - allowEmptyValue: false
        description: ID of inbox
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxForwarderTestOptions'
        description: inboxForwarderTestOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxForwarderTestResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Test inbox forwarders for inbox
      tags:
      - Inbox Forwarder Controller
      x-codegen-request-body-name: inboxForwarderTestOptions
      x-contentType: application/json
      x-accepts: application/json
  /forwarders/{id}:
    delete:
      deprecated: false
      description: Delete inbox forwarder
      operationId: deleteInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete an inbox forwarder
      tags:
      - Inbox Forwarder Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: Get inbox ruleset
      operationId: getInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxForwarderDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get an inbox forwarder
      tags:
      - Inbox Forwarder Controller
      x-accepts: application/json
  /forwarders/{id}/test:
    post:
      deprecated: false
      description: Test an inbox forwarder
      operationId: testInboxForwarder
      parameters:
      - description: ID of inbox forwarder
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxForwarderTestOptions'
        description: inboxForwarderTestOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxForwarderTestResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Test an inbox forwarder
      tags:
      - Inbox Forwarder Controller
      x-codegen-request-body-name: inboxForwarderTestOptions
      x-contentType: application/json
      x-accepts: application/json
  /groups:
    get:
      deprecated: false
      operationId: getGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/GroupProjection'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all groups
      tags:
      - Group Controller
      x-accepts: application/json
    post:
      deprecated: false
      operationId: createGroup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGroupOptions'
        description: createGroupOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create a group
      tags:
      - Group Controller
      x-codegen-request-body-name: createGroupOptions
      x-contentType: application/json
      x-accepts: application/json
  /groups/paginated:
    get:
      deprecated: false
      operationId: getAllGroups
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageGroupProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all Contact Groups in paginated format
      tags:
      - Group Controller
      x-accepts: application/json
  /groups/{groupId}:
    delete:
      deprecated: false
      operationId: deleteGroup
      parameters:
      - description: groupId
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete group
      tags:
      - Group Controller
      x-accepts: application/json
    get:
      deprecated: false
      operationId: getGroup
      parameters:
      - description: groupId
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get group
      tags:
      - Group Controller
      x-accepts: application/json
  /groups/{groupId}/contacts:
    delete:
      deprecated: false
      operationId: removeContactsFromGroup
      parameters:
      - description: groupId
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupContacts'
        description: updateGroupContactsOption
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupContactsDto'
          description: OK
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Remove contacts from a group
      tags:
      - Group Controller
      x-codegen-request-body-name: updateGroupContactsOption
      x-contentType: application/json
      x-accepts: application/json
    get:
      deprecated: false
      operationId: getGroupWithContacts
      parameters:
      - description: groupId
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupContactsDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get group and contacts belonging to it
      tags:
      - Group Controller
      x-accepts: application/json
    put:
      deprecated: false
      operationId: addContactsToGroup
      parameters:
      - description: groupId
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGroupContacts'
        description: updateGroupContactsOption
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GroupContactsDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Add contacts to a group
      tags:
      - Group Controller
      x-codegen-request-body-name: updateGroupContactsOption
      x-contentType: application/json
      x-accepts: application/json
  /groups/{groupId}/contacts-paginated:
    get:
      deprecated: false
      operationId: getGroupWithContactsPaginated
      parameters:
      - description: groupId
        in: path
        name: groupId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in group contact pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in group contact pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageContactProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get group and paginated contacts belonging to it
      tags:
      - Group Controller
      x-accepts: application/json
  /inboxes:
    delete:
      deprecated: false
      description: 'Permanently delete all inboxes and associated email addresses.
        This will also delete all emails within the inboxes. Be careful as inboxes
        cannot be recovered once deleted. Note: deleting inboxes will not impact your
        usage limits. Monthly inbox creation limits are based on how many inboxes
        were created in the last 30 days, not how many inboxes you currently have.'
      operationId: deleteAllInboxes
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete all inboxes
      tags:
      - Inbox Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: List the inboxes you have created. Note use of the more advanced
        `getAllEmails` is recommended and allows paginated access using a limit and
        sort parameter.
      operationId: getInboxes
      parameters:
      - allowEmptyValue: false
        description: Optional result size limit. Note an automatic limit of 100 results
          is applied. See the paginated `getAllEmails` for larger queries.
        in: query
        name: size
        schema:
          default: 100
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Inbox'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List Inboxes and email addresses
      tags:
      - Inbox Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: 'Create a new inbox and with a randomized email address to send
        and receive from. Pass emailAddress parameter if you wish to use a specific
        email address. Creating an inbox is required before sending or receiving emails.
        If writing tests it is recommended that you create a new inbox during each
        test method so that it is unique and empty. '
      operationId: createInbox
      parameters:
      - allowEmptyValue: false
        description: Grant team access to this inbox and the emails that belong to
          it for team members of your organization.
        in: query
        name: allowTeamAccess
        schema:
          type: boolean
      - allowEmptyValue: false
        description: Optional description of the inbox for labelling purposes. Is
          shown in the dashboard and can be used with
        in: query
        name: description
        schema:
          type: string
      - allowEmptyValue: false
        description: A custom email address to use with the inbox. Defaults to null.
          When null MailSlurp will assign a random email address to the inbox such
          as `123@mailslurp.com`. If you use the `useDomainPool` option when the email
          address is null it will generate an email address with a more varied domain
          ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When a custom
          email address is provided the address is split into a domain and the domain
          is queried against your user. If you have created the domain in the MailSlurp
          dashboard and verified it you can use any email address that ends with the
          domain. Note domain types must match the inbox type - so `SMTP` inboxes
          will only work with `SMTP` type domains. Send an email to this address and
          the inbox will receive and store it for you. To retrieve the email use the
          Inbox and Email Controller endpoints with the inbox ID.
        in: query
        name: emailAddress
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional inbox expiration date. If null then this inbox is permanent
          and the emails in it won't be deleted. If an expiration date is provided
          or is required by your plan the inbox will be closed when the expiration
          time is reached. Expired inboxes still contain their emails but can no longer
          send or receive emails. An ExpiredInboxRecord is created when an inbox and
          the email address and inbox ID are recorded. The expiresAt property is a
          timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
        in: query
        name: expiresAt
        schema:
          format: date-time
          type: string
      - allowEmptyValue: false
        description: Number of milliseconds that inbox should exist for
        in: query
        name: expiresIn
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Is the inbox a favorite. Marking an inbox as a favorite is typically
          done in the dashboard for quick access or filtering
        in: query
        name: favourite
        schema:
          type: boolean
      - allowEmptyValue: false
        description: HTTP (default) or SMTP inbox type. HTTP inboxes are best for
          testing while SMTP inboxes are more reliable for public inbound email consumption.
          When using custom domains the domain type must match the inbox type. HTTP
          inboxes are processed by AWS SES while SMTP inboxes use a custom mail server
          running at `mx.mailslurp.com`.
        in: query
        name: inboxType
        schema:
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
      - allowEmptyValue: false
        description: Optional name of the inbox. Displayed in the dashboard for easier
          search and used as the sender name when sending emails.
        in: query
        name: name
        schema:
          type: string
      - allowEmptyValue: false
        description: Tags that inbox has been tagged with. Tags can be added to inboxes
          to group different inboxes within an account. You can also search for inboxes
          by tag in the dashboard UI.
        explode: true
        in: query
        name: tags
        schema:
          items:
            type: string
          type: array
        style: form
      - allowEmptyValue: false
        description: Use the MailSlurp domain name pool with this inbox when creating
          the email address. Defaults to null. If enabled the inbox will be an email
          address with a domain randomly chosen from a list of the MailSlurp domains.
          This is useful when the default `@mailslurp.com` email addresses used with
          inboxes are blocked or considered spam by a provider or receiving service.
          When domain pool is enabled an email address will be generated ending in
          `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly selecting
          from a list of `.biz`, `.info`, `.xyz` etc to add variance to the generated
          email addresses. When null or false MailSlurp uses the default behavior
          of `@mailslurp.com` or custom email address provided by the emailAddress
          field. Note this feature is only available for `HTTP` inbox types.
        in: query
        name: useDomainPool
        schema:
          type: boolean
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an inbox email address. An inbox has a real email address and
        can send and receive emails. Inboxes can be either `SMTP` or `HTTP` inboxes.
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/organization:
    get:
      deprecated: false
      description: 'List organization inboxes in paginated form. These are inboxes
        created with `allowTeamAccess` flag enabled. Organization inboxes are `readOnly`
        for non-admin users. The results are available on the `content` property of
        the returned object. This method allows for page index (zero based), page
        size (how many results to return), and a sort direction (based on createdAt
        time). '
      operationId: getOrganizationInboxes
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageOrganizationInboxProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List Organization Inboxes Paginated
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/paginated:
    get:
      deprecated: false
      description: List inboxes in paginated form. The results are available on the
        `content` property of the returned object. This method allows for page index
        (zero based), page size (how many results to return), and a sort direction
        (based on createdAt time). You Can also filter by whether an inbox is favorited
        or use email address pattern. This method is the recommended way to query
        inboxes. The alternative `getInboxes` method returns a full list of inboxes
        but is limited to 100 results. Results do not include team access inboxes
        by default. Use organization method to list team inboxes or set `teamAccess`
        to true.
      operationId: getAllInboxes
      parameters:
      - allowEmptyValue: false
        description: Optionally filter results for favourites only
        in: query
        name: favourite
        schema:
          default: false
          type: boolean
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optionally filter by search words partial matching ID, tags,
          name, and email address
        in: query
        name: search
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      - allowEmptyValue: false
        description: Optionally filter by tags. Will return inboxes that include given
          tags
        in: query
        name: tag
        schema:
          type: string
      - allowEmptyValue: false
        description: Optionally filter by team access. Defaults to false so organization
          inboxes are not included
        in: query
        name: teamAccess
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageInboxProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List All Inboxes Paginated
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/tags:
    get:
      deprecated: false
      description: Get all inbox tags
      operationId: getInboxTags
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get inbox tags
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/withDefaults:
    post:
      deprecated: false
      operationId: createInboxWithDefaults
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an inbox with default options. Uses MailSlurp domain pool address
        and is private.
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/withOptions:
    post:
      deprecated: false
      description: Additional endpoint that allows inbox creation with request body
        options. Can be more flexible that other methods for some clients.
      operationId: createInboxWithOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxDto'
        description: createInboxDto
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an inbox with options. Extended options for inbox creation.
      tags:
      - Inbox Controller
      x-codegen-request-body-name: createInboxDto
      x-contentType: application/json
      x-accepts: application/json
  /inboxes/{inboxId}:
    delete:
      deprecated: false
      description: 'Permanently delete an inbox and associated email address as well
        as all emails within the given inbox. This action cannot be undone. Note:
        deleting an inbox will not affect your account usage. Monthly inbox usage
        is based on how many inboxes you create within 30 days, not how many exist
        at time of request.'
      operationId: deleteInbox
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete inbox
      tags:
      - Inbox Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: Returns an inbox's properties, including its email address and
        ID.
      operationId: getInbox
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get Inbox. Returns properties of an inbox.
      tags:
      - Inbox Controller
      x-accepts: application/json
    patch:
      deprecated: false
      description: Update editable fields on an inbox
      operationId: updateInbox
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInboxOptions'
        description: updateInboxOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: OK
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Update Inbox. Change name and description. Email address is not editable.
      tags:
      - Inbox Controller
      x-codegen-request-body-name: updateInboxOptions
      x-contentType: application/json
      x-accepts: application/json
    post:
      deprecated: false
      description: "Send an email from an inbox's email address. \nThe request body\
        \ should contain the `SendEmailOptions` that include recipients, attachments,\
        \ body etc. See `SendEmailOptions` for all available properties. Note the\
        \ `inboxId` refers to the inbox's id not the inbox's email address. See https://www.mailslurp.com/guides/\
        \ for more information on how to send emails. This method does not return\
        \ a sent email entity due to legacy reasons. To send and get a sent email\
        \ as returned response use the sister method `sendEmailAndConfirm`."
      operationId: sendEmail
      parameters:
      - description: ID of the inbox you want to send the email from
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        description: Options for the email
        required: false
      responses:
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send Email
      tags:
      - Inbox Controller
      x-codegen-request-body-name: sendEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /inboxes/{inboxId}/confirm:
    post:
      deprecated: false
      description: Sister method for standard `sendEmail` method with the benefit
        of returning a `SentEmail` entity confirming the successful sending of the
        email with a link to the sent object created for it.
      operationId: sendEmailAndConfirm
      parameters:
      - description: ID of the inbox you want to send the email from
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendEmailOptions'
        description: Options for the email
        required: false
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send email and return sent confirmation
      tags:
      - Inbox Controller
      x-codegen-request-body-name: sendEmailOptions
      x-contentType: application/json
      x-accepts: application/json
  /inboxes/{inboxId}/emails:
    get:
      deprecated: false
      description: List emails that an inbox has received. Only emails that are sent
        to the inbox's email address will appear in the inbox. It may take several
        seconds for any email you send to an inbox's email address to appear in the
        inbox. To make this endpoint wait for a minimum number of emails use the `minCount`
        parameter. The server will retry the inbox database until the `minCount` is
        satisfied or the `retryTimeout` is reached
      operationId: getEmails
      parameters:
      - description: Id of inbox that emails belongs to
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Limit the result set, ordered by received date time sort direction.
          Maximum 100. For more listing options see the email controller
        in: query
        name: limit
        schema:
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Minimum acceptable email count. Will cause request to hang (and
          retry) until minCount is satisfied or retryTimeout is reached.
        in: query
        name: minCount
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Maximum milliseconds to spend retrying inbox database until minCount
          emails are returned
        in: query
        name: retryTimeout
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Exclude emails received before this ISO 8601 date time
        in: query
        name: since
        schema:
          format: date-time
          type: string
      - allowEmptyValue: false
        description: Alias for limit. Assessed first before assessing any passed limit.
        in: query
        name: size
        schema:
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Sort the results by received date and direction ASC or DESC
        in: query
        name: sort
        schema:
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get emails in an Inbox. This method is not idempotent as it allows
        retries and waits if you want certain conditions to be met before returning.
        For simple listing and sorting of known emails use the email controller instead.
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/{inboxId}/emails/paginated:
    get:
      deprecated: false
      description: Get a paginated list of emails in an inbox. Does not hold connections
        open.
      operationId: getInboxEmailsPaginated
      parameters:
      - description: Id of inbox that emails belongs to
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox emails list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in inbox emails list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageEmailPreview'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get inbox emails paginated
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/{inboxId}/favourite:
    put:
      deprecated: false
      description: Set and return new favourite state for an inbox
      operationId: setInboxFavourited
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetInboxFavouritedOptions'
        description: setInboxFavouritedOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Set inbox favourited state
      tags:
      - Inbox Controller
      x-codegen-request-body-name: setInboxFavouritedOptions
      x-contentType: application/json
      x-accepts: application/json
  /inboxes/{inboxId}/rulesets:
    get:
      deprecated: false
      description: List all rulesets attached to an inbox
      operationId: listInboxRulesets
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox ruleset list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in inbox ruleset list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageInboxRulesetDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List inbox rulesets
      tags:
      - Inbox Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Create a new inbox rule for forwarding, blocking, and allowing
        emails when sending and receiving
      operationId: createInboxRuleset
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxRulesetOptions'
        description: createInboxRulesetOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxRulesetDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an inbox ruleset
      tags:
      - Inbox Controller
      x-codegen-request-body-name: createInboxRulesetOptions
      x-contentType: application/json
      x-accepts: application/json
  /inboxes/{inboxId}/send-test-email:
    post:
      deprecated: false
      description: Send an inbox a test email to test email receiving is working
      operationId: sendTestEmail
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "201":
          content: {}
          description: Created
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send a test email to inbox
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/{inboxId}/sent:
    get:
      deprecated: false
      description: Returns an inbox's sent email receipts. Call individual sent email
        endpoints for more details. Note for privacy reasons the full body of sent
        emails is never stored. An MD5 hash hex is available for comparison instead.
      operationId: getInboxSentEmails
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox sent email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional sent email search
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in inbox sent email list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSentEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get Inbox Sent Emails
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/{inboxId}/tracking-pixels:
    get:
      deprecated: false
      description: List all tracking pixels sent from an inbox
      operationId: listInboxTrackingPixels
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox tracking pixel list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in inbox tracking pixel list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List inbox tracking pixels
      tags:
      - Inbox Controller
      x-accepts: application/json
  /inboxes/{inboxId}/webhooks:
    get:
      deprecated: false
      operationId: getWebhooks
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WebhookDto'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all webhooks for an Inbox
      tags:
      - Webhook Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Get notified whenever an inbox receives an email via a WebHook
        URL. An emailID will be posted to this URL every time an email is received
        for this inbox. The URL must be publicly reachable by the MailSlurp server.
        You can provide basicAuth values if you wish to secure this endpoint.
      operationId: createWebhook
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWebhookOptions'
        description: webhookOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Attach a WebHook URL to an inbox
      tags:
      - Webhook Controller
      x-codegen-request-body-name: webhookOptions
      x-contentType: application/json
      x-accepts: application/json
  /inboxes/{inboxId}/webhooks/paginated:
    get:
      deprecated: false
      operationId: getInboxWebhooksPaginated
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebhookProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get paginated webhooks for an Inbox
      tags:
      - Webhook Controller
      x-accepts: application/json
  /inboxes/{inboxId}/webhooks/{webhookId}:
    delete:
      deprecated: false
      operationId: deleteWebhook
      parameters:
      - description: inboxId
        in: path
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      - description: webhookId
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete and disable a Webhook for an Inbox
      tags:
      - Webhook Controller
      x-accepts: application/json
  /mail-server/describe/dns-lookup:
    post:
      deprecated: false
      operationId: getDnsLookup
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DNSLookupOptions'
        description: dnsLookupOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DNSLookupResults'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Lookup DNS records for a domain
      tags:
      - MailServer Controller
      x-codegen-request-body-name: dnsLookupOptions
      x-contentType: application/json
      x-accepts: application/json
  /mail-server/describe/domain:
    post:
      deprecated: false
      operationId: describeMailServerDomain
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DescribeDomainOptions'
        description: describeOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DescribeMailServerDomainResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get DNS Mail Server records for a domain
      tags:
      - MailServer Controller
      x-codegen-request-body-name: describeOptions
      x-contentType: application/json
      x-accepts: application/json
  /mail-server/describe/ip-address:
    post:
      deprecated: false
      operationId: getIpAddress
      parameters:
      - description: name
        in: query
        name: name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IPAddressResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get IP address for a domain
      tags:
      - MailServer Controller
      x-accepts: application/json
  /mail-server/verify/email-address:
    post:
      deprecated: false
      operationId: verifyEmailAddress
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmailAddressOptions'
        description: verifyOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmailVerificationResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Verify the existence of an email address at a given mail server.
      tags:
      - MailServer Controller
      x-codegen-request-body-name: verifyOptions
      x-contentType: application/json
      x-accepts: application/json
  /missed-emails:
    get:
      deprecated: false
      operationId: getAllMissedEmails
      parameters:
      - allowEmptyValue: false
        description: Optional inbox ID filter
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageMissedEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all MissedEmails in paginated format
      tags:
      - MissedEmail Controller
      x-accepts: application/json
  /missed-emails/waitForNthMissedEmail:
    get:
      deprecated: false
      description: Wait for 0 based index missed email
      operationId: waitForNthMissedEmail
      parameters:
      - allowEmptyValue: false
        description: Optional inbox ID filter
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Zero based index of the email to wait for. If 1 missed email
          already and you want to wait for the 2nd email pass index=1
        in: query
        name: index
        schema:
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional timeout milliseconds
        in: query
        name: timeout
        schema:
          format: int64
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissedEmail'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Wait for Nth missed email
      tags:
      - MissedEmail Controller
      x-accepts: application/json
  /missed-emails/{missedEmailId}:
    get:
      deprecated: false
      operationId: getMissedEmail
      parameters:
      - description: missedEmailId
        in: path
        name: missedEmailId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MissedEmail'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get MissedEmail
      tags:
      - MissedEmail Controller
      x-accepts: application/json
  /newEmailAddress:
    post:
      deprecated: false
      description: Returns an Inbox with an `id` and an `emailAddress`
      operationId: createNewEmailAddress_1
      parameters:
      - description: allowTeamAccess
        in: query
        name: allowTeamAccess
        schema:
          type: boolean
      - description: expiresAt
        in: query
        name: expiresAt
        schema:
          format: date-time
          type: string
      - description: expiresIn
        in: query
        name: expiresIn
        schema:
          format: int64
          type: integer
      - description: useDomainPool
        in: query
        name: useDomainPool
        schema:
          type: boolean
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Inbox'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create new random inbox
      tags:
      - Common Actions Controller
      x-accepts: application/json
  /rulesets:
    delete:
      deprecated: false
      description: Delete inbox rulesets. Accepts optional inboxId filter.
      operationId: deleteInboxRulesets
      parameters:
      - allowEmptyValue: false
        description: Optional inbox id to attach ruleset to
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete inbox rulesets
      tags:
      - Inbox Ruleset Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: List all rulesets attached to an inbox
      operationId: getInboxRulesets
      parameters:
      - allowEmptyValue: false
        description: Optional inbox id to get rulesets from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox ruleset list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in inbox ruleset list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageInboxRulesetDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List inbox rulesets
      tags:
      - Inbox Ruleset Controller
      x-accepts: application/json
    patch:
      deprecated: false
      description: Test new inbox ruleset
      operationId: testNewInboxRuleset
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TestNewInboxRulesetOptions'
        description: testNewInboxRulesetOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxRulesetTestResult'
          description: OK
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Test new inbox ruleset
      tags:
      - Inbox Ruleset Controller
      x-codegen-request-body-name: testNewInboxRulesetOptions
      x-contentType: application/json
      x-accepts: application/json
    post:
      deprecated: false
      description: Create a new inbox rule for forwarding, blocking, and allowing
        emails when sending and receiving
      operationId: createNewInboxRuleset
      parameters:
      - allowEmptyValue: false
        description: Inbox id to attach ruleset to
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateInboxRulesetOptions'
        description: createInboxRulesetOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxRulesetDto'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create an inbox ruleset
      tags:
      - Inbox Ruleset Controller
      x-codegen-request-body-name: createInboxRulesetOptions
      x-contentType: application/json
      x-accepts: application/json
    put:
      deprecated: false
      description: Test inbox rulesets for inbox
      operationId: testInboxRulesetsForInbox
      parameters:
      - allowEmptyValue: false
        description: ID of inbox
        in: query
        name: inboxId
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxRulesetTestOptions'
        description: inboxRulesetTestOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxRulesetTestResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Test inbox rulesets for inbox
      tags:
      - Inbox Ruleset Controller
      x-codegen-request-body-name: inboxRulesetTestOptions
      x-contentType: application/json
      x-accepts: application/json
  /rulesets/{id}:
    delete:
      deprecated: false
      description: Delete inbox ruleset
      operationId: deleteInboxRuleset
      parameters:
      - description: ID of inbox ruleset
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete an inbox ruleset
      tags:
      - Inbox Ruleset Controller
      x-accepts: application/json
    get:
      deprecated: false
      description: Get inbox ruleset
      operationId: getInboxRuleset
      parameters:
      - description: ID of inbox ruleset
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxRulesetDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get an inbox ruleset
      tags:
      - Inbox Ruleset Controller
      x-accepts: application/json
  /rulesets/{id}/test:
    post:
      deprecated: false
      description: Test an inbox ruleset
      operationId: testInboxRuleset
      parameters:
      - description: ID of inbox ruleset
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InboxRulesetTestOptions'
        description: inboxRulesetTestOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InboxRulesetTestResult'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Test an inbox ruleset
      tags:
      - Inbox Ruleset Controller
      x-codegen-request-body-name: inboxRulesetTestOptions
      x-contentType: application/json
      x-accepts: application/json
  /sendEmail:
    post:
      deprecated: false
      description: If no senderId or inboxId provided a random email address will
        be used to send from.
      operationId: sendEmailSimple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimpleSendEmailOptions'
        description: emailOptions
        required: true
      responses:
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send an email
      tags:
      - Common Actions Controller
      x-codegen-request-body-name: emailOptions
      x-contentType: application/json
      x-accepts: application/json
  /sent:
    get:
      deprecated: false
      operationId: getSentEmails
      parameters:
      - allowEmptyValue: false
        description: Optional inboxId to filter sender of sent emails by
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in inbox sent email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in inbox sent email list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSentEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all sent emails in paginated form
      tags:
      - Sent Emails Controller
      x-accepts: application/json
  /sent/organization:
    get:
      deprecated: false
      operationId: getSentOrganizationEmails
      parameters:
      - allowEmptyValue: false
        description: Optional inboxId to filter sender of sent emails by
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in sent email list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in sent email list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageSentEmailProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all sent organization emails in paginated form
      tags:
      - Sent Emails Controller
      x-accepts: application/json
  /sent/tracking-pixels:
    get:
      deprecated: false
      operationId: getAllSentTrackingPixels
      parameters:
      - allowEmptyValue: false
        description: Optional page index in sent email tracking pixel list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in sent email tracking pixel list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all sent email tracking pixels in paginated form
      tags:
      - Sent Emails Controller
      x-accepts: application/json
  /sent/{id}:
    get:
      deprecated: false
      operationId: getSentEmail
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SentEmailDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get sent email receipt
      tags:
      - Sent Emails Controller
      x-accepts: application/json
  /sent/{id}/html:
    get:
      deprecated: false
      operationId: getSentEmailHTMLContent
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            text/html:
              schema:
                type: string
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get sent email HTML content
      tags:
      - Sent Emails Controller
      x-accepts: text/html
  /sent/{id}/tracking-pixels:
    get:
      deprecated: false
      operationId: getSentEmailTrackingPixels
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Optional page index in sent email tracking pixel list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in sent email tracking pixel list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all tracking pixels for a sent email in paginated form
      tags:
      - Sent Emails Controller
      x-accepts: application/json
  /templates:
    get:
      deprecated: false
      operationId: getTemplates
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/TemplateProjection'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all Templates
      tags:
      - Template Controller
      x-accepts: application/json
    post:
      deprecated: false
      operationId: createTemplate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTemplateOptions'
        description: createTemplateOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create a Template
      tags:
      - Template Controller
      x-codegen-request-body-name: createTemplateOptions
      x-contentType: application/json
      x-accepts: application/json
  /templates/paginated:
    get:
      deprecated: false
      operationId: getAllTemplates
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTemplateProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get all Templates in paginated format
      tags:
      - Template Controller
      x-accepts: application/json
  /templates/{TemplateId}:
    delete:
      deprecated: false
      operationId: deleteTemplate
      parameters:
      - description: TemplateId
        in: path
        name: TemplateId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "204":
          content: {}
          description: No Content
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
      security:
      - API_KEY: []
      summary: Delete Template
      tags:
      - Template Controller
      x-accepts: application/json
    get:
      deprecated: false
      operationId: getTemplate
      parameters:
      - description: TemplateId
        in: path
        name: TemplateId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TemplateDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get Template
      tags:
      - Template Controller
      x-accepts: application/json
  /tracking/pixels:
    get:
      deprecated: false
      description: List tracking pixels in paginated form
      operationId: getAllTrackingPixels
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTrackingPixelProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get tracking pixels
      tags:
      - Tracking Controller
      x-accepts: application/json
    post:
      deprecated: false
      description: Create a tracking pixel. A tracking pixel is an image that can
        be embedded in an email. When the email is viewed and the image is seen MailSlurp
        will mark the pixel as seen. Use tracking pixels to monitor email open events.
        You can receive open notifications via webhook or by fetching the pixel.
      operationId: createTrackingPixel
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTrackingPixelOptions'
        description: createTrackingPixelOptions
        required: true
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingPixelDto'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Create tracking pixel
      tags:
      - Tracking Controller
      x-codegen-request-body-name: createTrackingPixelOptions
      x-contentType: application/json
      x-accepts: application/json
  /tracking/pixels/{id}:
    get:
      deprecated: false
      operationId: getTrackingPixel
      parameters:
      - description: id
        in: path
        name: id
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackingPixelDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get pixel
      tags:
      - Tracking Controller
      x-accepts: application/json
  /waitFor:
    post:
      deprecated: false
      description: Generic waitFor method that will wait until an inbox meets given
        conditions or return immediately if already met
      operationId: waitFor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WaitForConditions'
        description: Conditions to apply to emails that you are waiting for
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Wait for an email to match the provided filter conditions such as subject
        contains keyword.
      tags:
      - WaitFor Controller
      x-codegen-request-body-name: waitForConditions
      x-contentType: application/json
      x-accepts: application/json
  /waitForEmailCount:
    get:
      deprecated: false
      description: If inbox contains count or more emails at time of request then
        return count worth of emails. If not wait until the count is reached and return
        those or return an error if timeout is exceeded.
      operationId: waitForEmailCount
      parameters:
      - allowEmptyValue: false
        description: Number of emails to wait for. Must be greater that 1
        in: query
        name: count
        schema:
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Id of the inbox we are fetching emails from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Max milliseconds to wait
        in: query
        name: timeout
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Optional filter for unread only
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Wait for and return count number of emails. Hold connection until inbox
        count matches expected or timeout occurs
      tags:
      - WaitFor Controller
      x-accepts: application/json
  /waitForLatestEmail:
    get:
      deprecated: false
      description: Will return either the last received email or wait for an email
        to arrive and return that. If you need to wait for an email for a non-empty
        inbox set `unreadOnly=true` or see the other receive methods such as `waitForNthEmail`
        or `waitForEmailCount`.
      operationId: waitForLatestEmail
      parameters:
      - allowEmptyValue: false
        description: Id of the inbox we are fetching emails from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Max milliseconds to wait
        in: query
        name: timeout
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Optional filter for unread only.
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Fetch inbox's latest email or if empty wait for an email to arrive
      tags:
      - WaitFor Controller
      x-accepts: application/json
  /waitForMatchingEmails:
    post:
      deprecated: false
      description: 'Perform a search of emails in an inbox with the given patterns.
        If results match expected count then return or else retry the search until
        results are found or timeout is reached. Match options allow simple CONTAINS
        or EQUALS filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions`
        object for options. An example payload is `{ matches: [{field: ''SUBJECT'',should:''CONTAIN'',value:''needle''}]
        }`. You can use an array of matches and they will be applied sequentially
        to filter out emails. If you want to perform matches and extractions of content
        using Regex patterns see the EmailController `getEmailContentMatch` method.'
      operationId: waitForMatchingEmail
      parameters:
      - allowEmptyValue: false
        description: Number of emails to wait for. Must be greater that 1
        in: query
        name: count
        schema:
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Id of the inbox we are fetching emails from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Max milliseconds to wait
        in: query
        name: timeout
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Optional filter for unread only
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchOptions'
        description: matchOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EmailPreview'
                type: array
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Wait or return list of emails that match simple matching patterns
      tags:
      - WaitFor Controller
      x-codegen-request-body-name: matchOptions
      x-contentType: application/json
      x-accepts: application/json
  /waitForMatchingFirstEmail:
    post:
      deprecated: false
      description: 'Perform a search of emails in an inbox with the given patterns.
        If a result if found then return or else retry the search until a result is
        found or timeout is reached. Match options allow simple CONTAINS or EQUALS
        filtering on SUBJECT, TO, BCC, CC, and FROM. See the `MatchOptions` object
        for options. An example payload is `{ matches: [{field: ''SUBJECT'',should:''CONTAIN'',value:''needle''}]
        }`. You can use an array of matches and they will be applied sequentially
        to filter out emails. If you want to perform matches and extractions of content
        using Regex patterns see the EmailController `getEmailContentMatch` method.'
      operationId: waitForMatchingFirstEmail
      parameters:
      - allowEmptyValue: false
        description: Id of the inbox we are matching an email for
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Max milliseconds to wait
        in: query
        name: timeout
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Optional filter for unread only
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MatchOptions'
        description: matchOptions
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
        "201":
          content: {}
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Wait for or return the first email that matches provided MatchOptions
        array
      tags:
      - WaitFor Controller
      x-codegen-request-body-name: matchOptions
      x-contentType: application/json
      x-accepts: application/json
  /waitForNthEmail:
    get:
      deprecated: false
      description: If nth email is already present in inbox then return it. If not
        hold the connection open until timeout expires or the nth email is received
        and returned.
      operationId: waitForNthEmail
      parameters:
      - allowEmptyValue: false
        description: Id of the inbox you are fetching emails from
        in: query
        name: inboxId
        schema:
          format: uuid
          type: string
      - allowEmptyValue: false
        description: Zero based index of the email to wait for. If an inbox has 1
          email already and you want to wait for the 2nd email pass index=1
        in: query
        name: index
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Max milliseconds to wait for the nth email if not already present
        in: query
        name: timeout
        schema:
          format: int64
          type: integer
      - allowEmptyValue: false
        description: Optional filter for unread only
        in: query
        name: unreadOnly
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Email'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Wait for or fetch the email with a given index in the inbox specified.
        If index doesn't exist waits for it to exist or timeout to occur.
      tags:
      - WaitFor Controller
      x-accepts: application/json
  /webhooks/paginated:
    get:
      deprecated: false
      description: List webhooks in paginated form. Allows for page index, page size,
        and sort direction.
      operationId: getAllWebhooks
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebhookProjection'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: List Webhooks Paginated
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/results:
    get:
      deprecated: false
      operationId: getAllWebhookResults
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebhookResult'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get results for all webhooks
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/results/{webhookResultId}:
    get:
      deprecated: false
      operationId: getWebhookResult
      parameters:
      - description: Webhook Result ID
        in: path
        name: webhookResultId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookResultEntity'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get a webhook result for a webhook
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/test:
    get:
      deprecated: false
      operationId: getTestWebhookPayload
      parameters:
      - description: eventName
        in: query
        name: eventName
        schema:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AbstractWebhookPayload'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get test webhook payload example. Response content depends on eventName
        passed. Uses `EMAIL_RECEIVED` as default.
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/test/email-opened-payload:
    get:
      deprecated: false
      operationId: getTestWebhookPayloadEmailOpened
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookEmailOpenedPayload'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get webhook test payload for email opened event
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/test/new-attachment-payload:
    get:
      deprecated: false
      operationId: getTestWebhookPayloadNewAttachment
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookNewAttachmentPayload'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get webhook test payload for new attachment event
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/test/new-contact-payload:
    get:
      deprecated: false
      operationId: getTestWebhookPayloadNewContact
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookNewContactPayload'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get webhook test payload for new contact event
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/test/new-email-payload:
    get:
      deprecated: false
      operationId: getTestWebhookPayloadNewEmail
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookNewEmailPayload'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get webhook test payload for new email event
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/{webhookId}:
    get:
      deprecated: false
      operationId: getWebhook
      parameters:
      - description: webhookId
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookDto'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get a webhook for an Inbox
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/{webhookId}/results:
    get:
      deprecated: false
      operationId: getWebhookResults
      parameters:
      - allowEmptyValue: false
        description: Optional page index in list pagination
        in: query
        name: page
        schema:
          default: 0
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional search filter
        in: query
        name: searchFilter
        schema:
          type: string
      - allowEmptyValue: false
        description: Optional page size in list pagination
        in: query
        name: size
        schema:
          default: 20
          format: int32
          type: integer
      - allowEmptyValue: false
        description: Optional createdAt sort direction ASC or DESC
        in: query
        name: sort
        schema:
          default: ASC
          enum:
          - ASC
          - DESC
          type: string
      - description: ID of webhook to get results for
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageWebhookResult'
          description: OK
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Get a webhook results for a webhook
      tags:
      - Webhook Controller
      x-accepts: application/json
  /webhooks/{webhookId}/test:
    post:
      deprecated: false
      operationId: sendTestData
      parameters:
      - description: webhookId
        in: path
        name: webhookId
        required: true
        schema:
          format: uuid
          type: string
      responses:
        "201":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebhookTestResult'
          description: Created
        "401":
          content: {}
          description: Unauthorized
        "403":
          content: {}
          description: Forbidden
        "404":
          content: {}
          description: Not Found
      security:
      - API_KEY: []
      summary: Send webhook test data
      tags:
      - Webhook Controller
      x-accepts: application/json
components:
  schemas:
    AbstractWebhookPayload:
      description: Abstract webhook payload. Use the correct payload type for your
        webhook event type in order to access all the specific properties for that
        event. See the `NEW_EMAIL`,`NEW_CONTACT`, `NEW_ATTACHMENT` and `EMAIL_OPENED`
        payloads for the properties available for those events.
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        eventName: EMAIL_RECEIVED
        messageId: messageId
        webhookName: webhookName
      properties:
        eventName:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        messageId:
          type: string
        webhookId:
          format: uuid
          type: string
        webhookName:
          type: string
      required:
      - eventName
      - messageId
      - webhookId
      title: AbstractWebhookPayload
      type: object
    Alias:
      properties:
        createdAt:
          format: date-time
          type: string
        emailAddress:
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        useThreads:
          type: boolean
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - emailAddress
      - inboxId
      - updatedAt
      - userId
      title: Alias
      type: object
    AliasDto:
      description: Email alias representation
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        isVerified: true
        maskedEmailAddress: maskedEmailAddress
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        useThreads: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        emailAddress:
          description: The alias's email address for receiving email
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          description: Inbox that is associated with the alias
          format: uuid
          type: string
        isVerified:
          description: Has the alias been verified. You must verify an alias if the
            masked email address has not yet been verified by your account
          type: boolean
        maskedEmailAddress:
          description: The underlying email address that is hidden and will received
            forwarded email
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        useThreads:
          description: If alias will generate response threads or not when email are
            received by it
          type: boolean
        userId:
          format: uuid
          type: string
      required:
      - id
      - userId
      title: AliasDto
      type: object
    AliasProjection:
      description: Representation of a alias
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        useThreads: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        emailAddress:
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        useThreads:
          type: boolean
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - emailAddress
      - id
      - inboxId
      - updatedAt
      - userId
      title: AliasProjection
      type: object
    AttachmentMetaData:
      description: Meta data associated with an attachment. Attachments are stored
        as byte blobs so the meta data is stored separately.
      example:
        name: name
        contentLength: 0
        id: id
        contentType: contentType
      properties:
        contentLength:
          description: Size of attachment in bytes
          format: int64
          type: integer
        contentType:
          description: Content type of attachment such as `image/png`
          type: string
        id:
          description: ID of attachment
          type: string
        name:
          description: Name of attachment if given
          type: string
      title: AttachmentMetaData
      type: object
    AttachmentProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        contentLength: 0
        attachmentId: attachmentId
        contentType: image/png
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        attachmentId:
          description: Attachment ID
          type: string
        contentLength:
          description: Content length of attachment in bytes
          format: int64
          type: integer
        contentType:
          description: Content type of attachment.
          example: image/png
          type: string
        createdAt:
          format: date-time
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - updatedAt
      - userId
      title: AttachmentProjection
      type: object
    BasicAuthOptions:
      description: Basic Authentication options for webhooks. Will be used is present
        when calling webhook endpoints.
      example:
        password: password
        username: username
      properties:
        username:
          type: string
        password:
          type: string
      required:
      - password
      - username
      title: BasicAuthOptions
      type: object
    Bounce:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        bounceRecipients:
        - bounceRecipients
        - bounceRecipients
        bounceType: bounceType
        sender: sender
        bounceMta: bounceMta
        bounceSubType: bounceSubType
        sentToRecipients:
        - sentToRecipients
        - sentToRecipients
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        notificationType: notificationType
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        bounceMta:
          type: string
        bounceRecipients:
          items:
            type: string
          type: array
        bounceSubType:
          type: string
        bounceType:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        notificationType:
          type: string
        sender:
          type: string
        sentToRecipients:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - notificationType
      - sender
      - updatedAt
      - userId
      title: Bounce
      type: object
    BounceProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        sender: sender
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        sender:
          type: string
      required:
      - createdAt
      - sender
      title: BounceProjection
      type: object
    BounceRecipient:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        recipient: recipient
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        recipient:
          type: string
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - recipient
      - updatedAt
      - userId
      title: BounceRecipient
      type: object
    BulkSendEmailOptions:
      description: Options for bulk sending an email from multiple addresses. See
        regular `sendEmail` methods for more information.
      example:
        inboxIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sendEmailOptions:
          cc:
          - cc
          - cc
          sendStrategy: SINGLE_MESSAGE
          template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          charset: charset
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          subject: subject
          addTrackingPixel: true
          body: body
          templateVariables: '{}'
          useInboxName: true
          toContacts:
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          isHTML: true
          replyTo: replyTo
          from: from
          html: true
          to:
          - to
          - to
          toGroup: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        inboxIds:
          description: Inboxes to send the email from
          items:
            format: uuid
            type: string
          type: array
        sendEmailOptions:
          $ref: '#/components/schemas/SendEmailOptions'
      title: BulkSendEmailOptions
      type: object
    Character:
      title: Character
      type: object
    ConditionOption:
      description: Options for matching emails in an inbox based on a condition such
        as `HAS_ATTACHMENTS=TRUE`
      example:
        condition: HAS_ATTACHMENTS
        value: "TRUE"
      properties:
        condition:
          description: The condition to evaluate against the email
          enum:
          - HAS_ATTACHMENTS
          type: string
        value:
          description: What the condition should evaluate to. A string 'TRUE|FALSE'
            not a boolean.
          enum:
          - "TRUE"
          - "FALSE"
          type: string
      title: ConditionOption
      type: object
    ContactDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        firstName: firstName
        lastName: lastName
        metaData: '{}'
        optOut: true
        emailAddresses:
        - emailAddresses
        - emailAddresses
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        company: company
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        primaryEmailAddress: primaryEmailAddress
        tags:
        - tags
        - tags
      properties:
        company:
          type: string
        createdAt:
          format: date-time
          type: string
        emailAddresses:
          items:
            type: string
          type: array
        firstName:
          type: string
        groupId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        lastName:
          type: string
        metaData:
          title: JsonNode
          type: object
        optOut:
          type: boolean
        primaryEmailAddress:
          type: string
        tags:
          items:
            type: string
          type: array
      required:
      - createdAt
      - emailAddresses
      - id
      - tags
      title: ContactDto
      type: object
    ContactProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        firstName: firstName
        lastName: lastName
        optOut: true
        emailAddresses:
        - emailAddresses
        - emailAddresses
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        company: company
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        company:
          type: string
        createdAt:
          format: date-time
          type: string
        emailAddresses:
          items:
            type: string
          type: array
        firstName:
          type: string
        groupId:
          format: uuid
          type: string
        id:
          format: uuid
          type: string
        lastName:
          type: string
        optOut:
          type: boolean
      required:
      - createdAt
      - id
      title: ContactProjection
      type: object
    ContentMatchOptions:
      description: Options for matching content using regex patterns based on Java
        Pattern syntax
      example:
        pattern: pattern
      properties:
        pattern:
          description: 'Java style regex pattern. Do not include the typical `/` at
            start or end of regex in some languages. Given an example `your code is:
            12345` the pattern to extract match looks like `code is: (\d{6})`. This
            will return an array of matches with the first matching the entire pattern
            and the subsequent matching the groups: `[''code is: 123456'', ''123456'']`
            See https://docs.oracle.com/javase/8/docs/api/java/util/regex/Pattern.html
            for more information of available patterns.'
          type: string
      title: ContentMatchOptions
      type: object
    CreateAliasOptions:
      description: Create email alias options. Email aliases can be used to mask real
        email addresses behind an ID. You can also attach an inbox to an alias so
        that any email received by the inbox email address if forwarded to the alias
        email address.
      example:
        emailAddress: emailAddress
        name: name
        useThreads: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        emailAddress:
          description: Email address to be hidden behind alias. Emails sent to the
            alias email address will be forwarded to this address. If you want to
            enable replies set useThreads true and the reply-to for the email will
            allow outbound communication via a thread.
          type: string
        inboxId:
          description: Optional inbox ID to attach to alias. Null by default means
            an a new inbox will be created for the alias. Use a custom inbox to control
            what email address the alias uses. To use custom email addresses create
            a domain and an inbox, the use the inbox ID with this call. Emails received
            by this inbox will be forwarded to the alias email address
          format: uuid
          type: string
        name:
          description: Optional name for alias
          type: string
        useThreads:
          description: Enable threads options. If true emails will be sent with a
            unique reply-to thread address. This means you can reply to the forwarded
            email and it will be sent to the recipients via your alias address. That
            way a thread conversation is preserved.
          type: boolean
      title: CreateAliasOptions
      type: object
    CreateContactOptions:
      example:
        firstName: firstName
        metaData: '{}'
        optOut: true
        lastName: lastName
        emailAddresses:
        - emailAddresses
        - emailAddresses
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        company: company
        tags:
        - tags
        - tags
      properties:
        emailAddresses:
          description: Set of email addresses belonging to the contact
          items:
            type: string
          type: array
        firstName:
          type: string
        groupId:
          description: Group IDs that contact belongs to
          format: uuid
          type: string
        metaData:
          title: JsonNode
          type: object
        optOut:
          description: Has the user explicitly or implicitly opted out of being contacted?
            If so MailSlurp will ignore them in all actions.
          type: boolean
        tags:
          description: Tags that can be used to search and group contacts
          items:
            type: string
          type: array
        lastName:
          type: string
        company:
          type: string
      title: CreateContactOptions
      type: object
    CreateDomainOptions:
      description: Options for creating a domain to use with MailSlurp. You must have
        ownership access to this domain in order to verify it. Domains will not function
        correctly until the domain has been verified. See https://www.mailslurp.com/guides/custom-domains
        for help. Domains can be either `HTTP` or `SMTP` type. The type of domain
        determines which inboxes can be used with it. `SMTP` inboxes use a mail server
        running `mx.mailslurp.com` while `HTTP` inboxes are handled by AWS SES.
      example:
        createdCatchAllInbox: true
        domainType: HTTP_INBOX
        domain: domain
        description: description
      properties:
        createdCatchAllInbox:
          description: Whether to create a catch all inbox for the domain. Any email
            sent to an address using your domain that cannot be matched to an existing
            inbox you created with the domain will be routed to the created catch
            all inbox. You can access emails using the regular methods on this inbox
            ID.
          type: boolean
        description:
          description: Optional description of the domain.
          type: string
        domain:
          description: The top level domain you wish to use with MailSlurp. Do not
            specify subdomain just the top level. So `test.com` covers all subdomains
            such as `mail.test.com`. Don't include a protocol such as `http://`. Once
            added you must complete the verification steps by adding the returned
            records to your domain.
          type: string
        domainType:
          description: Domain type to create. HTTP or SMTP domain. HTTP domain uses
            MailSlurps SES MX records. SMTP uses a custom SMTP server MX record. SMTP
            domains can only be used with SMTP inboxes. SMTP inboxes are more reliable
            for public inbound emails while HTTP inboxes are more suitable for testing.
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          type: string
      title: CreateDomainOptions
      type: object
    CreateGroupOptions:
      example:
        name: name
        description: description
      properties:
        name:
          type: string
        description:
          type: string
      required:
      - name
      title: CreateGroupOptions
      type: object
    CreateInboxDto:
      description: 'Options for creating an inbox. An inbox has a real email address
        that can send and receive emails. Inboxes can be permanent or expire at a
        given time. Inboxes are either `SMTP` or `HTTP` mailboxes. Use `SMTP` for
        public facing mailboxes and `HTTP` for test email accounts. `SMTP` inboxes
        are processed by a mail server running at `mx.mailslurp.com` while `HTTP`
        inboxes are processed by AWS SES. Inboxes can use a custom email address (by
        verifying your own domain) or a randomly assigned email ending in either `mailslurp.com`
        or (if `useDomainPool` is enabled) ending in a similar domain such as `mailslurp.xyz`
        (selected at random). '
      example:
        expiresIn: 0
        emailAddress: emailAddress
        inboxType: HTTP_INBOX
        useDomainPool: true
        allowTeamAccess: true
        name: name
        description: description
        favourite: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
      properties:
        allowTeamAccess:
          description: Grant team access to this inbox and the emails that belong
            to it for team members of your organization.
          type: boolean
        description:
          description: Optional description of the inbox for labelling purposes. Is
            shown in the dashboard and can be used with
          type: string
        emailAddress:
          description: A custom email address to use with the inbox. Defaults to null.
            When null MailSlurp will assign a random email address to the inbox such
            as `123@mailslurp.com`. If you use the `useDomainPool` option when the
            email address is null it will generate an email address with a more varied
            domain ending such as `123@mailslurp.info` or `123@mailslurp.biz`. When
            a custom email address is provided the address is split into a domain
            and the domain is queried against your user. If you have created the domain
            in the MailSlurp dashboard and verified it you can use any email address
            that ends with the domain. Note domain types must match the inbox type
            - so `SMTP` inboxes will only work with `SMTP` type domains. Send an email
            to this address and the inbox will receive and store it for you. To retrieve
            the email use the Inbox and Email Controller endpoints with the inbox
            ID.
          type: string
        expiresAt:
          description: Optional inbox expiration date. If null then this inbox is
            permanent and the emails in it won't be deleted. If an expiration date
            is provided or is required by your plan the inbox will be closed when
            the expiration time is reached. Expired inboxes still contain their emails
            but can no longer send or receive emails. An ExpiredInboxRecord is created
            when an inbox and the email address and inbox ID are recorded. The expiresAt
            property is a timestamp string in ISO DateTime Format yyyy-MM-dd'T'HH:mm:ss.SSSXXX.
          format: date-time
          type: string
        expiresIn:
          description: Number of milliseconds that inbox should exist for
          format: int64
          type: integer
        favourite:
          description: Is the inbox a favorite. Marking an inbox as a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        inboxType:
          description: HTTP (default) or SMTP inbox type. HTTP inboxes are best for
            testing while SMTP inboxes are more reliable for public inbound email
            consumption. When using custom domains the domain type must match the
            inbox type. HTTP inboxes are processed by AWS SES while SMTP inboxes use
            a custom mail server running at `mx.mailslurp.com`.
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        name:
          description: Optional name of the inbox. Displayed in the dashboard for
            easier search and used as the sender name when sending emails.
          type: string
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            type: string
          type: array
        useDomainPool:
          description: Use the MailSlurp domain name pool with this inbox when creating
            the email address. Defaults to null. If enabled the inbox will be an email
            address with a domain randomly chosen from a list of the MailSlurp domains.
            This is useful when the default `@mailslurp.com` email addresses used
            with inboxes are blocked or considered spam by a provider or receiving
            service. When domain pool is enabled an email address will be generated
            ending in `@mailslurp.{world,info,xyz,...}` . This means a TLD is randomly
            selecting from a list of `.biz`, `.info`, `.xyz` etc to add variance to
            the generated email addresses. When null or false MailSlurp uses the default
            behavior of `@mailslurp.com` or custom email address provided by the emailAddress
            field. Note this feature is only available for `HTTP` inbox types.
          type: boolean
      title: CreateInboxDto
      type: object
    CreateInboxForwarderOptions:
      example:
        field: RECIPIENTS
        forwardToRecipients:
        - forwardToRecipients
        - forwardToRecipients
        match: match
      properties:
        field:
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        match:
          type: string
        forwardToRecipients:
          items:
            type: string
          type: array
      required:
      - field
      - forwardToRecipients
      - match
      title: CreateInboxForwarderOptions
      type: object
    CreateInboxRulesetOptions:
      description: Options for creating inbox rulesets. Inbox rulesets can be used
        to block, allow, filter, or forward emails when sending or receiving using
        the inbox.
      example:
        scope: RECEIVING_EMAILS
        action: BLOCK
        target: target
      properties:
        action:
          description: 'Action to be taken when the ruleset matches an email for the
            given scope. For example: `BLOCK` action with target `*` and scope `SENDING_EMAILS`
            blocks sending to all recipients. Note `ALLOW` takes precedent over `BLOCK`.
            `FILTER_REMOVE` is like block but will remove offending email addresses
            during a send or receive event instead of blocking the action.'
          enum:
          - BLOCK
          - ALLOW
          - FILTER_REMOVE
          type: string
        scope:
          description: What type of emails actions to apply ruleset to. Either `SENDING_EMAILS`
            or `RECEIVING_EMAILS` will apply action and target to any sending or receiving
            of emails respectively.
          enum:
          - RECEIVING_EMAILS
          - SENDING_EMAILS
          type: string
        target:
          description: Target to match emails with. Can be a wild-card type pattern
            or a valid email address. For instance `*@gmail.com` matches all gmail
            addresses while `test@gmail.com` matches one address exactly. The target
            is applied to every recipient field email address when `SENDING_EMAILS`
            is the scope and is applied to sender of email when `RECEIVING_EMAILS`.
          type: string
      title: CreateInboxRulesetOptions
      type: object
    CreateTemplateOptions:
      example:
        name: name
        content: content
      properties:
        name:
          type: string
        content:
          type: string
      required:
      - content
      - name
      title: CreateTemplateOptions
      type: object
    CreateTrackingPixelOptions:
      example:
        name: name
        recipient: recipient
      properties:
        name:
          type: string
        recipient:
          type: string
      title: CreateTrackingPixelOptions
      type: object
    CreateWebhookOptions:
      description: Options for creating a webhook. Webhooks can be attached to inboxes
        and MailSlurp will POST a webhook payload to the URL specified whenever the
        inbox receives an email. Webhooks are great for processing many inbound emails.
      example:
        basicAuth:
          password: password
          username: username
        name: name
        eventName: EMAIL_RECEIVED
        url: url
      properties:
        basicAuth:
          $ref: '#/components/schemas/BasicAuthOptions'
        eventName:
          description: Optional webhook event name. Default is `EMAIL_RECEIVED` and
            is triggered when an email is received by the inbox associated with the
            webhook. Payload differ according to the webhook event name. The other
            events are `NEW_EMAIL`, `NEW_CONTACT`, and `NEW_ATTACHMENT` and `EMAIL_OPENED`.
            `EMAIL_OPENED` requires the use of tracking pixels when sending. See the
            email tracking guide for more information.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        name:
          description: Optional name for the webhook
          type: string
        url:
          description: Public URL on your server that MailSlurp can post WebhookNotification
            payload to when an email is received or an event is trigger. The payload
            of the submitted JSON is dependent on the webhook event type. The default
            `EMAIL_RECEIVED` payload is described by `https://api.mailslurp.com/schemas/webhook-payload`.
            The other events, `NEW_EMAIL`, `NEW_CONTACT`, and `NEW_ATTACHMENT` are
            described by `https://api.mailslurp.com/schemas/webhook-new-email-payload`,
            `https://api.mailslurp.com/schemas/webhook-new-contact-payload`,`https://api.mailslurp.com/schemas/webhook-new-attachment-payload`
            respectively.
          type: string
      title: CreateWebhookOptions
      type: object
    DNSLookupOptions:
      description: 'Options for DNS query. '
      example:
        omitFinalDNSDot: true
        hostname: hostname
        recordTypes:
        - A
        - A
      properties:
        hostname:
          description: List of record types you wish to query such as MX, DNS, TXT,
            NS, A etc.
          type: string
        omitFinalDNSDot:
          description: Optionally control whether to omit the final dot in full DNS
            name values.
          type: boolean
        recordTypes:
          description: List of record types you wish to query such as MX, DNS, TXT,
            NS, A etc.
          items:
            enum:
            - A
            - NS
            - MD
            - MF
            - CNAME
            - SOA
            - MB
            - MG
            - MR
            - "NULL"
            - WKS
            - PTR
            - HINFO
            - MINFO
            - MX
            - TXT
            - RP
            - AFSDB
            - X25
            - ISDN
            - RT
            - NSAP
            - NSAP_PTR
            - SIG
            - KEY
            - PX
            - GPOS
            - AAAA
            - LOC
            - NXT
            - EID
            - NIMLOC
            - SRV
            - ATMA
            - NAPTR
            - KX
            - CERT
            - A6
            - DNAME
            - SINK
            - OPT
            - APL
            - DS
            - SSHFP
            - IPSECKEY
            - RRSIG
            - NSEC
            - DNSKEY
            - DHCID
            - NSEC3
            - NSEC3PARAM
            - TLSA
            - SMIMEA
            - HIP
            - NINFO
            - RKEY
            - TALINK
            - CDS
            - CDNSKEY
            - OPENPGPKEY
            - CSYNC
            - ZONEMD
            - SVCB
            - HTTPS
            - SPF
            - UINFO
            - UID
            - GID
            - UNSPEC
            - NID
            - L32
            - L64
            - LP
            - EUI48
            - EUI64
            - TKEY
            - TSIG
            - IXFR
            - AXFR
            - MAILB
            - MAILA
            - ANY
            - URI
            - CAA
            - AVC
            - DOA
            - AMTRELAY
            - TA
            - DLV
            type: string
          type: array
      title: DNSLookupOptions
      type: object
    DNSLookupResult:
      description: DNS lookup result. Includes record type, time to live, raw response,
        and name value for the name server response.
      example:
        recordType: A
        name: name
        recordEntries:
        - recordEntries
        - recordEntries
        ttl: 0
      properties:
        name:
          type: string
        recordEntries:
          items:
            type: string
          type: array
        recordType:
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int64
          type: integer
      required:
      - name
      - recordEntries
      - recordType
      - ttl
      title: DNSLookupResult
      type: object
    DNSLookupResults:
      description: Results of query on domain name servers
      example:
        results:
        - recordType: A
          name: name
          recordEntries:
          - recordEntries
          - recordEntries
          ttl: 0
        - recordType: A
          name: name
          recordEntries:
          - recordEntries
          - recordEntries
          ttl: 0
      properties:
        results:
          items:
            $ref: '#/components/schemas/DNSLookupResult'
          type: array
      required:
      - results
      title: DNSLookupResults
      type: object
    DescribeDomainOptions:
      example:
        domain: domain
      properties:
        domain:
          type: string
      required:
      - domain
      title: DescribeDomainOptions
      type: object
    DescribeMailServerDomainResult:
      description: Name Server lookup result
      example:
        domain: domain
        mxRecords:
        - recordType: recordType
          raw: raw
          priority: priority
          value: value
        - recordType: recordType
          raw: raw
          priority: priority
          value: value
        message: message
      properties:
        domain:
          type: string
        message:
          type: string
        mxRecords:
          items:
            $ref: '#/components/schemas/NameServerRecord'
          type: array
      required:
      - domain
      - mxRecords
      title: DescribeMailServerDomainResult
      type: object
    DomainDto:
      description: Domain plus verification records and status
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        domainType: HTTP_INBOX
        isVerified: true
        dkimTokens:
        - dkimTokens
        - dkimTokens
        domain: domain
        verificationToken: verificationToken
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        catchAllInboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        domainNameRecords:
        - recordType: A
          name: name
          recordEntries:
          - recordEntries
          - recordEntries
          ttl: 0
        - recordType: A
          name: name
          recordEntries:
          - recordEntries
          - recordEntries
          ttl: 0
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        catchAllInboxId:
          description: The optional catch all inbox that will receive emails sent
            to the domain that cannot be matched.
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        dkimTokens:
          description: Unique token DKIM tokens
          items:
            type: string
          type: array
        domain:
          description: Custom domain name
          type: string
        domainNameRecords:
          description: List of DNS domain name records (C, MX, TXT) etc that you must
            add to the DNS server associated with your domain provider.
          items:
            $ref: '#/components/schemas/DomainNameRecord'
          type: array
        domainType:
          description: The type of domain. SMTP or HTTP domains differ in what inboxes
            can be used with them.
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          type: string
        id:
          format: uuid
          type: string
        isVerified:
          description: Whether domain has been verified or not. If the domain is not
            verified after 72 hours there is most likely an issue with the domains
            DNS records.
          type: boolean
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
        verificationToken:
          description: Verification tokens
          type: string
      required:
      - createdAt
      - id
      - updatedAt
      - userId
      title: DomainDto
      type: object
    DomainNameRecord:
      description: DNS Record required for verification of a domain. Record vary depending
        on domain type.
      example:
        recordType: A
        name: name
        recordEntries:
        - recordEntries
        - recordEntries
        ttl: 0
      properties:
        name:
          type: string
        recordEntries:
          items:
            type: string
          type: array
        recordType:
          enum:
          - A
          - NS
          - MD
          - MF
          - CNAME
          - SOA
          - MB
          - MG
          - MR
          - "NULL"
          - WKS
          - PTR
          - HINFO
          - MINFO
          - MX
          - TXT
          - RP
          - AFSDB
          - X25
          - ISDN
          - RT
          - NSAP
          - NSAP_PTR
          - SIG
          - KEY
          - PX
          - GPOS
          - AAAA
          - LOC
          - NXT
          - EID
          - NIMLOC
          - SRV
          - ATMA
          - NAPTR
          - KX
          - CERT
          - A6
          - DNAME
          - SINK
          - OPT
          - APL
          - DS
          - SSHFP
          - IPSECKEY
          - RRSIG
          - NSEC
          - DNSKEY
          - DHCID
          - NSEC3
          - NSEC3PARAM
          - TLSA
          - SMIMEA
          - HIP
          - NINFO
          - RKEY
          - TALINK
          - CDS
          - CDNSKEY
          - OPENPGPKEY
          - CSYNC
          - ZONEMD
          - SVCB
          - HTTPS
          - SPF
          - UINFO
          - UID
          - GID
          - UNSPEC
          - NID
          - L32
          - L64
          - LP
          - EUI48
          - EUI64
          - TKEY
          - TSIG
          - IXFR
          - AXFR
          - MAILB
          - MAILA
          - ANY
          - URI
          - CAA
          - AVC
          - DOA
          - AMTRELAY
          - TA
          - DLV
          type: string
        ttl:
          format: int64
          type: integer
      required:
      - name
      - recordEntries
      - recordType
      - ttl
      title: DomainNameRecord
      type: object
    DomainPreview:
      description: Preview object for domain entity
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        domainType: HTTP_INBOX
        isVerified: true
        domain: domain
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        catchAllInboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        catchAllInboxId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        domain:
          type: string
        domainType:
          enum:
          - HTTP_INBOX
          - SMTP_DOMAIN
          type: string
        id:
          format: uuid
          type: string
        isVerified:
          type: boolean
      required:
      - createdAt
      - domain
      - domainType
      - id
      - isVerified
      title: DomainPreview
      type: object
    DownloadAttachmentDto:
      description: Content of attachment
      example:
        base64FileContents: base64FileContents
        contentType: contentType
        sizeBytes: 0
      properties:
        base64FileContents:
          description: Base64 encoded string of attachment bytes. Decode the base64
            encoded string to get the raw contents. If the file has a content type
            such as `text/html` you can read the contents directly by converting it
            to string using `utf-8` encoding.
          type: string
        contentType:
          description: Content type of attachment. Examples are `image/png`, `application/msword`,
            `text/csv` etc.
          type: string
        sizeBytes:
          description: Size in bytes of attachment content
          format: int64
          type: integer
      title: DownloadAttachmentDto
      type: object
    Email:
      description: Email entity (also known as EmailDto). When an SMTP email message
        is received by MailSlurp it is parsed. The body and attachments are written
        to disk and the fields such as to, from, subject etc are stored in a database.
        The `body` contains the email content. If you want the original SMTP message
        see the `getRawEmail` endpoints. The attachments can be fetched using the
        AttachmentController
      example:
        cc:
        - cc
        - cc
        charset: charset
        headers:
          key: headers
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        read: true
        subject: subject
        analysis:
          spamVerdict: spamVerdict
          virusVerdict: virusVerdict
          dmarcVerdict: dmarcVerdict
          spfVerdict: spfVerdict
          dkimVerdict: dkimVerdict
        body: body
        teamAccess: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
        createdAt: 2000-01-23T04:56:07.000+00:00
        isHTML: true
        replyTo: replyTo
        from: from
        bodyExcerpt: bodyExcerpt
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        analysis:
          $ref: '#/components/schemas/EmailAnalysis'
        attachments:
          description: List of IDs of attachments found in the email. Use these IDs
            with the Inbox and Email Controllers to download attachments and attachment
            meta data such as filesize, name, extension.
          items:
            type: string
          type: array
        bcc:
          description: List of `BCC` recipients email was addressed to
          items:
            type: string
          type: array
        body:
          description: The body of the email message
          type: string
        bodyExcerpt:
          description: An excerpt of the body of the email message
          type: string
        bodyMD5Hash:
          description: A hash signature of the email message
          type: string
        cc:
          description: List of `CC` recipients email was addressed to
          items:
            type: string
          type: array
        charset:
          description: Detected character set of the email body such as UTF-8
          type: string
        createdAt:
          description: When was the email received by MailSlurp
          format: date-time
          type: string
        from:
          description: Who the email was sent from
          type: string
        headers:
          additionalProperties:
            type: string
          description: Collection of SMTP headers attached to email
          type: object
        id:
          description: ID of the email entity
          format: uuid
          type: string
        inboxId:
          description: ID of the inbox that received the email
          format: uuid
          type: string
        isHTML:
          description: Is the email body HTML
          type: boolean
        read:
          description: Read flag. Has the email ever been viewed in the dashboard
            or fetched via the API? If so the email is marked as read.
          type: boolean
        replyTo:
          description: The `replyTo` field on the received email message
          type: string
        subject:
          description: The subject line of the email message
          type: string
        teamAccess:
          description: Can the email be accessed by organization team members
          type: boolean
        to:
          description: List of `To` recipients that email was addressed to
          items:
            type: string
          type: array
        updatedAt:
          description: When was the email last updated
          format: date-time
          type: string
        userId:
          description: ID of user that email belongs to
          format: uuid
          type: string
      title: Email
      type: object
    EmailAnalysis:
      description: Analysis result for email. Each verdict property is a string PASS|FAIL|GRAY
        or dynamic error message
      example:
        spamVerdict: spamVerdict
        virusVerdict: virusVerdict
        dmarcVerdict: dmarcVerdict
        spfVerdict: spfVerdict
        dkimVerdict: dkimVerdict
      properties:
        dkimVerdict:
          description: Verdict of DomainKeys Identified Mail analysis
          type: string
        dmarcVerdict:
          description: Verdict of Domain-based Message Authentication Reporting and
            Conformance analysis
          type: string
        spamVerdict:
          description: Verdict of spam ranking analysis
          type: string
        spfVerdict:
          description: Verdict of Send Policy Framework record spoofing analysis
          type: string
        virusVerdict:
          description: Verdict of virus scan analysis
          type: string
      title: EmailAnalysis
      type: object
    EmailContentMatchResult:
      description: Matches for the given pattern
      example:
        pattern: pattern
        matches:
        - matches
        - matches
      properties:
        matches:
          items:
            type: string
          type: array
        pattern:
          type: string
      required:
      - matches
      - pattern
      title: EmailContentMatchResult
      type: object
    EmailPreview:
      description: Preview of an email message. For full message (including body and
        attachments) call the `getEmail` or other email endpoints with the provided
        email ID.
      example:
        cc:
        - cc
        - cc
        createdAt: 2000-01-23T04:56:07.000+00:00
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        read: true
        subject: subject
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
      properties:
        attachments:
          description: List of IDs of attachments found in the email. Use these IDs
            with the Inbox and Email Controllers to download attachments and attachment
            meta data such as filesize, name, extension.
          items:
            type: string
          type: array
        bcc:
          description: List of `BCC` recipients email was addressed to
          items:
            type: string
          type: array
        cc:
          description: List of `CC` recipients email was addressed to
          items:
            type: string
          type: array
        createdAt:
          description: When was the email received by MailSlurp
          format: date-time
          type: string
        from:
          description: Who the email was sent from
          type: string
        id:
          description: ID of the email entity
          format: uuid
          type: string
        read:
          description: Read flag. Has the email ever been viewed in the dashboard
            or fetched via the API? If so the email is marked as read.
          type: boolean
        subject:
          description: The subject line of the email message
          type: string
        to:
          description: List of `To` recipients that email was addressed to
          items:
            type: string
          type: array
      title: EmailPreview
      type: object
    EmailProjection:
      description: A compact representation of a full email. Used in list endpoints
        to keep response sizes low. Body and attachments are not included. To get
        all fields of the email use the `getEmail` method with the email projection's
        ID. See `EmailDto` for documentation on projection properties.
      example:
        cc:
        - cc
        - cc
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        read: true
        subject: subject
        teamAccess: true
        bodyMD5Hash: bodyMD5Hash
        createdAt: 2000-01-23T04:56:07.000+00:00
        from: from
        bodyExcerpt: bodyExcerpt
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        attachments:
          items:
            type: string
          type: array
        bcc:
          items:
            type: string
          type: array
        bodyExcerpt:
          type: string
        bodyMD5Hash:
          type: string
        cc:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        from:
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        read:
          type: boolean
        subject:
          type: string
        teamAccess:
          type: boolean
        to:
          items:
            type: string
          type: array
      required:
      - createdAt
      - id
      - inboxId
      - to
      title: EmailProjection
      type: object
    EmailTextLinesResult:
      description: Parsed text of an email
      example:
        body: body
        lines:
        - lines
        - lines
      properties:
        body:
          type: string
        lines:
          items:
            type: string
          type: array
      required:
      - body
      - lines
      title: EmailTextLinesResult
      type: object
    EmailVerificationResult:
      description: Email verification result. Valid means email address exists according
        to response from mail server running at the domian and port given.
      example:
        emailAddress: emailAddress
        port: 0
        domainName: domainName
        isValid: true
        error: error
      properties:
        domainName:
          type: string
        emailAddress:
          type: string
        error:
          type: string
        isValid:
          type: boolean
        port:
          format: int32
          type: integer
      required:
      - domainName
      - emailAddress
      - isValid
      - port
      title: EmailVerificationResult
      type: object
    ExpirationDefaults:
      description: Expiration defaults for your account
      example:
        defaultExpirationMillis: 0
        maxExpirationMillis: 6
        defaultExpiresAt: 2000-01-23T04:56:07.000+00:00
        canPermanentInbox: true
      properties:
        canPermanentInbox:
          type: boolean
        defaultExpirationMillis:
          format: int64
          type: integer
        defaultExpiresAt:
          format: date-time
          type: string
        maxExpirationMillis:
          format: int64
          type: integer
      required:
      - canPermanentInbox
      title: ExpirationDefaults
      type: object
    ExpiredInboxDto:
      description: Expired inbox
      example:
        emailAddress: emailAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        emailAddress:
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
      required:
      - emailAddress
      - id
      - inboxId
      title: ExpiredInboxDto
      type: object
    ExpiredInboxRecordProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        emailAddress:
          type: string
        id:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - emailAddress
      - id
      - userId
      title: ExpiredInboxRecordProjection
      type: object
    ExportLink:
      description: Export download link
      example:
        downloadLink: downloadLink
      properties:
        downloadLink:
          type: string
      required:
      - downloadLink
      title: ExportLink
      type: object
    ExportOptions:
      description: Options for exporting user data
      example:
        filter: filter
        createdOldestTime: 2000-01-23T04:56:07.000+00:00
        excludePreviouslyExported: true
        createdEarliestTime: 2000-01-23T04:56:07.000+00:00
        listSeparatorToken: '{}'
        outputFormat: CSV_DEFAULT
      properties:
        outputFormat:
          enum:
          - CSV_DEFAULT
          - CSV_EXCEL
          type: string
        excludePreviouslyExported:
          type: boolean
        createdEarliestTime:
          format: date-time
          type: string
        createdOldestTime:
          format: date-time
          type: string
        filter:
          type: string
        listSeparatorToken:
          title: Character
          type: object
      required:
      - outputFormat
      title: ExportOptions
      type: object
    ForwardEmailOptions:
      description: Options for forwarding an email
      example:
        cc:
        - cc
        - cc
        useInboxName: true
        bcc:
        - bcc
        - bcc
        subject: subject
        from: from
        to:
        - to
        - to
      properties:
        bcc:
          description: Optional bcc recipients
          items:
            type: string
          type: array
        cc:
          description: Optional cc recipients
          items:
            type: string
          type: array
        from:
          description: Optional from override
          type: string
        subject:
          description: Subject for forwarded email
          type: string
        to:
          description: To recipients for forwarded email
          items:
            type: string
          type: array
        useInboxName:
          description: Optionally use inbox name as display name for sender email
            address
          type: boolean
      title: ForwardEmailOptions
      type: object
    GroupContactsDto:
      example:
        contacts:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          firstName: firstName
          lastName: lastName
          metaData: '{}'
          optOut: true
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          primaryEmailAddress: primaryEmailAddress
          tags:
          - tags
          - tags
        - createdAt: 2000-01-23T04:56:07.000+00:00
          firstName: firstName
          lastName: lastName
          metaData: '{}'
          optOut: true
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          primaryEmailAddress: primaryEmailAddress
          tags:
          - tags
          - tags
        group:
          createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        contacts:
          items:
            $ref: '#/components/schemas/ContactDto'
          type: array
        group:
          $ref: '#/components/schemas/GroupDto'
      required:
      - contacts
      - group
      title: GroupContactsDto
      type: object
    GroupDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
      required:
      - createdAt
      - id
      - name
      title: GroupDto
      type: object
    GroupProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        description: description
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
      required:
      - createdAt
      - id
      - name
      title: GroupProjection
      type: object
    HTMLValidationResult:
      description: HTML Validation Results
      example:
        isValid: true
        warnings:
        - lineNumber: 0
          message: message
        - lineNumber: 0
          message: message
        errors:
        - lineNumber: 0
          message: message
        - lineNumber: 0
          message: message
      properties:
        errors:
          description: Optional errors resulting from HTML validation
          items:
            $ref: '#/components/schemas/ValidationMessage'
          type: array
        isValid:
          description: Is HTML validation result valid
          type: boolean
        warnings:
          description: Optional warnings resulting from HTML validation
          items:
            $ref: '#/components/schemas/ValidationMessage'
          type: array
      title: HTMLValidationResult
      type: object
    IPAddressResult:
      description: IP Address look up result for a given domain / hostname
      example:
        hostname: hostname
        address: address
      properties:
        address:
          type: string
        hostname:
          type: string
      required:
      - address
      - hostname
      title: IPAddressResult
      type: object
    Inbox:
      description: 'Representation of a MailSlurp inbox. An inbox has an ID and a
        real email address. Emails can be sent to or from this email address. Inboxes
        are either `SMTP` or `HTTP` mailboxes. The default, `HTTP` inboxes, use AWS
        SES to process emails and are best suited as test email accounts. `SMTP` inboxes
        use a custom mail server at `mx.mailslurp.com` and are best used for public
        facing email addresses. Use the `EmailController` or the `InboxController`
        methods to send and receive emails and attachments. Inboxes may have a description,
        name, and tags for display purposes. You can also favourite an inbox for easier
        searching. Inboxes can be private or allow team access. Team access enabled
        inboxes can be seen by other members of an organization. '
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        inboxType: HTTP_INBOX
        name: name
        description: description
        readOnly: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        favourite: true
        teamAccess: true
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        expiresAt: expiresAt
        tags:
        - tags
        - tags
      properties:
        createdAt:
          description: When the inbox was created. Time stamps are in ISO DateTime
            Format `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` e.g. `2000-10-31T01:30:00.000-05:00`.
          format: date-time
          type: string
        description:
          description: Description of an inbox for labelling and searching purposes
          type: string
        emailAddress:
          description: The inbox's email address. Inbox projections and previews may
            not include the email address. To view the email address fetch the inbox
            entity directly. Send an email to this address and the inbox will receive
            and store it for you. Note the email address in MailSlurp match characters
            exactly and are case sensitive so `+123` additions are considered different
            addresses. To retrieve the email use the Inbox and Email Controller endpoints
            with the inbox ID.
          type: string
        expiresAt:
          description: Inbox expiration time. When, if ever, the inbox should expire
            and be deleted. If null then this inbox is permanent and the emails in
            it won't be deleted. This is the default behavior unless expiration date
            is set. If an expiration date is set and the time is reached MailSlurp
            will expire the inbox and move it to an expired inbox entity. You can
            still access the emails belonging to it but it can no longer send or receive
            email.
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        id:
          description: ID of the inbox. The ID is a UUID-V4 format string. Use the
            inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress
            property for the email address or the inbox. To get emails in an inbox
            use the WaitFor and Inbox Controller methods `waitForLatestEmail` and
            `getEmails` methods respectively. Inboxes can be used with aliases to
            forward emails automatically.
          format: uuid
          type: string
        inboxType:
          description: Type of inbox - either HTTP (default) or SMTP. HTTP inboxes
            are great for testing. SMTP inboxes are processed by a custom SMTP mail
            server and are better for public facing inboxes that receive emails from
            Gmail and other large providers. If using a custom domain the domain type
            must match the inbox type. Use an SMTP domain for SMTP inboxes that includes
            an MX record pointing to `10 mx.mailslurp.com` for inbound messages.
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          type: string
        readOnly:
          description: Is the inbox readOnly for the caller. Read only means can not
            be deleted or modified. This flag is present when using team accounts
            and shared inboxes.
          type: boolean
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            type: string
          type: array
        teamAccess:
          description: Does inbox permit team access for organization team members.
            If so team users can use inbox and emails associated with it. See the
            team access guide at https://www.mailslurp.com/guides/team-email-account-sharing/
          type: boolean
        userId:
          description: ID of user that inbox belongs to
          format: uuid
          type: string
      title: Inbox
      type: object
    InboxForwarderDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        field: RECIPIENTS
        forwardToRecipients:
        - forwardToRecipients
        - forwardToRecipients
        match: match
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        field:
          enum:
          - RECIPIENTS
          - SENDER
          - SUBJECT
          - ATTACHMENTS
          type: string
        forwardToRecipients:
          items:
            type: string
          type: array
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        match:
          type: string
      required:
      - createdAt
      - field
      - forwardToRecipients
      - id
      - inboxId
      - match
      title: InboxForwarderDto
      type: object
    InboxForwarderTestOptions:
      example:
        testValue: testValue
      properties:
        testValue:
          type: string
      required:
      - testValue
      title: InboxForwarderTestOptions
      type: object
    InboxForwarderTestResult:
      example:
        doesMatch: true
        matches:
          key: true
      properties:
        doesMatch:
          type: boolean
        matches:
          additionalProperties:
            type: boolean
          type: object
      required:
      - doesMatch
      - matches
      title: InboxForwarderTestResult
      type: object
    InboxProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        inboxType: HTTP_INBOX
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        favourite: true
        teamAccess: true
        tags:
        - tags
        - tags
      properties:
        createdAt:
          format: date-time
          type: string
        emailAddress:
          type: string
        favourite:
          type: boolean
        id:
          format: uuid
          type: string
        inboxType:
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        name:
          type: string
        tags:
          items:
            type: string
          type: array
        teamAccess:
          type: boolean
      required:
      - createdAt
      - favourite
      - id
      - teamAccess
      title: InboxProjection
      type: object
    InboxRulesetDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        handler: EXCEPTION
        scope: RECEIVING_EMAILS
        action: BLOCK
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        target: target
      properties:
        action:
          enum:
          - BLOCK
          - ALLOW
          - FILTER_REMOVE
          type: string
        createdAt:
          format: date-time
          type: string
        handler:
          enum:
          - EXCEPTION
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        scope:
          enum:
          - RECEIVING_EMAILS
          - SENDING_EMAILS
          type: string
        target:
          type: string
      required:
      - action
      - createdAt
      - handler
      - id
      - inboxId
      - scope
      - target
      title: InboxRulesetDto
      type: object
    InboxRulesetTestOptions:
      example:
        testTarget: testTarget
      properties:
        testTarget:
          type: string
      required:
      - testTarget
      title: InboxRulesetTestOptions
      type: object
    InboxRulesetTestResult:
      example:
        rulesetMatches:
          key: true
        matches: true
      properties:
        matches:
          type: boolean
        rulesetMatches:
          additionalProperties:
            type: boolean
          description: Map of inbox ruleset ID to boolean of if target matches
          type: object
      required:
      - matches
      title: InboxRulesetTestResult
      type: object
    JsonNode:
      title: JsonNode
      type: object
    MatchOption:
      description: Options for matching emails in an inbox. Each match option object
        contains a `field`, `should` and `value` property. Together they form logical
        conditions such as `SUBJECT` should `CONTAIN` value.
      example:
        field: SUBJECT
        should: CONTAIN
        value: value
      properties:
        field:
          description: The email property to match on. One of SUBJECT, TO, BCC, CC
            or FROM
          enum:
          - SUBJECT
          - TO
          - BCC
          - CC
          - FROM
          type: string
        should:
          description: What criteria to apply. CONTAIN or EQUAL. Note CONTAIN is recommended
            due to some SMTP servers adding new lines to fields and body content.
          enum:
          - CONTAIN
          - EQUAL
          type: string
        value:
          description: The value you wish to compare with the value of the field specified
            using the `should` value passed. For example `BODY` should `CONTAIN` a
            value passed.
          type: string
      title: MatchOption
      type: object
    MatchOptions:
      description: 'Optional filter for matching emails based on fields. For instance
        filter results to only include emails whose `SUBJECT` value does `CONTAIN`
        given match value. An example payload would be `{ matches: [{ field: ''SUBJECT'',
        should: ''CONTAIN'', value: ''Welcome'' }] }`. You can also pass conditions
        such as `HAS_ATTACHMENT`. If you wish to extract regex matches inside the
        email content see the `getEmailContentMatch` method in the EmailController.'
      example:
        conditions:
        - condition: HAS_ATTACHMENTS
          value: "TRUE"
        - condition: HAS_ATTACHMENTS
          value: "TRUE"
        matches:
        - field: SUBJECT
          should: CONTAIN
          value: value
        - field: SUBJECT
          should: CONTAIN
          value: value
      properties:
        conditions:
          description: 'Zero or more conditions such as `{ condition: ''HAS_ATTACHMENTS'',
            value: ''TRUE'' }`. Note the values are the strings `TRUE|FALSE` not booleans.'
          items:
            $ref: '#/components/schemas/ConditionOption'
          type: array
        matches:
          description: 'Zero or more match options such as `{ field: ''SUBJECT'',
            should: ''CONTAIN'', value: ''Welcome'' }`. Options are additive so if
            one does not match the email is excluded from results'
          items:
            $ref: '#/components/schemas/MatchOption'
          type: array
      title: MatchOptions
      type: object
    MissedEmail:
      example:
        cc:
        - cc
        - cc
        createdAt: 2000-01-23T04:56:07.000+00:00
        bcc:
        - bcc
        - bcc
        inboxIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        attachmentCount: 0
        from: from
        bodyExcerpt: bodyExcerpt
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        attachmentCount:
          format: int32
          type: integer
        bcc:
          items:
            type: string
          type: array
        bodyExcerpt:
          type: string
        cc:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        from:
          type: string
        id:
          format: uuid
          type: string
        inboxIds:
          items:
            format: uuid
            type: string
          type: array
        subject:
          type: string
        to:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
      required:
      - attachmentCount
      - bcc
      - cc
      - createdAt
      - inboxIds
      - to
      - updatedAt
      - userId
      title: MissedEmail
      type: object
    MissedEmailProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        subject: subject
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          format: date-time
          type: string
        from:
          type: string
        id:
          format: uuid
          type: string
        subject:
          type: string
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - userId
      title: MissedEmailProjection
      type: object
    NameServerRecord:
      description: Name Server Record
      example:
        recordType: recordType
        raw: raw
        priority: priority
        value: value
      properties:
        priority:
          type: string
        raw:
          type: string
        recordType:
          type: string
        value:
          type: string
      required:
      - priority
      - raw
      - recordType
      - value
      title: NameServerRecord
      type: object
    OrganizationInboxProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        emailAddress: emailAddress
        inboxType: HTTP_INBOX
        name: name
        readOnly: true
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        favourite: true
        teamAccess: true
        tags:
        - tags
        - tags
      properties:
        createdAt:
          description: When the inbox was created. Time stamps are in ISO DateTime
            Format `yyyy-MM-dd'T'HH:mm:ss.SSSXXX` e.g. `2000-10-31T01:30:00.000-05:00`.
          format: date-time
          type: string
        emailAddress:
          description: The inbox's email address. Inbox projections and previews may
            not include the email address. To view the email address fetch the inbox
            entity directly. Send an email to this address and the inbox will receive
            and store it for you. Note the email address in MailSlurp match characters
            exactly and are case sensitive so `+123` additions are considered different
            addresses. To retrieve the email use the Inbox and Email Controller endpoints
            with the inbox ID.
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        id:
          description: ID of the inbox. The ID is a UUID-V4 format string. Use the
            inboxId for calls to Inbox and Email Controller endpoints. See the emailAddress
            property for the email address or the inbox. To get emails in an inbox
            use the WaitFor and Inbox Controller methods `waitForLatestEmail` and
            `getEmails` methods respectively. Inboxes can be used with aliases to
            forward emails automatically.
          format: uuid
          type: string
        inboxType:
          description: Type of inbox - either HTTP (default) or SMTP. HTTP inboxes
            are great for testing. SMTP inboxes are processed by a custom SMTP mail
            server and are better for public facing inboxes that receive emails from
            Gmail and other large providers. If using a custom domain the domain type
            must match the inbox type. Use an SMTP domain for SMTP inboxes that includes
            an MX record pointing to `10 mx.mailslurp.com` for inbound messages.
          enum:
          - HTTP_INBOX
          - SMTP_INBOX
          type: string
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          type: string
        readOnly:
          description: Is the inbox readOnly for the caller. Read only means can not
            be deleted or modified. This flag is present when using team accounts
            and shared inboxes.
          type: boolean
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            type: string
          type: array
        teamAccess:
          description: Does inbox permit team access for organization team members.
            If so team users can use inbox and emails associated with it. See the
            team access guide at https://www.mailslurp.com/guides/team-email-account-sharing/
          type: boolean
      title: OrganizationInboxProjection
      type: object
    PageAlias:
      description: Paginated email alias results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 2
        totalPages: 9
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          useThreads: true
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          useThreads: true
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 7
      properties:
        content:
          items:
            $ref: '#/components/schemas/AliasProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageAlias
      type: object
    PageAttachmentEntity:
      description: Paginated attachment entity results. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 6
        last: true
        numberOfElements: 1
        size: 5
        totalPages: 2
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          contentLength: 0
          attachmentId: attachmentId
          contentType: image/png
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          contentLength: 0
          attachmentId: attachmentId
          contentType: image/png
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/AttachmentProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageAttachmentEntity
      type: object
    PageBouncedEmail:
      description: Paginated bounced email. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sender: sender
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          sender: sender
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/BounceProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageBouncedEmail
      type: object
    PageBouncedRecipients:
      description: Paginated bounced recipients. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          recipient: recipient
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          recipient: recipient
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/BounceRecipient'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageBouncedRecipients
      type: object
    PageContactProjection:
      description: Paginated contact results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          firstName: firstName
          lastName: lastName
          optOut: true
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          firstName: firstName
          lastName: lastName
          optOut: true
          emailAddresses:
          - emailAddresses
          - emailAddresses
          groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          company: company
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/ContactProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageContactProjection
      type: object
    PageEmailPreview:
      description: Paginated email preview results. EmailProjections and EmailPreviews
        are essentially the same but have legacy naming issues. Page index starts
        at zero. Projection results may omit larger entity fields. For fetching a
        full entity use the projection ID with individual method calls. For emails
        there are several methods for fetching message bodies and attachments.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          read: true
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          read: true
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/EmailPreview'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageEmailPreview
      type: object
    PageEmailProjection:
      description: Paginated email projection results. EmailProjections and EmailPreviews
        are essentially the same but have legacy naming issues. Page index starts
        at zero. Projection results may omit larger entity fields. For fetching a
        full email entity use the projection ID with individual method calls. For
        emails there are several methods for fetching message bodies and attachments.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          read: true
          subject: subject
          teamAccess: true
          bodyMD5Hash: bodyMD5Hash
          createdAt: 2000-01-23T04:56:07.000+00:00
          from: from
          bodyExcerpt: bodyExcerpt
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - cc:
          - cc
          - cc
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          read: true
          subject: subject
          teamAccess: true
          bodyMD5Hash: bodyMD5Hash
          createdAt: 2000-01-23T04:56:07.000+00:00
          from: from
          bodyExcerpt: bodyExcerpt
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/EmailProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageEmailProjection
      type: object
    PageExpiredInboxRecordProjection:
      description: Paginated expired inbox results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/ExpiredInboxRecordProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageExpiredInboxRecordProjection
      type: object
    PageGroupProjection:
      description: Paginated missed email results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          description: description
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/GroupProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageGroupProjection
      type: object
    PageInboxForwarderDto:
      description: Paginated inbox forwarder results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          field: RECIPIENTS
          forwardToRecipients:
          - forwardToRecipients
          - forwardToRecipients
          match: match
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          field: RECIPIENTS
          forwardToRecipients:
          - forwardToRecipients
          - forwardToRecipients
          match: match
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxForwarderDto'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageInboxForwarderDto
      type: object
    PageInboxProjection:
      description: Paginated inbox results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          inboxType: HTTP_INBOX
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          favourite: true
          teamAccess: true
          tags:
          - tags
          - tags
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          inboxType: HTTP_INBOX
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          favourite: true
          teamAccess: true
          tags:
          - tags
          - tags
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageInboxProjection
      type: object
    PageInboxRulesetDto:
      description: Paginated inbox ruleset results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          handler: EXCEPTION
          scope: RECEIVING_EMAILS
          action: BLOCK
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          target: target
        - createdAt: 2000-01-23T04:56:07.000+00:00
          handler: EXCEPTION
          scope: RECEIVING_EMAILS
          action: BLOCK
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          target: target
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/InboxRulesetDto'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageInboxRulesetDto
      type: object
    PageMissedEmailProjection:
      description: Paginated MissedEmail results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - createdAt: 2000-01-23T04:56:07.000+00:00
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/MissedEmailProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageMissedEmailProjection
      type: object
    PageOrganizationInboxProjection:
      description: Paginated organization inbox results. Page index starts at zero.
        Projection results may omit larger entity fields. For fetching a full entity
        use the projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          inboxType: HTTP_INBOX
          name: name
          readOnly: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          favourite: true
          teamAccess: true
          tags:
          - tags
          - tags
        - createdAt: 2000-01-23T04:56:07.000+00:00
          emailAddress: emailAddress
          inboxType: HTTP_INBOX
          name: name
          readOnly: true
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          favourite: true
          teamAccess: true
          tags:
          - tags
          - tags
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/OrganizationInboxProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageOrganizationInboxProjection
      type: object
    PageSentEmailProjection:
      description: Paginated sent email results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full sent email entity
        use the projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyMD5Hash: bodyMD5Hash
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          attachments:
          - attachments
          - attachments
          bcc:
          - bcc
          - bcc
          subject: subject
          from: from
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          bodyMD5Hash: bodyMD5Hash
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          description: Collection of items
          items:
            $ref: '#/components/schemas/SentEmailProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          description: Page number starting at 0
          format: int32
          type: integer
        numberOfElements:
          description: Number of items returned
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          description: Size of page requested
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          description: Total number of items available for querying
          format: int64
          type: integer
        totalPages:
          description: Total number of pages available
          format: int32
          type: integer
      title: PageSentEmailProjection
      type: object
    PageTemplateProjection:
      description: Paginated email template results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          variables:
          - variables
          - variables
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          variables:
          - variables
          - variables
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/TemplateProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageTemplateProjection
      type: object
    PageThreadProjection:
      description: Paginated email projection results. EmailProjections and EmailPreviews
        are essentially the same but have legacy naming issues. Page index starts
        at zero. Projection results may omit larger entity fields. For fetching a
        full email entity use the projection ID with individual method calls. For
        emails there are several methods for fetching message bodies and attachments.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          bcc:
          - bcc
          - bcc
          aliasId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subject: subject
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - cc:
          - cc
          - cc
          createdAt: 2000-01-23T04:56:07.000+00:00
          bcc:
          - bcc
          - bcc
          aliasId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          subject: subject
          name: name
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          to:
          - to
          - to
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/ThreadProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageThreadProjection
      type: object
    PageTrackingPixelProjection:
      description: Paginated TrackingPixel results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          seenAt: 2000-01-23T04:56:07.000+00:00
          sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          recipient: recipient
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          seen: true
        - createdAt: 2000-01-23T04:56:07.000+00:00
          seenAt: 2000-01-23T04:56:07.000+00:00
          sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          name: name
          recipient: recipient
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          seen: true
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/TrackingPixelProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageTrackingPixelProjection
      type: object
    PageWebhookProjection:
      example:
        number: 0
        last: true
        numberOfElements: 6
        size: 1
        totalPages: 5
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          eventName: EMAIL_RECEIVED
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - createdAt: 2000-01-23T04:56:07.000+00:00
          name: name
          eventName: EMAIL_RECEIVED
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          url: url
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 5
      properties:
        content:
          items:
            $ref: '#/components/schemas/WebhookProjection'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageWebhookProjection
      type: object
    PageWebhookResult:
      description: Paginated webhook results. Page index starts at zero. Projection
        results may omit larger entity fields. For fetching a full entity use the
        projection ID with individual method calls.
      example:
        number: 1
        last: true
        numberOfElements: 5
        size: 5
        totalPages: 7
        pageable:
          paged: true
          pageNumber: 5
          offset: 1
          pageSize: 5
          unpaged: true
          sort:
            unsorted: true
            sorted: true
            empty: true
        sort:
          unsorted: true
          sorted: true
          empty: true
        content:
        - webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          messageId: messageId
          responseTimeMillis: 6
          webhookEvent: EMAIL_RECEIVED
          httpMethod: GET
          responseBodyExtract: responseBodyExtract
          responseStatus: 0
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          webhookUrl: webhookUrl
          createdAt: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          resultType: BAD_RESPONSE
          updatedAt: 2000-01-23T04:56:07.000+00:00
        - webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          messageId: messageId
          responseTimeMillis: 6
          webhookEvent: EMAIL_RECEIVED
          httpMethod: GET
          responseBodyExtract: responseBodyExtract
          responseStatus: 0
          userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          webhookUrl: webhookUrl
          createdAt: 2000-01-23T04:56:07.000+00:00
          id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
          resultType: BAD_RESPONSE
          updatedAt: 2000-01-23T04:56:07.000+00:00
        first: true
        empty: true
        totalElements: 2
      properties:
        content:
          items:
            $ref: '#/components/schemas/WebhookResultEntity'
          type: array
        empty:
          type: boolean
        first:
          type: boolean
        last:
          type: boolean
        number:
          format: int32
          type: integer
        numberOfElements:
          format: int32
          type: integer
        pageable:
          $ref: '#/components/schemas/Pageable'
        size:
          format: int32
          type: integer
        sort:
          $ref: '#/components/schemas/Sort'
        totalElements:
          format: int64
          type: integer
        totalPages:
          format: int32
          type: integer
      title: PageWebhookResult
      type: object
    Pageable:
      example:
        paged: true
        pageNumber: 5
        offset: 1
        pageSize: 5
        unpaged: true
        sort:
          unsorted: true
          sorted: true
          empty: true
      properties:
        offset:
          format: int64
          type: integer
        pageNumber:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
        paged:
          type: boolean
        sort:
          $ref: '#/components/schemas/Sort'
        unpaged:
          type: boolean
      title: Pageable
      type: object
    RawEmailJson:
      description: Content in raw format
      example:
        content: content
      properties:
        content:
          type: string
      required:
      - content
      title: RawEmailJson
      type: object
    ReplyToAliasEmailOptions:
      description: Options for replying to an alias email using the alias inbox
      example:
        sendStrategy: SINGLE_MESSAGE
        template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        charset: charset
        useInboxName: true
        attachments:
        - attachments
        - attachments
        isHTML: true
        body: body
        templateVariables: '{}'
      properties:
        attachments:
          description: List of uploaded attachments to send with the reply. Optional.
          items:
            type: string
          type: array
        body:
          description: Body of the reply email you want to send
          type: string
        charset:
          description: The charset that your message should be sent with. Optional.
            Default is UTF-8
          type: string
        isHTML:
          description: Is the reply HTML
          type: boolean
        sendStrategy:
          description: When to send the email. Typically immediately
          enum:
          - SINGLE_MESSAGE
          type: string
        template:
          description: Template ID to use instead of body. Will use template variable
            map to fill defined variable slots.
          format: uuid
          type: string
        templateVariables:
          description: Template variables if using a template
          properties: {}
          type: object
        useInboxName:
          description: Optionally use inbox name as display name for sender email
            address
          type: boolean
      title: ReplyToAliasEmailOptions
      type: object
    ReplyToEmailOptions:
      description: Options for replying to email with API
      example:
        sendStrategy: SINGLE_MESSAGE
        template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        charset: charset
        useInboxName: true
        attachments:
        - attachments
        - attachments
        isHTML: true
        replyTo: replyTo
        from: from
        body: body
        templateVariables: '{}'
      properties:
        attachments:
          description: List of uploaded attachments to send with the reply. Optional.
          items:
            type: string
          type: array
        body:
          description: Body of the reply email you want to send
          type: string
        charset:
          description: The charset that your message should be sent with. Optional.
            Default is UTF-8
          type: string
        from:
          description: The from header that should be used. Optional
          type: string
        isHTML:
          description: Is the reply HTML
          type: boolean
        replyTo:
          description: The replyTo header that should be used. Optional
          type: string
        sendStrategy:
          description: When to send the email. Typically immediately
          enum:
          - SINGLE_MESSAGE
          type: string
        template:
          description: Template ID to use instead of body. Will use template variable
            map to fill defined variable slots.
          format: uuid
          type: string
        templateVariables:
          description: Template variables if using a template
          properties: {}
          type: object
        useInboxName:
          description: Optionally use inbox name as display name for sender email
            address
          type: boolean
      title: ReplyToEmailOptions
      type: object
    SendEmailOptions:
      description: 'Options for sending an email message from an inbox. You must provide
        one of: `to`, `toGroup`, or `toContacts` to send an email. All other parameters
        are optional. '
      example:
        cc:
        - cc
        - cc
        sendStrategy: SINGLE_MESSAGE
        template: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        charset: charset
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        subject: subject
        addTrackingPixel: true
        body: body
        templateVariables: '{}'
        useInboxName: true
        toContacts:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        isHTML: true
        replyTo: replyTo
        from: from
        html: true
        to:
        - to
        - to
        toGroup: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        addTrackingPixel:
          description: Add tracking pixel to email
          type: boolean
        attachments:
          description: 'Optional list of attachment IDs to send with this email. You
            must first upload each attachment separately via method call or dashboard
            in order to obtain attachment IDs. This way you can reuse attachments
            with different emails once uploaded. There are several ways to upload
            that support `multi-part form`, `base64 file encoding`, and octet stream
            binary uploads. See the `UploadController` for available methods. '
          items:
            type: string
          type: array
        bcc:
          description: Optional list of bcc destination email addresses
          items:
            type: string
          type: array
        body:
          description: Optional contents of email. If body contains HTML then set
            `isHTML` to true to ensure that email clients render it correctly. You
            can use moustache template syntax in the email body in conjunction with
            `toGroup` contact variables or `templateVariables` data. If you need more
            templating control consider creating a template and using the `template`
            property instead of the body.
          type: string
        cc:
          description: Optional list of cc destination email addresses
          items:
            type: string
          type: array
        charset:
          description: Optional charset
          type: string
        from:
          description: 'Optional from address. Email address is RFC 5322 format and
            may include a display name and email in angle brackets (`my@address.com`
            or `My inbox <my@address.com>`). If no sender is set the source inbox
            address will be used for this field. If you set `useInboxName` to `true`
            the from field will include the inbox name as a display name: `inbox_name
            <inbox@address.com>`. For this to work use the name field when creating
            an inbox. Beware of potential spam penalties when setting the from field
            to an address not used by the inbox. Your emails may get blocked by services
            if you impersonate another address. To use a custom email addresses use
            a custom domain. You can create domains with the DomainController. The
            domain must be verified in the dashboard before it can be used.'
          type: string
        html:
          description: 'Optional HTML flag to indicate that contents is HTML. Set''s
            a `content-type: text/html` for email. (Deprecated: use `isHTML` instead.)'
          type: boolean
        isHTML:
          description: Optional HTML flag. If true the `content-type` of the email
            will be `text/html`. Set to true when sending HTML to ensure proper rending
            on email clients
          type: boolean
        replyTo:
          description: Optional replyTo header
          type: string
        sendStrategy:
          description: Optional strategy to use when sending the email
          enum:
          - SINGLE_MESSAGE
          type: string
        subject:
          description: Optional email subject line
          type: string
        template:
          description: Optional template ID to use for body. Will override body if
            provided. When using a template make sure you pass the corresponding map
            of `templateVariables`. You can find which variables are needed by fetching
            the template itself or viewing it in the dashboard.
          format: uuid
          type: string
        templateVariables:
          description: Optional map of template variables. Will replace moustache
            syntax variables in subject and body or template with the associated values
            if found.
          properties: {}
          type: object
        to:
          description: List of destination email addresses. Each email address must
            be RFC 5322 format. Even single recipients must be in array form. Maximum
            recipients per email depends on your plan. If you need to send many emails
            try using contacts or contact groups or use a non standard sendStrategy
            to ensure that spam filters are not triggered (many recipients in one
            email can affect your spam rating). Be cautious when sending emails that
            your recipients exist. High bounce rates (meaning a high percentage of
            emails cannot be delivered because an address does not exist) can result
            in account freezing.
          items:
            type: string
          type: array
        toContacts:
          description: Optional list of contact IDs to send email to. Manage your
            contacts via the API or dashboard. When contacts are used the email is
            sent to each contact separately so they will not see other recipients.
          items:
            format: uuid
            type: string
          type: array
        toGroup:
          description: Optional contact group ID to send email to. You can create
            contacts and contact groups in the API or dashboard and use them for email
            campaigns. When contact groups are used the email is sent to each contact
            separately so they will not see other recipients
          format: uuid
          type: string
        useInboxName:
          description: Use name of inbox as sender email address name. Will construct
            RFC 5322 email address with `Inbox name <inbox@address.com>` if the inbox
            has a name.
          type: boolean
      title: SendEmailOptions
      type: object
    SentEmailDto:
      description: Sent email details
      example:
        cc:
        - cc
        - cc
        charset: charset
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        subject: subject
        pixelIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        sentAt: 2000-01-23T04:56:07.000+00:00
        body: body
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
        isHTML: true
        replyTo: replyTo
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        attachments:
          description: Array of IDs of attachments that were sent with this email
          items:
            type: string
          type: array
        bcc:
          items:
            type: string
          type: array
        body:
          type: string
        bodyMD5Hash:
          description: MD5 Hash
          type: string
        cc:
          items:
            type: string
          type: array
        charset:
          type: string
        from:
          type: string
        id:
          description: ID of sent email
          format: uuid
          type: string
        inboxId:
          description: Inbox ID email was sent from
          format: uuid
          type: string
        isHTML:
          type: boolean
        pixelIds:
          items:
            format: uuid
            type: string
          type: array
        replyTo:
          type: string
        sentAt:
          format: date-time
          type: string
        subject:
          type: string
        to:
          description: Recipients email was sent to
          items:
            type: string
          type: array
        userId:
          description: User ID
          format: uuid
          type: string
      required:
      - sentAt
      title: SentEmailDto
      type: object
    SentEmailProjection:
      example:
        cc:
        - cc
        - cc
        createdAt: 2000-01-23T04:56:07.000+00:00
        attachments:
        - attachments
        - attachments
        bcc:
        - bcc
        - bcc
        subject: subject
        from: from
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        bodyMD5Hash: bodyMD5Hash
      properties:
        attachments:
          items:
            type: string
          type: array
        bcc:
          items:
            type: string
          type: array
        bodyMD5Hash:
          type: string
        cc:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        from:
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        subject:
          type: string
        to:
          items:
            type: string
          type: array
        userId:
          format: uuid
          type: string
      required:
      - attachments
      - bcc
      - cc
      - createdAt
      - id
      - inboxId
      - to
      - userId
      title: SentEmailProjection
      type: object
    SetInboxFavouritedOptions:
      description: Options for setting inbox favourite state
      example:
        state: true
      properties:
        state:
          description: Is the inbox a favorite. Marking an inbox as a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
      title: SetInboxFavouritedOptions
      type: object
    SimpleSendEmailOptions:
      example:
        senderId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        to: to
        body: body
      properties:
        body:
          description: Body of the email message. Supports HTML
          type: string
        senderId:
          description: ID of inbox to send from. If null an inbox will be created
            for sending
          format: uuid
          type: string
        subject:
          description: Subject line of the email
          type: string
        to:
          description: Email address to send to
          type: string
      title: SimpleSendEmailOptions
      type: object
    Sort:
      example:
        unsorted: true
        sorted: true
        empty: true
      properties:
        empty:
          type: boolean
        sorted:
          type: boolean
        unsorted:
          type: boolean
      title: Sort
      type: object
    TemplateDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        variables:
        - variableType: STRING
          name: name
        - variableType: STRING
          name: name
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        content: content
      properties:
        content:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
        variables:
          items:
            $ref: '#/components/schemas/TemplateVariable'
          type: array
      required:
      - content
      - createdAt
      - id
      - name
      - variables
      title: TemplateDto
      type: object
    TemplateProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        variables:
        - variables
        - variables
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        variables:
          items:
            type: string
          type: array
      required:
      - createdAt
      - id
      - name
      - updatedAt
      - variables
      title: TemplateProjection
      type: object
    TemplateVariable:
      example:
        variableType: STRING
        name: name
      properties:
        name:
          type: string
        variableType:
          enum:
          - STRING
          type: string
      required:
      - name
      - variableType
      title: TemplateVariable
      type: object
    TestNewInboxForwarderOptions:
      example:
        createInboxForwarderOptions:
          field: RECIPIENTS
          forwardToRecipients:
          - forwardToRecipients
          - forwardToRecipients
          match: match
        inboxForwarderTestOptions:
          testValue: testValue
      properties:
        inboxForwarderTestOptions:
          $ref: '#/components/schemas/InboxForwarderTestOptions'
        createInboxForwarderOptions:
          $ref: '#/components/schemas/CreateInboxForwarderOptions'
      required:
      - createInboxForwarderOptions
      - inboxForwarderTestOptions
      title: TestNewInboxForwarderOptions
      type: object
    TestNewInboxRulesetOptions:
      example:
        inboxRulesetTestOptions:
          testTarget: testTarget
        createInboxRulesetOptions:
          scope: RECEIVING_EMAILS
          action: BLOCK
          target: target
      properties:
        inboxRulesetTestOptions:
          $ref: '#/components/schemas/InboxRulesetTestOptions'
        createInboxRulesetOptions:
          $ref: '#/components/schemas/CreateInboxRulesetOptions'
      required:
      - createInboxRulesetOptions
      - inboxRulesetTestOptions
      title: TestNewInboxRulesetOptions
      type: object
    ThreadProjection:
      description: A thread is a message thread created for a message received by
        an alias
      example:
        cc:
        - cc
        - cc
        createdAt: 2000-01-23T04:56:07.000+00:00
        bcc:
        - bcc
        - bcc
        aliasId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        name: name
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        aliasId:
          format: uuid
          type: string
        bcc:
          items:
            type: string
          type: array
        cc:
          items:
            type: string
          type: array
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        name:
          type: string
        subject:
          type: string
        to:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
      required:
      - aliasId
      - createdAt
      - id
      - inboxId
      - to
      - updatedAt
      - userId
      title: ThreadProjection
      type: object
    TrackingPixelDto:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        seenAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient: recipient
        html: html
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        seen: true
        url: url
      properties:
        createdAt:
          format: date-time
          type: string
        html:
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        recipient:
          type: string
        seen:
          type: boolean
        seenAt:
          format: date-time
          type: string
        sentEmailId:
          format: uuid
          type: string
        url:
          type: string
      required:
      - createdAt
      - html
      - id
      - seen
      - url
      title: TrackingPixelDto
      type: object
    TrackingPixelProjection:
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        seenAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        recipient: recipient
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        seen: true
      properties:
        createdAt:
          format: date-time
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        name:
          type: string
        recipient:
          type: string
        seen:
          type: boolean
        seenAt:
          format: date-time
          type: string
        sentEmailId:
          format: uuid
          type: string
        userId:
          format: uuid
          type: string
      required:
      - createdAt
      - id
      - seen
      - userId
      title: TrackingPixelProjection
      type: object
    UnreadCount:
      example:
        count: 0
      properties:
        count:
          format: int64
          type: integer
      required:
      - count
      title: UnreadCount
      type: object
    UpdateAliasOptions:
      description: Update an email alias
      example:
        name: name
      properties:
        name:
          description: Optional name for alias
          type: string
      title: UpdateAliasOptions
      type: object
    UpdateDomainOptions:
      description: Options for creating a domain to use with MailSlurp. You must have
        ownership access to this domain in order to verify it. Domains will not functionally
        currently until the domain has been verified. See https://www.mailslurp.com/guides/custom-domains
        for help.
      example:
        catchAllInboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        catchAllInboxId:
          format: uuid
          type: string
      title: UpdateDomainOptions
      type: object
    UpdateGroupContacts:
      example:
        contactIds:
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        - 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        contactIds:
          items:
            format: uuid
            type: string
          type: array
      required:
      - contactIds
      title: UpdateGroupContacts
      type: object
    UpdateInboxOptions:
      description: Options for updating inbox properties
      example:
        name: name
        description: description
        favourite: true
        expiresAt: 2000-01-23T04:56:07.000+00:00
        tags:
        - tags
        - tags
      properties:
        description:
          description: Description of an inbox for labelling and searching purposes
          type: string
        expiresAt:
          description: Inbox expiration time. When, if ever, the inbox should expire
            and be deleted. If null then this inbox is permanent and the emails in
            it won't be deleted. This is the default behavior unless expiration date
            is set. If an expiration date is set and the time is reached MailSlurp
            will expire the inbox and move it to an expired inbox entity. You can
            still access the emails belonging to it but it can no longer send or receive
            email.
          format: date-time
          type: string
        favourite:
          description: Is the inbox a favorite inbox. Make an inbox a favorite is
            typically done in the dashboard for quick access or filtering
          type: boolean
        name:
          description: Name of the inbox and used as the sender name when sending
            emails .Displayed in the dashboard for easier search
          type: string
        tags:
          description: Tags that inbox has been tagged with. Tags can be added to
            inboxes to group different inboxes within an account. You can also search
            for inboxes by tag in the dashboard UI.
          items:
            type: string
          type: array
      title: UpdateInboxOptions
      type: object
    UploadAttachmentOptions:
      description: Options for uploading files for attachments. When sending emails
        with the API that require attachments first upload each attachment. Then use
        the returned attachment ID in your `SendEmailOptions` when sending an email.
        This way you can use attachments multiple times once they have been uploaded.
      example:
        filename: filename
        base64Contents: base64Contents
        contentType: contentType
      properties:
        base64Contents:
          description: Base64 encoded string of file contents. Typically this means
            reading the bytes or string content of a file and then converting that
            to a base64 encoded string.
          type: string
        contentType:
          description: Optional contentType for file. For instance `application/pdf`
          type: string
        filename:
          description: Optional filename to save upload with. Will be the name that
            is shown in email clients
          type: string
      required:
      - base64Contents
      title: UploadAttachmentOptions
      type: object
    ValidationDto:
      description: Response object for email validation operation
      example:
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        html:
          isValid: true
          warnings:
          - lineNumber: 0
            message: message
          - lineNumber: 0
            message: message
          errors:
          - lineNumber: 0
            message: message
          - lineNumber: 0
            message: message
      properties:
        emailId:
          description: ID of the email validated
          format: uuid
          type: string
        html:
          $ref: '#/components/schemas/HTMLValidationResult'
      title: ValidationDto
      type: object
    ValidationMessage:
      example:
        lineNumber: 0
        message: message
      properties:
        lineNumber:
          format: int32
          type: integer
        message:
          type: string
      required:
      - lineNumber
      title: ValidationMessage
      type: object
    VerifyEmailAddressOptions:
      description: Options for verifying that an email address exists at a remote
        mail server.
      example:
        emailAddress: emailAddress
        senderEmailAddress: senderEmailAddress
        port: 0
        mailServerDomain: mailServerDomain
      properties:
        mailServerDomain:
          type: string
        emailAddress:
          type: string
        senderEmailAddress:
          type: string
        port:
          format: int32
          type: integer
      required:
      - emailAddress
      title: VerifyEmailAddressOptions
      type: object
    WaitForConditions:
      description: Conditions that a `waitForXEmails` endpoint operates on. The methods
        wait until given conditions are met or a timeout is reached. If the conditions
        are met without needing to wait the results will be returned immediately.
        Can include `unreadOnly` to ignore already read emails that were returned
        in an API call or viewing in the dashboard. Can also include matches for emails
        containing `from`, `subject`, `hasAttachments` etc.
      example:
        sortDirection: ASC
        count: 0
        countType: EXACTLY
        unreadOnly: true
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        matches:
        - field: SUBJECT
          should: CONTAIN
          value: value
        - field: SUBJECT
          should: CONTAIN
          value: value
        timeout: 6
      properties:
        count:
          description: Number of results that should match conditions. Either exactly
            or at least this amount based on the `countType`. If count condition is
            not met and the timeout has not been reached the `waitFor` method will
            retry the operation.
          format: int32
          type: integer
        countType:
          description: How should the found count be compared to the expected count.
          enum:
          - EXACTLY
          - ATLEAST
          type: string
        inboxId:
          description: ID of inbox to search within and apply conditions to. Essentially
            filtering the emails found to give a count.
          format: uuid
          type: string
        matches:
          description: Conditions that should be matched for an email to qualify for
            results. Each condition will be applied in order to each email within
            an inbox to filter a result list of matching emails you are waiting for.
          items:
            $ref: '#/components/schemas/MatchOption'
          type: array
        sortDirection:
          description: Direction to sort matching emails by created time
          enum:
          - ASC
          - DESC
          type: string
        timeout:
          description: Max time in milliseconds to retry the `waitFor` operation until
            conditions are met.
          format: int64
          type: integer
        unreadOnly:
          description: 'Apply conditions only to **unread** emails. All emails begin
            with `read=false`. An email is marked `read=true` when an `EmailDto` representation
            of it has been returned to the user at least once. For example you have
            called `getEmail` or `waitForLatestEmail` etc., or you have viewed the
            email in the dashboard. '
          type: boolean
      title: WaitForConditions
      type: object
    WebhookDto:
      description: Representation of a webhook for an inbox. The URL specified will
        be using by MailSlurp whenever an email is received by the attached inbox.
        A webhook entity should have a URL that points to your server. Your server
        should accept HTTP/S POST requests and return a success 200. MailSlurp will
        retry your webhooks if they fail. See https://api.mailslurp.com/schemas/webhook-payload
        for the payload schema.
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        method: GET
        basicAuth: true
        payloadJsonSchema: payloadJsonSchema
        name: name
        eventName: EMAIL_RECEIVED
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        basicAuth:
          description: Does webhook expect basic authentication? If true it means
            you created this webhook with a username and password. MailSlurp will
            use these in the URL to authenticate itself.
          type: boolean
        createdAt:
          description: When the webhook was created
          format: date-time
          type: string
        eventName:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        id:
          description: ID of the Webhook
          format: uuid
          type: string
        inboxId:
          description: The inbox that the Webhook will be triggered by
          format: uuid
          type: string
        method:
          description: HTTP method that your server endpoint must listen for
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
          type: string
        name:
          description: Name of the webhook
          type: string
        payloadJsonSchema:
          description: JSON Schema for the payload that will be sent to your URL via
            the HTTP method described.
          type: string
        updatedAt:
          format: date-time
          type: string
        url:
          description: URL of your server that the webhook will be sent to. The schema
            of the JSON that is sent is described by the payloadJsonSchema.
          type: string
        userId:
          description: User ID of the Webhook
          format: uuid
          type: string
      required:
      - updatedAt
      title: WebhookDto
      type: object
    WebhookEmailOpenedPayload:
      description: EMAIL_OPENED webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email containing a tracking pixel is opened and the
        pixel image is loaded by a reader.
      example:
        pixelId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        sentEmailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        recipient: recipient
        eventName: EMAIL_RECEIVED
        messageId: messageId
        webhookName: webhookName
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        createdAt:
          description: Date time of event creation
          format: date-time
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        inboxId:
          description: Id of the inbox that received an email
          format: uuid
          type: string
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        pixelId:
          description: ID of the tracking pixel
          format: uuid
          type: string
        recipient:
          description: Email address for the recipient of the tracking pixel
          type: string
        sentEmailId:
          description: ID of sent email
          format: uuid
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        webhookName:
          description: Name of the webhook being triggered
          type: string
      title: WebhookEmailOpenedPayload
      type: object
    WebhookNewAttachmentPayload:
      description: NEW_ATTACHMENT webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email is received by the inbox that your webhook is
        attached to that contains an attachment. You can use the attachmentId to download
        the attachment.
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        name: name
        eventName: EMAIL_RECEIVED
        messageId: messageId
        webhookName: webhookName
        contentLength: 0
        attachmentId: attachmentId
        contentType: contentType
      properties:
        attachmentId:
          description: ID of attachment. Use the `AttachmentController` to
          type: string
        contentLength:
          description: Size of attachment in bytes
          format: int64
          type: integer
        contentType:
          description: Content type of attachment such as 'image/png' or 'application/pdf
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        name:
          description: Filename of the attachment if present
          type: string
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        webhookName:
          description: Name of the webhook being triggered
          type: string
      title: WebhookNewAttachmentPayload
      type: object
    WebhookNewContactPayload:
      description: NEW_CONTACT webhook payload. Sent to your webhook url endpoint
        via HTTP POST when an email is received by the inbox that your webhook is
        attached to that contains a recipient that has not been saved as a contact.
      example:
        lastName: lastName
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        contactId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        groupId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        messageId: messageId
        primaryEmailAddress: primaryEmailAddress
        tags:
        - tags
        - tags
        createdAt: 2000-01-23T04:56:07.000+00:00
        firstName: firstName
        metaData: '{}'
        optOut: true
        emailAddresses:
        - emailAddresses
        - emailAddresses
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        company: company
      properties:
        company:
          type: string
        contactId:
          format: uuid
          type: string
        createdAt:
          format: date-time
          type: string
        emailAddresses:
          items:
            type: string
          type: array
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        firstName:
          type: string
        groupId:
          format: uuid
          type: string
        lastName:
          type: string
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        metaData:
          title: JsonNode
          type: object
        optOut:
          type: boolean
        primaryEmailAddress:
          type: string
        tags:
          items:
            type: string
          type: array
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        webhookName:
          description: Name of the webhook being triggered
          type: string
      required:
      - contactId
      - createdAt
      - emailAddresses
      - tags
      title: WebhookNewContactPayload
      type: object
    WebhookNewEmailPayload:
      description: NEW_EMAIL webhook payload. Sent to your webhook url endpoint via
        HTTP POST when an email is received by the inbox that your webhook is attached
        to. Use the email ID to fetch the full email body or attachments.
      example:
        cc:
        - cc
        - cc
        bcc:
        - bcc
        - bcc
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        subject: subject
        messageId: messageId
        emailId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        createdAt: 2000-01-23T04:56:07.000+00:00
        attachmentMetaDatas:
        - name: name
          contentLength: 0
          id: id
          contentType: contentType
        - name: name
          contentLength: 0
          id: id
          contentType: contentType
        eventName: EMAIL_RECEIVED
        webhookName: webhookName
        from: from
        to:
        - to
        - to
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
      properties:
        attachmentMetaDatas:
          description: List of attachment meta data objects if attachments present
          items:
            $ref: '#/components/schemas/AttachmentMetaData'
          type: array
        bcc:
          description: List of `BCC` recipients email was addressed to
          items:
            type: string
          type: array
        cc:
          description: List of `CC` recipients email was addressed to
          items:
            type: string
          type: array
        createdAt:
          description: Date time of event creation
          format: date-time
          type: string
        emailId:
          description: ID of the email that was received. Use this ID for fetching
            the email with the `EmailController`.
          format: uuid
          type: string
        eventName:
          description: Name of the event type webhook is being triggered for.
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        from:
          description: Who the email was sent from
          type: string
        inboxId:
          description: Id of the inbox that received an email
          format: uuid
          type: string
        messageId:
          description: Idempotent message ID. Store this ID locally or in a database
            to prevent message duplication.
          type: string
        subject:
          description: The subject line of the email message
          type: string
        to:
          description: List of `To` recipients that email was addressed to
          items:
            type: string
          type: array
        webhookId:
          description: ID of webhook entity being triggered
          format: uuid
          type: string
        webhookName:
          description: Name of the webhook being triggered
          type: string
      title: WebhookNewEmailPayload
      type: object
    WebhookProjection:
      description: Representation of a webhook
      example:
        createdAt: 2000-01-23T04:56:07.000+00:00
        name: name
        eventName: EMAIL_RECEIVED
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        url: url
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        eventName:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        name:
          type: string
        updatedAt:
          format: date-time
          type: string
        url:
          type: string
      required:
      - createdAt
      - id
      - inboxId
      - updatedAt
      - url
      title: WebhookProjection
      type: object
    WebhookResultEntity:
      example:
        webhookId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        messageId: messageId
        responseTimeMillis: 6
        webhookEvent: EMAIL_RECEIVED
        httpMethod: GET
        responseBodyExtract: responseBodyExtract
        responseStatus: 0
        userId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        webhookUrl: webhookUrl
        createdAt: 2000-01-23T04:56:07.000+00:00
        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        inboxId: 046b6c7f-0b8a-43b9-b35d-6489e6daee91
        resultType: BAD_RESPONSE
        updatedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        createdAt:
          format: date-time
          type: string
        httpMethod:
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
          type: string
        id:
          format: uuid
          type: string
        inboxId:
          format: uuid
          type: string
        messageId:
          type: string
        responseBodyExtract:
          type: string
        responseStatus:
          format: int32
          type: integer
        responseTimeMillis:
          format: int64
          type: integer
        resultType:
          enum:
          - BAD_RESPONSE
          - EXCEPTION
          - SUCCESS
          type: string
        updatedAt:
          format: date-time
          type: string
        userId:
          format: uuid
          type: string
        webhookEvent:
          enum:
          - EMAIL_RECEIVED
          - NEW_EMAIL
          - NEW_CONTACT
          - NEW_ATTACHMENT
          - EMAIL_OPENED
          type: string
        webhookId:
          format: uuid
          type: string
        webhookUrl:
          type: string
      required:
      - createdAt
      - httpMethod
      - inboxId
      - messageId
      - responseTimeMillis
      - updatedAt
      - userId
      - webhookEvent
      - webhookId
      - webhookUrl
      title: WebhookResultEntity
      type: object
    WebhookTestRequest:
      example:
        headers:
          key: headers
        method: GET
        payload: payload
        url: url
      properties:
        headers:
          additionalProperties:
            type: string
          type: object
        method:
          enum:
          - GET
          - HEAD
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
          - TRACE
          type: string
        payload:
          type: string
        url:
          type: string
      required:
      - headers
      - method
      - url
      title: WebhookTestRequest
      type: object
    WebhookTestResponse:
      example:
        message: message
        statusCode: 0
      properties:
        message:
          type: string
        statusCode:
          format: int32
          type: integer
      title: WebhookTestResponse
      type: object
    WebhookTestResult:
      description: Results of testing a webhook
      example:
        request:
          headers:
            key: headers
          method: GET
          payload: payload
          url: url
        response:
          message: message
          statusCode: 0
        message: message
      properties:
        message:
          type: string
        request:
          $ref: '#/components/schemas/WebhookTestRequest'
        response:
          $ref: '#/components/schemas/WebhookTestResponse'
      required:
      - request
      - response
      title: WebhookTestResult
      type: object
  securitySchemes:
    API_KEY:
      in: header
      name: x-api-key
      type: apiKey

